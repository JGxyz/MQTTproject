
nucleo-basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d540  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f4  0800d6f0  0800d6f0  0001d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fae4  0800fae4  0001fae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800faf0  0800faf0  0001faf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800faf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          0000eedc  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000ef54  2000ef54  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00059a39  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000ad44  00000000  00000000  00079ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001bd75  00000000  00000000  00084825  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e50  00000000  00000000  000a05a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002da8  00000000  00000000  000a23f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033e38  00000000  00000000  000a5198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d5b9  00000000  00000000  000d8fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000faffd  00000000  00000000  00106589  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00201586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e4  00000000  00000000  00201604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d6d8 	.word	0x0800d6d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800d6d8 	.word	0x0800d6d8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x30>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f82f 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f00b fe82 	bl	800c2ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f00b fe0c 	bl	800c204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005ec:	2000      	movs	r0, #0
 80005ee:	bd08      	pop	{r3, pc}
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x10>)
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_IncTick+0x14>)
 80005f8:	6811      	ldr	r1, [r2, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	440b      	add	r3, r1
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000839c 	.word	0x2000839c
 8000608:	20000000 	.word	0x20000000

0800060c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <HAL_GetTick+0x8>)
 800060e:	6818      	ldr	r0, [r3, #0]
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000839c 	.word	0x2000839c

08000618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000618:	b538      	push	{r3, r4, r5, lr}
 800061a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff fff6 	bl	800060c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000620:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000622:	bf1c      	itt	ne
 8000624:	4b05      	ldrne	r3, [pc, #20]	; (800063c <HAL_Delay+0x24>)
 8000626:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000628:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf18      	it	ne
 800062c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062e:	f7ff ffed 	bl	800060c <HAL_GetTick>
 8000632:	1b40      	subs	r0, r0, r5
 8000634:	42a0      	cmp	r0, r4
 8000636:	d3fa      	bcc.n	800062e <HAL_Delay+0x16>
  {
  }
}
 8000638:	bd38      	pop	{r3, r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b570      	push	{r4, r5, r6, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0507 	rsb	r5, r4, #7
 8000672:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000674:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	bf28      	it	cs
 800067a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000680:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000682:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	bf8c      	ite	hi
 8000688:	3c03      	subhi	r4, #3
 800068a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	ea21 0303 	bic.w	r3, r1, r3
 8000690:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa06 f404 	lsl.w	r4, r6, r4
 8000696:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	bfa8      	it	ge
 80006a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80006a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	bfbc      	itt	lt
 80006ac:	f000 000f 	andlt.w	r0, r0, #15
 80006b0:	4a05      	ldrlt	r2, [pc, #20]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
 80006b2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfaa      	itet	ge
 80006b6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006cc:	0942      	lsrs	r2, r0, #5
 80006ce:	2301      	movs	r3, #1
 80006d0:	f000 001f 	and.w	r0, r0, #31
 80006d4:	fa03 f000 	lsl.w	r0, r3, r0
 80006d8:	4b01      	ldr	r3, [pc, #4]	; (80006e0 <HAL_NVIC_EnableIRQ+0x14>)
 80006da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e4:	3801      	subs	r0, #1
 80006e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ea:	d20a      	bcs.n	8000702 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	21f0      	movs	r1, #240	; 0xf0
 80006f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000712:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000714:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000716:	bf0c      	ite	eq
 8000718:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800071c:	f022 0204 	bicne.w	r2, r2, #4
 8000720:	601a      	str	r2, [r3, #0]
  }
}
 8000722:	4770      	bx	lr
 8000724:	e000e010 	.word	0xe000e010

08000728 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 8000728:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <ETH_Delay.constprop.4+0x20>)
 800072c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	fbb3 f3f2 	udiv	r3, r3, r2
 8000736:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000738:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800073a:	9b01      	ldr	r3, [sp, #4]
 800073c:	1e5a      	subs	r2, r3, #1
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f9      	bne.n	8000738 <ETH_Delay.constprop.4+0x10>
}
 8000744:	b002      	add	sp, #8
 8000746:	4770      	bx	lr
 8000748:	20000010 	.word	0x20000010

0800074c <ETH_FlushTransmitFIFO>:
{
 800074c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000752:	f241 0118 	movw	r1, #4120	; 0x1018
 8000756:	6803      	ldr	r3, [r0, #0]
 8000758:	585a      	ldr	r2, [r3, r1]
 800075a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800075e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000760:	585b      	ldr	r3, [r3, r1]
 8000762:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000764:	f7ff ffe0 	bl	8000728 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000768:	9a01      	ldr	r2, [sp, #4]
 800076a:	6803      	ldr	r3, [r0, #0]
 800076c:	505a      	str	r2, [r3, r1]
}
 800076e:	b003      	add	sp, #12
 8000770:	f85d fb04 	ldr.w	pc, [sp], #4

08000774 <ETH_MACDMAConfig>:
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000778:	b129      	cbz	r1, 8000786 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 800077a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800077e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000782:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000786:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000788:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800078a:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 800078c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
  tmpreg1 = (heth->Instance)->MACCR;
 8000790:	6815      	ldr	r5, [r2, #0]
                       macinit.LoopbackMode |
 8000792:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000796:	4830      	ldr	r0, [pc, #192]	; (8000858 <ETH_MACDMAConfig+0xe4>)
 8000798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079c:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007a0:	bf0c      	ite	eq
 80007a2:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80007a6:	2100      	movne	r1, #0
 80007a8:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80007aa:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80007ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ae:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80007b0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	f7ff ff31 	bl	8000618 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80007b6:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007b8:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80007ba:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007bc:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007be:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80007c0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	f7ff ff29 	bl	8000618 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007ca:	2500      	movs	r5, #0
 80007cc:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007ce:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007d0:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007d2:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007d6:	0412      	lsls	r2, r2, #16
 80007d8:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007de:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80007e2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e4:	f7ff ff18 	bl	8000618 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007e8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ea:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80007ec:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ee:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007f0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f2:	f7ff ff11 	bl	8000618 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007f6:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007fa:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007fc:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000800:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000802:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000804:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000806:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800080a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800080e:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000810:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000812:	f7ff ff01 	bl	8000618 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000816:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000818:	4a11      	ldr	r2, [pc, #68]	; (8000860 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800081a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800081c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000820:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000822:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000824:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000826:	f7ff fef7 	bl	8000618 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800082a:	6822      	ldr	r2, [r4, #0]
 800082c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000830:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000832:	69a3      	ldr	r3, [r4, #24]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d107      	bne.n	8000848 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000838:	f241 011c 	movw	r1, #4124	; 0x101c
 800083c:	5853      	ldr	r3, [r2, r1]
 800083e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000846:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000848:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800084c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800084e:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000850:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <ETH_MACDMAConfig+0xf4>)
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	ff20810f 	.word	0xff20810f
 800085c:	f8de3f23 	.word	0xf8de3f23
 8000860:	02c12080 	.word	0x02c12080
 8000864:	40028040 	.word	0x40028040
 8000868:	40028044 	.word	0x40028044

0800086c <HAL_ETH_DMATxDescListInit>:
{
 800086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000870:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000874:	2c01      	cmp	r4, #1
 8000876:	f04f 0402 	mov.w	r4, #2
 800087a:	d031      	beq.n	80008e0 <HAL_ETH_DMATxDescListInit+0x74>
 800087c:	2501      	movs	r5, #1
 800087e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000882:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000886:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000888:	460c      	mov	r4, r1
 800088a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800088c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000890:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8000894:	f103 3eff 	add.w	lr, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8000898:	429d      	cmp	r5, r3
 800089a:	d10c      	bne.n	80008b6 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800089c:	6802      	ldr	r2, [r0, #0]
 800089e:	f241 0310 	movw	r3, #4112	; 0x1010
 80008a2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008a4:	2301      	movs	r3, #1
 80008a6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008aa:	2300      	movs	r3, #0
 80008ac:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008b0:	4618      	mov	r0, r3
}
 80008b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008b6:	fb0c 2605 	mla	r6, ip, r5, r2
 80008ba:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008bc:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008be:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008c0:	b91e      	cbnz	r6, 80008ca <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008c2:	6826      	ldr	r6, [r4, #0]
 80008c4:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008c8:	6026      	str	r6, [r4, #0]
 80008ca:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80008ce:	45ae      	cmp	lr, r5
 80008d0:	bf94      	ite	ls
 80008d2:	4688      	movls	r8, r1
 80008d4:	46b0      	movhi	r8, r6
 80008d6:	f8c4 800c 	str.w	r8, [r4, #12]
 80008da:	3501      	adds	r5, #1
 80008dc:	4634      	mov	r4, r6
 80008de:	e7db      	b.n	8000898 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80008e0:	4620      	mov	r0, r4
 80008e2:	e7e6      	b.n	80008b2 <HAL_ETH_DMATxDescListInit+0x46>

080008e4 <HAL_ETH_DMARxDescListInit>:
{
 80008e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 80008e8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008ec:	2c01      	cmp	r4, #1
 80008ee:	f04f 0402 	mov.w	r4, #2
 80008f2:	d02f      	beq.n	8000954 <HAL_ETH_DMARxDescListInit+0x70>
 80008f4:	2501      	movs	r5, #1
 80008f6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008fa:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008fe:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8000900:	460c      	mov	r4, r1
 8000902:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000904:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000908:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800090c:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000910:	f103 38ff 	add.w	r8, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 8000914:	42ab      	cmp	r3, r5
 8000916:	d10c      	bne.n	8000932 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000918:	6802      	ldr	r2, [r0, #0]
 800091a:	f241 030c 	movw	r3, #4108	; 0x100c
 800091e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000920:	2301      	movs	r3, #1
 8000922:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000926:	2300      	movs	r3, #0
 8000928:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800092c:	4618      	mov	r0, r3
}
 800092e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000932:	fb0e 2605 	mla	r6, lr, r5, r2
 8000936:	60a6      	str	r6, [r4, #8]
 8000938:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800093c:	45a8      	cmp	r8, r5
 800093e:	bf94      	ite	ls
 8000940:	4689      	movls	r9, r1
 8000942:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000944:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000946:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800094a:	f8c4 900c 	str.w	r9, [r4, #12]
 800094e:	3501      	adds	r5, #1
 8000950:	4634      	mov	r4, r6
 8000952:	e7df      	b.n	8000914 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8000954:	4620      	mov	r0, r4
 8000956:	e7ea      	b.n	800092e <HAL_ETH_DMARxDescListInit+0x4a>

08000958 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000958:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800095c:	2b01      	cmp	r3, #1
{
 800095e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000960:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000964:	d068      	beq.n	8000a38 <HAL_ETH_TransmitFrame+0xe0>
 8000966:	2201      	movs	r2, #1
 8000968:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800096c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000970:	b929      	cbnz	r1, 800097e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000972:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000976:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800097a:	4610      	mov	r0, r2
}
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800097e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000980:	681c      	ldr	r4, [r3, #0]
 8000982:	2c00      	cmp	r4, #0
 8000984:	da06      	bge.n	8000994 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000986:	2312      	movs	r3, #18
 8000988:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800098c:	2300      	movs	r3, #0
 800098e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000992:	e7f2      	b.n	800097a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000994:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000998:	42a1      	cmp	r1, r4
 800099a:	d92e      	bls.n	80009fa <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800099c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80009a0:	fb04 1412 	mls	r4, r4, r2, r1
 80009a4:	b33c      	cbz	r4, 80009f6 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80009a6:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80009a8:	4c24      	ldr	r4, [pc, #144]	; (8000a3c <HAL_ETH_TransmitFrame+0xe4>)
 80009aa:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80009ae:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009b2:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009b6:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009b8:	f240 57f4 	movw	r7, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80009bc:	1e56      	subs	r6, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80009be:	681d      	ldr	r5, [r3, #0]
 80009c0:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80009c4:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80009c6:	b91c      	cbnz	r4, 80009d0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009c8:	681d      	ldr	r5, [r3, #0]
 80009ca:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80009ce:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80009d0:	42a6      	cmp	r6, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009d2:	bf08      	it	eq
 80009d4:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009d6:	605f      	str	r7, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009d8:	bf04      	itt	eq
 80009da:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80009de:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009e0:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009e2:	bf08      	it	eq
 80009e4:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80009e6:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009e8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80009ec:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009ee:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009f0:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80009f2:	d1e4      	bne.n	80009be <HAL_ETH_TransmitFrame+0x66>
 80009f4:	e00d      	b.n	8000a12 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80009f6:	2a01      	cmp	r2, #1
 80009f8:	d1d6      	bne.n	80009a8 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000a00:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a02:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a04:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a0c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a0e:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a14:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a18:	6803      	ldr	r3, [r0, #0]
 8000a1a:	5899      	ldr	r1, [r3, r2]
 8000a1c:	0749      	lsls	r1, r1, #29
 8000a1e:	d505      	bpl.n	8000a2c <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a20:	2104      	movs	r1, #4
 8000a22:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000a24:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a28:	2100      	movs	r1, #0
 8000a2a:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a32:	2300      	movs	r3, #0
 8000a34:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a38:	4618      	mov	r0, r3
 8000a3a:	e79f      	b.n	800097c <HAL_ETH_TransmitFrame+0x24>
 8000a3c:	fffffa0c 	.word	0xfffffa0c

08000a40 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a40:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a44:	2b01      	cmp	r3, #1
{
 8000a46:	b570      	push	{r4, r5, r6, lr}
 8000a48:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a4c:	d03b      	beq.n	8000ac6 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a54:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a58:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8000a5a:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	db01      	blt.n	8000a68 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a64:	3c01      	subs	r4, #1
 8000a66:	d106      	bne.n	8000a76 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a68:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a6a:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a6c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a70:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a74:	e027      	b.n	8000ac6 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68dd      	ldr	r5, [r3, #12]
 8000a7a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a7e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a82:	d103      	bne.n	8000a8c <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a84:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a86:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a88:	6285      	str	r5, [r0, #40]	; 0x28
 8000a8a:	e7e7      	b.n	8000a5c <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a8c:	681e      	ldr	r6, [r3, #0]
 8000a8e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a90:	f416 7f40 	tst.w	r6, #768	; 0x300
 8000a94:	f102 0201 	add.w	r2, r2, #1
 8000a98:	d101      	bne.n	8000a9e <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8000a9a:	6382      	str	r2, [r0, #56]	; 0x38
 8000a9c:	e7f4      	b.n	8000a88 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000a9e:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000aa0:	bf08      	it	eq
 8000aa2:	6303      	streq	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos.SegCount)++;
 8000aa4:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ab2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000abe:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000ac0:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000ac2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}

08000aca <HAL_ETH_TxCpltCallback>:
 8000aca:	4770      	bx	lr

08000acc <HAL_ETH_ErrorCallback>:
 8000acc:	4770      	bx	lr

08000ace <HAL_ETH_IRQHandler>:
{
 8000ace:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000ad0:	6802      	ldr	r2, [r0, #0]
 8000ad2:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000ad6:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000ad8:	5995      	ldr	r5, [r2, r6]
 8000ada:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000ade:	d021      	beq.n	8000b24 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000ae0:	f00a fff6 	bl	800bad0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	2240      	movs	r2, #64	; 0x40
 8000ae8:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000af0:	2300      	movs	r3, #0
 8000af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	f241 0514 	movw	r5, #4116	; 0x1014
 8000afc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b00:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b02:	595b      	ldr	r3, [r3, r5]
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	d50c      	bpl.n	8000b22 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff ffdf 	bl	8000acc <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b14:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000b24:	5993      	ldr	r3, [r2, r6]
 8000b26:	07da      	lsls	r2, r3, #31
 8000b28:	d5e5      	bpl.n	8000af6 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000b2a:	f7ff ffce 	bl	8000aca <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b2e:	6822      	ldr	r2, [r4, #0]
 8000b30:	2301      	movs	r3, #1
 8000b32:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000b34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b38:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000b3c:	e7db      	b.n	8000af6 <HAL_ETH_IRQHandler+0x28>

08000b3e <HAL_ETH_ReadPHYRegister>:
{
 8000b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b40:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b44:	2b82      	cmp	r3, #130	; 0x82
{
 8000b46:	4605      	mov	r5, r0
 8000b48:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b4a:	d030      	beq.n	8000bae <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b4c:	2382      	movs	r3, #130	; 0x82
 8000b4e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b52:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b54:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b56:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b58:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b5c:	f044 0401 	orr.w	r4, r4, #1
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b60:	f000 001c 	and.w	r0, r0, #28
 8000b64:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b66:	8a2c      	ldrh	r4, [r5, #16]
 8000b68:	02e4      	lsls	r4, r4, #11
 8000b6a:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b6c:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg1;
 8000b6e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b70:	f7ff fd4c 	bl	800060c <HAL_GetTick>
 8000b74:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b76:	f014 0001 	ands.w	r0, r4, #1
 8000b7a:	d107      	bne.n	8000b8c <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b7c:	682b      	ldr	r3, [r5, #0]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b8a:	e00c      	b.n	8000ba6 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b8c:	f7ff fd3e 	bl	800060c <HAL_GetTick>
 8000b90:	1bc0      	subs	r0, r0, r7
 8000b92:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b96:	d307      	bcc.n	8000ba8 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000ba4:	2003      	movs	r0, #3
}
 8000ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	691c      	ldr	r4, [r3, #16]
 8000bac:	e7e3      	b.n	8000b76 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000bae:	2002      	movs	r0, #2
 8000bb0:	e7f9      	b.n	8000ba6 <HAL_ETH_ReadPHYRegister+0x68>

08000bb2 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bb2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bb6:	2b42      	cmp	r3, #66	; 0x42
{
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bbc:	d02e      	beq.n	8000c1c <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000bbe:	2342      	movs	r3, #66	; 0x42
 8000bc0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000bc4:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bc6:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000bc8:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bca:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000bce:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bd2:	f000 001c 	and.w	r0, r0, #28
 8000bd6:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bd8:	8a2c      	ldrh	r4, [r5, #16]
 8000bda:	02e4      	lsls	r4, r4, #11
 8000bdc:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000bde:	4304      	orrs	r4, r0
 8000be0:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000be2:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000be4:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000be6:	f7ff fd11 	bl	800060c <HAL_GetTick>
 8000bea:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bec:	f014 0001 	ands.w	r0, r4, #1
 8000bf0:	d103      	bne.n	8000bfa <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bf8:	e00c      	b.n	8000c14 <HAL_ETH_WritePHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bfa:	f7ff fd07 	bl	800060c <HAL_GetTick>
 8000bfe:	1b80      	subs	r0, r0, r6
 8000c00:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c04:	d307      	bcc.n	8000c16 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c12:	2003      	movs	r0, #3
}
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c16:	682b      	ldr	r3, [r5, #0]
 8000c18:	691c      	ldr	r4, [r3, #16]
 8000c1a:	e7e7      	b.n	8000bec <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	e7f9      	b.n	8000c14 <HAL_ETH_WritePHYRegister+0x62>

08000c20 <HAL_ETH_Init>:
{
 8000c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000c26:	4604      	mov	r4, r0
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	f000 80de 	beq.w	8000dea <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c2e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c36:	b91b      	cbnz	r3, 8000c40 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c38:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c3c:	f00a fee0 	bl	800ba00 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	4b6a      	ldr	r3, [pc, #424]	; (8000df0 <HAL_ETH_Init+0x1d0>)
 8000c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c4c:	645a      	str	r2, [r3, #68]	; 0x44
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c58:	4b66      	ldr	r3, [pc, #408]	; (8000df4 <HAL_ETH_Init+0x1d4>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c60:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	6a21      	ldr	r1, [r4, #32]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	f042 0201 	orr.w	r2, r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c78:	f7ff fcc8 	bl	800060c <HAL_GetTick>
 8000c7c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	07d0      	lsls	r0, r2, #31
 8000c88:	d41d      	bmi.n	8000cc6 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c8a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c8c:	f000 ff64 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c90:	4b59      	ldr	r3, [pc, #356]	; (8000df8 <HAL_ETH_Init+0x1d8>)
 8000c92:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <HAL_ETH_Init+0x1dc>)
 8000c94:	4403      	add	r3, r0
 8000c96:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c98:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c9c:	d822      	bhi.n	8000ce4 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c9e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000ca2:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ca4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000ca8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff ff80 	bl	8000bb2 <HAL_ETH_WritePHYRegister>
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	b368      	cbz	r0, 8000d12 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000cba:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000cbc:	f7ff fd5a 	bl	8000774 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000cc0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000cc4:	e00b      	b.n	8000cde <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cc6:	f7ff fca1 	bl	800060c <HAL_GetTick>
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cd0:	d9d5      	bls.n	8000c7e <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cd2:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000cd4:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cd6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000cde:	4628      	mov	r0, r5
 8000ce0:	b003      	add	sp, #12
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ce4:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_ETH_Init+0x1e0>)
 8000ce6:	4a47      	ldr	r2, [pc, #284]	; (8000e04 <HAL_ETH_Init+0x1e4>)
 8000ce8:	4403      	add	r3, r0
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d802      	bhi.n	8000cf4 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cee:	f045 050c 	orr.w	r5, r5, #12
 8000cf2:	e7d6      	b.n	8000ca2 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <HAL_ETH_Init+0x1e8>)
 8000cf6:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_ETH_Init+0x1ec>)
 8000cf8:	4403      	add	r3, r0
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d9d1      	bls.n	8000ca2 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000cfe:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <HAL_ETH_Init+0x1f0>)
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_ETH_Init+0x1f4>)
 8000d02:	4403      	add	r3, r0
 8000d04:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d06:	bf94      	ite	ls
 8000d08:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d0c:	f045 0510 	orrhi.w	r5, r5, #16
 8000d10:	e7c7      	b.n	8000ca2 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000d12:	20ff      	movs	r0, #255	; 0xff
 8000d14:	f7ff fc80 	bl	8000618 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d053      	beq.n	8000dc6 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000d1e:	f7ff fc75 	bl	800060c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d22:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d26:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d28:	466a      	mov	r2, sp
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f7ff ff06 	bl	8000b3e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d32:	f7ff fc6b 	bl	800060c <HAL_GetTick>
 8000d36:	1b80      	subs	r0, r0, r6
 8000d38:	42b8      	cmp	r0, r7
 8000d3a:	d90b      	bls.n	8000d54 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fd18 	bl	8000774 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d50:	2503      	movs	r5, #3
 8000d52:	e7c4      	b.n	8000cde <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d54:	9b00      	ldr	r3, [sp, #0]
 8000d56:	0759      	lsls	r1, r3, #29
 8000d58:	d5e6      	bpl.n	8000d28 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff ff26 	bl	8000bb2 <HAL_ETH_WritePHYRegister>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	d1a5      	bne.n	8000cb6 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000d6a:	f7ff fc4f 	bl	800060c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d6e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d72:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d74:	466a      	mov	r2, sp
 8000d76:	2101      	movs	r1, #1
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fee0 	bl	8000b3e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d7e:	f7ff fc45 	bl	800060c <HAL_GetTick>
 8000d82:	1b80      	subs	r0, r0, r6
 8000d84:	42b8      	cmp	r0, r7
 8000d86:	d8d9      	bhi.n	8000d3c <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d88:	9b00      	ldr	r3, [sp, #0]
 8000d8a:	069a      	lsls	r2, r3, #26
 8000d8c:	d5f2      	bpl.n	8000d74 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d8e:	466a      	mov	r2, sp
 8000d90:	2110      	movs	r1, #16
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff fed3 	bl	8000b3e <HAL_ETH_ReadPHYRegister>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d18c      	bne.n	8000cb6 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d9c:	9b00      	ldr	r3, [sp, #0]
 8000d9e:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000da2:	bf18      	it	ne
 8000da4:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000da8:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000daa:	bf4c      	ite	mi
 8000dac:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000dae:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000db2:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000db4:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000db6:	2100      	movs	r1, #0
 8000db8:	4620      	mov	r0, r4
 8000dba:	f7ff fcdb 	bl	8000774 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000dc4:	e78b      	b.n	8000cde <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000dc6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8000dca:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000dcc:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff feec 	bl	8000bb2 <HAL_ETH_WritePHYRegister>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	f47f af6b 	bne.w	8000cb6 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000de0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000de4:	f7ff fc18 	bl	8000618 <HAL_Delay>
 8000de8:	e7e5      	b.n	8000db6 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000dea:	2501      	movs	r5, #1
 8000dec:	e777      	b.n	8000cde <HAL_ETH_Init+0xbe>
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40013800 	.word	0x40013800
 8000df8:	feced300 	.word	0xfeced300
 8000dfc:	00e4e1bf 	.word	0x00e4e1bf
 8000e00:	fde9f140 	.word	0xfde9f140
 8000e04:	017d783f 	.word	0x017d783f
 8000e08:	fc6c7900 	.word	0xfc6c7900
 8000e0c:	026259ff 	.word	0x026259ff
 8000e10:	fa0a1f00 	.word	0xfa0a1f00
 8000e14:	02faf07f 	.word	0x02faf07f

08000e18 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000e18:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000e1c:	2b01      	cmp	r3, #1
{  
 8000e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e20:	4605      	mov	r5, r0
 8000e22:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000e26:	d031      	beq.n	8000e8c <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000e28:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e2a:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000e2c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000e30:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e32:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000e34:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e36:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000e3a:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e3e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000e44:	f7ff fc70 	bl	8000728 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	9a01      	ldr	r2, [sp, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000e4e:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f042 0204 	orr.w	r2, r2, #4
 8000e56:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000e5c:	f7ff fc64 	bl	8000728 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	9a00      	ldr	r2, [sp, #0]
 8000e64:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e66:	4628      	mov	r0, r5
 8000e68:	f7ff fc70 	bl	800074c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e6c:	682a      	ldr	r2, [r5, #0]
 8000e6e:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e72:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e74:	58d1      	ldr	r1, [r2, r3]
 8000e76:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e7a:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e7c:	58d1      	ldr	r1, [r2, r3]
 8000e7e:	f041 0102 	orr.w	r1, r1, #2
 8000e82:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e84:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e88:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e94:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001060 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001064 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000ea6:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000eac:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb0:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8000eb4:	45b4      	cmp	ip, r6
 8000eb6:	f040 80b6 	bne.w	8001026 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	684c      	ldr	r4, [r1, #4]
 8000ebc:	f024 0710 	bic.w	r7, r4, #16
 8000ec0:	2f02      	cmp	r7, #2
 8000ec2:	d116      	bne.n	8000ef2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ec8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ecc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ed8:	f04f 0e0f 	mov.w	lr, #15
 8000edc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000ee0:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	690d      	ldr	r5, [r1, #16]
 8000ee6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000eea:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ef2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ef8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efc:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f00:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f02:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f06:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0a:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f10:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f14:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f16:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1a:	d811      	bhi.n	8000f40 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000f1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f22:	68cf      	ldr	r7, [r1, #12]
 8000f24:	fa07 fe0a 	lsl.w	lr, r7, sl
 8000f28:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8000f2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f30:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f34:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f38:	409f      	lsls	r7, r3
 8000f3a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000f3e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f40:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f42:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	688f      	ldr	r7, [r1, #8]
 8000f46:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f4a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	00e5      	lsls	r5, r4, #3
 8000f50:	d569      	bpl.n	8001026 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f04f 0b00 	mov.w	fp, #0
 8000f56:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f5a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	4d3f      	ldr	r5, [pc, #252]	; (800105c <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f64:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f68:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f6c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f70:	9703      	str	r7, [sp, #12]
 8000f72:	9f03      	ldr	r7, [sp, #12]
 8000f74:	f023 0703 	bic.w	r7, r3, #3
 8000f78:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f7c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f80:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f84:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f8c:	f04f 0c0f 	mov.w	ip, #15
 8000f90:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f94:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f96:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	d04b      	beq.n	8001034 <HAL_GPIO_Init+0x1a4>
 8000f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa0:	42a8      	cmp	r0, r5
 8000fa2:	d049      	beq.n	8001038 <HAL_GPIO_Init+0x1a8>
 8000fa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa8:	42a8      	cmp	r0, r5
 8000faa:	d047      	beq.n	800103c <HAL_GPIO_Init+0x1ac>
 8000fac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fb0:	42a8      	cmp	r0, r5
 8000fb2:	d045      	beq.n	8001040 <HAL_GPIO_Init+0x1b0>
 8000fb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fb8:	42a8      	cmp	r0, r5
 8000fba:	d043      	beq.n	8001044 <HAL_GPIO_Init+0x1b4>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d043      	beq.n	8001048 <HAL_GPIO_Init+0x1b8>
 8000fc0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	d041      	beq.n	800104c <HAL_GPIO_Init+0x1bc>
 8000fc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	d03f      	beq.n	8001050 <HAL_GPIO_Init+0x1c0>
 8000fd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fd4:	42a8      	cmp	r0, r5
 8000fd6:	d03d      	beq.n	8001054 <HAL_GPIO_Init+0x1c4>
 8000fd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fdc:	42a8      	cmp	r0, r5
 8000fde:	bf14      	ite	ne
 8000fe0:	250a      	movne	r5, #10
 8000fe2:	2509      	moveq	r5, #9
 8000fe4:	fa05 f50e 	lsl.w	r5, r5, lr
 8000fe8:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000fee:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	bf0c      	ite	eq
 8000ff8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ffa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ffc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000ffe:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001000:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001004:	bf0c      	ite	eq
 8001006:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001008:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800100a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001012:	bf0c      	ite	eq
 8001014:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001016:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001018:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800101a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800101e:	bf54      	ite	pl
 8001020:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001022:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001024:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	3301      	adds	r3, #1
 8001028:	2b10      	cmp	r3, #16
 800102a:	f47f af3c 	bne.w	8000ea6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800102e:	b005      	add	sp, #20
 8001030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001034:	465d      	mov	r5, fp
 8001036:	e7d5      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001038:	2501      	movs	r5, #1
 800103a:	e7d3      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 800103c:	2502      	movs	r5, #2
 800103e:	e7d1      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001040:	2503      	movs	r5, #3
 8001042:	e7cf      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001044:	2504      	movs	r5, #4
 8001046:	e7cd      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001048:	2505      	movs	r5, #5
 800104a:	e7cb      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 800104c:	2506      	movs	r5, #6
 800104e:	e7c9      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001050:	2507      	movs	r5, #7
 8001052:	e7c7      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001054:	2508      	movs	r5, #8
 8001056:	e7c5      	b.n	8000fe4 <HAL_GPIO_Init+0x154>
 8001058:	40013c00 	.word	0x40013c00
 800105c:	40020000 	.word	0x40020000
 8001060:	40023800 	.word	0x40023800
 8001064:	40021400 	.word	0x40021400

08001068 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	b10a      	cbz	r2, 800106e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	6181      	str	r1, [r0, #24]
  }
}
 800106c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	e7fb      	b.n	800106a <HAL_GPIO_WritePin+0x2>
	...

08001074 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001078:	6806      	ldr	r6, [r0, #0]
{
 800107a:	b087      	sub	sp, #28
 800107c:	4605      	mov	r5, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800107e:	4630      	mov	r0, r6
 8001080:	f001 f866 	bl	8002150 <USB_GetMode>
 8001084:	2801      	cmp	r0, #1
 8001086:	f040 80ea 	bne.w	800125e <HAL_HCD_IRQHandler+0x1ea>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 800108a:	6828      	ldr	r0, [r5, #0]
 800108c:	f001 f85c 	bl	8002148 <USB_ReadInterrupts>
 8001090:	2800      	cmp	r0, #0
 8001092:	f000 80e4 	beq.w	800125e <HAL_HCD_IRQHandler+0x1ea>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001096:	6828      	ldr	r0, [r5, #0]
 8001098:	f001 f856 	bl	8002148 <USB_ReadInterrupts>
 800109c:	0280      	lsls	r0, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800109e:	bf48      	it	mi
 80010a0:	682b      	ldrmi	r3, [r5, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010a2:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010a4:	bf44      	itt	mi
 80010a6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 80010aa:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010ac:	f001 f84c 	bl	8002148 <USB_ReadInterrupts>
 80010b0:	02c1      	lsls	r1, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010b2:	bf48      	it	mi
 80010b4:	682b      	ldrmi	r3, [r5, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010b6:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010b8:	bf44      	itt	mi
 80010ba:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 80010be:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010c0:	f001 f842 	bl	8002148 <USB_ReadInterrupts>
 80010c4:	0142      	lsls	r2, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010c6:	bf48      	it	mi
 80010c8:	682b      	ldrmi	r3, [r5, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010ca:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010cc:	bf44      	itt	mi
 80010ce:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80010d2:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010d4:	f001 f838 	bl	8002148 <USB_ReadInterrupts>
 80010d8:	0783      	lsls	r3, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010da:	bf48      	it	mi
 80010dc:	682b      	ldrmi	r3, [r5, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010de:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010e0:	bf44      	itt	mi
 80010e2:	2202      	movmi	r2, #2
 80010e4:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010e6:	f001 f82f 	bl	8002148 <USB_ReadInterrupts>
 80010ea:	0087      	lsls	r7, r0, #2
 80010ec:	d510      	bpl.n	8001110 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80010ee:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80010f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80010f6:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 80010fa:	4628      	mov	r0, r5
 80010fc:	f00b fa73 	bl	800c5e6 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001100:	2101      	movs	r1, #1
 8001102:	6828      	ldr	r0, [r5, #0]
 8001104:	f001 f828 	bl	8002158 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800110e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001110:	6828      	ldr	r0, [r5, #0]
 8001112:	f001 f819 	bl	8002148 <USB_ReadInterrupts>
 8001116:	01c4      	lsls	r4, r0, #7
 8001118:	d540      	bpl.n	800119c <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 800111a:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800111c:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8001120:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001122:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8001126:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001128:	9b05      	ldr	r3, [sp, #20]
 800112a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800112e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001130:	9b04      	ldr	r3, [sp, #16]
 8001132:	0798      	lsls	r0, r3, #30
 8001134:	d50d      	bpl.n	8001152 <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001136:	9b04      	ldr	r3, [sp, #16]
 8001138:	07d9      	lsls	r1, r3, #31
 800113a:	d506      	bpl.n	800114a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800113c:	69a3      	ldr	r3, [r4, #24]
 800113e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001142:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001144:	4628      	mov	r0, r5
 8001146:	f00b fa4a 	bl	800c5de <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800114a:	9b05      	ldr	r3, [sp, #20]
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001152:	9b04      	ldr	r3, [sp, #16]
 8001154:	071a      	lsls	r2, r3, #28
 8001156:	d517      	bpl.n	8001188 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001158:	9b05      	ldr	r3, [sp, #20]
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001160:	9b04      	ldr	r3, [sp, #16]
 8001162:	075b      	lsls	r3, r3, #29
 8001164:	f140 8086 	bpl.w	8001274 <HAL_HCD_IRQHandler+0x200>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001168:	69a9      	ldr	r1, [r5, #24]
 800116a:	2902      	cmp	r1, #2
 800116c:	d17a      	bne.n	8001264 <HAL_HCD_IRQHandler+0x1f0>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 800116e:	9b04      	ldr	r3, [sp, #16]
 8001170:	6828      	ldr	r0, [r5, #0]
 8001172:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800117a:	bf18      	it	ne
 800117c:	2101      	movne	r1, #1
 800117e:	f000 ffeb 	bl	8002158 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8001182:	4628      	mov	r0, r5
 8001184:	f00b fa2b 	bl	800c5de <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001188:	9b04      	ldr	r3, [sp, #16]
 800118a:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800118c:	bf42      	ittt	mi
 800118e:	9b05      	ldrmi	r3, [sp, #20]
 8001190:	f043 0320 	orrmi.w	r3, r3, #32
 8001194:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001196:	9b05      	ldr	r3, [sp, #20]
 8001198:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800119c:	6828      	ldr	r0, [r5, #0]
 800119e:	f000 ffd3 	bl	8002148 <USB_ReadInterrupts>
 80011a2:	0704      	lsls	r4, r0, #28
 80011a4:	d505      	bpl.n	80011b2 <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 80011a6:	4628      	mov	r0, r5
 80011a8:	f00b fa15 	bl	800c5d6 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	2208      	movs	r2, #8
 80011b0:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011b2:	6828      	ldr	r0, [r5, #0]
 80011b4:	f000 ffc8 	bl	8002148 <USB_ReadInterrupts>
 80011b8:	0180      	lsls	r0, r0, #6
 80011ba:	d512      	bpl.n	80011e2 <HAL_HCD_IRQHandler+0x16e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011bc:	6828      	ldr	r0, [r5, #0]
 80011be:	f001 f806 	bl	80021ce <USB_HC_ReadInterrupt>
 80011c2:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80011c6:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011c8:	f04f 0800 	mov.w	r8, #0
        if (interrupt & (1U << i))
 80011cc:	f04f 0901 	mov.w	r9, #1
 80011d0:	9302      	str	r3, [sp, #8]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80011d2:	2728      	movs	r7, #40	; 0x28
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011d4:	68ab      	ldr	r3, [r5, #8]
 80011d6:	6828      	ldr	r0, [r5, #0]
 80011d8:	4543      	cmp	r3, r8
 80011da:	d857      	bhi.n	800128c <HAL_HCD_IRQHandler+0x218>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80011dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e0:	6143      	str	r3, [r0, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80011e2:	6828      	ldr	r0, [r5, #0]
 80011e4:	f000 ffb0 	bl	8002148 <USB_ReadInterrupts>
 80011e8:	06c3      	lsls	r3, r0, #27
 80011ea:	d538      	bpl.n	800125e <HAL_HCD_IRQHandler+0x1ea>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ec:	682c      	ldr	r4, [r5, #0]
 80011ee:	69a3      	ldr	r3, [r4, #24]
 80011f0:	f023 0310 	bic.w	r3, r3, #16
 80011f4:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 80011f6:	6a27      	ldr	r7, [r4, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80011f8:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d129      	bne.n	8001254 <HAL_HCD_IRQHandler+0x1e0>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001200:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001204:	f1b8 0f00 	cmp.w	r8, #0
 8001208:	d024      	beq.n	8001254 <HAL_HCD_IRQHandler+0x1e0>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 800120a:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 800120e:	2628      	movs	r6, #40	; 0x28
 8001210:	fb06 5607 	mla	r6, r6, r7, r5
 8001214:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001216:	b1e9      	cbz	r1, 8001254 <HAL_HCD_IRQHandler+0x1e0>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8001218:	4642      	mov	r2, r8
 800121a:	4620      	mov	r0, r4
 800121c:	f000 ff86 	bl	800212c <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8001220:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001222:	4443      	add	r3, r8
 8001224:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001226:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 800122a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 800122c:	eb04 1447 	add.w	r4, r4, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001230:	4443      	add	r3, r8
 8001232:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001234:	6922      	ldr	r2, [r4, #16]
 8001236:	4bb9      	ldr	r3, [pc, #740]	; (800151c <HAL_HCD_IRQHandler+0x4a8>)
 8001238:	4013      	ands	r3, r2
 800123a:	b15b      	cbz	r3, 8001254 <HAL_HCD_IRQHandler+0x1e0>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 800123c:	6823      	ldr	r3, [r4, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800123e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001246:	6023      	str	r3, [r4, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001248:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001254:	682a      	ldr	r2, [r5, #0]
 8001256:	6993      	ldr	r3, [r2, #24]
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6193      	str	r3, [r2, #24]
}
 800125e:	b007      	add	sp, #28
 8001260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001264:	68eb      	ldr	r3, [r5, #12]
 8001266:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8001268:	bf04      	itt	eq
 800126a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800126e:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8001272:	e786      	b.n	8001182 <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001274:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001278:	682a      	ldr	r2, [r5, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800127a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800127e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001282:	6993      	ldr	r3, [r2, #24]
 8001284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	e77d      	b.n	8001188 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 800128c:	9a01      	ldr	r2, [sp, #4]
 800128e:	fa09 f308 	lsl.w	r3, r9, r8
 8001292:	4213      	tst	r3, r2
 8001294:	f000 8083 	beq.w	800139e <HAL_HCD_IRQHandler+0x32a>
 8001298:	ea4f 1348 	mov.w	r3, r8, lsl #5
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 800129c:	9a02      	ldr	r2, [sp, #8]
 800129e:	58d1      	ldr	r1, [r2, r3]
 80012a0:	fa5f f688 	uxtb.w	r6, r8
 80012a4:	ea4f 1b46 	mov.w	fp, r6, lsl #5
 80012a8:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 80012ac:	0409      	lsls	r1, r1, #16
 80012ae:	eb0b 040a 	add.w	r4, fp, sl
 80012b2:	f140 80f9 	bpl.w	80014a8 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80012b6:	68a1      	ldr	r1, [r4, #8]
 80012b8:	074a      	lsls	r2, r1, #29
 80012ba:	d513      	bpl.n	80012e4 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80012bc:	2104      	movs	r1, #4
 80012be:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80012c0:	68e1      	ldr	r1, [r4, #12]
 80012c2:	f041 0102 	orr.w	r1, r1, #2
 80012c6:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80012c8:	68a1      	ldr	r1, [r4, #8]
 80012ca:	058b      	lsls	r3, r1, #22
 80012cc:	d539      	bpl.n	8001342 <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80012ce:	68e3      	ldr	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80012d0:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80012d8:	4631      	mov	r1, r6
    USB_HC_Halt(hhcd->Instance, chnum);  
 80012da:	f000 ff87 	bl	80021ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80012de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e2:	e119      	b.n	8001518 <HAL_HCD_IRQHandler+0x4a4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80012e4:	68a1      	ldr	r1, [r4, #8]
 80012e6:	068b      	lsls	r3, r1, #26
 80012e8:	d502      	bpl.n	80012f0 <HAL_HCD_IRQHandler+0x27c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80012ea:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80012ec:	60a1      	str	r1, [r4, #8]
 80012ee:	e7eb      	b.n	80012c8 <HAL_HCD_IRQHandler+0x254>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80012f0:	68a1      	ldr	r1, [r4, #8]
 80012f2:	0709      	lsls	r1, r1, #28
 80012f4:	d511      	bpl.n	800131a <HAL_HCD_IRQHandler+0x2a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80012f6:	68e1      	ldr	r1, [r4, #12]
 80012f8:	f041 0102 	orr.w	r1, r1, #2
 80012fc:	60e1      	str	r1, [r4, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80012fe:	fb07 5106 	mla	r1, r7, r6, r5
 8001302:	f04f 0c05 	mov.w	ip, #5
 8001306:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800130a:	2110      	movs	r1, #16
 800130c:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 800130e:	2108      	movs	r1, #8
 8001310:	60a1      	str	r1, [r4, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8001312:	4631      	mov	r1, r6
 8001314:	f000 ff6a 	bl	80021ec <USB_HC_Halt>
 8001318:	e7d6      	b.n	80012c8 <HAL_HCD_IRQHandler+0x254>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800131a:	68a1      	ldr	r1, [r4, #8]
 800131c:	054a      	lsls	r2, r1, #21
 800131e:	d5d3      	bpl.n	80012c8 <HAL_HCD_IRQHandler+0x254>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001320:	68e1      	ldr	r1, [r4, #12]
 8001322:	f041 0102 	orr.w	r1, r1, #2
 8001326:	60e1      	str	r1, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001328:	4631      	mov	r1, r6
 800132a:	f000 ff5f 	bl	80021ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 800132e:	2110      	movs	r1, #16
 8001330:	60a1      	str	r1, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001332:	fb07 5106 	mla	r1, r7, r6, r5
 8001336:	2008      	movs	r0, #8
 8001338:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800133c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001340:	e7d4      	b.n	80012ec <HAL_HCD_IRQHandler+0x278>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001342:	68a1      	ldr	r1, [r4, #8]
 8001344:	07c8      	lsls	r0, r1, #31
 8001346:	d53d      	bpl.n	80013c4 <HAL_HCD_IRQHandler+0x350>
    if (hhcd->Init.dma_enable)
 8001348:	6929      	ldr	r1, [r5, #16]
 800134a:	b149      	cbz	r1, 8001360 <HAL_HCD_IRQHandler+0x2ec>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800134c:	fb07 5c06 	mla	ip, r7, r6, r5
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001350:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001352:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001356:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800135a:	1a09      	subs	r1, r1, r0
 800135c:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8001360:	fb07 5106 	mla	r1, r7, r6, r5
    hhcd->hc[chnum].ErrCnt = 0U;
 8001364:	2000      	movs	r0, #0
 8001366:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8001368:	f881 905d 	strb.w	r9, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800136c:	f8c4 9008 	str.w	r9, [r4, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001370:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8001374:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8001378:	d114      	bne.n	80013a4 <HAL_HCD_IRQHandler+0x330>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800137a:	68e3      	ldr	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800137c:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001384:	4631      	mov	r1, r6
 8001386:	f000 ff31 	bl	80021ec <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800138a:	2310      	movs	r3, #16
 800138c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 800138e:	fb07 5606 	mla	r6, r7, r6, r5
 8001392:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800139e:	f108 0801 	add.w	r8, r8, #1
 80013a2:	e717      	b.n	80011d4 <HAL_HCD_IRQHandler+0x160>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d1f2      	bne.n	800138e <HAL_HCD_IRQHandler+0x31a>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80013a8:	f85b 000a 	ldr.w	r0, [fp, sl]
 80013ac:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80013b0:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80013b4:	2201      	movs	r2, #1
      hhcd->hc[chnum].urb_state = URB_DONE; 
 80013b6:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80013ba:	4628      	mov	r0, r5
 80013bc:	4631      	mov	r1, r6
 80013be:	f00b f916 	bl	800c5ee <HAL_HCD_HC_NotifyURBChange_Callback>
 80013c2:	e7e4      	b.n	800138e <HAL_HCD_IRQHandler+0x31a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80013c4:	68a1      	ldr	r1, [r4, #8]
 80013c6:	0789      	lsls	r1, r1, #30
 80013c8:	d534      	bpl.n	8001434 <HAL_HCD_IRQHandler+0x3c0>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80013ca:	68e1      	ldr	r1, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80013cc:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80013d0:	f021 0102 	bic.w	r1, r1, #2
 80013d4:	60e1      	str	r1, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80013d6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80013da:	2901      	cmp	r1, #1
 80013dc:	d10c      	bne.n	80013f8 <HAL_HCD_IRQHandler+0x384>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80013de:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80013e2:	2302      	movs	r3, #2
 80013e4:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80013e6:	fb07 5306 	mla	r3, r7, r6, r5
 80013ea:	4631      	mov	r1, r6
 80013ec:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80013f0:	4628      	mov	r0, r5
 80013f2:	f00b f8fc 	bl	800c5ee <HAL_HCD_HC_NotifyURBChange_Callback>
 80013f6:	e7d2      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80013f8:	2905      	cmp	r1, #5
 80013fa:	d0f0      	beq.n	80013de <HAL_HCD_IRQHandler+0x36a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80013fc:	2906      	cmp	r1, #6
 80013fe:	d001      	beq.n	8001404 <HAL_HCD_IRQHandler+0x390>
 8001400:	2908      	cmp	r1, #8
 8001402:	d1ee      	bne.n	80013e2 <HAL_HCD_IRQHandler+0x36e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001404:	fb07 5106 	mla	r1, r7, r6, r5
 8001408:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800140a:	2803      	cmp	r0, #3
 800140c:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001410:	bf88      	it	hi
 8001412:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001414:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001416:	bf92      	itee	ls
 8001418:	2002      	movls	r0, #2
        hhcd->hc[chnum].ErrCnt = 0U;
 800141a:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800141c:	2004      	movhi	r0, #4
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800141e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001422:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001426:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800142a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800142e:	f84b 100a 	str.w	r1, [fp, sl]
 8001432:	e7d6      	b.n	80013e2 <HAL_HCD_IRQHandler+0x36e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001434:	68a1      	ldr	r1, [r4, #8]
 8001436:	6828      	ldr	r0, [r5, #0]
 8001438:	060a      	lsls	r2, r1, #24
 800143a:	d510      	bpl.n	800145e <HAL_HCD_IRQHandler+0x3ea>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800143c:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 800143e:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001448:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800144a:	3301      	adds	r3, #1
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 800144e:	2306      	movs	r3, #6
 8001450:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001454:	4631      	mov	r1, r6
 8001456:	f000 fec9 	bl	80021ec <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	e05c      	b.n	8001518 <HAL_HCD_IRQHandler+0x4a4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 800145e:	68a1      	ldr	r1, [r4, #8]
 8001460:	06cb      	lsls	r3, r1, #27
 8001462:	d59c      	bpl.n	800139e <HAL_HCD_IRQHandler+0x32a>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001464:	fb07 5106 	mla	r1, r7, r6, r5
 8001468:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 800146c:	2903      	cmp	r1, #3
 800146e:	d106      	bne.n	800147e <HAL_HCD_IRQHandler+0x40a>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001470:	68e1      	ldr	r1, [r4, #12]
 8001472:	f041 0102 	orr.w	r1, r1, #2
 8001476:	60e1      	str	r1, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001478:	4631      	mov	r1, r6
 800147a:	f000 feb7 	bl	80021ec <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 800147e:	fb07 5606 	mla	r6, r7, r6, r5
 8001482:	2103      	movs	r1, #3
 8001484:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001488:	2110      	movs	r1, #16
 800148a:	60a1      	str	r1, [r4, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800148c:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
 8001490:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001494:	d183      	bne.n	800139e <HAL_HCD_IRQHandler+0x32a>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001496:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800149a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800149e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80014a2:	f84b 100a 	str.w	r1, [fp, sl]
 80014a6:	e77a      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80014a8:	68a3      	ldr	r3, [r4, #8]
 80014aa:	0759      	lsls	r1, r3, #29
 80014ac:	d506      	bpl.n	80014bc <HAL_HCD_IRQHandler+0x448>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80014ae:	2304      	movs	r3, #4
 80014b0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80014b2:	68e3      	ldr	r3, [r4, #12]
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	60e3      	str	r3, [r4, #12]
 80014ba:	e770      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80014bc:	68a3      	ldr	r3, [r4, #8]
 80014be:	f013 0320 	ands.w	r3, r3, #32
 80014c2:	d018      	beq.n	80014f6 <HAL_HCD_IRQHandler+0x482>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80014c4:	2320      	movs	r3, #32
 80014c6:	60a3      	str	r3, [r4, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 80014c8:	fb07 5306 	mla	r3, r7, r6, r5
 80014cc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80014d0:	2a01      	cmp	r2, #1
 80014d2:	f47f af64 	bne.w	800139e <HAL_HCD_IRQHandler+0x32a>
      hhcd->hc[chnum].state = HC_NYET;     
 80014d6:	2204      	movs	r2, #4
 80014d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014dc:	68e2      	ldr	r2, [r4, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 80014de:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014e0:	f042 0202 	orr.w	r2, r2, #2
 80014e4:	60e2      	str	r2, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80014e6:	4631      	mov	r1, r6
 80014e8:	f000 fe80 	bl	80021ec <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80014ec:	9b03      	ldr	r3, [sp, #12]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80014f4:	e753      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80014f6:	68a2      	ldr	r2, [r4, #8]
 80014f8:	0652      	lsls	r2, r2, #25
 80014fa:	d511      	bpl.n	8001520 <HAL_HCD_IRQHandler+0x4ac>
    hhcd->hc[chnum].state = HC_NYET;
 80014fc:	fb07 5206 	mla	r2, r7, r6, r5
 8001500:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001502:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001504:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8001506:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001510:	4631      	mov	r1, r6
 8001512:	f000 fe6b 	bl	80021ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	60a3      	str	r3, [r4, #8]
 800151a:	e740      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
 800151c:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001520:	68a3      	ldr	r3, [r4, #8]
 8001522:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8001526:	d005      	beq.n	8001534 <HAL_HCD_IRQHandler+0x4c0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001528:	68e3      	ldr	r3, [r4, #12]
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001530:	4631      	mov	r1, r6
 8001532:	e6d2      	b.n	80012da <HAL_HCD_IRQHandler+0x266>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001534:	68a2      	ldr	r2, [r4, #8]
 8001536:	07d1      	lsls	r1, r2, #31
 8001538:	d510      	bpl.n	800155c <HAL_HCD_IRQHandler+0x4e8>
      hhcd->hc[chnum].ErrCnt = 0U;  
 800153a:	fb07 5206 	mla	r2, r7, r6, r5
    USB_HC_Halt(hhcd->Instance, chnum);   
 800153e:	4631      	mov	r1, r6
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001542:	68e3      	ldr	r3, [r4, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001544:	9203      	str	r2, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800154c:	f000 fe4e 	bl	80021ec <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001550:	9a03      	ldr	r2, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001552:	f8c4 9008 	str.w	r9, [r4, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001556:	f882 905d 	strb.w	r9, [r2, #93]	; 0x5d
 800155a:	e720      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 800155c:	68a3      	ldr	r3, [r4, #8]
 800155e:	071a      	lsls	r2, r3, #28
 8001560:	d50e      	bpl.n	8001580 <HAL_HCD_IRQHandler+0x50c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001562:	2308      	movs	r3, #8
 8001564:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001566:	68e3      	ldr	r3, [r4, #12]
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800156e:	4631      	mov	r1, r6
 8001570:	f000 fe3c 	bl	80021ec <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001574:	fb07 5606 	mla	r6, r7, r6, r5
 8001578:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800157a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800157e:	e70e      	b.n	800139e <HAL_HCD_IRQHandler+0x32a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001580:	68a3      	ldr	r3, [r4, #8]
 8001582:	06db      	lsls	r3, r3, #27
 8001584:	d511      	bpl.n	80015aa <HAL_HCD_IRQHandler+0x536>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001586:	fb07 5306 	mla	r3, r7, r6, r5
 800158a:	2200      	movs	r2, #0
 800158c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800158e:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001590:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001592:	f042 0202 	orr.w	r2, r2, #2
 8001596:	60e2      	str	r2, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001598:	4631      	mov	r1, r6
 800159a:	f000 fe27 	bl	80021ec <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 800159e:	9b03      	ldr	r3, [sp, #12]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80015a6:	2310      	movs	r3, #16
 80015a8:	e7b6      	b.n	8001518 <HAL_HCD_IRQHandler+0x4a4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80015aa:	68a3      	ldr	r3, [r4, #8]
 80015ac:	0619      	lsls	r1, r3, #24
 80015ae:	d50c      	bpl.n	80015ca <HAL_HCD_IRQHandler+0x556>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80015b0:	68e3      	ldr	r3, [r4, #12]
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80015b8:	4631      	mov	r1, r6
    hhcd->hc[chnum].state = HC_XACTERR;  
 80015ba:	fb07 5606 	mla	r6, r7, r6, r5
    USB_HC_Halt(hhcd->Instance, chnum);      
 80015be:	f000 fe15 	bl	80021ec <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 80015c2:	2306      	movs	r3, #6
 80015c4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 80015c8:	e747      	b.n	800145a <HAL_HCD_IRQHandler+0x3e6>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80015ca:	68a1      	ldr	r1, [r4, #8]
 80015cc:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80015d0:	d00f      	beq.n	80015f2 <HAL_HCD_IRQHandler+0x57e>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80015d2:	68e3      	ldr	r3, [r4, #12]
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80015da:	4631      	mov	r1, r6
 80015dc:	f000 fe06 	bl	80021ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80015e0:	2310      	movs	r3, #16
 80015e2:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80015ea:	fb07 5606 	mla	r6, r7, r6, r5
 80015ee:	2308      	movs	r3, #8
 80015f0:	e7c3      	b.n	800157a <HAL_HCD_IRQHandler+0x506>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80015f2:	68a3      	ldr	r3, [r4, #8]
 80015f4:	079a      	lsls	r2, r3, #30
 80015f6:	f57f aed2 	bpl.w	800139e <HAL_HCD_IRQHandler+0x32a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80015fa:	68e3      	ldr	r3, [r4, #12]
 80015fc:	f023 0302 	bic.w	r3, r3, #2
 8001600:	60e3      	str	r3, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001602:	fb07 5306 	mla	r3, r7, r6, r5
 8001606:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800160a:	2a01      	cmp	r2, #1
 800160c:	d10d      	bne.n	800162a <HAL_HCD_IRQHandler+0x5b6>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800160e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001612:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001616:	2a02      	cmp	r2, #2
 8001618:	f47f aee3 	bne.w	80013e2 <HAL_HCD_IRQHandler+0x36e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 800161c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001620:	f082 0201 	eor.w	r2, r2, #1
 8001624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001628:	e6db      	b.n	80013e2 <HAL_HCD_IRQHandler+0x36e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 800162a:	2a03      	cmp	r2, #3
 800162c:	f04f 0002 	mov.w	r0, #2
 8001630:	d102      	bne.n	8001638 <HAL_HCD_IRQHandler+0x5c4>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001632:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
 8001636:	e6d4      	b.n	80013e2 <HAL_HCD_IRQHandler+0x36e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001638:	2a04      	cmp	r2, #4
 800163a:	d104      	bne.n	8001646 <HAL_HCD_IRQHandler+0x5d2>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800163c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001640:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8001644:	e6cd      	b.n	80013e2 <HAL_HCD_IRQHandler+0x36e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001646:	2a05      	cmp	r2, #5
 8001648:	d102      	bne.n	8001650 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800164a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800164e:	e6c8      	b.n	80013e2 <HAL_HCD_IRQHandler+0x36e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001650:	2a06      	cmp	r2, #6
 8001652:	d002      	beq.n	800165a <HAL_HCD_IRQHandler+0x5e6>
 8001654:	2a08      	cmp	r2, #8
 8001656:	f47f aec4 	bne.w	80013e2 <HAL_HCD_IRQHandler+0x36e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800165a:	fb07 5306 	mla	r3, r7, r6, r5
 800165e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001660:	2a03      	cmp	r2, #3
 8001662:	f102 0101 	add.w	r1, r2, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001666:	bf88      	it	hi
 8001668:	2200      	movhi	r2, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800166a:	6599      	str	r1, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800166c:	bf92      	itee	ls
 800166e:	2202      	movls	r2, #2
        hhcd->hc[chnum].ErrCnt = 0U;
 8001670:	659a      	strhi	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001672:	2204      	movhi	r2, #4
 8001674:	e7e9      	b.n	800164a <HAL_HCD_IRQHandler+0x5d6>
 8001676:	bf00      	nop

08001678 <HAL_HCD_Start>:
{ 
 8001678:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 800167a:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 800167e:	2b01      	cmp	r3, #1
{ 
 8001680:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001682:	d00d      	beq.n	80016a0 <HAL_HCD_Start+0x28>
 8001684:	2501      	movs	r5, #1
 8001686:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 800168a:	6800      	ldr	r0, [r0, #0]
 800168c:	f000 fd20 	bl	80020d0 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001690:	4629      	mov	r1, r5
 8001692:	6820      	ldr	r0, [r4, #0]
 8001694:	f000 fd7d 	bl	8002192 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001698:	2000      	movs	r0, #0
 800169a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 800169e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 80016a0:	2002      	movs	r0, #2
 80016a2:	e7fc      	b.n	800169e <HAL_HCD_Start+0x26>

080016a4 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 80016a4:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80016a8:	2b01      	cmp	r3, #1
{ 
 80016aa:	b510      	push	{r4, lr}
 80016ac:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80016ae:	d009      	beq.n	80016c4 <HAL_HCD_Stop+0x20>
 80016b0:	2301      	movs	r3, #1
 80016b2:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 80016b6:	6800      	ldr	r0, [r0, #0]
 80016b8:	f000 fe79 	bl	80023ae <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 80016bc:	2000      	movs	r0, #0
 80016be:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 80016c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 80016c4:	2002      	movs	r0, #2
 80016c6:	e7fc      	b.n	80016c2 <HAL_HCD_Stop+0x1e>

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	4604      	mov	r4, r0
 80016ce:	b918      	cbnz	r0, 80016d8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80016d2:	b002      	add	sp, #8
 80016d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	07dd      	lsls	r5, r3, #31
 80016dc:	d410      	bmi.n	8001700 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	0798      	lsls	r0, r3, #30
 80016e2:	d458      	bmi.n	8001796 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	071a      	lsls	r2, r3, #28
 80016e8:	f100 809a 	bmi.w	8001820 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	075b      	lsls	r3, r3, #29
 80016f0:	f100 80b8 	bmi.w	8001864 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f4:	69a2      	ldr	r2, [r4, #24]
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	f040 8119 	bne.w	800192e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7e8      	b.n	80016d2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001700:	4ba6      	ldr	r3, [pc, #664]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f002 020c 	and.w	r2, r2, #12
 8001708:	2a04      	cmp	r2, #4
 800170a:	d007      	beq.n	800171c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001712:	2a08      	cmp	r2, #8
 8001714:	d10a      	bne.n	800172c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0259      	lsls	r1, r3, #9
 800171a:	d507      	bpl.n	800172c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b9f      	ldr	r3, [pc, #636]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	039a      	lsls	r2, r3, #14
 8001722:	d5dc      	bpl.n	80016de <HAL_RCC_OscConfig+0x16>
 8001724:	6863      	ldr	r3, [r4, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1d9      	bne.n	80016de <HAL_RCC_OscConfig+0x16>
 800172a:	e7d1      	b.n	80016d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	6863      	ldr	r3, [r4, #4]
 800172e:	4d9b      	ldr	r5, [pc, #620]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d111      	bne.n	800175a <HAL_RCC_OscConfig+0x92>
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800173e:	f7fe ff65 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4d96      	ldr	r5, [pc, #600]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001744:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	682b      	ldr	r3, [r5, #0]
 8001748:	039b      	lsls	r3, r3, #14
 800174a:	d4c8      	bmi.n	80016de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7fe ff5e 	bl	800060c <HAL_GetTick>
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	2864      	cmp	r0, #100	; 0x64
 8001754:	d9f7      	bls.n	8001746 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001756:	2003      	movs	r0, #3
 8001758:	e7bb      	b.n	80016d2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175e:	d104      	bne.n	800176a <HAL_RCC_OscConfig+0xa2>
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001766:	602b      	str	r3, [r5, #0]
 8001768:	e7e5      	b.n	8001736 <HAL_RCC_OscConfig+0x6e>
 800176a:	682a      	ldr	r2, [r5, #0]
 800176c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001770:	602a      	str	r2, [r5, #0]
 8001772:	682a      	ldr	r2, [r5, #0]
 8001774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001778:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1df      	bne.n	800173e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800177e:	f7fe ff45 	bl	800060c <HAL_GetTick>
 8001782:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	039f      	lsls	r7, r3, #14
 8001788:	d5a9      	bpl.n	80016de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178a:	f7fe ff3f 	bl	800060c <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2864      	cmp	r0, #100	; 0x64
 8001792:	d9f7      	bls.n	8001784 <HAL_RCC_OscConfig+0xbc>
 8001794:	e7df      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	f012 0f0c 	tst.w	r2, #12
 800179e:	d007      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a6:	2a08      	cmp	r2, #8
 80017a8:	d111      	bne.n	80017ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	025e      	lsls	r6, r3, #9
 80017ae:	d40e      	bmi.n	80017ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b0:	4b7a      	ldr	r3, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	0795      	lsls	r5, r2, #30
 80017b6:	d502      	bpl.n	80017be <HAL_RCC_OscConfig+0xf6>
 80017b8:	68e2      	ldr	r2, [r4, #12]
 80017ba:	2a01      	cmp	r2, #1
 80017bc:	d188      	bne.n	80016d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	6921      	ldr	r1, [r4, #16]
 80017c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017cc:	e78a      	b.n	80016e4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ce:	68e2      	ldr	r2, [r4, #12]
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x2d8>)
 80017d2:	b1b2      	cbz	r2, 8001802 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017d8:	f7fe ff18 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4d6f      	ldr	r5, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	0798      	lsls	r0, r3, #30
 80017e4:	d507      	bpl.n	80017f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	682b      	ldr	r3, [r5, #0]
 80017e8:	6922      	ldr	r2, [r4, #16]
 80017ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017f2:	602b      	str	r3, [r5, #0]
 80017f4:	e776      	b.n	80016e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f6:	f7fe ff09 	bl	800060c <HAL_GetTick>
 80017fa:	1b80      	subs	r0, r0, r6
 80017fc:	2802      	cmp	r0, #2
 80017fe:	d9ef      	bls.n	80017e0 <HAL_RCC_OscConfig+0x118>
 8001800:	e7a9      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001802:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001804:	f7fe ff02 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001808:	4d64      	ldr	r5, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800180a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	0799      	lsls	r1, r3, #30
 8001810:	f57f af68 	bpl.w	80016e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001814:	f7fe fefa 	bl	800060c <HAL_GetTick>
 8001818:	1b80      	subs	r0, r0, r6
 800181a:	2802      	cmp	r0, #2
 800181c:	d9f6      	bls.n	800180c <HAL_RCC_OscConfig+0x144>
 800181e:	e79a      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001820:	6962      	ldr	r2, [r4, #20]
 8001822:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <HAL_RCC_OscConfig+0x2dc>)
 8001824:	b17a      	cbz	r2, 8001846 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800182a:	f7fe feef 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4d5b      	ldr	r5, [pc, #364]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001830:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001834:	079f      	lsls	r7, r3, #30
 8001836:	f53f af59 	bmi.w	80016ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183a:	f7fe fee7 	bl	800060c <HAL_GetTick>
 800183e:	1b80      	subs	r0, r0, r6
 8001840:	2802      	cmp	r0, #2
 8001842:	d9f6      	bls.n	8001832 <HAL_RCC_OscConfig+0x16a>
 8001844:	e787      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001846:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001848:	f7fe fee0 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4d53      	ldr	r5, [pc, #332]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800184e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001852:	0798      	lsls	r0, r3, #30
 8001854:	f57f af4a 	bpl.w	80016ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001858:	f7fe fed8 	bl	800060c <HAL_GetTick>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	2802      	cmp	r0, #2
 8001860:	d9f6      	bls.n	8001850 <HAL_RCC_OscConfig+0x188>
 8001862:	e778      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 8001866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001868:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800186c:	d128      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001872:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001882:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4d48      	ldr	r5, [pc, #288]	; (80019a8 <HAL_RCC_OscConfig+0x2e0>)
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	05d9      	lsls	r1, r3, #23
 800188a:	d51b      	bpl.n	80018c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	68a3      	ldr	r3, [r4, #8]
 800188e:	4d43      	ldr	r5, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 8001890:	2b01      	cmp	r3, #1
 8001892:	d127      	bne.n	80018e4 <HAL_RCC_OscConfig+0x21c>
 8001894:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800189c:	f7fe feb6 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	4d3e      	ldr	r5, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80018a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018aa:	079b      	lsls	r3, r3, #30
 80018ac:	d539      	bpl.n	8001922 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80018ae:	2e00      	cmp	r6, #0
 80018b0:	f43f af20 	beq.w	80016f4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 80018b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	e719      	b.n	80016f4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80018c0:	2600      	movs	r6, #0
 80018c2:	e7df      	b.n	8001884 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018cc:	f7fe fe9e 	bl	800060c <HAL_GetTick>
 80018d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	05da      	lsls	r2, r3, #23
 80018d6:	d4d9      	bmi.n	800188c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7fe fe98 	bl	800060c <HAL_GetTick>
 80018dc:	1bc0      	subs	r0, r0, r7
 80018de:	2802      	cmp	r0, #2
 80018e0:	d9f7      	bls.n	80018d2 <HAL_RCC_OscConfig+0x20a>
 80018e2:	e738      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d104      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22a>
 80018e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	672b      	str	r3, [r5, #112]	; 0x70
 80018f0:	e7d0      	b.n	8001894 <HAL_RCC_OscConfig+0x1cc>
 80018f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	672a      	str	r2, [r5, #112]	; 0x70
 80018fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018fc:	f022 0204 	bic.w	r2, r2, #4
 8001900:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ca      	bne.n	800189c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001906:	f7fe fe81 	bl	800060c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800190e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001912:	0798      	lsls	r0, r3, #30
 8001914:	d5cb      	bpl.n	80018ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7fe fe79 	bl	800060c <HAL_GetTick>
 800191a:	1bc0      	subs	r0, r0, r7
 800191c:	4540      	cmp	r0, r8
 800191e:	d9f7      	bls.n	8001910 <HAL_RCC_OscConfig+0x248>
 8001920:	e719      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7fe fe73 	bl	800060c <HAL_GetTick>
 8001926:	1bc0      	subs	r0, r0, r7
 8001928:	4540      	cmp	r0, r8
 800192a:	d9bd      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1e0>
 800192c:	e713      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192e:	4d1b      	ldr	r5, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
 8001930:	68ab      	ldr	r3, [r5, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	f43f aeca 	beq.w	80016d0 <HAL_RCC_OscConfig+0x8>
 800193c:	4e1b      	ldr	r6, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x2e4>)
 800193e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001940:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001942:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	d134      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001946:	f7fe fe61 	bl	800060c <HAL_GetTick>
 800194a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	0199      	lsls	r1, r3, #6
 8001950:	d41e      	bmi.n	8001990 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001952:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001956:	4313      	orrs	r3, r2
 8001958:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800195a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800195e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001960:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4c0d      	ldr	r4, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001968:	0852      	lsrs	r2, r2, #1
 800196a:	3a01      	subs	r2, #1
 800196c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001970:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001972:	2301      	movs	r3, #1
 8001974:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001976:	f7fe fe49 	bl	800060c <HAL_GetTick>
 800197a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	019a      	lsls	r2, r3, #6
 8001980:	f53f aebc 	bmi.w	80016fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe fe42 	bl	800060c <HAL_GetTick>
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	2802      	cmp	r0, #2
 800198c:	d9f6      	bls.n	800197c <HAL_RCC_OscConfig+0x2b4>
 800198e:	e6e2      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7fe fe3c 	bl	800060c <HAL_GetTick>
 8001994:	1bc0      	subs	r0, r0, r7
 8001996:	2802      	cmp	r0, #2
 8001998:	d9d8      	bls.n	800194c <HAL_RCC_OscConfig+0x284>
 800199a:	e6dc      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470000 	.word	0x42470000
 80019a4:	42470e80 	.word	0x42470e80
 80019a8:	40007000 	.word	0x40007000
 80019ac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80019b0:	f7fe fe2c 	bl	800060c <HAL_GetTick>
 80019b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	f57f ae9f 	bpl.w	80016fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019be:	f7fe fe25 	bl	800060c <HAL_GetTick>
 80019c2:	1b00      	subs	r0, r0, r4
 80019c4:	2802      	cmp	r0, #2
 80019c6:	d9f6      	bls.n	80019b6 <HAL_RCC_OscConfig+0x2ee>
 80019c8:	e6c5      	b.n	8001756 <HAL_RCC_OscConfig+0x8e>
 80019ca:	bf00      	nop

080019cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019cc:	4913      	ldr	r1, [pc, #76]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80019ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d0:	688b      	ldr	r3, [r1, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x16>
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019de:	4810      	ldr	r0, [pc, #64]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80019e2:	4810      	ldr	r0, [pc, #64]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80019e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	bf14      	ite	ne
 80019f2:	480c      	ldrne	r0, [pc, #48]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	480a      	ldreq	r0, [pc, #40]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019fa:	bf18      	it	ne
 80019fc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	fba1 0100 	umull	r0, r1, r1, r0
 8001a06:	f7fe fc5b 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x50>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001a16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a1a:	e7e3      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x18>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <HAL_RCC_ClockConfig>:
{
 8001a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a2c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a2e:	4604      	mov	r4, r0
 8001a30:	b910      	cbnz	r0, 8001a38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
}
 8001a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_ClockConfig+0x120>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f002 020f 	and.w	r2, r2, #15
 8001a40:	428a      	cmp	r2, r1
 8001a42:	d327      	bcc.n	8001a94 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	6821      	ldr	r1, [r4, #0]
 8001a46:	078f      	lsls	r7, r1, #30
 8001a48:	d42c      	bmi.n	8001aa4 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	07c8      	lsls	r0, r1, #31
 8001a4c:	d43f      	bmi.n	8001ace <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_RCC_ClockConfig+0x120>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f002 020f 	and.w	r2, r2, #15
 8001a56:	42aa      	cmp	r2, r5
 8001a58:	d864      	bhi.n	8001b24 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	0751      	lsls	r1, r2, #29
 8001a5e:	d46a      	bmi.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	0713      	lsls	r3, r2, #28
 8001a62:	d507      	bpl.n	8001a74 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a64:	4a39      	ldr	r2, [pc, #228]	; (8001b4c <HAL_RCC_ClockConfig+0x124>)
 8001a66:	6921      	ldr	r1, [r4, #16]
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a74:	f7ff ffaa 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x124>)
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_RCC_ClockConfig+0x128>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	40d8      	lsrs	r0, r3
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_RCC_ClockConfig+0x12c>)
 8001a88:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f00a fc2e 	bl	800c2ec <HAL_InitTick>
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e7cf      	b.n	8001a34 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a94:	b2ca      	uxtb	r2, r1
 8001a96:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	428b      	cmp	r3, r1
 8001aa0:	d1c7      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xa>
 8001aa2:	e7cf      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1c>
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aaa:	bf1e      	ittt	ne
 8001aac:	689a      	ldrne	r2, [r3, #8]
 8001aae:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001ab2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab6:	bf42      	ittt	mi
 8001ab8:	689a      	ldrmi	r2, [r3, #8]
 8001aba:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001abe:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	68a0      	ldr	r0, [r4, #8]
 8001ac4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ac8:	4302      	orrs	r2, r0
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e7bd      	b.n	8001a4a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	6862      	ldr	r2, [r4, #4]
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_ClockConfig+0x124>)
 8001ad2:	2a01      	cmp	r2, #1
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	d0a9      	beq.n	8001a32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4e1b      	ldr	r6, [pc, #108]	; (8001b4c <HAL_RCC_ClockConfig+0x124>)
 8001ae0:	68b3      	ldr	r3, [r6, #8]
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001aea:	f7fe fd8f 	bl	800060c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001af2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af4:	68b3      	ldr	r3, [r6, #8]
 8001af6:	6862      	ldr	r2, [r4, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b00:	d0a5      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f7fe fd83 	bl	800060c <HAL_GetTick>
 8001b06:	1bc0      	subs	r0, r0, r7
 8001b08:	4540      	cmp	r0, r8
 8001b0a:	d9f3      	bls.n	8001af4 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	e791      	b.n	8001a34 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b10:	1e91      	subs	r1, r2, #2
 8001b12:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b14:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	d802      	bhi.n	8001b1e <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b1c:	e7de      	b.n	8001adc <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	f013 0f02 	tst.w	r3, #2
 8001b22:	e7db      	b.n	8001adc <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b24:	b2ea      	uxtb	r2, r5
 8001b26:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	42ab      	cmp	r3, r5
 8001b30:	f47f af7f 	bne.w	8001a32 <HAL_RCC_ClockConfig+0xa>
 8001b34:	e791      	b.n	8001a5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b36:	4905      	ldr	r1, [pc, #20]	; (8001b4c <HAL_RCC_ClockConfig+0x124>)
 8001b38:	68e0      	ldr	r0, [r4, #12]
 8001b3a:	688b      	ldr	r3, [r1, #8]
 8001b3c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b40:	4303      	orrs	r3, r0
 8001b42:	608b      	str	r3, [r1, #8]
 8001b44:	e78c      	b.n	8001a60 <HAL_RCC_ClockConfig+0x38>
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	0800fa30 	.word	0x0800fa30
 8001b54:	20000010 	.word	0x20000010

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b58:	4b01      	ldr	r3, [pc, #4]	; (8001b60 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000010 	.word	0x20000010

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b72:	6810      	ldr	r0, [r2, #0]
}
 8001b74:	40d8      	lsrs	r0, r3
 8001b76:	4770      	bx	lr
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	0800fa40 	.word	0x0800fa40
 8001b80:	20000010 	.word	0x20000010

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b92:	6810      	ldr	r0, [r2, #0]
}
 8001b94:	40d8      	lsrs	r0, r3
 8001b96:	4770      	bx	lr
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	0800fa40 	.word	0x0800fa40
 8001ba0:	20000010 	.word	0x20000010

08001ba4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_GetClockConfig+0x34>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001bb8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001bc0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001bca:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_RCC_GetClockConfig+0x38>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	600b      	str	r3, [r1, #0]
}
 8001bd6:	4770      	bx	lr
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001be0:	4770      	bx	lr

08001be2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be2:	6803      	ldr	r3, [r0, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_TIM_OC_DelayElapsedCallback>:
 8001bf8:	4770      	bx	lr

08001bfa <HAL_TIM_IC_CaptureCallback>:
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_PWM_PulseFinishedCallback>:
 8001bfc:	4770      	bx	lr

08001bfe <HAL_TIM_TriggerCallback>:
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c00:	6803      	ldr	r3, [r0, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	0791      	lsls	r1, r2, #30
{
 8001c06:	b510      	push	{r4, lr}
 8001c08:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c0a:	d50e      	bpl.n	8001c2a <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	0792      	lsls	r2, r2, #30
 8001c10:	d50b      	bpl.n	8001c2a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c12:	f06f 0202 	mvn.w	r2, #2
 8001c16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c18:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c1c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c20:	d077      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	f7ff ffea 	bl	8001bfa <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	2300      	movs	r3, #0
 8001c28:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	0750      	lsls	r0, r2, #29
 8001c30:	d510      	bpl.n	8001c54 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	0751      	lsls	r1, r2, #29
 8001c36:	d50d      	bpl.n	8001c54 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c38:	f06f 0204 	mvn.w	r2, #4
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c3e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c40:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c42:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c46:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4a:	d068      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	f7ff ffd5 	bl	8001bfa <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	2300      	movs	r3, #0
 8001c52:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	0712      	lsls	r2, r2, #28
 8001c5a:	d50f      	bpl.n	8001c7c <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	0710      	lsls	r0, r2, #28
 8001c60:	d50c      	bpl.n	8001c7c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c62:	f06f 0208 	mvn.w	r2, #8
 8001c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c68:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c6a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c6c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c6e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c70:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c72:	d05a      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c74:	f7ff ffc1 	bl	8001bfa <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	06d2      	lsls	r2, r2, #27
 8001c82:	d510      	bpl.n	8001ca6 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	06d0      	lsls	r0, r2, #27
 8001c88:	d50d      	bpl.n	8001ca6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c8a:	f06f 0210 	mvn.w	r2, #16
 8001c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c90:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c92:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c94:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c98:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c9c:	d04b      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	f7ff ffac 	bl	8001bfa <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	07d1      	lsls	r1, r2, #31
 8001cac:	d508      	bpl.n	8001cc0 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	07d2      	lsls	r2, r2, #31
 8001cb2:	d505      	bpl.n	8001cc0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb4:	f06f 0201 	mvn.w	r2, #1
 8001cb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f00a fa98 	bl	800c1f0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	0610      	lsls	r0, r2, #24
 8001cc6:	d508      	bpl.n	8001cda <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	0611      	lsls	r1, r2, #24
 8001ccc:	d505      	bpl.n	8001cda <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f000 f8b2 	bl	8001e3e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	0652      	lsls	r2, r2, #25
 8001ce0:	d508      	bpl.n	8001cf4 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	0650      	lsls	r0, r2, #25
 8001ce6:	d505      	bpl.n	8001cf4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff ff85 	bl	8001bfe <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	0691      	lsls	r1, r2, #26
 8001cfa:	d522      	bpl.n	8001d42 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	0692      	lsls	r2, r2, #26
 8001d00:	d51f      	bpl.n	8001d42 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001d06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d08:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001d0e:	f000 b895 	b.w	8001e3c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	f7ff ff71 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7ff ff70 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8001d1c:	e783      	b.n	8001c26 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	f7ff ff6b 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff ff6a 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8001d28:	e792      	b.n	8001c50 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	f7ff ff65 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff ff64 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8001d34:	e7a0      	b.n	8001c78 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	f7ff ff5f 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff ff5e 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8001d40:	e7af      	b.n	8001ca2 <HAL_TIM_IRQHandler+0xa2>
}
 8001d42:	bd10      	pop	{r4, pc}

08001d44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001d44:	4a2e      	ldr	r2, [pc, #184]	; (8001e00 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001d46:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001d48:	4290      	cmp	r0, r2
 8001d4a:	d012      	beq.n	8001d72 <TIM_Base_SetConfig+0x2e>
 8001d4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x2e>
 8001d52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d56:	4290      	cmp	r0, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x2e>
 8001d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d5e:	4290      	cmp	r0, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x2e>
 8001d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x2e>
 8001d6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d6e:	4290      	cmp	r0, r2
 8001d70:	d119      	bne.n	8001da6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d78:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d7a:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <TIM_Base_SetConfig+0xbc>)
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d029      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001d80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d84:	d026      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001d86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d8a:	4290      	cmp	r0, r2
 8001d8c:	d022      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d92:	4290      	cmp	r0, r2
 8001d94:	d01e      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9a:	4290      	cmp	r0, r2
 8001d9c:	d01a      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001d9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001da2:	4290      	cmp	r0, r2
 8001da4:	d016      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <TIM_Base_SetConfig+0xc0>)
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d013      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d00f      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db8:	4290      	cmp	r0, r2
 8001dba:	d00b      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001dbc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001dc0:	4290      	cmp	r0, r2
 8001dc2:	d007      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dc8:	4290      	cmp	r0, r2
 8001dca:	d003      	beq.n	8001dd4 <TIM_Base_SetConfig+0x90>
 8001dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd0:	4290      	cmp	r0, r2
 8001dd2:	d103      	bne.n	8001ddc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dda:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001ddc:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dde:	688b      	ldr	r3, [r1, #8]
 8001de0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001de2:	680b      	ldr	r3, [r1, #0]
 8001de4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <TIM_Base_SetConfig+0xbc>)
 8001de8:	4298      	cmp	r0, r3
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0xb0>
 8001dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001df0:	4298      	cmp	r0, r3
 8001df2:	d101      	bne.n	8001df8 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df4:	690b      	ldr	r3, [r1, #16]
 8001df6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6143      	str	r3, [r0, #20]
}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40014000 	.word	0x40014000

08001e08 <HAL_TIM_Base_Init>:
{ 
 8001e08:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	b1a0      	cbz	r0, 8001e38 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e16:	b91b      	cbnz	r3, 8001e20 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001e1c:	f7ff fee0 	bl	8001be0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	1d21      	adds	r1, r4, #4
 8001e2a:	f7ff ff8b 	bl	8001d44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001e34:	2000      	movs	r0, #0
}
 8001e36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e38:	2001      	movs	r0, #1
 8001e3a:	e7fc      	b.n	8001e36 <HAL_TIM_Base_Init+0x2e>

08001e3c <HAL_TIMEx_CommutationCallback>:
 8001e3c:	4770      	bx	lr

08001e3e <HAL_TIMEx_BreakCallback>:
 8001e3e:	4770      	bx	lr

08001e40 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001e44:	6803      	ldr	r3, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e46:	68c1      	ldr	r1, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001e48:	691a      	ldr	r2, [r3, #16]
{
 8001e4a:	4604      	mov	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001e4c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e50:	430a      	orrs	r2, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001e52:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e54:	6925      	ldr	r5, [r4, #16]
 8001e56:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8001e58:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e5a:	69c0      	ldr	r0, [r0, #28]
 8001e5c:	432a      	orrs	r2, r5
 8001e5e:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e60:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e64:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e66:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e6a:	4302      	orrs	r2, r0
 8001e6c:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001e6e:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001e70:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001e72:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001e74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001e78:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e7a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4a7a      	ldr	r2, [pc, #488]	; (800206c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e82:	d17b      	bne.n	8001f7c <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d003      	beq.n	8001e90 <UART_SetConfig+0x50>
 8001e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d144      	bne.n	8001f1a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e90:	f7ff fe78 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001e94:	6867      	ldr	r7, [r4, #4]
 8001e96:	2519      	movs	r5, #25
 8001e98:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e9c:	fb05 f300 	mul.w	r3, r5, r0
 8001ea0:	007f      	lsls	r7, r7, #1
 8001ea2:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ea6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001eaa:	011f      	lsls	r7, r3, #4
 8001eac:	f7ff fe6a 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001eb0:	6863      	ldr	r3, [r4, #4]
 8001eb2:	4368      	muls	r0, r5
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb0 f6f3 	udiv	r6, r0, r3
 8001eba:	f7ff fe63 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	4368      	muls	r0, r5
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ecc:	fb08 6313 	mls	r3, r8, r3, r6
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	3332      	adds	r3, #50	; 0x32
 8001ed4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001ede:	f7ff fe51 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001ee2:	6862      	ldr	r2, [r4, #4]
 8001ee4:	4368      	muls	r0, r5
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	fbb0 f9f2 	udiv	r9, r0, r2
 8001eec:	f7ff fe4a 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	4368      	muls	r0, r5
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f00:	fb08 9313 	mls	r3, r8, r3, r9
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	3332      	adds	r3, #50	; 0x32
 8001f08:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	443b      	add	r3, r7
 8001f12:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f14:	6093      	str	r3, [r2, #8]
    }
  }
}
 8001f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f1a:	f7ff fe23 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8001f1e:	6867      	ldr	r7, [r4, #4]
 8001f20:	2519      	movs	r5, #25
 8001f22:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f26:	fb05 f300 	mul.w	r3, r5, r0
 8001f2a:	007f      	lsls	r7, r7, #1
 8001f2c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f30:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f34:	011f      	lsls	r7, r3, #4
 8001f36:	f7ff fe15 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	4368      	muls	r0, r5
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fbb0 f6f3 	udiv	r6, r0, r3
 8001f44:	f7ff fe0e 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8001f48:	6863      	ldr	r3, [r4, #4]
 8001f4a:	4368      	muls	r0, r5
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f56:	fb08 6313 	mls	r3, r8, r3, r6
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	3332      	adds	r3, #50	; 0x32
 8001f5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001f68:	f7ff fdfc 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8001f6c:	6862      	ldr	r2, [r4, #4]
 8001f6e:	4368      	muls	r0, r5
 8001f70:	0052      	lsls	r2, r2, #1
 8001f72:	fbb0 f9f2 	udiv	r9, r0, r2
 8001f76:	f7ff fdf5 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8001f7a:	e7b9      	b.n	8001ef0 <UART_SetConfig+0xb0>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d002      	beq.n	8001f86 <UART_SetConfig+0x146>
 8001f80:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <UART_SetConfig+0x230>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d141      	bne.n	800200a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f86:	f7ff fdfd 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001f8a:	6867      	ldr	r7, [r4, #4]
 8001f8c:	2519      	movs	r5, #25
 8001f8e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f92:	fb05 f300 	mul.w	r3, r5, r0
 8001f96:	00bf      	lsls	r7, r7, #2
 8001f98:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f9c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fa0:	011f      	lsls	r7, r3, #4
 8001fa2:	f7ff fdef 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001fa6:	6863      	ldr	r3, [r4, #4]
 8001fa8:	4368      	muls	r0, r5
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fbb0 f6f3 	udiv	r6, r0, r3
 8001fb0:	f7ff fde8 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001fb4:	6863      	ldr	r3, [r4, #4]
 8001fb6:	4368      	muls	r0, r5
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fc2:	fb08 6313 	mls	r3, r8, r3, r6
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	3332      	adds	r3, #50	; 0x32
 8001fca:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fce:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001fd2:	f7ff fdd7 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001fd6:	6862      	ldr	r2, [r4, #4]
 8001fd8:	4368      	muls	r0, r5
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	fbb0 f9f2 	udiv	r9, r0, r2
 8001fe0:	f7ff fdd0 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	4368      	muls	r0, r5
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ff4:	fb08 9313 	mls	r3, r8, r3, r9
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	3332      	adds	r3, #50	; 0x32
 8001ffc:	fbb3 f3f8 	udiv	r3, r3, r8
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	4333      	orrs	r3, r6
 8002006:	443b      	add	r3, r7
 8002008:	e784      	b.n	8001f14 <UART_SetConfig+0xd4>
 800200a:	f7ff fdab 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 800200e:	6867      	ldr	r7, [r4, #4]
 8002010:	2519      	movs	r5, #25
 8002012:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002016:	fb05 f300 	mul.w	r3, r5, r0
 800201a:	00bf      	lsls	r7, r7, #2
 800201c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002020:	fbb3 f3f8 	udiv	r3, r3, r8
 8002024:	011f      	lsls	r7, r3, #4
 8002026:	f7ff fd9d 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	4368      	muls	r0, r5
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fbb0 f6f3 	udiv	r6, r0, r3
 8002034:	f7ff fd96 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8002038:	6863      	ldr	r3, [r4, #4]
 800203a:	4368      	muls	r0, r5
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	fbb3 f3f8 	udiv	r3, r3, r8
 8002046:	fb08 6313 	mls	r3, r8, r3, r6
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	3332      	adds	r3, #50	; 0x32
 800204e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002052:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002056:	f7ff fd85 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 800205a:	6862      	ldr	r2, [r4, #4]
 800205c:	4368      	muls	r0, r5
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	fbb0 f9f2 	udiv	r9, r0, r2
 8002064:	f7ff fd7e 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8002068:	e7bc      	b.n	8001fe4 <UART_SetConfig+0x1a4>
 800206a:	bf00      	nop
 800206c:	40011000 	.word	0x40011000
 8002070:	40011400 	.word	0x40011400

08002074 <HAL_UART_Init>:
{
 8002074:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002076:	4604      	mov	r4, r0
 8002078:	b340      	cbz	r0, 80020cc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800207a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800207e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002082:	b91b      	cbnz	r3, 800208c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002084:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002088:	f00a f906 	bl	800c298 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800208c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800208e:	2324      	movs	r3, #36	; 0x24
 8002090:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002094:	68d3      	ldr	r3, [r2, #12]
 8002096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800209a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800209c:	4620      	mov	r0, r4
 800209e:	f7ff fecf 	bl	8001e40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80020be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80020c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80020c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80020ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020cc:	2001      	movs	r0, #1
 80020ce:	e7fc      	b.n	80020ca <HAL_UART_Init+0x56>

080020d0 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80020d0:	6883      	ldr	r3, [r0, #8]
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80020d8:	2000      	movs	r0, #0
 80020da:	4770      	bx	lr

080020dc <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80020dc:	6883      	ldr	r3, [r0, #8]
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80020e4:	2000      	movs	r0, #0
 80020e6:	4770      	bx	lr

080020e8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80020e8:	0189      	lsls	r1, r1, #6
 80020ea:	f041 0120 	orr.w	r1, r1, #32
 80020ee:	4a06      	ldr	r2, [pc, #24]	; (8002108 <USB_FlushTxFifo+0x20>)
 80020f0:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80020f2:	3a01      	subs	r2, #1
 80020f4:	d005      	beq.n	8002102 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80020f6:	6903      	ldr	r3, [r0, #16]
 80020f8:	f013 0320 	ands.w	r3, r3, #32
 80020fc:	d1f9      	bne.n	80020f2 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80020fe:	4618      	mov	r0, r3
 8002100:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	00030d41 	.word	0x00030d41

0800210c <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800210c:	2310      	movs	r3, #16
 800210e:	4a06      	ldr	r2, [pc, #24]	; (8002128 <USB_FlushRxFifo+0x1c>)
 8002110:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002112:	3a01      	subs	r2, #1
 8002114:	d005      	beq.n	8002122 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002116:	6903      	ldr	r3, [r0, #16]
 8002118:	f013 0310 	ands.w	r3, r3, #16
 800211c:	d1f9      	bne.n	8002112 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800211e:	4618      	mov	r0, r3
 8002120:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002122:	2003      	movs	r0, #3
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	00030d41 	.word	0x00030d41

0800212c <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 800212c:	3203      	adds	r2, #3
 800212e:	0892      	lsrs	r2, r2, #2
 8002130:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002134:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002138:	4291      	cmp	r1, r2
 800213a:	d101      	bne.n	8002140 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 800213c:	4608      	mov	r0, r1
 800213e:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002140:	6803      	ldr	r3, [r0, #0]
 8002142:	f841 3b04 	str.w	r3, [r1], #4
 8002146:	e7f7      	b.n	8002138 <USB_ReadPacket+0xc>

08002148 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002148:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800214a:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 800214c:	4010      	ands	r0, r2
 800214e:	4770      	bx	lr

08002150 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002150:	6940      	ldr	r0, [r0, #20]
}
 8002152:	f000 0001 	and.w	r0, r0, #1
 8002156:	4770      	bx	lr

08002158 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002158:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800215c:	f023 0303 	bic.w	r3, r3, #3
{
 8002160:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002162:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8002166:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800216a:	f001 0303 	and.w	r3, r1, #3
 800216e:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 8002170:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002172:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8002176:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 800217a:	d104      	bne.n	8002186 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 800217c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002180:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 8002182:	2000      	movs	r0, #0
 8002184:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 8002186:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8002188:	bf04      	itt	eq
 800218a:	f241 7370 	movweq	r3, #6000	; 0x1770
 800218e:	6053      	streq	r3, [r2, #4]
 8002190:	e7f7      	b.n	8002182 <USB_InitFSLSPClkSel+0x2a>

08002192 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002192:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8002194:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002198:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800219a:	9b01      	ldr	r3, [sp, #4]
 800219c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80021a0:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	04da      	lsls	r2, r3, #19
 80021a6:	d406      	bmi.n	80021b6 <USB_DriveVbus+0x24>
 80021a8:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80021aa:	bf02      	ittt	eq
 80021ac:	9b01      	ldreq	r3, [sp, #4]
 80021ae:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80021b2:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	04db      	lsls	r3, r3, #19
 80021ba:	d505      	bpl.n	80021c8 <USB_DriveVbus+0x36>
 80021bc:	b921      	cbnz	r1, 80021c8 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80021be:	9b01      	ldr	r3, [sp, #4]
 80021c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021c4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	b002      	add	sp, #8
 80021cc:	4770      	bx	lr

080021ce <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	b29b      	uxth	r3, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0c9b      	lsrs	r3, r3, #18
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <USB_HC_Halt+0x40>
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8002228:	2b02      	cmp	r3, #2
 800222a:	d15c      	bne.n	80022e6 <USB_HC_Halt+0xfa>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	0151      	lsls	r1, r2, #5
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	440a      	add	r2, r1
 8002242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800224a:	6013      	str	r3, [r2, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d133      	bne.n	80022c0 <USB_HC_Halt+0xd4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	0151      	lsls	r1, r2, #5
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	440a      	add	r2, r1
 800226e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002276:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	0151      	lsls	r1, r2, #5
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	440a      	add	r2, r1
 800228e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002296:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a4:	d81d      	bhi.n	80022e2 <USB_HC_Halt+0xf6>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022bc:	d0ec      	beq.n	8002298 <USB_HC_Halt+0xac>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80022be:	e06f      	b.n	80023a0 <USB_HC_Halt+0x1b4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	0151      	lsls	r1, r2, #5
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	440a      	add	r2, r1
 80022d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022de:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80022e0:	e05e      	b.n	80023a0 <USB_HC_Halt+0x1b4>
          break;
 80022e2:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80022e4:	e05c      	b.n	80023a0 <USB_HC_Halt+0x1b4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	0151      	lsls	r1, r2, #5
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	440a      	add	r2, r1
 80022fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002304:	6013      	str	r3, [r2, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d133      	bne.n	800237c <USB_HC_Halt+0x190>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	0151      	lsls	r1, r2, #5
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	440a      	add	r2, r1
 800232a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800232e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002332:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	0151      	lsls	r1, r2, #5
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	440a      	add	r2, r1
 800234a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002352:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002360:	d81d      	bhi.n	800239e <USB_HC_Halt+0x1b2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002378:	d0ec      	beq.n	8002354 <USB_HC_Halt+0x168>
 800237a:	e011      	b.n	80023a0 <USB_HC_Halt+0x1b4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002396:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e000      	b.n	80023a0 <USB_HC_Halt+0x1b4>
          break;
 800239e:	bf00      	nop
    }
  }
  
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fe8e 	bl	80020dc <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 80023c0:	2110      	movs	r1, #16
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fe90 	bl	80020e8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff fe9f 	bl	800210c <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
 80023d2:	e01f      	b.n	8002414 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023ea:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f2:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023fa:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d9dc      	bls.n	80023d4 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
 800241e:	e034      	b.n	800248a <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002436:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800243e:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002446:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	3301      	adds	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002466:	d80c      	bhi.n	8002482 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800247a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800247e:	d0ec      	beq.n	800245a <USB_StopHost+0xac>
 8002480:	e000      	b.n	8002484 <USB_StopHost+0xd6>
        break;
 8002482:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	3301      	adds	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d9c7      	bls.n	8002420 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002496:	461a      	mov	r2, r3
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe12 	bl	80020d0 <USB_EnableGlobalInt>
  return HAL_OK;  
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 80024b6:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 80024ba:	3201      	adds	r2, #1
 80024bc:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80024c0:	7802      	ldrb	r2, [r0, #0]
 80024c2:	2a0a      	cmp	r2, #10
 80024c4:	d104      	bne.n	80024d0 <USBH_LL_IncTimer+0x1a>
 80024c6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80024ca:	b10b      	cbz	r3, 80024d0 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	4718      	bx	r3
}
 80024d0:	4770      	bx	lr

080024d2 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80024d2:	7803      	ldrb	r3, [r0, #0]
{
 80024d4:	b510      	push	{r4, lr}
 80024d6:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 80024d8:	b97b      	cbnz	r3, 80024fa <USBH_LL_Connect+0x28>
  {
    phost->device.is_connected = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 80024e0:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80024e4:	b10b      	cbz	r3, 80024ea <USBH_LL_Connect+0x18>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 80024e6:	2104      	movs	r1, #4
 80024e8:	4798      	blx	r3
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
  {
    phost->gState = HOST_DEV_ATTACHED ;
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2101      	movs	r1, #1
 80024ee:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80024f2:	f000 f907 	bl	8002704 <osMessagePut>
#endif 
  
  return USBH_OK;
}
 80024f6:	2000      	movs	r0, #0
 80024f8:	bd10      	pop	{r4, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80024fa:	7803      	ldrb	r3, [r0, #0]
 80024fc:	2b01      	cmp	r3, #1
    phost->gState = HOST_DEV_ATTACHED ;
 80024fe:	bf04      	itt	eq
 8002500:	2302      	moveq	r3, #2
 8002502:	7003      	strbeq	r3, [r0, #0]
 8002504:	e7f1      	b.n	80024ea <USBH_LL_Connect+0x18>
	...

08002508 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8002508:	b510      	push	{r4, lr}
 800250a:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 800250c:	f00a f882 	bl	800c614 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8002510:	7921      	ldrb	r1, [r4, #4]
 8002512:	4620      	mov	r0, r4
 8002514:	f000 f82b 	bl	800256e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8002518:	7961      	ldrb	r1, [r4, #5]
 800251a:	4620      	mov	r0, r4
 800251c:	f000 f827 	bl	800256e <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8002520:	2300      	movs	r3, #0
 8002522:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8002526:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800252a:	b113      	cbz	r3, 8002532 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800252c:	2105      	movs	r1, #5
 800252e:	4620      	mov	r0, r4
 8002530:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
 8002532:	4809      	ldr	r0, [pc, #36]	; (8002558 <USBH_LL_Disconnect+0x50>)
 8002534:	f00a f99c 	bl	800c870 <iprintf>
 8002538:	200a      	movs	r0, #10
 800253a:	f00a f9b1 	bl	800c8a0 <putchar>
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800253e:	4620      	mov	r0, r4
 8002540:	f00a f85a 	bl	800c5f8 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8002544:	2303      	movs	r3, #3
 8002546:	7023      	strb	r3, [r4, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2101      	movs	r1, #1
 800254c:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8002550:	f000 f8d8 	bl	8002704 <osMessagePut>
#endif 
  
  return USBH_OK;
}
 8002554:	2000      	movs	r0, #0
 8002556:	bd10      	pop	{r4, pc}
 8002558:	0800d718 	.word	0x0800d718

0800255c <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800255c:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2102      	movs	r1, #2
 8002562:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002566:	f000 f8cd 	bl	8002704 <osMessagePut>
  return USBH_OK;
}
 800256a:	2000      	movs	r0, #0
 800256c:	bd08      	pop	{r3, pc}

0800256e <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
   if(idx < 11)
 800256e:	290a      	cmp	r1, #10
 8002570:	bf9f      	itttt	ls
 8002572:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
   {
	 phost->Pipes[idx] &= 0x7FFF;
 8002576:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 800257a:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800257e:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
   }
   return USBH_OK;
}
 8002582:	2000      	movs	r0, #0
 8002584:	4770      	bx	lr

08002586 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002586:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002588:	f000 fe06 	bl	8003198 <vTaskStartScheduler>
  
  return osOK;
}
 800258c:	2000      	movs	r0, #0
 800258e:	bd08      	pop	{r3, pc}

08002590 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002590:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8002594:	b10b      	cbz	r3, 800259a <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8002596:	f000 be49 	b.w	800322c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800259a:	f000 be41 	b.w	8003220 <xTaskGetTickCount>

0800259e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800259e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025a0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80025a4:	8a02      	ldrh	r2, [r0, #16]
{
 80025a6:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025a8:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 80025ac:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80025ae:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80025b0:	bf14      	ite	ne
 80025b2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025b4:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025b6:	a803      	add	r0, sp, #12
 80025b8:	e9cd 4000 	strd	r4, r0, [sp]
 80025bc:	4628      	mov	r0, r5
 80025be:	f000 fd1b 	bl	8002ff8 <xTaskCreate>
 80025c2:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025c4:	bf0c      	ite	eq
 80025c6:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80025c8:	2000      	movne	r0, #0
}
 80025ca:	b005      	add	sp, #20
 80025cc:	bd30      	pop	{r4, r5, pc}

080025ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025ce:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025d0:	2800      	cmp	r0, #0
 80025d2:	bf08      	it	eq
 80025d4:	2001      	moveq	r0, #1
 80025d6:	f000 ff39 	bl	800344c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025da:	2000      	movs	r0, #0
 80025dc:	bd08      	pop	{r3, pc}

080025de <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 bad2 	b.w	8002b88 <xQueueCreateMutex>

080025e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80025e4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80025e6:	2400      	movs	r4, #0
{
 80025e8:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80025ea:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80025ec:	b1e8      	cbz	r0, 800262a <osMutexWait+0x46>
 80025ee:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80025f2:	b1a3      	cbz	r3, 800261e <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80025f4:	aa01      	add	r2, sp, #4
 80025f6:	4621      	mov	r1, r4
 80025f8:	f000 fc4e 	bl	8002e98 <xQueueReceiveFromISR>
 80025fc:	2801      	cmp	r0, #1
 80025fe:	d002      	beq.n	8002606 <osMutexWait+0x22>
      return osErrorOS;
 8002600:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002602:	b002      	add	sp, #8
 8002604:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002606:	9b01      	ldr	r3, [sp, #4]
 8002608:	b13b      	cbz	r3, 800261a <osMutexWait+0x36>
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <osMutexWait+0x4c>)
 800260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	f3bf 8f6f 	isb	sy
  return osOK;
 800261a:	2000      	movs	r0, #0
 800261c:	e7f1      	b.n	8002602 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800261e:	4619      	mov	r1, r3
 8002620:	f000 fb7a 	bl	8002d18 <xQueueGenericReceive>
 8002624:	2801      	cmp	r0, #1
 8002626:	d0f8      	beq.n	800261a <osMutexWait+0x36>
 8002628:	e7ea      	b.n	8002600 <osMutexWait+0x1c>
    return osErrorParameter;
 800262a:	2080      	movs	r0, #128	; 0x80
 800262c:	e7e9      	b.n	8002602 <osMutexWait+0x1e>
 800262e:	bf00      	nop
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002634:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002636:	2400      	movs	r4, #0
 8002638:	9401      	str	r4, [sp, #4]
 800263a:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800263e:	b193      	cbz	r3, 8002666 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002640:	a901      	add	r1, sp, #4
 8002642:	f000 fb14 	bl	8002c6e <xQueueGiveFromISR>
 8002646:	2801      	cmp	r0, #1
 8002648:	d113      	bne.n	8002672 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	b913      	cbnz	r3, 8002654 <osMutexRelease+0x20>
  osStatus result = osOK;
 800264e:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8002650:	b002      	add	sp, #8
 8002652:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <osMutexRelease+0x44>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	e7f3      	b.n	800264e <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002666:	461a      	mov	r2, r3
 8002668:	4619      	mov	r1, r3
 800266a:	f000 f9db 	bl	8002a24 <xQueueGenericSend>
 800266e:	2801      	cmp	r0, #1
 8002670:	d0ed      	beq.n	800264e <osMutexRelease+0x1a>
    result = osErrorOS;
 8002672:	20ff      	movs	r0, #255	; 0xff
 8002674:	e7ec      	b.n	8002650 <osMutexRelease+0x1c>
 8002676:	bf00      	nop
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800267c:	2901      	cmp	r1, #1
{ 
 800267e:	b510      	push	{r4, lr}
 8002680:	4608      	mov	r0, r1
  if (count == 1) {
 8002682:	d10c      	bne.n	800269e <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8002684:	2203      	movs	r2, #3
 8002686:	2100      	movs	r1, #0
 8002688:	f000 f9aa 	bl	80029e0 <xQueueGenericCreate>
 800268c:	4604      	mov	r4, r0
 800268e:	b120      	cbz	r0, 800269a <osSemaphoreCreate+0x1e>
 8002690:	2300      	movs	r3, #0
 8002692:	461a      	mov	r2, r3
 8002694:	4619      	mov	r1, r3
 8002696:	f000 f9c5 	bl	8002a24 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800269a:	4620      	mov	r0, r4
 800269c:	bd10      	pop	{r4, pc}
    return NULL;
 800269e:	2400      	movs	r4, #0
 80026a0:	e7fb      	b.n	800269a <osSemaphoreCreate+0x1e>
	...

080026a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80026a4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80026a6:	2400      	movs	r4, #0
{
 80026a8:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80026aa:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80026ac:	b1e8      	cbz	r0, 80026ea <osSemaphoreWait+0x46>
 80026ae:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80026b2:	b1a3      	cbz	r3, 80026de <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80026b4:	aa01      	add	r2, sp, #4
 80026b6:	4621      	mov	r1, r4
 80026b8:	f000 fbee 	bl	8002e98 <xQueueReceiveFromISR>
 80026bc:	2801      	cmp	r0, #1
 80026be:	d002      	beq.n	80026c6 <osSemaphoreWait+0x22>
      return osErrorOS;
 80026c0:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80026c2:	b002      	add	sp, #8
 80026c4:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80026c6:	9b01      	ldr	r3, [sp, #4]
 80026c8:	b13b      	cbz	r3, 80026da <osSemaphoreWait+0x36>
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <osSemaphoreWait+0x4c>)
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
  return osOK;
 80026da:	2000      	movs	r0, #0
 80026dc:	e7f1      	b.n	80026c2 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80026de:	4619      	mov	r1, r3
 80026e0:	f000 fb1a 	bl	8002d18 <xQueueGenericReceive>
 80026e4:	2801      	cmp	r0, #1
 80026e6:	d0f8      	beq.n	80026da <osSemaphoreWait+0x36>
 80026e8:	e7ea      	b.n	80026c0 <osSemaphoreWait+0x1c>
    return osErrorParameter;
 80026ea:	2080      	movs	r0, #128	; 0x80
 80026ec:	e7e9      	b.n	80026c2 <osSemaphoreWait+0x1e>
 80026ee:	bf00      	nop
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <osSemaphoreRelease>:
 80026f4:	f7ff bf9e 	b.w	8002634 <osMutexRelease>

080026f8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80026f8:	2200      	movs	r2, #0
 80026fa:	e9d0 0100 	ldrd	r0, r1, [r0]
 80026fe:	f000 b96f 	b.w	80029e0 <xQueueGenericCreate>
	...

08002704 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8002706:	2400      	movs	r4, #0
{
 8002708:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800270a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800270c:	42a2      	cmp	r2, r4
 800270e:	bf08      	it	eq
 8002710:	2201      	moveq	r2, #1
 8002712:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8002716:	b1ab      	cbz	r3, 8002744 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002718:	4623      	mov	r3, r4
 800271a:	aa03      	add	r2, sp, #12
 800271c:	a901      	add	r1, sp, #4
 800271e:	f000 fa45 	bl	8002bac <xQueueGenericSendFromISR>
 8002722:	2801      	cmp	r0, #1
 8002724:	d002      	beq.n	800272c <osMessagePut+0x28>
      return osErrorOS;
 8002726:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8002728:	b004      	add	sp, #16
 800272a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800272c:	9b03      	ldr	r3, [sp, #12]
 800272e:	b13b      	cbz	r3, 8002740 <osMessagePut+0x3c>
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <osMessagePut+0x4c>)
 8002732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	f3bf 8f6f 	isb	sy
  return osOK;
 8002740:	2000      	movs	r0, #0
 8002742:	e7f1      	b.n	8002728 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002744:	a901      	add	r1, sp, #4
 8002746:	f000 f96d 	bl	8002a24 <xQueueGenericSend>
 800274a:	2801      	cmp	r0, #1
 800274c:	d0f8      	beq.n	8002740 <osMessagePut+0x3c>
 800274e:	e7ea      	b.n	8002726 <osMessagePut+0x22>
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002756:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8002758:	2600      	movs	r6, #0
{
 800275a:	4604      	mov	r4, r0
 800275c:	4617      	mov	r7, r2
 800275e:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8002760:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8002762:	9602      	str	r6, [sp, #8]
 8002764:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8002766:	b911      	cbnz	r1, 800276e <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8002768:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	e017      	b.n	800279e <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 800276e:	9600      	str	r6, [sp, #0]
 8002770:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8002774:	b1d3      	cbz	r3, 80027ac <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002776:	466a      	mov	r2, sp
 8002778:	a902      	add	r1, sp, #8
 800277a:	f000 fb8d 	bl	8002e98 <xQueueReceiveFromISR>
 800277e:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8002780:	bf04      	itt	eq
 8002782:	2310      	moveq	r3, #16
 8002784:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002786:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8002788:	bf18      	it	ne
 800278a:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800278c:	b13b      	cbz	r3, 800279e <osMessageGet+0x4a>
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <osMessageGet+0x70>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800279e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80027a6:	4620      	mov	r0, r4
 80027a8:	b005      	add	sp, #20
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80027ac:	a902      	add	r1, sp, #8
 80027ae:	f000 fab3 	bl	8002d18 <xQueueGenericReceive>
 80027b2:	2801      	cmp	r0, #1
 80027b4:	d101      	bne.n	80027ba <osMessageGet+0x66>
      event.status = osEventMessage;
 80027b6:	2310      	movs	r3, #16
 80027b8:	e7d7      	b.n	800276a <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80027ba:	2f00      	cmp	r7, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2300      	moveq	r3, #0
 80027c0:	2340      	movne	r3, #64	; 0x40
 80027c2:	e7d2      	b.n	800276a <osMessageGet+0x16>
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80027c8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027ca:	f000 ff83 	bl	80036d4 <xTaskGetSchedulerState>
 80027ce:	2801      	cmp	r0, #1
 80027d0:	d003      	beq.n	80027da <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80027d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80027d6:	f001 b8f5 	b.w	80039c4 <xPortSysTickHandler>
}
 80027da:	bd08      	pop	{r3, pc}

080027dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027dc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f0:	4770      	bx	lr

080027f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027f6:	4770      	bx	lr

080027f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80027f8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002804:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002806:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002808:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800280a:	3301      	adds	r3, #1
 800280c:	6003      	str	r3, [r0, #0]
}
 800280e:	4770      	bx	lr

08002810 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002810:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002812:	1c53      	adds	r3, r2, #1
{
 8002814:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002816:	d10a      	bne.n	800282e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002818:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800281e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002820:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002822:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002824:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002826:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002828:	3301      	adds	r3, #1
 800282a:	6003      	str	r3, [r0, #0]
}
 800282c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282e:	f100 0308 	add.w	r3, r0, #8
 8002832:	685c      	ldr	r4, [r3, #4]
 8002834:	6825      	ldr	r5, [r4, #0]
 8002836:	4295      	cmp	r5, r2
 8002838:	d8ef      	bhi.n	800281a <vListInsert+0xa>
 800283a:	4623      	mov	r3, r4
 800283c:	e7f9      	b.n	8002832 <vListInsert+0x22>

0800283e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800283e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002842:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002844:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002846:	6882      	ldr	r2, [r0, #8]
 8002848:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800284e:	bf08      	it	eq
 8002850:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002852:	2200      	movs	r2, #0
 8002854:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	3801      	subs	r0, #1
 800285a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800285c:	4770      	bx	lr

0800285e <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800285e:	b570      	push	{r4, r5, r6, lr}
 8002860:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002862:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002864:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002866:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002868:	b942      	cbnz	r2, 800287c <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800286a:	6805      	ldr	r5, [r0, #0]
 800286c:	b99d      	cbnz	r5, 8002896 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800286e:	6840      	ldr	r0, [r0, #4]
 8002870:	f000 ff88 	bl	8003784 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002874:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002876:	3601      	adds	r6, #1
 8002878:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800287a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800287c:	b96d      	cbnz	r5, 800289a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800287e:	6880      	ldr	r0, [r0, #8]
 8002880:	f009 ff3b 	bl	800c6fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002884:	68a3      	ldr	r3, [r4, #8]
 8002886:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002888:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800288a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800288c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800288e:	4293      	cmp	r3, r2
 8002890:	d301      	bcc.n	8002896 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002896:	2000      	movs	r0, #0
 8002898:	e7ed      	b.n	8002876 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800289a:	68c0      	ldr	r0, [r0, #12]
 800289c:	f009 ff2d 	bl	800c6fa <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028a2:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028a6:	425b      	negs	r3, r3
 80028a8:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028aa:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028ac:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028ae:	bf3e      	ittt	cc
 80028b0:	6862      	ldrcc	r2, [r4, #4]
 80028b2:	189b      	addcc	r3, r3, r2
 80028b4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80028b6:	2d02      	cmp	r5, #2
 80028b8:	d1ed      	bne.n	8002896 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ba:	b10e      	cbz	r6, 80028c0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80028bc:	3e01      	subs	r6, #1
 80028be:	e7ea      	b.n	8002896 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80028c0:	4630      	mov	r0, r6
 80028c2:	e7d8      	b.n	8002876 <prvCopyDataToQueue+0x18>

080028c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80028c4:	4603      	mov	r3, r0
 80028c6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80028ca:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028cc:	b162      	cbz	r2, 80028e8 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028ce:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028d0:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028d2:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028d4:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028d6:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028d8:	bf24      	itt	cs
 80028da:	6819      	ldrcs	r1, [r3, #0]
 80028dc:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028de:	68d9      	ldr	r1, [r3, #12]
	}
}
 80028e0:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028e4:	f009 bf09 	b.w	800c6fa <memcpy>
}
 80028e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028f2:	f000 ffff 	bl	80038f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028f6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028fa:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80028fe:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002900:	2d00      	cmp	r5, #0
 8002902:	dc14      	bgt.n	800292e <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002904:	23ff      	movs	r3, #255	; 0xff
 8002906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800290a:	f001 f815 	bl	8003938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800290e:	f000 fff1 	bl	80038f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002912:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002916:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800291a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800291c:	2d00      	cmp	r5, #0
 800291e:	dc12      	bgt.n	8002946 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002920:	23ff      	movs	r3, #255	; 0xff
 8002922:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800292a:	f001 b805 	b.w	8003938 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800292e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0e7      	beq.n	8002904 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002934:	4630      	mov	r0, r6
 8002936:	f000 fe3b 	bl	80035b0 <xTaskRemoveFromEventList>
 800293a:	b108      	cbz	r0, 8002940 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800293c:	f000 fec4 	bl	80036c8 <vTaskMissedYield>
 8002940:	3d01      	subs	r5, #1
 8002942:	b26d      	sxtb	r5, r5
 8002944:	e7dc      	b.n	8002900 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002946:	6923      	ldr	r3, [r4, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0e9      	beq.n	8002920 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800294c:	4630      	mov	r0, r6
 800294e:	f000 fe2f 	bl	80035b0 <xTaskRemoveFromEventList>
 8002952:	b108      	cbz	r0, 8002958 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002954:	f000 feb8 	bl	80036c8 <vTaskMissedYield>
 8002958:	3d01      	subs	r5, #1
 800295a:	b26d      	sxtb	r5, r5
 800295c:	e7de      	b.n	800291c <prvUnlockQueue+0x2e>
	...

08002960 <xQueueGenericReset>:
{
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002964:	4604      	mov	r4, r0
 8002966:	b940      	cbnz	r0, 800297a <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	e7fe      	b.n	8002978 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800297a:	f000 ffbb 	bl	80038f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800297e:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8002982:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002984:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002986:	4343      	muls	r3, r0
 8002988:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800298a:	1a1b      	subs	r3, r3, r0
 800298c:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800298e:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002990:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002992:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002994:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002996:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002998:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80029a0:	b995      	cbnz	r5, 80029c8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	b163      	cbz	r3, 80029c0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a6:	f104 0010 	add.w	r0, r4, #16
 80029aa:	f000 fe01 	bl	80035b0 <xTaskRemoveFromEventList>
 80029ae:	b138      	cbz	r0, 80029c0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <xQueueGenericReset+0x7c>)
 80029b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80029c0:	f000 ffba 	bl	8003938 <vPortExitCritical>
}
 80029c4:	2001      	movs	r0, #1
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029c8:	f104 0010 	add.w	r0, r4, #16
 80029cc:	f7ff ff06 	bl	80027dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029d4:	f7ff ff02 	bl	80027dc <vListInitialise>
 80029d8:	e7f2      	b.n	80029c0 <xQueueGenericReset+0x60>
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueGenericCreate>:
	{
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029e4:	4606      	mov	r6, r0
 80029e6:	b940      	cbnz	r0, 80029fa <xQueueGenericCreate+0x1a>
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029fa:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80029fc:	3048      	adds	r0, #72	; 0x48
 80029fe:	f001 f8d3 	bl	8003ba8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002a02:	4604      	mov	r4, r0
 8002a04:	b138      	cbz	r0, 8002a16 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a06:	b945      	cbnz	r5, 8002a1a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a08:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8002a0a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff ffa5 	bl	8002960 <xQueueGenericReset>
	}
 8002a16:	4620      	mov	r0, r4
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a1a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a1e:	6003      	str	r3, [r0, #0]
 8002a20:	e7f3      	b.n	8002a0a <xQueueGenericCreate+0x2a>
	...

08002a24 <xQueueGenericSend>:
{
 8002a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a28:	4688      	mov	r8, r1
 8002a2a:	9201      	str	r2, [sp, #4]
 8002a2c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b940      	cbnz	r0, 8002a44 <xQueueGenericSend+0x20>
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	e7fe      	b.n	8002a42 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a44:	b951      	cbnz	r1, 8002a5c <xQueueGenericSend+0x38>
 8002a46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a48:	b143      	cbz	r3, 8002a5c <xQueueGenericSend+0x38>
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	e7fe      	b.n	8002a5a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a5c:	2f02      	cmp	r7, #2
 8002a5e:	d10b      	bne.n	8002a78 <xQueueGenericSend+0x54>
 8002a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d008      	beq.n	8002a78 <xQueueGenericSend+0x54>
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	e7fe      	b.n	8002a76 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a78:	f000 fe2c 	bl	80036d4 <xTaskGetSchedulerState>
 8002a7c:	b950      	cbnz	r0, 8002a94 <xQueueGenericSend+0x70>
 8002a7e:	9e01      	ldr	r6, [sp, #4]
 8002a80:	b14e      	cbz	r6, 8002a96 <xQueueGenericSend+0x72>
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	e7fe      	b.n	8002a92 <xQueueGenericSend+0x6e>
 8002a94:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002a96:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8002a9a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8002b84 <xQueueGenericSend+0x160>
 8002a9e:	e037      	b.n	8002b10 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa0:	9d01      	ldr	r5, [sp, #4]
 8002aa2:	b91d      	cbnz	r5, 8002aac <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8002aa4:	f000 ff48 	bl	8003938 <vPortExitCritical>
			return errQUEUE_FULL;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e050      	b.n	8002b4e <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8002aac:	b916      	cbnz	r6, 8002ab4 <xQueueGenericSend+0x90>
					vTaskSetTimeOutState( &xTimeOut );
 8002aae:	a802      	add	r0, sp, #8
 8002ab0:	f000 fdc0 	bl	8003634 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002ab4:	f000 ff40 	bl	8003938 <vPortExitCritical>
		vTaskSuspendAll();
 8002ab8:	f000 fbaa 	bl	8003210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002abc:	f000 ff1a 	bl	80038f4 <vPortEnterCritical>
 8002ac0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ac4:	2bff      	cmp	r3, #255	; 0xff
 8002ac6:	bf08      	it	eq
 8002ac8:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002acc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ad0:	2bff      	cmp	r3, #255	; 0xff
 8002ad2:	bf08      	it	eq
 8002ad4:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002ad8:	f000 ff2e 	bl	8003938 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002adc:	a901      	add	r1, sp, #4
 8002ade:	a802      	add	r0, sp, #8
 8002ae0:	f000 fdb8 	bl	8003654 <xTaskCheckForTimeOut>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d146      	bne.n	8002b76 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ae8:	f000 ff04 	bl	80038f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002aec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d12f      	bne.n	8002b54 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002af4:	f000 ff20 	bl	8003938 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002af8:	9901      	ldr	r1, [sp, #4]
 8002afa:	f104 0010 	add.w	r0, r4, #16
 8002afe:	f000 fd3d 	bl	800357c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff fef3 	bl	80028ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b08:	f000 fc2a 	bl	8003360 <xTaskResumeAll>
 8002b0c:	b350      	cbz	r0, 8002b64 <xQueueGenericSend+0x140>
 8002b0e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002b10:	f000 fef0 	bl	80038f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d301      	bcc.n	8002b20 <xQueueGenericSend+0xfc>
 8002b1c:	2f02      	cmp	r7, #2
 8002b1e:	d1bf      	bne.n	8002aa0 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b20:	463a      	mov	r2, r7
 8002b22:	4641      	mov	r1, r8
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff fe9a 	bl	800285e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b2c:	b11b      	cbz	r3, 8002b36 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b32:	f000 fd3d 	bl	80035b0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002b36:	b138      	cbz	r0, 8002b48 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <xQueueGenericSend+0x160>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002b48:	f000 fef6 	bl	8003938 <vPortExitCritical>
				return pdPASS;
 8002b4c:	2001      	movs	r0, #1
}
 8002b4e:	b004      	add	sp, #16
 8002b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8002b54:	f000 fef0 	bl	8003938 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fec8 	bl	80028ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b5e:	f000 fbff 	bl	8003360 <xTaskResumeAll>
 8002b62:	e7d4      	b.n	8002b0e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8002b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b68:	f8ca 3000 	str.w	r3, [sl]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	e7cb      	b.n	8002b0e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7ff feb9 	bl	80028ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b7c:	f000 fbf0 	bl	8003360 <xTaskResumeAll>
 8002b80:	e792      	b.n	8002aa8 <xQueueGenericSend+0x84>
 8002b82:	bf00      	nop
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <xQueueCreateMutex>:
	{
 8002b88:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7ff ff26 	bl	80029e0 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8002b94:	4604      	mov	r4, r0
 8002b96:	b138      	cbz	r0, 8002ba8 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8002b98:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002b9a:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002b9e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f7ff ff3e 	bl	8002a24 <xQueueGenericSend>
	}
 8002ba8:	4620      	mov	r0, r4
 8002baa:	bd10      	pop	{r4, pc}

08002bac <xQueueGenericSendFromISR>:
{
 8002bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb0:	4689      	mov	r9, r1
 8002bb2:	4690      	mov	r8, r2
 8002bb4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	b940      	cbnz	r0, 8002bcc <xQueueGenericSendFromISR+0x20>
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	e7fe      	b.n	8002bca <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bcc:	b951      	cbnz	r1, 8002be4 <xQueueGenericSendFromISR+0x38>
 8002bce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bd0:	b143      	cbz	r3, 8002be4 <xQueueGenericSendFromISR+0x38>
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	e7fe      	b.n	8002be2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be4:	2f02      	cmp	r7, #2
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericSendFromISR+0x54>
 8002be8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d008      	beq.n	8002c00 <xQueueGenericSendFromISR+0x54>
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	e7fe      	b.n	8002bfe <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c00:	f000 ff80 	bl	8003b04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c04:	f3ef 8611 	mrs	r6, BASEPRI
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d301      	bcc.n	8002c24 <xQueueGenericSendFromISR+0x78>
 8002c20:	2f02      	cmp	r7, #2
 8002c22:	d122      	bne.n	8002c6a <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c24:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c28:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c2a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fe15 	bl	800285e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002c34:	1c6b      	adds	r3, r5, #1
 8002c36:	d113      	bne.n	8002c60 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c3a:	b90b      	cbnz	r3, 8002c40 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e00b      	b.n	8002c58 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c44:	f000 fcb4 	bl	80035b0 <xTaskRemoveFromEventList>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d0f7      	beq.n	8002c3c <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8002c4c:	f1b8 0f00 	cmp.w	r8, #0
 8002c50:	d0f4      	beq.n	8002c3c <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c52:	2001      	movs	r0, #1
 8002c54:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c58:	f386 8811 	msr	BASEPRI, r6
}
 8002c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c60:	3501      	adds	r5, #1
 8002c62:	b26d      	sxtb	r5, r5
 8002c64:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002c68:	e7e8      	b.n	8002c3c <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e7f4      	b.n	8002c58 <xQueueGenericSendFromISR+0xac>

08002c6e <xQueueGiveFromISR>:
{
 8002c6e:	b570      	push	{r4, r5, r6, lr}
 8002c70:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002c72:	4604      	mov	r4, r0
 8002c74:	b940      	cbnz	r0, 8002c88 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	e7fe      	b.n	8002c86 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c8a:	b143      	cbz	r3, 8002c9e <xQueueGiveFromISR+0x30>
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002c9e:	6803      	ldr	r3, [r0, #0]
 8002ca0:	b953      	cbnz	r3, 8002cb8 <xQueueGiveFromISR+0x4a>
 8002ca2:	6843      	ldr	r3, [r0, #4]
 8002ca4:	b143      	cbz	r3, 8002cb8 <xQueueGiveFromISR+0x4a>
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cb8:	f000 ff24 	bl	8003b04 <vPortValidateInterruptPriority>
	__asm volatile
 8002cbc:	f3ef 8611 	mrs	r6, BASEPRI
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002cd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d91c      	bls.n	8002d12 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002cdc:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cde:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002ce0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	d110      	bne.n	8002d08 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ce8:	b90b      	cbnz	r3, 8002cee <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8002cea:	2001      	movs	r0, #1
 8002cec:	e009      	b.n	8002d02 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cf2:	f000 fc5d 	bl	80035b0 <xTaskRemoveFromEventList>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d0f7      	beq.n	8002cea <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8002cfa:	2d00      	cmp	r5, #0
 8002cfc:	d0f5      	beq.n	8002cea <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cfe:	2001      	movs	r0, #1
 8002d00:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002d02:	f386 8811 	msr	BASEPRI, r6
}
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d10:	e7eb      	b.n	8002cea <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8002d12:	2000      	movs	r0, #0
 8002d14:	e7f5      	b.n	8002d02 <xQueueGiveFromISR+0x94>
	...

08002d18 <xQueueGenericReceive>:
{
 8002d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	460f      	mov	r7, r1
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8002d22:	4604      	mov	r4, r0
 8002d24:	b940      	cbnz	r0, 8002d38 <xQueueGenericReceive+0x20>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	e7fe      	b.n	8002d36 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d38:	b951      	cbnz	r1, 8002d50 <xQueueGenericReceive+0x38>
 8002d3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d3c:	b143      	cbz	r3, 8002d50 <xQueueGenericReceive+0x38>
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d50:	f000 fcc0 	bl	80036d4 <xTaskGetSchedulerState>
 8002d54:	b950      	cbnz	r0, 8002d6c <xQueueGenericReceive+0x54>
 8002d56:	9d01      	ldr	r5, [sp, #4]
 8002d58:	b14d      	cbz	r5, 8002d6e <xQueueGenericReceive+0x56>
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	e7fe      	b.n	8002d6a <xQueueGenericReceive+0x52>
 8002d6c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8002d6e:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002d72:	f8df a120 	ldr.w	sl, [pc, #288]	; 8002e94 <xQueueGenericReceive+0x17c>
 8002d76:	e055      	b.n	8002e24 <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002d7a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d074      	beq.n	8002e6a <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d84:	e066      	b.n	8002e54 <xQueueGenericReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d86:	9b01      	ldr	r3, [sp, #4]
 8002d88:	b91b      	cbnz	r3, 8002d92 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 8002d8a:	f000 fdd5 	bl	8003938 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002d8e:	2000      	movs	r0, #0
 8002d90:	e06e      	b.n	8002e70 <xQueueGenericReceive+0x158>
				else if( xEntryTimeSet == pdFALSE )
 8002d92:	b915      	cbnz	r5, 8002d9a <xQueueGenericReceive+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 8002d94:	a802      	add	r0, sp, #8
 8002d96:	f000 fc4d 	bl	8003634 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002d9a:	f000 fdcd 	bl	8003938 <vPortExitCritical>
		vTaskSuspendAll();
 8002d9e:	f000 fa37 	bl	8003210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da2:	f000 fda7 	bl	80038f4 <vPortEnterCritical>
 8002da6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	bf08      	it	eq
 8002dae:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002db2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002db6:	2bff      	cmp	r3, #255	; 0xff
 8002db8:	bf08      	it	eq
 8002dba:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002dbe:	f000 fdbb 	bl	8003938 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc2:	a901      	add	r1, sp, #4
 8002dc4:	a802      	add	r0, sp, #8
 8002dc6:	f000 fc45 	bl	8003654 <xTaskCheckForTimeOut>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d153      	bne.n	8002e76 <xQueueGenericReceive+0x15e>
	taskENTER_CRITICAL();
 8002dce:	f000 fd91 	bl	80038f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dd4:	b9f3      	cbnz	r3, 8002e14 <xQueueGenericReceive+0xfc>
	taskEXIT_CRITICAL();
 8002dd6:	f000 fdaf 	bl	8003938 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	b933      	cbnz	r3, 8002dec <xQueueGenericReceive+0xd4>
						taskENTER_CRITICAL();
 8002dde:	f000 fd89 	bl	80038f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002de2:	6860      	ldr	r0, [r4, #4]
 8002de4:	f000 fc86 	bl	80036f4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002de8:	f000 fda6 	bl	8003938 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dec:	9901      	ldr	r1, [sp, #4]
 8002dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002df2:	f000 fbc3 	bl	800357c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff fd79 	bl	80028ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dfc:	f000 fab0 	bl	8003360 <xTaskResumeAll>
 8002e00:	b978      	cbnz	r0, 8002e22 <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
 8002e02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e06:	f8ca 3000 	str.w	r3, [sl]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	e006      	b.n	8002e22 <xQueueGenericReceive+0x10a>
	taskEXIT_CRITICAL();
 8002e14:	f000 fd90 	bl	8003938 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7ff fd68 	bl	80028ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e1e:	f000 fa9f 	bl	8003360 <xTaskResumeAll>
 8002e22:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8002e24:	f000 fd66 	bl	80038f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	d0ab      	beq.n	8002d86 <xQueueGenericReceive+0x6e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e2e:	4639      	mov	r1, r7
 8002e30:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002e32:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e34:	f7ff fd46 	bl	80028c4 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002e38:	f1b9 0f00 	cmp.w	r9, #0
 8002e3c:	d19c      	bne.n	8002d78 <xQueueGenericReceive+0x60>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e3e:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002e40:	3e01      	subs	r6, #1
 8002e42:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e44:	b913      	cbnz	r3, 8002e4c <xQueueGenericReceive+0x134>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002e46:	f000 fced 	bl	8003824 <pvTaskIncrementMutexHeldCount>
 8002e4a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e4c:	6923      	ldr	r3, [r4, #16]
 8002e4e:	b163      	cbz	r3, 8002e6a <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e50:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e54:	f000 fbac 	bl	80035b0 <xTaskRemoveFromEventList>
 8002e58:	b138      	cbz	r0, 8002e6a <xQueueGenericReceive+0x152>
							queueYIELD_IF_USING_PREEMPTION();
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <xQueueGenericReceive+0x17c>)
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002e6a:	f000 fd65 	bl	8003938 <vPortExitCritical>
				return pdPASS;
 8002e6e:	2001      	movs	r0, #1
}
 8002e70:	b004      	add	sp, #16
 8002e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			prvUnlockQueue( pxQueue );
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff fd39 	bl	80028ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e7c:	f000 fa70 	bl	8003360 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002e80:	f000 fd38 	bl	80038f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f43f af7f 	beq.w	8002d8a <xQueueGenericReceive+0x72>
	taskEXIT_CRITICAL();
 8002e8c:	f000 fd54 	bl	8003938 <vPortExitCritical>
 8002e90:	e7c7      	b.n	8002e22 <xQueueGenericReceive+0x10a>
 8002e92:	bf00      	nop
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <xQueueReceiveFromISR>:
{
 8002e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e9c:	4689      	mov	r9, r1
 8002e9e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	b940      	cbnz	r0, 8002eb6 <xQueueReceiveFromISR+0x1e>
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eb6:	b951      	cbnz	r1, 8002ece <xQueueReceiveFromISR+0x36>
 8002eb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002eba:	b143      	cbz	r3, 8002ece <xQueueReceiveFromISR+0x36>
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	e7fe      	b.n	8002ecc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ece:	f000 fe19 	bl	8003b04 <vPortValidateInterruptPriority>
	__asm volatile
 8002ed2:	f3ef 8711 	mrs	r7, BASEPRI
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ee6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee8:	b31c      	cbz	r4, 8002f32 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002eea:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eee:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ef0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f7ff fce6 	bl	80028c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002ef8:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002efa:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002efc:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002efe:	d113      	bne.n	8002f28 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f00:	692b      	ldr	r3, [r5, #16]
 8002f02:	b90b      	cbnz	r3, 8002f08 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8002f04:	2001      	movs	r0, #1
 8002f06:	e00b      	b.n	8002f20 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f08:	f105 0010 	add.w	r0, r5, #16
 8002f0c:	f000 fb50 	bl	80035b0 <xTaskRemoveFromEventList>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d0f7      	beq.n	8002f04 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8002f14:	f1b8 0f00 	cmp.w	r8, #0
 8002f18:	d0f4      	beq.n	8002f04 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002f20:	f387 8811 	msr	BASEPRI, r7
}
 8002f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002f28:	3601      	adds	r6, #1
 8002f2a:	b276      	sxtb	r6, r6
 8002f2c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002f30:	e7e8      	b.n	8002f04 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8002f32:	4620      	mov	r0, r4
 8002f34:	e7f4      	b.n	8002f20 <xQueueReceiveFromISR+0x88>

08002f36 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	e7fe      	b.n	8002f46 <prvTaskIsTaskSuspended.part.0+0x10>

08002f48 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f48:	4a06      	ldr	r2, [pc, #24]	; (8002f64 <prvResetNextTaskUnblockTime+0x1c>)
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <prvResetNextTaskUnblockTime+0x20>)
 8002f50:	b919      	cbnz	r1, 8002f5a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f52:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f56:	601a      	str	r2, [r3, #0]
	}
}
 8002f58:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f5e:	68d2      	ldr	r2, [r2, #12]
 8002f60:	6852      	ldr	r2, [r2, #4]
 8002f62:	e7f8      	b.n	8002f56 <prvResetNextTaskUnblockTime+0xe>
 8002f64:	20000098 	.word	0x20000098
 8002f68:	20000170 	.word	0x20000170

08002f6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f70:	4e1b      	ldr	r6, [pc, #108]	; (8002fe0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002f72:	681c      	ldr	r4, [r3, #0]
{
 8002f74:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f76:	6830      	ldr	r0, [r6, #0]
 8002f78:	3004      	adds	r0, #4
{
 8002f7a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f7c:	f7ff fc5f 	bl	800283e <uxListRemove>
 8002f80:	4633      	mov	r3, r6
 8002f82:	b940      	cbnz	r0, 8002f96 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002f84:	6831      	ldr	r1, [r6, #0]
 8002f86:	4e17      	ldr	r6, [pc, #92]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002f88:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002f8a:	6832      	ldr	r2, [r6, #0]
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	4088      	lsls	r0, r1
 8002f90:	ea22 0200 	bic.w	r2, r2, r0
 8002f94:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f96:	1c6a      	adds	r2, r5, #1
 8002f98:	d107      	bne.n	8002faa <prvAddCurrentTaskToDelayedList+0x3e>
 8002f9a:	b137      	cbz	r7, 8002faa <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002fa0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fa6:	f7ff bc27 	b.w	80027f8 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	1964      	adds	r4, r4, r5
 8002fae:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002fb0:	d307      	bcc.n	8002fc2 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <prvAddCurrentTaskToDelayedList+0x80>)
 8002fb4:	6810      	ldr	r0, [r2, #0]
 8002fb6:	6819      	ldr	r1, [r3, #0]
}
 8002fb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fbc:	3104      	adds	r1, #4
 8002fbe:	f7ff bc27 	b.w	8002810 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <prvAddCurrentTaskToDelayedList+0x84>)
 8002fc4:	6810      	ldr	r0, [r2, #0]
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	3104      	adds	r1, #4
 8002fca:	f7ff fc21 	bl	8002810 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <prvAddCurrentTaskToDelayedList+0x88>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002fd4:	bf88      	it	hi
 8002fd6:	601c      	strhi	r4, [r3, #0]
}
 8002fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200001b8 	.word	0x200001b8
 8002fe0:	20000094 	.word	0x20000094
 8002fe4:	20000140 	.word	0x20000140
 8002fe8:	20000190 	.word	0x20000190
 8002fec:	2000009c 	.word	0x2000009c
 8002ff0:	20000098 	.word	0x20000098
 8002ff4:	20000170 	.word	0x20000170

08002ff8 <xTaskCreate>:
	{
 8002ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003000:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003002:	4650      	mov	r0, sl
	{
 8003004:	460f      	mov	r7, r1
 8003006:	4699      	mov	r9, r3
 8003008:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800300a:	f000 fdcd 	bl	8003ba8 <pvPortMalloc>
			if( pxStack != NULL )
 800300e:	4605      	mov	r5, r0
 8003010:	2800      	cmp	r0, #0
 8003012:	f000 8097 	beq.w	8003144 <xTaskCreate+0x14c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003016:	2054      	movs	r0, #84	; 0x54
 8003018:	f000 fdc6 	bl	8003ba8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800301c:	4604      	mov	r4, r0
 800301e:	2800      	cmp	r0, #0
 8003020:	f000 808d 	beq.w	800313e <xTaskCreate+0x146>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003024:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003028:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800302a:	4455      	add	r5, sl
 800302c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800302e:	f025 0a07 	bic.w	sl, r5, #7
 8003032:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003036:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003038:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800303c:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003040:	7819      	ldrb	r1, [r3, #0]
 8003042:	b109      	cbz	r1, 8003048 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003044:	429f      	cmp	r7, r3
 8003046:	d1f7      	bne.n	8003038 <xTaskCreate+0x40>
 8003048:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800304a:	2d06      	cmp	r5, #6
 800304c:	bf28      	it	cs
 800304e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003050:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003054:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003056:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8003058:	e9c4 5b11 	strd	r5, fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800305c:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800305e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003062:	f7ff fbc6 	bl	80027f2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003066:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800306a:	f104 0018 	add.w	r0, r4, #24
 800306e:	f7ff fbc0 	bl	80027f2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003072:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003076:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003078:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800307a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800307c:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003080:	464a      	mov	r2, r9
 8003082:	4641      	mov	r1, r8
 8003084:	4650      	mov	r0, sl
 8003086:	f000 fc0b 	bl	80038a0 <pxPortInitialiseStack>
 800308a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800308c:	b106      	cbz	r6, 8003090 <xTaskCreate+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800308e:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8003090:	f000 fc30 	bl	80038f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8003096:	4e33      	ldr	r6, [pc, #204]	; (8003164 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003190 <xTaskCreate+0x198>
 800309e:	3201      	adds	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80030a2:	6835      	ldr	r5, [r6, #0]
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	d150      	bne.n	800314a <xTaskCreate+0x152>
			pxCurrentTCB = pxNewTCB;
 80030a8:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11f      	bne.n	80030f0 <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030b0:	f04f 0914 	mov.w	r9, #20
 80030b4:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b8:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030ba:	f7ff fb8f 	bl	80027dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030be:	2d07      	cmp	r5, #7
 80030c0:	d1f8      	bne.n	80030b4 <xTaskCreate+0xbc>
	vListInitialise( &xDelayedTaskList1 );
 80030c2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003194 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80030c6:	4d28      	ldr	r5, [pc, #160]	; (8003168 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80030c8:	4648      	mov	r0, r9
 80030ca:	f7ff fb87 	bl	80027dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030ce:	4628      	mov	r0, r5
 80030d0:	f7ff fb84 	bl	80027dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030d4:	4825      	ldr	r0, [pc, #148]	; (800316c <xTaskCreate+0x174>)
 80030d6:	f7ff fb81 	bl	80027dc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80030da:	4825      	ldr	r0, [pc, #148]	; (8003170 <xTaskCreate+0x178>)
 80030dc:	f7ff fb7e 	bl	80027dc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80030e0:	4824      	ldr	r0, [pc, #144]	; (8003174 <xTaskCreate+0x17c>)
 80030e2:	f7ff fb7b 	bl	80027dc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <xTaskCreate+0x180>)
 80030e8:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <xTaskCreate+0x184>)
 80030ee:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80030f0:	4a23      	ldr	r2, [pc, #140]	; (8003180 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80030f2:	4924      	ldr	r1, [pc, #144]	; (8003184 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80030f4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80030f6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80030f8:	3301      	adds	r3, #1
 80030fa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80030fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030fe:	2501      	movs	r5, #1
 8003100:	fa05 f302 	lsl.w	r3, r5, r2
 8003104:	4303      	orrs	r3, r0
 8003106:	2014      	movs	r0, #20
 8003108:	600b      	str	r3, [r1, #0]
 800310a:	fb00 8002 	mla	r0, r0, r2, r8
 800310e:	4639      	mov	r1, r7
 8003110:	f7ff fb72 	bl	80027f8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003114:	f000 fc10 	bl	8003938 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <xTaskCreate+0x190>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b163      	cbz	r3, 8003138 <xTaskCreate+0x140>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800311e:	6833      	ldr	r3, [r6, #0]
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003124:	429a      	cmp	r2, r3
 8003126:	d207      	bcs.n	8003138 <xTaskCreate+0x140>
			taskYIELD_IF_USING_PREEMPTION();
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <xTaskCreate+0x194>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
	}
 8003138:	4628      	mov	r0, r5
 800313a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800313e:	4628      	mov	r0, r5
 8003140:	f000 fdbe 	bl	8003cc0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003144:	f04f 35ff 	mov.w	r5, #4294967295
 8003148:	e7f6      	b.n	8003138 <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <xTaskCreate+0x190>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ce      	bne.n	80030f0 <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003152:	6833      	ldr	r3, [r6, #0]
 8003154:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800315a:	bf28      	it	cs
 800315c:	6034      	strcs	r4, [r6, #0]
 800315e:	e7c7      	b.n	80030f0 <xTaskCreate+0xf8>
 8003160:	2000012c 	.word	0x2000012c
 8003164:	20000094 	.word	0x20000094
 8003168:	20000158 	.word	0x20000158
 800316c:	20000178 	.word	0x20000178
 8003170:	200001a4 	.word	0x200001a4
 8003174:	20000190 	.word	0x20000190
 8003178:	20000098 	.word	0x20000098
 800317c:	2000009c 	.word	0x2000009c
 8003180:	2000013c 	.word	0x2000013c
 8003184:	20000140 	.word	0x20000140
 8003188:	2000018c 	.word	0x2000018c
 800318c:	e000ed04 	.word	0xe000ed04
 8003190:	200000a0 	.word	0x200000a0
 8003194:	20000144 	.word	0x20000144

08003198 <vTaskStartScheduler>:
{
 8003198:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <vTaskStartScheduler+0x60>)
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2400      	movs	r4, #0
 80031a0:	9400      	str	r4, [sp, #0]
 80031a2:	4623      	mov	r3, r4
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	4915      	ldr	r1, [pc, #84]	; (80031fc <vTaskStartScheduler+0x64>)
 80031a8:	4815      	ldr	r0, [pc, #84]	; (8003200 <vTaskStartScheduler+0x68>)
 80031aa:	f7ff ff25 	bl	8002ff8 <xTaskCreate>
	if( xReturn == pdPASS )
 80031ae:	2801      	cmp	r0, #1
 80031b0:	d114      	bne.n	80031dc <vTaskStartScheduler+0x44>
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <vTaskStartScheduler+0x6c>)
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031ca:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <vTaskStartScheduler+0x70>)
 80031cc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <vTaskStartScheduler+0x74>)
 80031d0:	601c      	str	r4, [r3, #0]
}
 80031d2:	b002      	add	sp, #8
 80031d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80031d8:	f000 bc1e 	b.w	8003a18 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031dc:	3001      	adds	r0, #1
 80031de:	d108      	bne.n	80031f2 <vTaskStartScheduler+0x5a>
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	e7fe      	b.n	80031f0 <vTaskStartScheduler+0x58>
}
 80031f2:	b002      	add	sp, #8
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	bf00      	nop
 80031f8:	2000016c 	.word	0x2000016c
 80031fc:	0800d730 	.word	0x0800d730
 8003200:	08003495 	.word	0x08003495
 8003204:	20000170 	.word	0x20000170
 8003208:	2000018c 	.word	0x2000018c
 800320c:	200001b8 	.word	0x200001b8

08003210 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003210:	4a02      	ldr	r2, [pc, #8]	; (800321c <vTaskSuspendAll+0xc>)
 8003212:	6813      	ldr	r3, [r2, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000138 	.word	0x20000138

08003220 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003220:	4b01      	ldr	r3, [pc, #4]	; (8003228 <xTaskGetTickCount+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	200001b8 	.word	0x200001b8

0800322c <xTaskGetTickCountFromISR>:
{
 800322c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800322e:	f000 fc69 	bl	8003b04 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003232:	4b01      	ldr	r3, [pc, #4]	; (8003238 <xTaskGetTickCountFromISR+0xc>)
 8003234:	6818      	ldr	r0, [r3, #0]
}
 8003236:	bd08      	pop	{r3, pc}
 8003238:	200001b8 	.word	0x200001b8

0800323c <xTaskIncrementTick>:
{
 800323c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003240:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <xTaskIncrementTick+0xf8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d16e      	bne.n	8003326 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <xTaskIncrementTick+0xfc>)
 800324a:	681c      	ldr	r4, [r3, #0]
 800324c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800324e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003250:	b9bc      	cbnz	r4, 8003282 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <xTaskIncrementTick+0x100>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	b142      	cbz	r2, 800326c <xTaskIncrementTick+0x30>
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	e7fe      	b.n	800326a <xTaskIncrementTick+0x2e>
 800326c:	4a34      	ldr	r2, [pc, #208]	; (8003340 <xTaskIncrementTick+0x104>)
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	6810      	ldr	r0, [r2, #0]
 8003272:	6018      	str	r0, [r3, #0]
 8003274:	6011      	str	r1, [r2, #0]
 8003276:	4a33      	ldr	r2, [pc, #204]	; (8003344 <xTaskIncrementTick+0x108>)
 8003278:	6813      	ldr	r3, [r2, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	f7ff fe63 	bl	8002f48 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003282:	4d31      	ldr	r5, [pc, #196]	; (8003348 <xTaskIncrementTick+0x10c>)
 8003284:	4f31      	ldr	r7, [pc, #196]	; (800334c <xTaskIncrementTick+0x110>)
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 800328a:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800328e:	d911      	bls.n	80032b4 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <xTaskIncrementTick+0x114>)
 8003294:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003296:	2214      	movs	r2, #20
 8003298:	434a      	muls	r2, r1
 800329a:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800329c:	2a02      	cmp	r2, #2
 800329e:	bf28      	it	cs
 80032a0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <xTaskIncrementTick+0x118>)
 80032a6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80032a8:	2a00      	cmp	r2, #0
}
 80032aa:	bf0c      	ite	eq
 80032ac:	4658      	moveq	r0, fp
 80032ae:	2001      	movne	r0, #1
 80032b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b4:	f8df a084 	ldr.w	sl, [pc, #132]	; 800333c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80032b8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800335c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032bc:	f8da 2000 	ldr.w	r2, [sl]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	b91a      	cbnz	r2, 80032cc <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	602a      	str	r2, [r5, #0]
					break;
 80032ca:	e7e1      	b.n	8003290 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032cc:	f8da 2000 	ldr.w	r2, [sl]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032d4:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80032d6:	428c      	cmp	r4, r1
 80032d8:	d201      	bcs.n	80032de <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80032da:	6029      	str	r1, [r5, #0]
						break;
 80032dc:	e7d8      	b.n	8003290 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032de:	f106 0804 	add.w	r8, r6, #4
 80032e2:	4640      	mov	r0, r8
 80032e4:	f7ff faab 	bl	800283e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032e8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80032ea:	b119      	cbz	r1, 80032f4 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ec:	f106 0018 	add.w	r0, r6, #24
 80032f0:	f7ff faa5 	bl	800283e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032f4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80032f6:	f8d9 3000 	ldr.w	r3, [r9]
 80032fa:	2201      	movs	r2, #1
 80032fc:	fa02 f100 	lsl.w	r1, r2, r0
 8003300:	4319      	orrs	r1, r3
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <xTaskIncrementTick+0x114>)
 8003304:	f8c9 1000 	str.w	r1, [r9]
 8003308:	f04f 0c14 	mov.w	ip, #20
 800330c:	4641      	mov	r1, r8
 800330e:	fb0c 3000 	mla	r0, ip, r0, r3
 8003312:	f7ff fa71 	bl	80027f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003316:	6838      	ldr	r0, [r7, #0]
 8003318:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800331a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800331c:	4291      	cmp	r1, r2
 800331e:	bf28      	it	cs
 8003320:	f04f 0b01 	movcs.w	fp, #1
 8003324:	e7ca      	b.n	80032bc <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <xTaskIncrementTick+0x11c>)
 8003328:	6813      	ldr	r3, [r2, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800332e:	f04f 0b00 	mov.w	fp, #0
 8003332:	e7b7      	b.n	80032a4 <xTaskIncrementTick+0x68>
 8003334:	20000138 	.word	0x20000138
 8003338:	200001b8 	.word	0x200001b8
 800333c:	20000098 	.word	0x20000098
 8003340:	2000009c 	.word	0x2000009c
 8003344:	20000174 	.word	0x20000174
 8003348:	20000170 	.word	0x20000170
 800334c:	20000094 	.word	0x20000094
 8003350:	200000a0 	.word	0x200000a0
 8003354:	200001bc 	.word	0x200001bc
 8003358:	20000134 	.word	0x20000134
 800335c:	20000140 	.word	0x20000140

08003360 <xTaskResumeAll>:
{
 8003360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003364:	4c30      	ldr	r4, [pc, #192]	; (8003428 <xTaskResumeAll+0xc8>)
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	b943      	cbnz	r3, 800337c <xTaskResumeAll+0x1c>
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	e7fe      	b.n	800337a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800337c:	f000 faba 	bl	80038f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003386:	6824      	ldr	r4, [r4, #0]
 8003388:	b12c      	cbz	r4, 8003396 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800338a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800338c:	f000 fad4 	bl	8003938 <vPortExitCritical>
}
 8003390:	4620      	mov	r0, r4
 8003392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <xTaskResumeAll+0xcc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f5      	beq.n	800338a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800339e:	4d24      	ldr	r5, [pc, #144]	; (8003430 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80033a0:	4e24      	ldr	r6, [pc, #144]	; (8003434 <xTaskResumeAll+0xd4>)
 80033a2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003448 <xTaskResumeAll+0xe8>
 80033a6:	e01f      	b.n	80033e8 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033a8:	68eb      	ldr	r3, [r5, #12]
 80033aa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ac:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b0:	f104 0018 	add.w	r0, r4, #24
 80033b4:	f7ff fa43 	bl	800283e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b8:	4648      	mov	r0, r9
 80033ba:	f7ff fa40 	bl	800283e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033c0:	6831      	ldr	r1, [r6, #0]
 80033c2:	2701      	movs	r7, #1
 80033c4:	fa07 f302 	lsl.w	r3, r7, r2
 80033c8:	2014      	movs	r0, #20
 80033ca:	430b      	orrs	r3, r1
 80033cc:	fb00 8002 	mla	r0, r0, r2, r8
 80033d0:	4649      	mov	r1, r9
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f7ff fa10 	bl	80027f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <xTaskResumeAll+0xd8>)
 80033da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d301      	bcc.n	80033e8 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <xTaskResumeAll+0xdc>)
 80033e6:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1dc      	bne.n	80033a8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80033ee:	b10c      	cbz	r4, 80033f4 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80033f0:	f7ff fdaa 	bl	8002f48 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033f4:	4d12      	ldr	r5, [pc, #72]	; (8003440 <xTaskResumeAll+0xe0>)
 80033f6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033f8:	b144      	cbz	r4, 800340c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80033fa:	4e10      	ldr	r6, [pc, #64]	; (800343c <xTaskResumeAll+0xdc>)
 80033fc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80033fe:	f7ff ff1d 	bl	800323c <xTaskIncrementTick>
 8003402:	b100      	cbz	r0, 8003406 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8003404:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003406:	3c01      	subs	r4, #1
 8003408:	d1f9      	bne.n	80033fe <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800340a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <xTaskResumeAll+0xdc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ba      	beq.n	800338a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <xTaskResumeAll+0xe4>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003424:	2401      	movs	r4, #1
 8003426:	e7b1      	b.n	800338c <xTaskResumeAll+0x2c>
 8003428:	20000138 	.word	0x20000138
 800342c:	2000012c 	.word	0x2000012c
 8003430:	20000178 	.word	0x20000178
 8003434:	20000140 	.word	0x20000140
 8003438:	20000094 	.word	0x20000094
 800343c:	200001bc 	.word	0x200001bc
 8003440:	20000134 	.word	0x20000134
 8003444:	e000ed04 	.word	0xe000ed04
 8003448:	200000a0 	.word	0x200000a0

0800344c <vTaskDelay>:
	{
 800344c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800344e:	b940      	cbnz	r0, 8003462 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <vTaskDelay+0x40>)
 8003452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy
	}
 8003460:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <vTaskDelay+0x44>)
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	b141      	cbz	r1, 800347a <vTaskDelay+0x2e>
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	e7fe      	b.n	8003478 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800347a:	f7ff fec9 	bl	8003210 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800347e:	f7ff fd75 	bl	8002f6c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003482:	f7ff ff6d 	bl	8003360 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003486:	2800      	cmp	r0, #0
 8003488:	d0e2      	beq.n	8003450 <vTaskDelay+0x4>
 800348a:	e7e9      	b.n	8003460 <vTaskDelay+0x14>
 800348c:	e000ed04 	.word	0xe000ed04
 8003490:	20000138 	.word	0x20000138

08003494 <prvIdleTask>:
{
 8003494:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003496:	4e17      	ldr	r6, [pc, #92]	; (80034f4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003498:	4c17      	ldr	r4, [pc, #92]	; (80034f8 <prvIdleTask+0x64>)
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	b963      	cbnz	r3, 80034b8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <prvIdleTask+0x68>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d9f8      	bls.n	8003498 <prvIdleTask+0x4>
				taskYIELD();
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <prvIdleTask+0x6c>)
 80034a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	e7ef      	b.n	8003498 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80034b8:	f7ff feaa 	bl	8003210 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80034bc:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80034be:	f7ff ff4f 	bl	8003360 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80034c2:	2d00      	cmp	r5, #0
 80034c4:	d0e9      	beq.n	800349a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80034c6:	f000 fa15 	bl	80038f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034ca:	68f3      	ldr	r3, [r6, #12]
 80034cc:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ce:	1d28      	adds	r0, r5, #4
 80034d0:	f7ff f9b5 	bl	800283e <uxListRemove>
					--uxCurrentNumberOfTasks;
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <prvIdleTask+0x70>)
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	3b01      	subs	r3, #1
 80034da:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80034e2:	f000 fa29 	bl	8003938 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80034e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80034e8:	f000 fbea 	bl	8003cc0 <vPortFree>
			vPortFree( pxTCB );
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 fbe7 	bl	8003cc0 <vPortFree>
 80034f2:	e7d2      	b.n	800349a <prvIdleTask+0x6>
 80034f4:	200001a4 	.word	0x200001a4
 80034f8:	20000130 	.word	0x20000130
 80034fc:	200000a0 	.word	0x200000a0
 8003500:	e000ed04 	.word	0xe000ed04
 8003504:	2000012c 	.word	0x2000012c

08003508 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <vTaskSwitchContext+0x60>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <vTaskSwitchContext+0x64>)
{
 800350e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003510:	b112      	cbz	r2, 8003518 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003512:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003518:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <vTaskSwitchContext+0x68>)
 800351c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f1c3 031f 	rsb	r3, r3, #31
 8003528:	2214      	movs	r2, #20
 800352a:	4912      	ldr	r1, [pc, #72]	; (8003574 <vTaskSwitchContext+0x6c>)
 800352c:	435a      	muls	r2, r3
 800352e:	1888      	adds	r0, r1, r2
 8003530:	588c      	ldr	r4, [r1, r2]
 8003532:	b944      	cbnz	r4, 8003546 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	e7fe      	b.n	8003544 <vTaskSwitchContext+0x3c>
 8003546:	6844      	ldr	r4, [r0, #4]
 8003548:	3208      	adds	r2, #8
 800354a:	6864      	ldr	r4, [r4, #4]
 800354c:	6044      	str	r4, [r0, #4]
 800354e:	440a      	add	r2, r1
 8003550:	4294      	cmp	r4, r2
 8003552:	bf04      	itt	eq
 8003554:	6862      	ldreq	r2, [r4, #4]
 8003556:	6042      	streq	r2, [r0, #4]
 8003558:	2214      	movs	r2, #20
 800355a:	fb02 1303 	mla	r3, r2, r3, r1
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <vTaskSwitchContext+0x70>)
 8003564:	e7d6      	b.n	8003514 <vTaskSwitchContext+0xc>
 8003566:	bf00      	nop
 8003568:	20000138 	.word	0x20000138
 800356c:	200001bc 	.word	0x200001bc
 8003570:	20000140 	.word	0x20000140
 8003574:	200000a0 	.word	0x200000a0
 8003578:	20000094 	.word	0x20000094

0800357c <vTaskPlaceOnEventList>:
{
 800357c:	b510      	push	{r4, lr}
 800357e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003580:	b940      	cbnz	r0, 8003594 <vTaskPlaceOnEventList+0x18>
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	e7fe      	b.n	8003592 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <vTaskPlaceOnEventList+0x30>)
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	3118      	adds	r1, #24
 800359a:	f7ff f939 	bl	8002810 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800359e:	4620      	mov	r0, r4
 80035a0:	2101      	movs	r1, #1
}
 80035a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035a6:	f7ff bce1 	b.w	8002f6c <prvAddCurrentTaskToDelayedList>
 80035aa:	bf00      	nop
 80035ac:	20000094 	.word	0x20000094

080035b0 <xTaskRemoveFromEventList>:
{
 80035b0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035b2:	68c3      	ldr	r3, [r0, #12]
 80035b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80035b6:	b944      	cbnz	r4, 80035ca <xTaskRemoveFromEventList+0x1a>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	e7fe      	b.n	80035c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035ca:	f104 0518 	add.w	r5, r4, #24
 80035ce:	4628      	mov	r0, r5
 80035d0:	f7ff f935 	bl	800283e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <xTaskRemoveFromEventList+0x6c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b9e3      	cbnz	r3, 8003614 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035da:	1d25      	adds	r5, r4, #4
 80035dc:	4628      	mov	r0, r5
 80035de:	f7ff f92e 	bl	800283e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035e2:	490f      	ldr	r1, [pc, #60]	; (8003620 <xTaskRemoveFromEventList+0x70>)
 80035e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035e6:	6808      	ldr	r0, [r1, #0]
 80035e8:	2301      	movs	r3, #1
 80035ea:	4093      	lsls	r3, r2
 80035ec:	4303      	orrs	r3, r0
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <xTaskRemoveFromEventList+0x74>)
 80035f2:	2014      	movs	r0, #20
 80035f4:	4629      	mov	r1, r5
 80035f6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035fa:	f7ff f8fd 	bl	80027f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <xTaskRemoveFromEventList+0x78>)
 8003600:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003608:	bf83      	ittte	hi
 800360a:	4b08      	ldrhi	r3, [pc, #32]	; (800362c <xTaskRemoveFromEventList+0x7c>)
 800360c:	2001      	movhi	r0, #1
 800360e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003610:	2000      	movls	r0, #0
}
 8003612:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003614:	4629      	mov	r1, r5
 8003616:	4806      	ldr	r0, [pc, #24]	; (8003630 <xTaskRemoveFromEventList+0x80>)
 8003618:	e7ef      	b.n	80035fa <xTaskRemoveFromEventList+0x4a>
 800361a:	bf00      	nop
 800361c:	20000138 	.word	0x20000138
 8003620:	20000140 	.word	0x20000140
 8003624:	200000a0 	.word	0x200000a0
 8003628:	20000094 	.word	0x20000094
 800362c:	200001bc 	.word	0x200001bc
 8003630:	20000178 	.word	0x20000178

08003634 <vTaskSetTimeOutState>:
{
 8003634:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003636:	b908      	cbnz	r0, 800363c <vTaskSetTimeOutState+0x8>
 8003638:	f7ff fc7d 	bl	8002f36 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <vTaskSetTimeOutState+0x18>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003642:	4b03      	ldr	r3, [pc, #12]	; (8003650 <vTaskSetTimeOutState+0x1c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6043      	str	r3, [r0, #4]
}
 8003648:	bd08      	pop	{r3, pc}
 800364a:	bf00      	nop
 800364c:	20000174 	.word	0x20000174
 8003650:	200001b8 	.word	0x200001b8

08003654 <xTaskCheckForTimeOut>:
{
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003658:	4604      	mov	r4, r0
 800365a:	b940      	cbnz	r0, 800366e <xTaskCheckForTimeOut+0x1a>
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	e7fe      	b.n	800366c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800366e:	b941      	cbnz	r1, 8003682 <xTaskCheckForTimeOut+0x2e>
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	e7fe      	b.n	8003680 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003682:	f000 f937 	bl	80038f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <xTaskCheckForTimeOut+0x6c>)
 8003688:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800368a:	682b      	ldr	r3, [r5, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	d010      	beq.n	80036b2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <xTaskCheckForTimeOut+0x70>)
 8003692:	6810      	ldr	r0, [r2, #0]
 8003694:	e9d4 6200 	ldrd	r6, r2, [r4]
 8003698:	4286      	cmp	r6, r0
 800369a:	d001      	beq.n	80036a0 <xTaskCheckForTimeOut+0x4c>
 800369c:	4291      	cmp	r1, r2
 800369e:	d20d      	bcs.n	80036bc <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036a0:	1a88      	subs	r0, r1, r2
 80036a2:	4283      	cmp	r3, r0
 80036a4:	d90a      	bls.n	80036bc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80036a6:	1a5b      	subs	r3, r3, r1
 80036a8:	4413      	add	r3, r2
 80036aa:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7ff ffc1 	bl	8003634 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80036b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80036b4:	f000 f940 	bl	8003938 <vPortExitCritical>
}
 80036b8:	4620      	mov	r0, r4
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80036bc:	2401      	movs	r4, #1
 80036be:	e7f9      	b.n	80036b4 <xTaskCheckForTimeOut+0x60>
 80036c0:	200001b8 	.word	0x200001b8
 80036c4:	20000174 	.word	0x20000174

080036c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80036c8:	4b01      	ldr	r3, [pc, #4]	; (80036d0 <vTaskMissedYield+0x8>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	4770      	bx	lr
 80036d0:	200001bc 	.word	0x200001bc

080036d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <xTaskGetSchedulerState+0x18>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b133      	cbz	r3, 80036e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <xTaskGetSchedulerState+0x1c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80036e0:	bf0c      	ite	eq
 80036e2:	2002      	moveq	r0, #2
 80036e4:	2000      	movne	r0, #0
 80036e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036e8:	2001      	movs	r0, #1
	}
 80036ea:	4770      	bx	lr
 80036ec:	2000018c 	.word	0x2000018c
 80036f0:	20000138 	.word	0x20000138

080036f4 <vTaskPriorityInherit>:
	{
 80036f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80036f8:	4604      	mov	r4, r0
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d02e      	beq.n	800375c <vTaskPriorityInherit+0x68>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80036fe:	4d1e      	ldr	r5, [pc, #120]	; (8003778 <vTaskPriorityInherit+0x84>)
 8003700:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003702:	682a      	ldr	r2, [r5, #0]
 8003704:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003706:	4293      	cmp	r3, r2
 8003708:	d228      	bcs.n	800375c <vTaskPriorityInherit+0x68>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800370a:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800370c:	4e1b      	ldr	r6, [pc, #108]	; (800377c <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800370e:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003710:	bfa1      	itttt	ge
 8003712:	682a      	ldrge	r2, [r5, #0]
 8003714:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003716:	f1c2 0207 	rsbge	r2, r2, #7
 800371a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800371c:	2714      	movs	r7, #20
 800371e:	6942      	ldr	r2, [r0, #20]
 8003720:	fb07 6303 	mla	r3, r7, r3, r6
 8003724:	429a      	cmp	r2, r3
 8003726:	d116      	bne.n	8003756 <vTaskPriorityInherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003728:	f100 0804 	add.w	r8, r0, #4
 800372c:	4640      	mov	r0, r8
 800372e:	f7ff f886 	bl	800283e <uxListRemove>
 8003732:	4a13      	ldr	r2, [pc, #76]	; (8003780 <vTaskPriorityInherit+0x8c>)
 8003734:	b1a0      	cbz	r0, 8003760 <vTaskPriorityInherit+0x6c>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003736:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003738:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800373a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800373c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800373e:	2301      	movs	r3, #1
 8003740:	4083      	lsls	r3, r0
 8003742:	430b      	orrs	r3, r1
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	2314      	movs	r3, #20
 8003748:	4641      	mov	r1, r8
 800374a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800374e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003752:	f7ff b851 	b.w	80027f8 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003756:	682b      	ldr	r3, [r5, #0]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003760:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003762:	4347      	muls	r7, r0
 8003764:	59f3      	ldr	r3, [r6, r7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <vTaskPriorityInherit+0x42>
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	4081      	lsls	r1, r0
 8003770:	ea23 0301 	bic.w	r3, r3, r1
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e7de      	b.n	8003736 <vTaskPriorityInherit+0x42>
 8003778:	20000094 	.word	0x20000094
 800377c:	200000a0 	.word	0x200000a0
 8003780:	20000140 	.word	0x20000140

08003784 <xTaskPriorityDisinherit>:
	{
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003786:	4604      	mov	r4, r0
 8003788:	b908      	cbnz	r0, 800378e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800378a:	2000      	movs	r0, #0
	}
 800378c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <xTaskPriorityDisinherit+0x94>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4283      	cmp	r3, r0
 8003794:	d008      	beq.n	80037a8 <xTaskPriorityDisinherit+0x24>
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	e7fe      	b.n	80037a6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80037a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037aa:	b943      	cbnz	r3, 80037be <xTaskPriorityDisinherit+0x3a>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	e7fe      	b.n	80037bc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80037c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80037c2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037c4:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80037c6:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037c8:	d0df      	beq.n	800378a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1dd      	bne.n	800378a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037ce:	1d05      	adds	r5, r0, #4
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff f834 	bl	800283e <uxListRemove>
 80037d6:	4e11      	ldr	r6, [pc, #68]	; (800381c <xTaskPriorityDisinherit+0x98>)
 80037d8:	4a11      	ldr	r2, [pc, #68]	; (8003820 <xTaskPriorityDisinherit+0x9c>)
 80037da:	b950      	cbnz	r0, 80037f2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80037de:	2114      	movs	r1, #20
 80037e0:	4379      	muls	r1, r7
 80037e2:	5873      	ldr	r3, [r6, r1]
 80037e4:	b92b      	cbnz	r3, 80037f2 <xTaskPriorityDisinherit+0x6e>
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	2001      	movs	r0, #1
 80037ea:	40b8      	lsls	r0, r7
 80037ec:	ea23 0300 	bic.w	r3, r3, r0
 80037f0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f6:	f1c3 0107 	rsb	r1, r3, #7
 80037fa:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	2401      	movs	r4, #1
 8003800:	fa04 f003 	lsl.w	r0, r4, r3
 8003804:	4308      	orrs	r0, r1
 8003806:	6010      	str	r0, [r2, #0]
 8003808:	2014      	movs	r0, #20
 800380a:	fb00 6003 	mla	r0, r0, r3, r6
 800380e:	4629      	mov	r1, r5
 8003810:	f7fe fff2 	bl	80027f8 <vListInsertEnd>
					xReturn = pdTRUE;
 8003814:	4620      	mov	r0, r4
		return xReturn;
 8003816:	e7b9      	b.n	800378c <xTaskPriorityDisinherit+0x8>
 8003818:	20000094 	.word	0x20000094
 800381c:	200000a0 	.word	0x200000a0
 8003820:	20000140 	.word	0x20000140

08003824 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <pvTaskIncrementMutexHeldCount+0x14>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	b11a      	cbz	r2, 8003832 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800382e:	3201      	adds	r2, #1
 8003830:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003832:	6818      	ldr	r0, [r3, #0]
	}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000094 	.word	0x20000094

0800383c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvTaskExitError+0x2c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	d008      	beq.n	8003856 <prvTaskExitError+0x1a>
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	e7fe      	b.n	8003854 <prvTaskExitError+0x18>
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	e7fe      	b.n	8003866 <prvTaskExitError+0x2a>
 8003868:	20000004 	.word	0x20000004

0800386c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800386c:	4806      	ldr	r0, [pc, #24]	; (8003888 <prvPortStartFirstTask+0x1c>)
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	6800      	ldr	r0, [r0, #0]
 8003872:	f380 8808 	msr	MSP, r0
 8003876:	b662      	cpsie	i
 8003878:	b661      	cpsie	f
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	df00      	svc	0
 8003884:	bf00      	nop
 8003886:	0000      	.short	0x0000
 8003888:	e000ed08 	.word	0xe000ed08

0800388c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800388c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800389c <vPortEnableVFP+0x10>
 8003890:	6801      	ldr	r1, [r0, #0]
 8003892:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003896:	6001      	str	r1, [r0, #0]
 8003898:	4770      	bx	lr
 800389a:	0000      	.short	0x0000
 800389c:	e000ed88 	.word	0xe000ed88

080038a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <pxPortInitialiseStack+0x28>)
 80038aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038ae:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80038b2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038ba:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80038be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80038c2:	3844      	subs	r0, #68	; 0x44
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	0800383d 	.word	0x0800383d
 80038cc:	00000000 	.word	0x00000000

080038d0 <SVC_Handler>:
	__asm volatile (
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <pxCurrentTCBConst2>)
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	6808      	ldr	r0, [r1, #0]
 80038d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038da:	f380 8809 	msr	PSP, r0
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8811 	msr	BASEPRI, r0
 80038ea:	4770      	bx	lr
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst2>:
 80038f0:	20000094 	.word	0x20000094

080038f4 <vPortEnterCritical>:
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <vPortEnterCritical+0x3c>)
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800390a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800390c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800390e:	d10d      	bne.n	800392c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <vPortEnterCritical+0x40>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003918:	d008      	beq.n	800392c <vPortEnterCritical+0x38>
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	e7fe      	b.n	800392a <vPortEnterCritical+0x36>
}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000004 	.word	0x20000004
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003938:	4a08      	ldr	r2, [pc, #32]	; (800395c <vPortExitCritical+0x24>)
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	b943      	cbnz	r3, 8003950 <vPortExitCritical+0x18>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	e7fe      	b.n	800394e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003950:	3b01      	subs	r3, #1
 8003952:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003954:	b90b      	cbnz	r3, 800395a <vPortExitCritical+0x22>
	__asm volatile
 8003956:	f383 8811 	msr	BASEPRI, r3
}
 800395a:	4770      	bx	lr
 800395c:	20000004 	.word	0x20000004

08003960 <PendSV_Handler>:
	__asm volatile
 8003960:	f3ef 8009 	mrs	r0, PSP
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <pxCurrentTCBConst>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f01e 0f10 	tst.w	lr, #16
 8003970:	bf08      	it	eq
 8003972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397a:	6010      	str	r0, [r2, #0]
 800397c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003984:	f380 8811 	msr	BASEPRI, r0
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f7ff fdba 	bl	8003508 <vTaskSwitchContext>
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f380 8811 	msr	BASEPRI, r0
 800399c:	bc08      	pop	{r3}
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	6808      	ldr	r0, [r1, #0]
 80039a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a6:	f01e 0f10 	tst.w	lr, #16
 80039aa:	bf08      	it	eq
 80039ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039b0:	f380 8809 	msr	PSP, r0
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	f3af 8000 	nop.w

080039c0 <pxCurrentTCBConst>:
 80039c0:	20000094 	.word	0x20000094

080039c4 <xPortSysTickHandler>:
{
 80039c4:	b508      	push	{r3, lr}
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80039d6:	f7ff fc31 	bl	800323c <xTaskIncrementTick>
 80039da:	b118      	cbz	r0, 80039e4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <xPortSysTickHandler+0x28>)
 80039de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80039e4:	2300      	movs	r3, #0
 80039e6:	f383 8811 	msr	BASEPRI, r3
}
 80039ea:	bd08      	pop	{r3, pc}
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <vPortSetupTimerInterrupt+0x1c>)
 80039f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <vPortSetupTimerInterrupt+0x20>)
 80039fe:	3b01      	subs	r3, #1
 8003a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <vPortSetupTimerInterrupt+0x24>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000010 	.word	0x20000010
 8003a10:	e000e014 	.word	0xe000e014
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a18:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <xPortStartScheduler+0xc8>)
 8003a1a:	4a32      	ldr	r2, [pc, #200]	; (8003ae4 <xPortStartScheduler+0xcc>)
{
 8003a1c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	4291      	cmp	r1, r2
 8003a22:	d108      	bne.n	8003a36 <xPortStartScheduler+0x1e>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	e7fe      	b.n	8003a34 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <xPortStartScheduler+0xd0>)
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d108      	bne.n	8003a50 <xPortStartScheduler+0x38>
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	e7fe      	b.n	8003a4e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <xPortStartScheduler+0xd4>)
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a58:	22ff      	movs	r2, #255	; 0xff
 8003a5a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a5c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a5e:	4a24      	ldr	r2, [pc, #144]	; (8003af0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a66:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003a6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a6e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <xPortStartScheduler+0xdc>)
 8003a72:	2207      	movs	r2, #7
 8003a74:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a76:	2100      	movs	r1, #0
 8003a78:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003a7c:	0600      	lsls	r0, r0, #24
 8003a7e:	f102 34ff 	add.w	r4, r2, #4294967295
 8003a82:	d423      	bmi.n	8003acc <xPortStartScheduler+0xb4>
 8003a84:	b101      	cbz	r1, 8003a88 <xPortStartScheduler+0x70>
 8003a86:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a8c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003a90:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a92:	9b01      	ldr	r3, [sp, #4]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <xPortStartScheduler+0xd4>)
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a9a:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <xPortStartScheduler+0xe0>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003aa2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003aaa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003aac:	f7ff ffa0 	bl	80039f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <xPortStartScheduler+0xe4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003ab6:	f7ff fee9 	bl	800388c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <xPortStartScheduler+0xe8>)
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ac2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003ac4:	f7ff fed2 	bl	800386c <prvPortStartFirstTask>
	prvTaskExitError();
 8003ac8:	f7ff feb8 	bl	800383c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003acc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003ad0:	0052      	lsls	r2, r2, #1
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	f88d 2003 	strb.w	r2, [sp, #3]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4622      	mov	r2, r4
 8003adc:	e7cc      	b.n	8003a78 <xPortStartScheduler+0x60>
 8003ade:	bf00      	nop
 8003ae0:	e000ed00 	.word	0xe000ed00
 8003ae4:	410fc271 	.word	0x410fc271
 8003ae8:	410fc270 	.word	0x410fc270
 8003aec:	e000e400 	.word	0xe000e400
 8003af0:	200001c0 	.word	0x200001c0
 8003af4:	200001c4 	.word	0x200001c4
 8003af8:	e000ed20 	.word	0xe000ed20
 8003afc:	20000004 	.word	0x20000004
 8003b00:	e000ef34 	.word	0xe000ef34

08003b04 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003b04:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d90e      	bls.n	8003b2a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b0c:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <vPortValidateInterruptPriority+0x4c>)
 8003b0e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b10:	4a10      	ldr	r2, [pc, #64]	; (8003b54 <vPortValidateInterruptPriority+0x50>)
 8003b12:	7812      	ldrb	r2, [r2, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d908      	bls.n	8003b2a <vPortValidateInterruptPriority+0x26>
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	e7fe      	b.n	8003b28 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <vPortValidateInterruptPriority+0x54>)
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <vPortValidateInterruptPriority+0x58>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d908      	bls.n	8003b4c <vPortValidateInterruptPriority+0x48>
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	e7fe      	b.n	8003b4a <vPortValidateInterruptPriority+0x46>
	}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000e3f0 	.word	0xe000e3f0
 8003b54:	200001c0 	.word	0x200001c0
 8003b58:	e000ed0c 	.word	0xe000ed0c
 8003b5c:	200001c4 	.word	0x200001c4

08003b60 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b60:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <prvInsertBlockIntoFreeList+0x40>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4282      	cmp	r2, r0
 8003b68:	d318      	bcc.n	8003b9c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b6a:	685c      	ldr	r4, [r3, #4]
 8003b6c:	1919      	adds	r1, r3, r4
 8003b6e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b70:	bf01      	itttt	eq
 8003b72:	6841      	ldreq	r1, [r0, #4]
 8003b74:	4618      	moveq	r0, r3
 8003b76:	1909      	addeq	r1, r1, r4
 8003b78:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b7a:	6844      	ldr	r4, [r0, #4]
 8003b7c:	1901      	adds	r1, r0, r4
 8003b7e:	428a      	cmp	r2, r1
 8003b80:	d107      	bne.n	8003b92 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b82:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <prvInsertBlockIntoFreeList+0x44>)
 8003b84:	6809      	ldr	r1, [r1, #0]
 8003b86:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b88:	bf1f      	itttt	ne
 8003b8a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b8c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b8e:	1909      	addne	r1, r1, r4
 8003b90:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b92:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b94:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b96:	bf18      	it	ne
 8003b98:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b9a:	bd10      	pop	{r4, pc}
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	e7e1      	b.n	8003b64 <prvInsertBlockIntoFreeList+0x4>
 8003ba0:	200081d8 	.word	0x200081d8
 8003ba4:	200001c8 	.word	0x200001c8

08003ba8 <pvPortMalloc>:
{
 8003ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003bae:	f7ff fb2f 	bl	8003210 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003bb2:	493d      	ldr	r1, [pc, #244]	; (8003ca8 <pvPortMalloc+0x100>)
 8003bb4:	4d3d      	ldr	r5, [pc, #244]	; (8003cac <pvPortMalloc+0x104>)
 8003bb6:	680b      	ldr	r3, [r1, #0]
 8003bb8:	b9fb      	cbnz	r3, 8003bfa <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bbc:	0756      	lsls	r6, r2, #29
 8003bbe:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bc2:	bf1d      	ittte	ne
 8003bc4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bc6:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bca:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bcc:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bd0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bd2:	4e38      	ldr	r6, [pc, #224]	; (8003cb4 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8003bd4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003bda:	2000      	movs	r0, #0
 8003bdc:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bde:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003be0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003be4:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8003be6:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003be8:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bec:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <pvPortMalloc+0x110>)
 8003bee:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bf0:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <pvPortMalloc+0x114>)
 8003bf2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bf8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bfa:	682f      	ldr	r7, [r5, #0]
 8003bfc:	4227      	tst	r7, r4
 8003bfe:	d14e      	bne.n	8003c9e <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8003c00:	2c00      	cmp	r4, #0
 8003c02:	d03f      	beq.n	8003c84 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8003c04:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c08:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c0a:	bf1c      	itt	ne
 8003c0c:	f023 0307 	bicne.w	r3, r3, #7
 8003c10:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d043      	beq.n	8003c9e <pvPortMalloc+0xf6>
 8003c16:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <pvPortMalloc+0x114>)
 8003c18:	6816      	ldr	r6, [r2, #0]
 8003c1a:	429e      	cmp	r6, r3
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	d33e      	bcc.n	8003c9e <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <pvPortMalloc+0x10c>)
 8003c22:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c24:	6868      	ldr	r0, [r5, #4]
 8003c26:	4298      	cmp	r0, r3
 8003c28:	d201      	bcs.n	8003c2e <pvPortMalloc+0x86>
 8003c2a:	682c      	ldr	r4, [r5, #0]
 8003c2c:	b9a4      	cbnz	r4, 8003c58 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8003c2e:	6809      	ldr	r1, [r1, #0]
 8003c30:	42a9      	cmp	r1, r5
 8003c32:	d034      	beq.n	8003c9e <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c34:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c36:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c38:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c3a:	1ac2      	subs	r2, r0, r3
 8003c3c:	2a10      	cmp	r2, #16
 8003c3e:	d912      	bls.n	8003c66 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c40:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c42:	0741      	lsls	r1, r0, #29
 8003c44:	d00b      	beq.n	8003c5e <pvPortMalloc+0xb6>
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	e7fe      	b.n	8003c56 <pvPortMalloc+0xae>
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4625      	mov	r5, r4
 8003c5c:	e7e2      	b.n	8003c24 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c5e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c60:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c62:	f7ff ff7d 	bl	8003b60 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c66:	4914      	ldr	r1, [pc, #80]	; (8003cb8 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c68:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c6a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c6c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c6e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c70:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8003c72:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c76:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c7a:	bf38      	it	cc
 8003c7c:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c7e:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c80:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c82:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003c84:	f7ff fb6c 	bl	8003360 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c88:	0763      	lsls	r3, r4, #29
 8003c8a:	d00a      	beq.n	8003ca2 <pvPortMalloc+0xfa>
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	e7fe      	b.n	8003c9c <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	e7f0      	b.n	8003c84 <pvPortMalloc+0xdc>
}
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca8:	200001c8 	.word	0x200001c8
 8003cac:	200081cc 	.word	0x200081cc
 8003cb0:	200001cc 	.word	0x200001cc
 8003cb4:	200081d8 	.word	0x200081d8
 8003cb8:	200081d4 	.word	0x200081d4
 8003cbc:	200081d0 	.word	0x200081d0

08003cc0 <vPortFree>:
{
 8003cc0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	b370      	cbz	r0, 8003d24 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <vPortFree+0x68>)
 8003cc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4213      	tst	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <vPortFree+0x24>
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	e7fe      	b.n	8003ce2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ce4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003ce8:	b141      	cbz	r1, 8003cfc <vPortFree+0x3c>
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	e7fe      	b.n	8003cfa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cfc:	ea23 0302 	bic.w	r3, r3, r2
 8003d00:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003d04:	f7ff fa84 	bl	8003210 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <vPortFree+0x6c>)
 8003d0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003d0e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d10:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d14:	440b      	add	r3, r1
 8003d16:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d18:	f7ff ff22 	bl	8003b60 <prvInsertBlockIntoFreeList>
}
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003d20:	f7ff bb1e 	b.w	8003360 <xTaskResumeAll>
}
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	bf00      	nop
 8003d28:	200081cc 	.word	0x200081cc
 8003d2c:	200081d0 	.word	0x200081d0

08003d30 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8003d30:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <tcpip_thread+0x7c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
{
 8003d34:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8003d36:	b113      	cbz	r3, 8003d3e <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <tcpip_thread+0x80>)
 8003d3a:	6810      	ldr	r0, [r2, #0]
 8003d3c:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8003d3e:	481d      	ldr	r0, [pc, #116]	; (8003db4 <tcpip_thread+0x84>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8003d40:	4d1c      	ldr	r5, [pc, #112]	; (8003db4 <tcpip_thread+0x84>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003d42:	4e1d      	ldr	r6, [pc, #116]	; (8003db8 <tcpip_thread+0x88>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003d44:	4c1d      	ldr	r4, [pc, #116]	; (8003dbc <tcpip_thread+0x8c>)
  LOCK_TCPIP_CORE();
 8003d46:	f007 fd58 	bl	800b7fa <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f007 fd5a 	bl	800b804 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003d50:	a901      	add	r1, sp, #4
 8003d52:	4630      	mov	r0, r6
 8003d54:	f004 ffb4 	bl	8008cc0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f007 fd4e 	bl	800b7fa <sys_mutex_lock>
    if (msg == NULL) {
 8003d5e:	9b01      	ldr	r3, [sp, #4]
 8003d60:	b933      	cbnz	r3, 8003d70 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003d62:	4623      	mov	r3, r4
 8003d64:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003d66:	4916      	ldr	r1, [pc, #88]	; (8003dc0 <tcpip_thread+0x90>)
 8003d68:	4816      	ldr	r0, [pc, #88]	; (8003dc4 <tcpip_thread+0x94>)
 8003d6a:	f008 fd81 	bl	800c870 <iprintf>
      break;
 8003d6e:	e7ec      	b.n	8003d4a <tcpip_thread+0x1a>
    switch (msg->type) {
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	2a03      	cmp	r2, #3
 8003d74:	d00c      	beq.n	8003d90 <tcpip_thread+0x60>
 8003d76:	2a04      	cmp	r2, #4
 8003d78:	d010      	beq.n	8003d9c <tcpip_thread+0x6c>
 8003d7a:	2a02      	cmp	r2, #2
 8003d7c:	d112      	bne.n	8003da4 <tcpip_thread+0x74>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8003d7e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8003d82:	6858      	ldr	r0, [r3, #4]
 8003d84:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003d86:	9901      	ldr	r1, [sp, #4]
 8003d88:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003d8a:	f001 f955 	bl	8005038 <memp_free>
      break;
 8003d8e:	e7dc      	b.n	8003d4a <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003d90:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 8003d94:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003d96:	9901      	ldr	r1, [sp, #4]
 8003d98:	2008      	movs	r0, #8
 8003d9a:	e7f6      	b.n	8003d8a <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003d9c:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 8003da0:	4790      	blx	r2
      break;
 8003da2:	e7d2      	b.n	8003d4a <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003da4:	4623      	mov	r3, r4
 8003da6:	229b      	movs	r2, #155	; 0x9b
 8003da8:	e7dd      	b.n	8003d66 <tcpip_thread+0x36>
 8003daa:	bf00      	nop
 8003dac:	200081e4 	.word	0x200081e4
 8003db0:	200081e8 	.word	0x200081e8
 8003db4:	200083a0 	.word	0x200083a0
 8003db8:	200081e0 	.word	0x200081e0
 8003dbc:	0800d793 	.word	0x0800d793
 8003dc0:	0800d7c3 	.word	0x0800d7c3
 8003dc4:	0800d7e1 	.word	0x0800d7e1

08003dc8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003dcc:	4810      	ldr	r0, [pc, #64]	; (8003e10 <tcpip_inpkt+0x48>)
{
 8003dce:	460e      	mov	r6, r1
 8003dd0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003dd2:	f007 fcf1 	bl	800b7b8 <sys_mbox_valid>
 8003dd6:	b928      	cbnz	r0, 8003de4 <tcpip_inpkt+0x1c>
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <tcpip_inpkt+0x4c>)
 8003dda:	490f      	ldr	r1, [pc, #60]	; (8003e18 <tcpip_inpkt+0x50>)
 8003ddc:	480f      	ldr	r0, [pc, #60]	; (8003e1c <tcpip_inpkt+0x54>)
 8003dde:	22b5      	movs	r2, #181	; 0xb5
 8003de0:	f008 fd46 	bl	800c870 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003de4:	2009      	movs	r0, #9
 8003de6:	f001 f90b 	bl	8005000 <memp_malloc>
  if (msg == NULL) {
 8003dea:	4604      	mov	r4, r0
 8003dec:	b168      	cbz	r0, 8003e0a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8003dee:	2302      	movs	r3, #2
 8003df0:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 8003df2:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->msg.inp.input_fn = input_fn;
 8003df6:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8003df8:	4601      	mov	r1, r0
 8003dfa:	4805      	ldr	r0, [pc, #20]	; (8003e10 <tcpip_inpkt+0x48>)
 8003dfc:	f007 fcb0 	bl	800b760 <sys_mbox_trypost>
 8003e00:	b128      	cbz	r0, 8003e0e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003e02:	4621      	mov	r1, r4
 8003e04:	2009      	movs	r0, #9
 8003e06:	f001 f917 	bl	8005038 <memp_free>
    return ERR_MEM;
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	200081e0 	.word	0x200081e0
 8003e14:	0800d793 	.word	0x0800d793
 8003e18:	0800d786 	.word	0x0800d786
 8003e1c:	0800d7e1 	.word	0x0800d7e1

08003e20 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8003e20:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8003e24:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8003e28:	bf14      	ite	ne
 8003e2a:	4a02      	ldrne	r2, [pc, #8]	; (8003e34 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8003e2c:	4a02      	ldreq	r2, [pc, #8]	; (8003e38 <tcpip_input+0x18>)
 8003e2e:	f7ff bfcb 	b.w	8003dc8 <tcpip_inpkt>
 8003e32:	bf00      	nop
 8003e34:	0800b621 	.word	0x0800b621
 8003e38:	0800ac09 	.word	0x0800ac09

08003e3c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003e40:	4813      	ldr	r0, [pc, #76]	; (8003e90 <tcpip_callback_with_block+0x54>)
{
 8003e42:	460e      	mov	r6, r1
 8003e44:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003e46:	f007 fcb7 	bl	800b7b8 <sys_mbox_valid>
 8003e4a:	b928      	cbnz	r0, 8003e58 <tcpip_callback_with_block+0x1c>
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <tcpip_callback_with_block+0x58>)
 8003e4e:	4912      	ldr	r1, [pc, #72]	; (8003e98 <tcpip_callback_with_block+0x5c>)
 8003e50:	4812      	ldr	r0, [pc, #72]	; (8003e9c <tcpip_callback_with_block+0x60>)
 8003e52:	22ee      	movs	r2, #238	; 0xee
 8003e54:	f008 fd0c 	bl	800c870 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8003e58:	2008      	movs	r0, #8
 8003e5a:	f001 f8d1 	bl	8005000 <memp_malloc>
  if (msg == NULL) {
 8003e5e:	4604      	mov	r4, r0
 8003e60:	b190      	cbz	r0, 8003e88 <tcpip_callback_with_block+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8003e62:	2303      	movs	r3, #3
 8003e64:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;
 8003e66:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	4808      	ldr	r0, [pc, #32]	; (8003e90 <tcpip_callback_with_block+0x54>)
  if (block) {
 8003e6e:	b11d      	cbz	r5, 8003e78 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 8003e70:	f007 fc6a 	bl	800b748 <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 8003e74:	2000      	movs	r0, #0
}
 8003e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8003e78:	f007 fc72 	bl	800b760 <sys_mbox_trypost>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d0fa      	beq.n	8003e76 <tcpip_callback_with_block+0x3a>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003e80:	4621      	mov	r1, r4
 8003e82:	2008      	movs	r0, #8
 8003e84:	f001 f8d8 	bl	8005038 <memp_free>
    return ERR_MEM;
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	e7f3      	b.n	8003e76 <tcpip_callback_with_block+0x3a>
 8003e8e:	bf00      	nop
 8003e90:	200081e0 	.word	0x200081e0
 8003e94:	0800d793 	.word	0x0800d793
 8003e98:	0800d786 	.word	0x0800d786
 8003e9c:	0800d7e1 	.word	0x0800d7e1

08003ea0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8003ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	460c      	mov	r4, r1
  lwip_init();
 8003ea6:	f000 fe24 	bl	8004af2 <lwip_init>

  tcpip_init_done = initfunc;
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003eac:	4813      	ldr	r0, [pc, #76]	; (8003efc <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8003eae:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003eb2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8003eb4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003eb6:	f007 fc37 	bl	800b728 <sys_mbox_new>
 8003eba:	b130      	cbz	r0, 8003eca <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <tcpip_init+0x64>)
 8003ebe:	4912      	ldr	r1, [pc, #72]	; (8003f08 <tcpip_init+0x68>)
 8003ec0:	4812      	ldr	r0, [pc, #72]	; (8003f0c <tcpip_init+0x6c>)
 8003ec2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8003ec6:	f008 fcd3 	bl	800c870 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8003eca:	4811      	ldr	r0, [pc, #68]	; (8003f10 <tcpip_init+0x70>)
 8003ecc:	f007 fc86 	bl	800b7dc <sys_mutex_new>
 8003ed0:	b130      	cbz	r0, 8003ee0 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <tcpip_init+0x64>)
 8003ed4:	490f      	ldr	r1, [pc, #60]	; (8003f14 <tcpip_init+0x74>)
 8003ed6:	480d      	ldr	r0, [pc, #52]	; (8003f0c <tcpip_init+0x6c>)
 8003ed8:	f240 12d9 	movw	r2, #473	; 0x1d9
 8003edc:	f008 fcc8 	bl	800c870 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eea:	490b      	ldr	r1, [pc, #44]	; (8003f18 <tcpip_init+0x78>)
 8003eec:	480b      	ldr	r0, [pc, #44]	; (8003f1c <tcpip_init+0x7c>)
 8003eee:	f007 fc8c 	bl	800b80a <sys_thread_new>
}
 8003ef2:	b003      	add	sp, #12
 8003ef4:	bd30      	pop	{r4, r5, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200081e4 	.word	0x200081e4
 8003efc:	200081e0 	.word	0x200081e0
 8003f00:	200081e8 	.word	0x200081e8
 8003f04:	0800d793 	.word	0x0800d793
 8003f08:	0800d735 	.word	0x0800d735
 8003f0c:	0800d7e1 	.word	0x0800d7e1
 8003f10:	200083a0 	.word	0x200083a0
 8003f14:	0800d758 	.word	0x0800d758
 8003f18:	08003d31 	.word	0x08003d31
 8003f1c:	0800d779 	.word	0x0800d779

08003f20 <mqtt_output_append_u16>:
}

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
  mqtt_ringbuf_put(rb, value >> 8);
 8003f20:	8803      	ldrh	r3, [r0, #0]
 8003f22:	fa50 f283 	uxtab	r2, r0, r3
{
 8003f26:	b510      	push	{r4, lr}
  mqtt_ringbuf_put(rb, value >> 8);
 8003f28:	0a0c      	lsrs	r4, r1, #8
 8003f2a:	7114      	strb	r4, [r2, #4]
  mqtt_ringbuf_put(rb, value & 0xff);
 8003f2c:	1c9a      	adds	r2, r3, #2
  mqtt_ringbuf_put(rb, value >> 8);
 8003f2e:	3301      	adds	r3, #1
  mqtt_ringbuf_put(rb, value & 0xff);
 8003f30:	8002      	strh	r2, [r0, #0]
 8003f32:	fa50 f083 	uxtab	r0, r0, r3
 8003f36:	7101      	strb	r1, [r0, #4]
}
 8003f38:	bd10      	pop	{r4, pc}

08003f3a <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8003f3a:	8803      	ldrh	r3, [r0, #0]
{
 8003f3c:	b530      	push	{r4, r5, lr}
  mqtt_ringbuf_put(rb, length >> 8);
 8003f3e:	fa50 f483 	uxtab	r4, r0, r3
 8003f42:	0a15      	lsrs	r5, r2, #8
 8003f44:	7125      	strb	r5, [r4, #4]
  mqtt_ringbuf_put(rb, length & 0xff);
 8003f46:	1c9c      	adds	r4, r3, #2
  mqtt_ringbuf_put(rb, length >> 8);
 8003f48:	3301      	adds	r3, #1
  mqtt_ringbuf_put(rb, length & 0xff);
 8003f4a:	fa50 f383 	uxtab	r3, r0, r3
 8003f4e:	8004      	strh	r4, [r0, #0]
 8003f50:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 8003f52:	460c      	mov	r4, r1
 8003f54:	1a63      	subs	r3, r4, r1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d800      	bhi.n	8003f5e <mqtt_output_append_string+0x24>
    mqtt_ringbuf_put(rb, str[n]);
  }
}
 8003f5c:	bd30      	pop	{r4, r5, pc}
    mqtt_ringbuf_put(rb, str[n]);
 8003f5e:	8803      	ldrh	r3, [r0, #0]
 8003f60:	1c5d      	adds	r5, r3, #1
 8003f62:	8005      	strh	r5, [r0, #0]
 8003f64:	fa50 f383 	uxtab	r3, r0, r3
 8003f68:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f6c:	711d      	strb	r5, [r3, #4]
 8003f6e:	e7f1      	b.n	8003f54 <mqtt_output_append_string+0x1a>

08003f70 <mqtt_create_request>:
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4605      	mov	r5, r0
 8003f74:	2400      	movs	r4, #0
    if (r_objs[n].next == &r_objs[n]) {
 8003f76:	5928      	ldr	r0, [r5, r4]
 8003f78:	192e      	adds	r6, r5, r4
 8003f7a:	42b0      	cmp	r0, r6
 8003f7c:	d105      	bne.n	8003f8a <mqtt_create_request+0x1a>
      r->next = NULL;
 8003f7e:	2400      	movs	r4, #0
      r->cb = cb;
 8003f80:	e9c0 4200 	strd	r4, r2, [r0]
      r->arg = arg;
 8003f84:	6083      	str	r3, [r0, #8]
      r->pkt_id = pkt_id;
 8003f86:	8181      	strh	r1, [r0, #12]
}
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
 8003f8a:	3410      	adds	r4, #16
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 8003f8c:	2c40      	cmp	r4, #64	; 0x40
 8003f8e:	d1f2      	bne.n	8003f76 <mqtt_create_request+0x6>
  struct mqtt_request_t *r = NULL;
 8003f90:	2000      	movs	r0, #0
  return r;
 8003f92:	e7f9      	b.n	8003f88 <mqtt_create_request+0x18>

08003f94 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8003f96:	1c4c      	adds	r4, r1, #1
{
 8003f98:	460d      	mov	r5, r1
  u16_t total_len = 1 + r_length;
 8003f9a:	b2a4      	uxth	r4, r4

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	b930      	cbnz	r0, 8003fae <mqtt_output_check_space+0x1a>
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <mqtt_output_check_space+0x38>)
 8003fa2:	490b      	ldr	r1, [pc, #44]	; (8003fd0 <mqtt_output_check_space+0x3c>)
 8003fa4:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <mqtt_output_check_space+0x40>)
 8003fa6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8003faa:	f008 fc61 	bl	800c870 <iprintf>

 /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8003fae:	3401      	adds	r4, #1
    r_length >>= 7;
  } while (r_length > 0);
 8003fb0:	09ed      	lsrs	r5, r5, #7
    total_len++;
 8003fb2:	b2a4      	uxth	r4, r4
  } while (r_length > 0);
 8003fb4:	d1fb      	bne.n	8003fae <mqtt_output_check_space+0x1a>

  return (total_len <= mqtt_ringbuf_free(rb));
 8003fb6:	8830      	ldrh	r0, [r6, #0]
 8003fb8:	8873      	ldrh	r3, [r6, #2]
 8003fba:	1ac0      	subs	r0, r0, r3
 8003fbc:	b280      	uxth	r0, r0
 8003fbe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
}
 8003fc2:	4284      	cmp	r4, r0
 8003fc4:	bfcc      	ite	gt
 8003fc6:	2000      	movgt	r0, #0
 8003fc8:	2001      	movle	r0, #1
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	0800da49 	.word	0x0800da49
 8003fd0:	0800da7e 	.word	0x0800da7e
 8003fd4:	0800d7e1 	.word	0x0800d7e1

08003fd8 <mqtt_append_request>:
{
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  s16_t time_before = 0;
 8003fda:	2200      	movs	r2, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003fdc:	6803      	ldr	r3, [r0, #0]
{
 8003fde:	4607      	mov	r7, r0
 8003fe0:	460e      	mov	r6, r1
  struct mqtt_request_t *head = NULL;
 8003fe2:	4615      	mov	r5, r2
 8003fe4:	b294      	uxth	r4, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003fe6:	b973      	cbnz	r3, 8004006 <mqtt_append_request+0x2e>
  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8003fe8:	2a1e      	cmp	r2, #30
 8003fea:	dd06      	ble.n	8003ffa <mqtt_append_request+0x22>
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <mqtt_append_request+0x40>)
 8003fee:	490b      	ldr	r1, [pc, #44]	; (800401c <mqtt_append_request+0x44>)
 8003ff0:	480b      	ldr	r0, [pc, #44]	; (8004020 <mqtt_append_request+0x48>)
 8003ff2:	f240 1229 	movw	r2, #297	; 0x129
 8003ff6:	f008 fc3b 	bl	800c870 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8003ffa:	f1c4 041e 	rsb	r4, r4, #30
 8003ffe:	81f4      	strh	r4, [r6, #14]
  if (head == NULL) {
 8004000:	b93d      	cbnz	r5, 8004012 <mqtt_append_request+0x3a>
    *tail = r;
 8004002:	603e      	str	r6, [r7, #0]
}
 8004004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    time_before += iter->timeout_diff;
 8004006:	89da      	ldrh	r2, [r3, #14]
 8004008:	4414      	add	r4, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800400a:	461d      	mov	r5, r3
    time_before += iter->timeout_diff;
 800400c:	b222      	sxth	r2, r4
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e7e8      	b.n	8003fe4 <mqtt_append_request+0xc>
    head->next = r;
 8004012:	602e      	str	r6, [r5, #0]
}
 8004014:	e7f6      	b.n	8004004 <mqtt_append_request+0x2c>
 8004016:	bf00      	nop
 8004018:	0800da49 	.word	0x0800da49
 800401c:	0800d809 	.word	0x0800d809
 8004020:	0800d7e1 	.word	0x0800d7e1

08004024 <mqtt_take_request>:
{
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	460d      	mov	r5, r1
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8004028:	4604      	mov	r4, r0
 800402a:	b930      	cbnz	r0, 800403a <mqtt_take_request+0x16>
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <mqtt_take_request+0x48>)
 800402e:	4910      	ldr	r1, [pc, #64]	; (8004070 <mqtt_take_request+0x4c>)
 8004030:	4810      	ldr	r0, [pc, #64]	; (8004074 <mqtt_take_request+0x50>)
 8004032:	f240 1249 	movw	r2, #329	; 0x149
 8004036:	f008 fc1b 	bl	800c870 <iprintf>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800403a:	6820      	ldr	r0, [r4, #0]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800403c:	2200      	movs	r2, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800403e:	b900      	cbnz	r0, 8004042 <mqtt_take_request+0x1e>
}
 8004040:	bd38      	pop	{r3, r4, r5, pc}
    if (iter->pkt_id == pkt_id) {
 8004042:	8981      	ldrh	r1, [r0, #12]
 8004044:	6803      	ldr	r3, [r0, #0]
 8004046:	42a9      	cmp	r1, r5
 8004048:	d004      	beq.n	8004054 <mqtt_take_request+0x30>
 800404a:	4602      	mov	r2, r0
 800404c:	4618      	mov	r0, r3
 800404e:	e7f6      	b.n	800403e <mqtt_take_request+0x1a>
      prev->next = iter->next;
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e002      	b.n	800405a <mqtt_take_request+0x36>
    if (prev == NULL) {
 8004054:	2a00      	cmp	r2, #0
 8004056:	d1fb      	bne.n	8004050 <mqtt_take_request+0x2c>
      *tail= iter->next;
 8004058:	6023      	str	r3, [r4, #0]
    if (iter->next != NULL) {
 800405a:	6803      	ldr	r3, [r0, #0]
 800405c:	b11b      	cbz	r3, 8004066 <mqtt_take_request+0x42>
      iter->next->timeout_diff += iter->timeout_diff;
 800405e:	89da      	ldrh	r2, [r3, #14]
 8004060:	89c1      	ldrh	r1, [r0, #14]
 8004062:	440a      	add	r2, r1
 8004064:	81da      	strh	r2, [r3, #14]
    iter->next = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	6003      	str	r3, [r0, #0]
  return iter;
 800406a:	e7e9      	b.n	8004040 <mqtt_take_request+0x1c>
 800406c:	0800da49 	.word	0x0800da49
 8004070:	0800db6b 	.word	0x0800db6b
 8004074:	0800d7e1 	.word	0x0800d7e1

08004078 <mqtt_output_send>:
  u16_t send_len = tcp_sndbuf(tpcb);
 8004078:	f8b1 2060 	ldrh.w	r2, [r1, #96]	; 0x60
{
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	4605      	mov	r5, r0
 8004080:	460e      	mov	r6, r1
  if (send_len == 0 || ringbuf_lin_len == 0) {
 8004082:	2a00      	cmp	r2, #0
 8004084:	d043      	beq.n	800410e <mqtt_output_send+0x96>
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8004086:	8840      	ldrh	r0, [r0, #2]
 8004088:	882b      	ldrh	r3, [r5, #0]
 800408a:	b2c1      	uxtb	r1, r0
 800408c:	1a1b      	subs	r3, r3, r0
 800408e:	b29b      	uxth	r3, r3
 8004090:	f5c1 7480 	rsb	r4, r1, #256	; 0x100
 8004094:	429c      	cmp	r4, r3
 8004096:	bfa8      	it	ge
 8004098:	461c      	movge	r4, r3
  if (send_len == 0 || ringbuf_lin_len == 0) {
 800409a:	2c00      	cmp	r4, #0
 800409c:	d037      	beq.n	800410e <mqtt_output_send+0x96>
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800409e:	b2a4      	uxth	r4, r4
 80040a0:	3104      	adds	r1, #4
  if (send_len > ringbuf_lin_len) {
 80040a2:	4294      	cmp	r4, r2
 80040a4:	4429      	add	r1, r5
 80040a6:	d22e      	bcs.n	8004106 <mqtt_output_send+0x8e>
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	bf8b      	itete	hi
 80040ac:	2701      	movhi	r7, #1
 80040ae:	2700      	movls	r7, #0
 80040b0:	2303      	movhi	r3, #3
 80040b2:	2301      	movls	r3, #1
 80040b4:	4622      	mov	r2, r4
 80040b6:	4630      	mov	r0, r6
 80040b8:	f003 fee0 	bl	8007e7c <tcp_write>
  if ((err == ERR_OK) && wrap) {
 80040bc:	bb38      	cbnz	r0, 800410e <mqtt_output_send+0x96>
 80040be:	b1d7      	cbz	r7, 80040f6 <mqtt_output_send+0x7e>
 80040c0:	886b      	ldrh	r3, [r5, #2]
 80040c2:	441c      	add	r4, r3
 80040c4:	b2a3      	uxth	r3, r4
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80040c6:	882c      	ldrh	r4, [r5, #0]
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80040c8:	806b      	strh	r3, [r5, #2]
 80040ca:	b2d9      	uxtb	r1, r3
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80040cc:	1ae4      	subs	r4, r4, r3
 80040ce:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
 80040d2:	b2a4      	uxth	r4, r4
 80040d4:	429c      	cmp	r4, r3
 80040d6:	bfa8      	it	ge
 80040d8:	461c      	movge	r4, r3
 80040da:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 80040de:	429c      	cmp	r4, r3
 80040e0:	bfa8      	it	ge
 80040e2:	461c      	movge	r4, r3
 80040e4:	b2a4      	uxth	r4, r4
    err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80040e6:	3104      	adds	r1, #4
 80040e8:	2301      	movs	r3, #1
 80040ea:	4622      	mov	r2, r4
 80040ec:	4429      	add	r1, r5
 80040ee:	4630      	mov	r0, r6
 80040f0:	f003 fec4 	bl	8007e7c <tcp_write>
  if (err == ERR_OK) {
 80040f4:	b958      	cbnz	r0, 800410e <mqtt_output_send+0x96>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80040f6:	886b      	ldrh	r3, [r5, #2]
 80040f8:	441c      	add	r4, r3
 80040fa:	806c      	strh	r4, [r5, #2]
    tcp_output(tpcb);
 80040fc:	4630      	mov	r0, r6
}
 80040fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    tcp_output(tpcb);
 8004102:	f004 ba33 	b.w	800856c <tcp_output>
 8004106:	4614      	mov	r4, r2
 8004108:	2700      	movs	r7, #0
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800410a:	2301      	movs	r3, #1
 800410c:	e7d2      	b.n	80040b4 <mqtt_output_send+0x3c>
}
 800410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004110 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct tcp_pcb *tpcb)
{
 8004110:	b508      	push	{r3, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  if (client->conn_state == MQTT_CONNECTED) {
 8004112:	7a83      	ldrb	r3, [r0, #10]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d102      	bne.n	800411e <mqtt_tcp_poll_cb+0xe>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8004118:	30ec      	adds	r0, #236	; 0xec
 800411a:	f7ff ffad 	bl	8004078 <mqtt_output_send>
  }
  return ERR_OK;
}
 800411e:	2000      	movs	r0, #0
 8004120:	bd08      	pop	{r3, pc}
	...

08004124 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	4604      	mov	r4, r0
 8004128:	460e      	mov	r6, r1
  mqtt_client_t* client = (mqtt_client_t *)arg;

  if (err != ERR_OK) {
 800412a:	4615      	mov	r5, r2
 800412c:	b9da      	cbnz	r2, 8004166 <mqtt_tcp_connect_cb+0x42>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800412e:	66a2      	str	r2, [r4, #104]	; 0x68

  /* Setup TCP callbacks */
  tcp_recv(tpcb, mqtt_tcp_recv_cb);
 8004130:	490e      	ldr	r1, [pc, #56]	; (800416c <mqtt_tcp_connect_cb+0x48>)
 8004132:	4630      	mov	r0, r6
 8004134:	f001 fd52 	bl	8005bdc <tcp_recv>
  tcp_sent(tpcb, mqtt_tcp_sent_cb);
 8004138:	490d      	ldr	r1, [pc, #52]	; (8004170 <mqtt_tcp_connect_cb+0x4c>)
 800413a:	4630      	mov	r0, r6
 800413c:	f001 fd66 	bl	8005c0c <tcp_sent>
  tcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8004140:	2202      	movs	r2, #2
 8004142:	490c      	ldr	r1, [pc, #48]	; (8004174 <mqtt_tcp_connect_cb+0x50>)
 8004144:	4630      	mov	r0, r6
 8004146:	f001 fd8f 	bl	8005c68 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800414a:	2302      	movs	r3, #2

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 800414c:	490a      	ldr	r1, [pc, #40]	; (8004178 <mqtt_tcp_connect_cb+0x54>)
  client->conn_state = MQTT_CONNECTING;
 800414e:	72a3      	strb	r3, [r4, #10]
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 8004150:	f241 3088 	movw	r0, #5000	; 0x1388
 8004154:	4622      	mov	r2, r4
 8004156:	f004 fcd1 	bl	8008afc <sys_timeout>
  client->cyclic_tick = 0;
 800415a:	4620      	mov	r0, r4

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800415c:	68e1      	ldr	r1, [r4, #12]
  client->cyclic_tick = 0;
 800415e:	f820 5bec 	strh.w	r5, [r0], #236
  mqtt_output_send(&client->output, client->conn);
 8004162:	f7ff ff89 	bl	8004078 <mqtt_output_send>

  return ERR_OK;
}
 8004166:	4628      	mov	r0, r5
 8004168:	bd70      	pop	{r4, r5, r6, pc}
 800416a:	bf00      	nop
 800416c:	0800456d 	.word	0x0800456d
 8004170:	08004231 	.word	0x08004231
 8004174:	08004111 	.word	0x08004111
 8004178:	080042b5 	.word	0x080042b5

0800417c <mqtt_close>:
{
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	460e      	mov	r6, r1
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8004180:	4604      	mov	r4, r0
 8004182:	b930      	cbnz	r0, 8004192 <mqtt_close+0x16>
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <mqtt_close+0x70>)
 8004186:	491a      	ldr	r1, [pc, #104]	; (80041f0 <mqtt_close+0x74>)
 8004188:	481a      	ldr	r0, [pc, #104]	; (80041f4 <mqtt_close+0x78>)
 800418a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800418e:	f008 fb6f 	bl	800c870 <iprintf>
  if (client->conn != NULL) {
 8004192:	68e0      	ldr	r0, [r4, #12]
 8004194:	b198      	cbz	r0, 80041be <mqtt_close+0x42>
    tcp_recv(client->conn, NULL);
 8004196:	2100      	movs	r1, #0
 8004198:	f001 fd20 	bl	8005bdc <tcp_recv>
    tcp_err(client->conn,  NULL);
 800419c:	2100      	movs	r1, #0
 800419e:	68e0      	ldr	r0, [r4, #12]
 80041a0:	f001 fd4a 	bl	8005c38 <tcp_err>
    tcp_sent(client->conn, NULL);
 80041a4:	68e0      	ldr	r0, [r4, #12]
 80041a6:	2100      	movs	r1, #0
 80041a8:	f001 fd30 	bl	8005c0c <tcp_sent>
    res = tcp_close(client->conn);
 80041ac:	68e0      	ldr	r0, [r4, #12]
 80041ae:	f002 f869 	bl	8006284 <tcp_close>
    if (res != ERR_OK) {
 80041b2:	b110      	cbz	r0, 80041ba <mqtt_close+0x3e>
      tcp_abort(client->conn);
 80041b4:	68e0      	ldr	r0, [r4, #12]
 80041b6:	f002 f97d 	bl	80064b4 <tcp_abort>
    client->conn = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60e3      	str	r3, [r4, #12]
  for (iter = *tail; iter != NULL; iter = next) {
 80041be:	69a5      	ldr	r5, [r4, #24]
 80041c0:	b97d      	cbnz	r5, 80041e2 <mqtt_close+0x66>
  *tail = NULL;
 80041c2:	61a5      	str	r5, [r4, #24]
  sys_untimeout(mqtt_cyclic_timer, client);
 80041c4:	4621      	mov	r1, r4
 80041c6:	480c      	ldr	r0, [pc, #48]	; (80041f8 <mqtt_close+0x7c>)
 80041c8:	f004 fd56 	bl	8008c78 <sys_untimeout>
  if (client->conn_state != TCP_DISCONNECTED) {
 80041cc:	7aa3      	ldrb	r3, [r4, #10]
 80041ce:	b163      	cbz	r3, 80041ea <mqtt_close+0x6e>
    if (client->connect_cb != NULL) {
 80041d0:	6963      	ldr	r3, [r4, #20]
    client->conn_state = TCP_DISCONNECTED;
 80041d2:	72a5      	strb	r5, [r4, #10]
    if (client->connect_cb != NULL) {
 80041d4:	b14b      	cbz	r3, 80041ea <mqtt_close+0x6e>
      client->connect_cb(client, client->connect_arg, reason);
 80041d6:	4632      	mov	r2, r6
 80041d8:	6921      	ldr	r1, [r4, #16]
 80041da:	4620      	mov	r0, r4
}
 80041dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      client->connect_cb(client, client->connect_arg, reason);
 80041e0:	4718      	bx	r3
    next = iter->next;
 80041e2:	682b      	ldr	r3, [r5, #0]
    r->next = r;
 80041e4:	602d      	str	r5, [r5, #0]
 80041e6:	461d      	mov	r5, r3
 80041e8:	e7ea      	b.n	80041c0 <mqtt_close+0x44>
}
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	0800da49 	.word	0x0800da49
 80041f0:	0800da0c 	.word	0x0800da0c
 80041f4:	0800d7e1 	.word	0x0800d7e1
 80041f8:	080042b5 	.word	0x080042b5

080041fc <mqtt_tcp_err_cb>:
{
 80041fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80041fe:	4604      	mov	r4, r0
 8004200:	b930      	cbnz	r0, 8004210 <mqtt_tcp_err_cb+0x14>
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <mqtt_tcp_err_cb+0x28>)
 8004204:	4908      	ldr	r1, [pc, #32]	; (8004228 <mqtt_tcp_err_cb+0x2c>)
 8004206:	4809      	ldr	r0, [pc, #36]	; (800422c <mqtt_tcp_err_cb+0x30>)
 8004208:	f240 32ae 	movw	r2, #942	; 0x3ae
 800420c:	f008 fb30 	bl	800c870 <iprintf>
  client->conn = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	60e3      	str	r3, [r4, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8004214:	4620      	mov	r0, r4
 8004216:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 800421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800421e:	f7ff bfad 	b.w	800417c <mqtt_close>
 8004222:	bf00      	nop
 8004224:	0800da49 	.word	0x0800da49
 8004228:	0800db8b 	.word	0x0800db8b
 800422c:	0800d7e1 	.word	0x0800d7e1

08004230 <mqtt_tcp_sent_cb>:
{
 8004230:	b570      	push	{r4, r5, r6, lr}
  if (client->conn_state == MQTT_CONNECTED) {
 8004232:	7a83      	ldrb	r3, [r0, #10]
 8004234:	2b03      	cmp	r3, #3
{
 8004236:	4604      	mov	r4, r0
  if (client->conn_state == MQTT_CONNECTED) {
 8004238:	d10f      	bne.n	800425a <mqtt_tcp_sent_cb+0x2a>
    client->cyclic_tick = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	8003      	strh	r3, [r0, #0]
    client->server_watchdog = 0;
 800423e:	8083      	strh	r3, [r0, #4]
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8004240:	f100 0618 	add.w	r6, r0, #24
 8004244:	2100      	movs	r1, #0
 8004246:	4630      	mov	r0, r6
 8004248:	f7ff feec 	bl	8004024 <mqtt_take_request>
 800424c:	4605      	mov	r5, r0
 800424e:	b930      	cbnz	r0, 800425e <mqtt_tcp_sent_cb+0x2e>
    mqtt_output_send(&client->output, client->conn);
 8004250:	68e1      	ldr	r1, [r4, #12]
 8004252:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8004256:	f7ff ff0f 	bl	8004078 <mqtt_output_send>
}
 800425a:	2000      	movs	r0, #0
 800425c:	bd70      	pop	{r4, r5, r6, pc}
      if (r->cb != NULL) {
 800425e:	686b      	ldr	r3, [r5, #4]
 8004260:	b113      	cbz	r3, 8004268 <mqtt_tcp_sent_cb+0x38>
        r->cb(r->arg, ERR_OK);
 8004262:	2100      	movs	r1, #0
 8004264:	68a8      	ldr	r0, [r5, #8]
 8004266:	4798      	blx	r3
    r->next = r;
 8004268:	602d      	str	r5, [r5, #0]
 800426a:	e7eb      	b.n	8004244 <mqtt_tcp_sent_cb+0x14>

0800426c <mqtt_output_append_fixed_header.constprop.5>:
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
 800426c:	b570      	push	{r4, r5, r6, lr}
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 800426e:	0052      	lsls	r2, r2, #1
  mqtt_ringbuf_put(rb, value);
 8004270:	8806      	ldrh	r6, [r0, #0]
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
 8004272:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8004276:	f002 0206 	and.w	r2, r2, #6
  mqtt_ringbuf_put(rb, value);
 800427a:	1c74      	adds	r4, r6, #1
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 800427c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  mqtt_ringbuf_put(rb, value);
 8004280:	fa50 f686 	uxtab	r6, r0, r6
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8004284:	f003 0301 	and.w	r3, r3, #1
  mqtt_ringbuf_put(rb, value);
 8004288:	b2a4      	uxth	r4, r4
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 800428a:	431a      	orrs	r2, r3
  mqtt_ringbuf_put(rb, value);
 800428c:	8004      	strh	r4, [r0, #0]
 800428e:	7132      	strb	r2, [r6, #4]
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8004290:	2d80      	cmp	r5, #128	; 0x80
 8004292:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8004296:	bf34      	ite	cc
 8004298:	2100      	movcc	r1, #0
 800429a:	f06f 017f 	mvncs.w	r1, #127	; 0x7f
  mqtt_ringbuf_put(rb, value);
 800429e:	1c62      	adds	r2, r4, #1
 80042a0:	fa50 f484 	uxtab	r4, r0, r4
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 80042a4:	430b      	orrs	r3, r1
  } while (r_length > 0);
 80042a6:	09ed      	lsrs	r5, r5, #7
  mqtt_ringbuf_put(rb, value);
 80042a8:	7123      	strb	r3, [r4, #4]
 80042aa:	b294      	uxth	r4, r2
  } while (r_length > 0);
 80042ac:	d1f0      	bne.n	8004290 <mqtt_output_append_fixed_header.constprop.5+0x24>
 80042ae:	8004      	strh	r4, [r0, #0]
}
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042b4 <mqtt_cyclic_timer>:
{
 80042b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80042b6:	4604      	mov	r4, r0
 80042b8:	b930      	cbnz	r0, 80042c8 <mqtt_cyclic_timer+0x14>
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <mqtt_cyclic_timer+0xe4>)
 80042bc:	4937      	ldr	r1, [pc, #220]	; (800439c <mqtt_cyclic_timer+0xe8>)
 80042be:	4838      	ldr	r0, [pc, #224]	; (80043a0 <mqtt_cyclic_timer+0xec>)
 80042c0:	f240 2225 	movw	r2, #549	; 0x225
 80042c4:	f008 fad4 	bl	800c870 <iprintf>
  if (client->conn_state == MQTT_CONNECTING) {
 80042c8:	7aa3      	ldrb	r3, [r4, #10]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d118      	bne.n	8004300 <mqtt_cyclic_timer+0x4c>
    client->cyclic_tick++;
 80042ce:	8823      	ldrh	r3, [r4, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8023      	strh	r3, [r4, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80042d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042da:	2b63      	cmp	r3, #99	; 0x63
 80042dc:	dc08      	bgt.n	80042f0 <mqtt_cyclic_timer+0x3c>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 80042de:	4931      	ldr	r1, [pc, #196]	; (80043a4 <mqtt_cyclic_timer+0xf0>)
 80042e0:	4622      	mov	r2, r4
 80042e2:	f241 3088 	movw	r0, #5000	; 0x1388
}
 80042e6:	b003      	add	sp, #12
 80042e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 80042ec:	f004 bc06 	b.w	8008afc <sys_timeout>
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80042f0:	f240 1101 	movw	r1, #257	; 0x101
 80042f4:	4620      	mov	r0, r4
}
 80042f6:	b003      	add	sp, #12
 80042f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80042fc:	f7ff bf3e 	b.w	800417c <mqtt_close>
  } else if (client->conn_state == MQTT_CONNECTED) {
 8004300:	2b03      	cmp	r3, #3
 8004302:	d13f      	bne.n	8004384 <mqtt_cyclic_timer+0xd0>
  r = *tail;
 8004304:	69a5      	ldr	r5, [r4, #24]
 8004306:	2605      	movs	r6, #5
  while (t > 0 && r != NULL) {
 8004308:	b18d      	cbz	r5, 800432e <mqtt_cyclic_timer+0x7a>
    if (t >= r->timeout_diff) {
 800430a:	89eb      	ldrh	r3, [r5, #14]
 800430c:	b2b2      	uxth	r2, r6
 800430e:	429a      	cmp	r2, r3
 8004310:	d33a      	bcc.n	8004388 <mqtt_cyclic_timer+0xd4>
      t -= (u8_t)r->timeout_diff;
 8004312:	1af6      	subs	r6, r6, r3
      *tail = r->next;
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	61a3      	str	r3, [r4, #24]
      if (r->cb != NULL) {
 8004318:	686b      	ldr	r3, [r5, #4]
      t -= (u8_t)r->timeout_diff;
 800431a:	b2f6      	uxtb	r6, r6
      if (r->cb != NULL) {
 800431c:	b11b      	cbz	r3, 8004326 <mqtt_cyclic_timer+0x72>
        r->cb(r->arg, ERR_TIMEOUT);
 800431e:	f06f 0102 	mvn.w	r1, #2
 8004322:	68a8      	ldr	r0, [r5, #8]
 8004324:	4798      	blx	r3
    r->next = r;
 8004326:	602d      	str	r5, [r5, #0]
      r = *(struct mqtt_request_t * const volatile *)tail;
 8004328:	69a5      	ldr	r5, [r4, #24]
  while (t > 0 && r != NULL) {
 800432a:	2e00      	cmp	r6, #0
 800432c:	d1ec      	bne.n	8004308 <mqtt_cyclic_timer+0x54>
    if (client->keep_alive > 0) {
 800432e:	8862      	ldrh	r2, [r4, #2]
 8004330:	2a00      	cmp	r2, #0
 8004332:	d0d4      	beq.n	80042de <mqtt_cyclic_timer+0x2a>
      client->server_watchdog++;
 8004334:	88a3      	ldrh	r3, [r4, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	b29b      	uxth	r3, r3
 800433a:	80a3      	strh	r3, [r4, #4]
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive/2)) {
 800433c:	eb02 0252 	add.w	r2, r2, r2, lsr #1
 8004340:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004344:	4293      	cmp	r3, r2
 8004346:	dd22      	ble.n	800438e <mqtt_cyclic_timer+0xda>
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004348:	f240 1101 	movw	r1, #257	; 0x101
 800434c:	4620      	mov	r0, r4
 800434e:	f7ff ff15 	bl	800417c <mqtt_close>
        restart_timer = 0;
 8004352:	2600      	movs	r6, #0
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8004354:	8823      	ldrh	r3, [r4, #0]
 8004356:	8862      	ldrh	r2, [r4, #2]
 8004358:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800435c:	4291      	cmp	r1, r2
 800435e:	db18      	blt.n	8004392 <mqtt_cyclic_timer+0xde>
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8004360:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 8004364:	2100      	movs	r1, #0
 8004366:	4638      	mov	r0, r7
 8004368:	f7ff fe14 	bl	8003f94 <mqtt_output_check_space>
 800436c:	b140      	cbz	r0, 8004380 <mqtt_cyclic_timer+0xcc>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800436e:	2500      	movs	r5, #0
 8004370:	9500      	str	r5, [sp, #0]
 8004372:	462b      	mov	r3, r5
 8004374:	462a      	mov	r2, r5
 8004376:	210c      	movs	r1, #12
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff ff77 	bl	800426c <mqtt_output_append_fixed_header.constprop.5>
          client->cyclic_tick = 0;
 800437e:	8025      	strh	r5, [r4, #0]
  if (restart_timer) {
 8004380:	2e00      	cmp	r6, #0
 8004382:	d1ac      	bne.n	80042de <mqtt_cyclic_timer+0x2a>
}
 8004384:	b003      	add	sp, #12
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
      r->timeout_diff -= t;
 8004388:	1a9e      	subs	r6, r3, r2
 800438a:	81ee      	strh	r6, [r5, #14]
 800438c:	e7cf      	b.n	800432e <mqtt_cyclic_timer+0x7a>
  u8_t restart_timer = 1;
 800438e:	2601      	movs	r6, #1
 8004390:	e7e0      	b.n	8004354 <mqtt_cyclic_timer+0xa0>
        client->cyclic_tick++;
 8004392:	3301      	adds	r3, #1
 8004394:	8023      	strh	r3, [r4, #0]
 8004396:	e7f3      	b.n	8004380 <mqtt_cyclic_timer+0xcc>
 8004398:	0800da49 	.word	0x0800da49
 800439c:	0800da27 	.word	0x0800da27
 80043a0:	0800d7e1 	.word	0x0800d7e1
 80043a4:	080042b5 	.word	0x080042b5

080043a8 <pub_ack_rec_rel_response>:
{
 80043a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (mqtt_output_check_space(&client->output, 2)) {
 80043ac:	f100 04ec 	add.w	r4, r0, #236	; 0xec
{
 80043b0:	4605      	mov	r5, r0
 80043b2:	460f      	mov	r7, r1
  if (mqtt_output_check_space(&client->output, 2)) {
 80043b4:	4620      	mov	r0, r4
 80043b6:	2102      	movs	r1, #2
{
 80043b8:	4616      	mov	r6, r2
 80043ba:	4698      	mov	r8, r3
  if (mqtt_output_check_space(&client->output, 2)) {
 80043bc:	f7ff fdea 	bl	8003f94 <mqtt_output_check_space>
 80043c0:	b190      	cbz	r0, 80043e8 <pub_ack_rec_rel_response+0x40>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80043c2:	2302      	movs	r3, #2
 80043c4:	4642      	mov	r2, r8
 80043c6:	4620      	mov	r0, r4
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4639      	mov	r1, r7
 80043cc:	2300      	movs	r3, #0
 80043ce:	f7ff ff4d 	bl	800426c <mqtt_output_append_fixed_header.constprop.5>
    mqtt_output_append_u16(&client->output, pkt_id);
 80043d2:	4631      	mov	r1, r6
 80043d4:	f7ff fda4 	bl	8003f20 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80043d8:	4620      	mov	r0, r4
 80043da:	68e9      	ldr	r1, [r5, #12]
 80043dc:	f7ff fe4c 	bl	8004078 <mqtt_output_send>
  err_t err = ERR_OK;
 80043e0:	2000      	movs	r0, #0
}
 80043e2:	b002      	add	sp, #8
 80043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_MEM;
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	e7f9      	b.n	80043e2 <pub_ack_rec_rel_response+0x3a>

080043ee <mqtt_message_received>:
{
 80043ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80043f2:	f890 a06c 	ldrb.w	sl, [r0, #108]	; 0x6c
 80043f6:	ea4f 161a 	mov.w	r6, sl, lsr #4
{
 80043fa:	461c      	mov	r4, r3
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 80043fc:	2e02      	cmp	r6, #2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 80043fe:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
 8004402:	4605      	mov	r5, r0
 8004404:	4690      	mov	r8, r2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8004406:	eb03 0901 	add.w	r9, r3, r1
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800440a:	d114      	bne.n	8004436 <mqtt_message_received+0x48>
    if (client->conn_state == MQTT_CONNECTING) {
 800440c:	7a83      	ldrb	r3, [r0, #10]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d001      	beq.n	8004416 <mqtt_message_received+0x28>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8004412:	2400      	movs	r4, #0
 8004414:	e00b      	b.n	800442e <mqtt_message_received+0x40>
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8004416:	f899 4001 	ldrb.w	r4, [r9, #1]
      if (res == MQTT_CONNECT_ACCEPTED) {
 800441a:	b944      	cbnz	r4, 800442e <mqtt_message_received+0x40>
        client->conn_state = MQTT_CONNECTED;
 800441c:	2303      	movs	r3, #3
 800441e:	7283      	strb	r3, [r0, #10]
        if (client->connect_cb != 0) {
 8004420:	6943      	ldr	r3, [r0, #20]
        client->cyclic_tick = 0;
 8004422:	8004      	strh	r4, [r0, #0]
        if (client->connect_cb != 0) {
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f4      	beq.n	8004412 <mqtt_message_received+0x24>
          client->connect_cb(client, client->connect_arg, res);
 8004428:	4622      	mov	r2, r4
 800442a:	6901      	ldr	r1, [r0, #16]
 800442c:	4798      	blx	r3
}
 800442e:	4620      	mov	r0, r4
 8004430:	b003      	add	sp, #12
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8004436:	2e0d      	cmp	r6, #13
 8004438:	d0eb      	beq.n	8004412 <mqtt_message_received+0x24>
  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800443a:	2e03      	cmp	r6, #3
 800443c:	d15d      	bne.n	80044fa <mqtt_message_received+0x10c>
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800443e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004440:	2a80      	cmp	r2, #128	; 0x80
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8004442:	f3ca 0a41 	ubfx	sl, sl, #1, #2
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8004446:	d856      	bhi.n	80044f6 <mqtt_message_received+0x108>
      u16_t topic_len = var_hdr_payload[0];
 8004448:	5c5b      	ldrb	r3, [r3, r1]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800444a:	f899 7001 	ldrb.w	r7, [r9, #1]
 800444e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8004452:	b2bf      	uxth	r7, r7
      if ((after_topic + (qos? 2 : 1)) > length) {
 8004454:	f1ba 0f00 	cmp.w	sl, #0
      after_topic = 2 + topic_len;
 8004458:	f107 0602 	add.w	r6, r7, #2
      if ((after_topic + (qos? 2 : 1)) > length) {
 800445c:	bf14      	ite	ne
 800445e:	2302      	movne	r3, #2
 8004460:	2301      	moveq	r3, #1
      after_topic = 2 + topic_len;
 8004462:	b2b6      	uxth	r6, r6
      if ((after_topic + (qos? 2 : 1)) > length) {
 8004464:	4433      	add	r3, r6
 8004466:	4543      	cmp	r3, r8
 8004468:	dd02      	ble.n	8004470 <mqtt_message_received+0x82>
  return MQTT_CONNECT_DISCONNECTED;
 800446a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800446e:	e7de      	b.n	800442e <mqtt_message_received+0x40>
      if (qos > 0) {
 8004470:	f1ba 0f00 	cmp.w	sl, #0
 8004474:	d03c      	beq.n	80044f0 <mqtt_message_received+0x102>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8004476:	f819 2006 	ldrb.w	r2, [r9, r6]
 800447a:	444e      	add	r6, r9
 800447c:	7873      	ldrb	r3, [r6, #1]
        after_topic += 2;
 800447e:	1d3e      	adds	r6, r7, #4
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8004480:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004484:	8103      	strh	r3, [r0, #8]
        after_topic += 2;
 8004486:	b2b6      	uxth	r6, r6
      topic = var_hdr_payload + 2;
 8004488:	f109 0b02 	add.w	fp, r9, #2
      payload_length = length - after_topic;
 800448c:	eba8 0806 	sub.w	r8, r8, r6
      bkp = topic[topic_len];
 8004490:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8004494:	9301      	str	r3, [sp, #4]
      topic[topic_len] = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	f80b 3007 	strb.w	r3, [fp, r7]
      if (client->pub_cb != NULL) {
 800449c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      payload_length = length - after_topic;
 800449e:	fa1f f888 	uxth.w	r8, r8
      if (client->pub_cb != NULL) {
 80044a2:	b123      	cbz	r3, 80044ae <mqtt_message_received+0xc0>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80044a4:	eb08 0204 	add.w	r2, r8, r4
 80044a8:	4659      	mov	r1, fp
 80044aa:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80044ac:	4798      	blx	r3
      topic[topic_len] = bkp;
 80044ae:	9b01      	ldr	r3, [sp, #4]
 80044b0:	f80b 3007 	strb.w	r3, [fp, r7]
    if (payload_length > 0 || remaining_length == 0) {
 80044b4:	f1b8 0f00 	cmp.w	r8, #0
 80044b8:	d101      	bne.n	80044be <mqtt_message_received+0xd0>
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	d1a9      	bne.n	8004412 <mqtt_message_received+0x24>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 80044be:	fab4 f384 	clz	r3, r4
 80044c2:	6e2f      	ldr	r7, [r5, #96]	; 0x60
 80044c4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	4642      	mov	r2, r8
 80044ca:	eb09 0106 	add.w	r1, r9, r6
 80044ce:	47b8      	blx	r7
      if (remaining_length == 0 && qos > 0) {
 80044d0:	2c00      	cmp	r4, #0
 80044d2:	d19e      	bne.n	8004412 <mqtt_message_received+0x24>
 80044d4:	f1ba 0f00 	cmp.w	sl, #0
 80044d8:	d09b      	beq.n	8004412 <mqtt_message_received+0x24>
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 80044da:	f1ba 0f01 	cmp.w	sl, #1
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 80044de:	4623      	mov	r3, r4
 80044e0:	892a      	ldrh	r2, [r5, #8]
 80044e2:	bf0c      	ite	eq
 80044e4:	2104      	moveq	r1, #4
 80044e6:	2105      	movne	r1, #5
 80044e8:	4628      	mov	r0, r5
 80044ea:	f7ff ff5d 	bl	80043a8 <pub_ack_rec_rel_response>
 80044ee:	e79e      	b.n	800442e <mqtt_message_received+0x40>
        client->inpub_pkt_id = 0;
 80044f0:	f8a0 a008 	strh.w	sl, [r0, #8]
 80044f4:	e7c8      	b.n	8004488 <mqtt_message_received+0x9a>
    u16_t payload_offset = 0;
 80044f6:	2600      	movs	r6, #0
 80044f8:	e7dc      	b.n	80044b4 <mqtt_message_received+0xc6>
 80044fa:	f8b9 2000 	ldrh.w	r2, [r9]
 80044fe:	ba52      	rev16	r2, r2
 8004500:	b292      	uxth	r2, r2
    if (pkt_id == 0) {
 8004502:	2a00      	cmp	r2, #0
 8004504:	d0b1      	beq.n	800446a <mqtt_message_received+0x7c>
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8004506:	2e05      	cmp	r6, #5
 8004508:	d104      	bne.n	8004514 <mqtt_message_received+0x126>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800450a:	2301      	movs	r3, #1
 800450c:	2106      	movs	r1, #6
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800450e:	f7ff ff4b 	bl	80043a8 <pub_ack_rec_rel_response>
 8004512:	e77e      	b.n	8004412 <mqtt_message_received+0x24>
    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8004514:	2e06      	cmp	r6, #6
 8004516:	d102      	bne.n	800451e <mqtt_message_received+0x130>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8004518:	2300      	movs	r3, #0
 800451a:	2107      	movs	r1, #7
 800451c:	e7f7      	b.n	800450e <mqtt_message_received+0x120>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800451e:	2e0b      	cmp	r6, #11
 8004520:	d8a3      	bhi.n	800446a <mqtt_message_received+0x7c>
 8004522:	f44f 6329 	mov.w	r3, #2704	; 0xa90
 8004526:	40f3      	lsrs	r3, r6
 8004528:	07db      	lsls	r3, r3, #31
 800452a:	d59e      	bpl.n	800446a <mqtt_message_received+0x7c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800452c:	4611      	mov	r1, r2
 800452e:	3018      	adds	r0, #24
 8004530:	f7ff fd78 	bl	8004024 <mqtt_take_request>
      if (r != NULL) {
 8004534:	4604      	mov	r4, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	f43f af6b 	beq.w	8004412 <mqtt_message_received+0x24>
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800453c:	2e09      	cmp	r6, #9
 800453e:	d10f      	bne.n	8004560 <mqtt_message_received+0x172>
          if (length < 3) {
 8004540:	f1b8 0f02 	cmp.w	r8, #2
 8004544:	d991      	bls.n	800446a <mqtt_message_received+0x7c>
  if (r->cb != NULL) {
 8004546:	6843      	ldr	r3, [r0, #4]
 8004548:	b143      	cbz	r3, 800455c <mqtt_message_received+0x16e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800454a:	f899 2002 	ldrb.w	r2, [r9, #2]
 800454e:	2a03      	cmp	r2, #3
 8004550:	bf2c      	ite	cs
 8004552:	f06f 010c 	mvncs.w	r1, #12
 8004556:	2100      	movcc	r1, #0
          r->cb(r->arg, ERR_OK);
 8004558:	68a0      	ldr	r0, [r4, #8]
 800455a:	4798      	blx	r3
    r->next = r;
 800455c:	6024      	str	r4, [r4, #0]
 800455e:	e758      	b.n	8004412 <mqtt_message_received+0x24>
        } else if (r->cb != NULL) {
 8004560:	6843      	ldr	r3, [r0, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0fa      	beq.n	800455c <mqtt_message_received+0x16e>
          r->cb(r->arg, ERR_OK);
 8004566:	2100      	movs	r1, #0
 8004568:	e7f6      	b.n	8004558 <mqtt_message_received+0x16a>
	...

0800456c <mqtt_tcp_recv_cb>:
{
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	460d      	mov	r5, r1
 8004572:	b085      	sub	sp, #20
 8004574:	4690      	mov	r8, r2
 8004576:	4699      	mov	r9, r3
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8004578:	4604      	mov	r4, r0
 800457a:	b930      	cbnz	r0, 800458a <mqtt_tcp_recv_cb+0x1e>
 800457c:	4b60      	ldr	r3, [pc, #384]	; (8004700 <mqtt_tcp_recv_cb+0x194>)
 800457e:	4961      	ldr	r1, [pc, #388]	; (8004704 <mqtt_tcp_recv_cb+0x198>)
 8004580:	4861      	ldr	r0, [pc, #388]	; (8004708 <mqtt_tcp_recv_cb+0x19c>)
 8004582:	f240 325f 	movw	r2, #863	; 0x35f
 8004586:	f008 f973 	bl	800c870 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	42ab      	cmp	r3, r5
 800458e:	d006      	beq.n	800459e <mqtt_tcp_recv_cb+0x32>
 8004590:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <mqtt_tcp_recv_cb+0x194>)
 8004592:	495e      	ldr	r1, [pc, #376]	; (800470c <mqtt_tcp_recv_cb+0x1a0>)
 8004594:	485c      	ldr	r0, [pc, #368]	; (8004708 <mqtt_tcp_recv_cb+0x19c>)
 8004596:	f44f 7258 	mov.w	r2, #864	; 0x360
 800459a:	f008 f969 	bl	800c870 <iprintf>
  if (p == NULL) {
 800459e:	f1b8 0f00 	cmp.w	r8, #0
 80045a2:	d109      	bne.n	80045b8 <mqtt_tcp_recv_cb+0x4c>
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80045a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff fde7 	bl	800417c <mqtt_close>
  return ERR_OK;
 80045ae:	46c1      	mov	r9, r8
}
 80045b0:	4648      	mov	r0, r9
 80045b2:	b005      	add	sp, #20
 80045b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (err != ERR_OK) {
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	d003      	beq.n	80045c6 <mqtt_tcp_recv_cb+0x5a>
      pbuf_free(p);
 80045be:	4640      	mov	r0, r8
 80045c0:	f000 fecc 	bl	800535c <pbuf_free>
      return err;
 80045c4:	e7f4      	b.n	80045b0 <mqtt_tcp_recv_cb+0x44>
    tcp_recved(pcb, p->tot_len);
 80045c6:	4628      	mov	r0, r5
 80045c8:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80045cc:	f001 fa98 	bl	8005b00 <tcp_recved>
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 80045d0:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  u8_t b = 0;
 80045d4:	46ca      	mov	sl, r9
  u8_t fixed_hdr_idx = 0;
 80045d6:	464e      	mov	r6, r9
  u32_t msg_rem_len = 0;
 80045d8:	464d      	mov	r5, r9
  u16_t in_offset = 0;
 80045da:	464f      	mov	r7, r9
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 80045dc:	9303      	str	r3, [sp, #12]
  while (p->tot_len > in_offset) {
 80045de:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80045e2:	429f      	cmp	r7, r3
 80045e4:	d311      	bcc.n	800460a <mqtt_tcp_recv_cb+0x9e>
  return MQTT_CONNECT_ACCEPTED;
 80045e6:	f04f 0b00 	mov.w	fp, #0
    pbuf_free(p);
 80045ea:	4640      	mov	r0, r8
 80045ec:	f000 feb6 	bl	800535c <pbuf_free>
    if (res != MQTT_CONNECT_ACCEPTED) {
 80045f0:	f1bb 0f00 	cmp.w	fp, #0
 80045f4:	d003      	beq.n	80045fe <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80045f6:	4659      	mov	r1, fp
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7ff fdbf 	bl	800417c <mqtt_close>
    if (client->keep_alive != 0) {
 80045fe:	8863      	ldrh	r3, [r4, #2]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0d5      	beq.n	80045b0 <mqtt_tcp_recv_cb+0x44>
      client->server_watchdog = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	80a3      	strh	r3, [r4, #4]
 8004608:	e7d2      	b.n	80045b0 <mqtt_tcp_recv_cb+0x44>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800460a:	2e01      	cmp	r6, #1
 800460c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800460e:	d902      	bls.n	8004616 <mqtt_tcp_recv_cb+0xaa>
 8004610:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8004614:	d032      	beq.n	800467c <mqtt_tcp_recv_cb+0x110>
      if (fixed_hdr_idx < client->msg_idx) {
 8004616:	42b2      	cmp	r2, r6
 8004618:	d91b      	bls.n	8004652 <mqtt_tcp_recv_cb+0xe6>
        b = client->rx_buffer[fixed_hdr_idx];
 800461a:	19a3      	adds	r3, r4, r6
 800461c:	f893 a06c 	ldrb.w	sl, [r3, #108]	; 0x6c
      fixed_hdr_idx++;
 8004620:	3601      	adds	r6, #1
 8004622:	b2f6      	uxtb	r6, r6
      if (fixed_hdr_idx >= 2) {
 8004624:	2e01      	cmp	r6, #1
 8004626:	d9da      	bls.n	80045de <mqtt_tcp_recv_cb+0x72>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004628:	1eb2      	subs	r2, r6, #2
 800462a:	f00a 037f 	and.w	r3, sl, #127	; 0x7f
 800462e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004632:	4093      	lsls	r3, r2
        if ((b & 0x80) == 0) {
 8004634:	f01a 0f80 	tst.w	sl, #128	; 0x80
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004638:	ea45 0503 	orr.w	r5, r5, r3
        if ((b & 0x80) == 0) {
 800463c:	d1cf      	bne.n	80045de <mqtt_tcp_recv_cb+0x72>
          if (msg_rem_len == 0) {
 800463e:	b9cd      	cbnz	r5, 8004674 <mqtt_tcp_recv_cb+0x108>
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8004640:	462b      	mov	r3, r5
 8004642:	462a      	mov	r2, r5
 8004644:	4631      	mov	r1, r6
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff fed1 	bl	80043ee <mqtt_message_received>
          client->msg_idx = 0;
 800464c:	66a5      	str	r5, [r4, #104]	; 0x68
          fixed_hdr_idx = 0;
 800464e:	462e      	mov	r6, r5
 8004650:	e7c5      	b.n	80045de <mqtt_tcp_recv_cb+0x72>
        b = pbuf_get_at(p, in_offset++);
 8004652:	4639      	mov	r1, r7
 8004654:	4640      	mov	r0, r8
 8004656:	f001 f97c 	bl	8005952 <pbuf_get_at>
        client->rx_buffer[client->msg_idx++] = b;
 800465a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 800465c:	f107 0b01 	add.w	fp, r7, #1
        client->rx_buffer[client->msg_idx++] = b;
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	4423      	add	r3, r4
        b = pbuf_get_at(p, in_offset++);
 8004664:	fa1f fb8b 	uxth.w	fp, fp
        client->rx_buffer[client->msg_idx++] = b;
 8004668:	66a2      	str	r2, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 800466a:	4682      	mov	sl, r0
        client->rx_buffer[client->msg_idx++] = b;
 800466c:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
        b = pbuf_get_at(p, in_offset++);
 8004670:	465f      	mov	r7, fp
 8004672:	e7d5      	b.n	8004620 <mqtt_tcp_recv_cb+0xb4>
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8004674:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004676:	1af3      	subs	r3, r6, r3
 8004678:	441d      	add	r5, r3
 800467a:	e7b0      	b.n	80045de <mqtt_tcp_recv_cb+0x72>
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800467c:	f1c6 0180 	rsb	r1, r6, #128	; 0x80
 8004680:	1b92      	subs	r2, r2, r6
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8004682:	1bdb      	subs	r3, r3, r7
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8004684:	fbb2 fbf1 	udiv	fp, r2, r1
 8004688:	fb01 221b 	mls	r2, r1, fp, r2
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800468c:	b29b      	uxth	r3, r3
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800468e:	b292      	uxth	r2, r2
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8004690:	429d      	cmp	r5, r3
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8004692:	eb02 0106 	add.w	r1, r2, r6
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8004696:	9300      	str	r3, [sp, #0]
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8004698:	b289      	uxth	r1, r1
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800469a:	bf9c      	itt	ls
 800469c:	b2ab      	uxthls	r3, r5
 800469e:	9300      	strls	r3, [sp, #0]
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80046a0:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	9302      	str	r3, [sp, #8]
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80046a8:	9201      	str	r2, [sp, #4]
 80046aa:	9b00      	ldr	r3, [sp, #0]
 80046ac:	9a02      	ldr	r2, [sp, #8]
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 80046ae:	9803      	ldr	r0, [sp, #12]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf28      	it	cs
 80046b4:	4613      	movcs	r3, r2
 80046b6:	469b      	mov	fp, r3
 80046b8:	4401      	add	r1, r0
 80046ba:	463b      	mov	r3, r7
 80046bc:	465a      	mov	r2, fp
 80046be:	4640      	mov	r0, r8
 80046c0:	f001 f8ee 	bl	80058a0 <pbuf_copy_partial>
      client->msg_idx += cpy_len;
 80046c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 80046c6:	445f      	add	r7, fp
      client->msg_idx += cpy_len;
 80046c8:	445b      	add	r3, fp
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 80046ca:	ebb5 050b 	subs.w	r5, r5, fp
      client->msg_idx += cpy_len;
 80046ce:	66a3      	str	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 80046d0:	b2bf      	uxth	r7, r7
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 80046d2:	d003      	beq.n	80046dc <mqtt_tcp_recv_cb+0x170>
 80046d4:	9b02      	ldr	r3, [sp, #8]
 80046d6:	9a00      	ldr	r2, [sp, #0]
 80046d8:	4293      	cmp	r3, r2
 80046da:	d880      	bhi.n	80045de <mqtt_tcp_recv_cb+0x72>
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 80046dc:	9b01      	ldr	r3, [sp, #4]
 80046de:	445b      	add	r3, fp
 80046e0:	461a      	mov	r2, r3
 80046e2:	b292      	uxth	r2, r2
 80046e4:	462b      	mov	r3, r5
 80046e6:	4631      	mov	r1, r6
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7ff fe80 	bl	80043ee <mqtt_message_received>
        if (res != MQTT_CONNECT_ACCEPTED) {
 80046ee:	4683      	mov	fp, r0
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f47f af7a 	bne.w	80045ea <mqtt_tcp_recv_cb+0x7e>
        if (msg_rem_len == 0) {
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	f47f af71 	bne.w	80045de <mqtt_tcp_recv_cb+0x72>
 80046fc:	e7a6      	b.n	800464c <mqtt_tcp_recv_cb+0xe0>
 80046fe:	bf00      	nop
 8004700:	0800da49 	.word	0x0800da49
 8004704:	0800dbab 	.word	0x0800dbab
 8004708:	0800d7e1 	.word	0x0800d7e1
 800470c:	0800dbcc 	.word	0x0800dbcc

08004710 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	b085      	sub	sp, #20
 8004716:	468b      	mov	fp, r1
 8004718:	4691      	mov	r9, r2
 800471a:	461f      	mov	r7, r3
 800471c:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8004720:	4604      	mov	r4, r0
 8004722:	b930      	cbnz	r0, 8004732 <mqtt_sub_unsub+0x22>
 8004724:	4b47      	ldr	r3, [pc, #284]	; (8004844 <mqtt_sub_unsub+0x134>)
 8004726:	4948      	ldr	r1, [pc, #288]	; (8004848 <mqtt_sub_unsub+0x138>)
 8004728:	4848      	ldr	r0, [pc, #288]	; (800484c <mqtt_sub_unsub+0x13c>)
 800472a:	f240 4255 	movw	r2, #1109	; 0x455
 800472e:	f008 f89f 	bl	800c870 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8004732:	f1bb 0f00 	cmp.w	fp, #0
 8004736:	d106      	bne.n	8004746 <mqtt_sub_unsub+0x36>
 8004738:	4b42      	ldr	r3, [pc, #264]	; (8004844 <mqtt_sub_unsub+0x134>)
 800473a:	4945      	ldr	r1, [pc, #276]	; (8004850 <mqtt_sub_unsub+0x140>)
 800473c:	4843      	ldr	r0, [pc, #268]	; (800484c <mqtt_sub_unsub+0x13c>)
 800473e:	f240 4256 	movw	r2, #1110	; 0x456
 8004742:	f008 f895 	bl	800c870 <iprintf>

  topic_strlen = strlen(topic);
 8004746:	4658      	mov	r0, fp
 8004748:	f7fb fd5c 	bl	8000204 <strlen>
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800474c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004750:	4298      	cmp	r0, r3
 8004752:	d90b      	bls.n	800476c <mqtt_sub_unsub+0x5c>
 8004754:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <mqtt_sub_unsub+0x134>)
 8004756:	493f      	ldr	r1, [pc, #252]	; (8004854 <mqtt_sub_unsub+0x144>)
 8004758:	f240 4259 	movw	r2, #1113	; 0x459
  topic_len = (u16_t)topic_strlen;
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800475c:	483b      	ldr	r0, [pc, #236]	; (800484c <mqtt_sub_unsub+0x13c>)
 800475e:	f008 f887 	bl	800c870 <iprintf>
 8004762:	f06f 000f 	mvn.w	r0, #15
  }

  mqtt_append_request(&client->pend_req_queue, r);
  mqtt_output_send(&client->output, client->conn);
  return ERR_OK;
}
 8004766:	b005      	add	sp, #20
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800476c:	1d05      	adds	r5, r0, #4
 800476e:	f1ba 0f00 	cmp.w	sl, #0
 8004772:	bf18      	it	ne
 8004774:	3501      	addne	r5, #1
  topic_len = (u16_t)topic_strlen;
 8004776:	b283      	uxth	r3, r0
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8004778:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
  topic_len = (u16_t)topic_strlen;
 800477c:	9303      	str	r3, [sp, #12]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800477e:	db04      	blt.n	800478a <mqtt_sub_unsub+0x7a>
 8004780:	4b30      	ldr	r3, [pc, #192]	; (8004844 <mqtt_sub_unsub+0x134>)
 8004782:	4935      	ldr	r1, [pc, #212]	; (8004858 <mqtt_sub_unsub+0x148>)
 8004784:	f240 425d 	movw	r2, #1117	; 0x45d
 8004788:	e7e8      	b.n	800475c <mqtt_sub_unsub+0x4c>
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800478a:	f1b9 0f02 	cmp.w	r9, #2
  remaining_length = (u16_t)total_len;
 800478e:	b2ad      	uxth	r5, r5
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8004790:	d906      	bls.n	80047a0 <mqtt_sub_unsub+0x90>
 8004792:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <mqtt_sub_unsub+0x134>)
 8004794:	4931      	ldr	r1, [pc, #196]	; (800485c <mqtt_sub_unsub+0x14c>)
 8004796:	482d      	ldr	r0, [pc, #180]	; (800484c <mqtt_sub_unsub+0x13c>)
 8004798:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800479c:	f008 f868 	bl	800c870 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 80047a0:	7aa3      	ldrb	r3, [r4, #10]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04b      	beq.n	800483e <mqtt_sub_unsub+0x12e>
  client->pkt_id_seq++;
 80047a6:	88e6      	ldrh	r6, [r4, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 80047a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  client->pkt_id_seq++;
 80047aa:	3601      	adds	r6, #1
 80047ac:	b2b6      	uxth	r6, r6
    client->pkt_id_seq++;
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	bf08      	it	eq
 80047b2:	2601      	moveq	r6, #1
 80047b4:	80e6      	strh	r6, [r4, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 80047b6:	463a      	mov	r2, r7
 80047b8:	4631      	mov	r1, r6
 80047ba:	f104 001c 	add.w	r0, r4, #28
 80047be:	f7ff fbd7 	bl	8003f70 <mqtt_create_request>
  if (r == NULL) {
 80047c2:	4680      	mov	r8, r0
 80047c4:	b140      	cbz	r0, 80047d8 <mqtt_sub_unsub+0xc8>
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80047c6:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 80047ca:	4629      	mov	r1, r5
 80047cc:	4638      	mov	r0, r7
 80047ce:	f7ff fbe1 	bl	8003f94 <mqtt_output_check_space>
 80047d2:	b920      	cbnz	r0, 80047de <mqtt_sub_unsub+0xce>
    r->next = r;
 80047d4:	f8c8 8000 	str.w	r8, [r8]
    return ERR_MEM;
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	e7c3      	b.n	8004766 <mqtt_sub_unsub+0x56>
  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80047de:	f1ba 0f00 	cmp.w	sl, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	210a      	moveq	r1, #10
 80047e6:	2108      	movne	r1, #8
 80047e8:	2201      	movs	r2, #1
 80047ea:	4638      	mov	r0, r7
 80047ec:	2300      	movs	r3, #0
 80047ee:	9500      	str	r5, [sp, #0]
 80047f0:	f7ff fd3c 	bl	800426c <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_u16(&client->output, pkt_id);
 80047f4:	4631      	mov	r1, r6
 80047f6:	f7ff fb93 	bl	8003f20 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, topic, topic_len);
 80047fa:	9a03      	ldr	r2, [sp, #12]
 80047fc:	4659      	mov	r1, fp
 80047fe:	4638      	mov	r0, r7
 8004800:	f7ff fb9b 	bl	8003f3a <mqtt_output_append_string>
  if (sub != 0) {
 8004804:	f1ba 0f00 	cmp.w	sl, #0
 8004808:	d00e      	beq.n	8004828 <mqtt_sub_unsub+0x118>
  mqtt_ringbuf_put(rb, value);
 800480a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800480e:	f1b9 0f02 	cmp.w	r9, #2
  mqtt_ringbuf_put(rb, value);
 8004812:	f103 0201 	add.w	r2, r3, #1
 8004816:	fa54 f383 	uxtab	r3, r4, r3
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800481a:	bf28      	it	cs
 800481c:	f04f 0902 	movcs.w	r9, #2
  mqtt_ringbuf_put(rb, value);
 8004820:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
 8004824:	f883 90f0 	strb.w	r9, [r3, #240]	; 0xf0
  mqtt_append_request(&client->pend_req_queue, r);
 8004828:	4641      	mov	r1, r8
 800482a:	f104 0018 	add.w	r0, r4, #24
 800482e:	f7ff fbd3 	bl	8003fd8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8004832:	4638      	mov	r0, r7
 8004834:	68e1      	ldr	r1, [r4, #12]
 8004836:	f7ff fc1f 	bl	8004078 <mqtt_output_send>
  return ERR_OK;
 800483a:	2000      	movs	r0, #0
 800483c:	e793      	b.n	8004766 <mqtt_sub_unsub+0x56>
    return ERR_CONN;
 800483e:	f06f 000a 	mvn.w	r0, #10
 8004842:	e790      	b.n	8004766 <mqtt_sub_unsub+0x56>
 8004844:	0800da49 	.word	0x0800da49
 8004848:	0800daca 	.word	0x0800daca
 800484c:	0800d7e1 	.word	0x0800d7e1
 8004850:	0800dae9 	.word	0x0800dae9
 8004854:	0800db07 	.word	0x0800db07
 8004858:	0800db2d 	.word	0x0800db2d
 800485c:	0800db53 	.word	0x0800db53

08004860 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                             mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	460e      	mov	r6, r1
 8004864:	4617      	mov	r7, r2
 8004866:	461d      	mov	r5, r3
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8004868:	4604      	mov	r4, r0
 800486a:	b930      	cbnz	r0, 800487a <mqtt_set_inpub_callback+0x1a>
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <mqtt_set_inpub_callback+0x24>)
 800486e:	4906      	ldr	r1, [pc, #24]	; (8004888 <mqtt_set_inpub_callback+0x28>)
 8004870:	4806      	ldr	r0, [pc, #24]	; (800488c <mqtt_set_inpub_callback+0x2c>)
 8004872:	f240 428f 	movw	r2, #1167	; 0x48f
 8004876:	f007 fffb 	bl	800c870 <iprintf>
  client->data_cb = data_cb;
  client->pub_cb = pub_cb;
 800487a:	e9c4 7618 	strd	r7, r6, [r4, #96]	; 0x60
  client->inpub_arg = arg;
 800487e:	65e5      	str	r5, [r4, #92]	; 0x5c
}
 8004880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004882:	bf00      	nop
 8004884:	0800da49 	.word	0x0800da49
 8004888:	0800daa2 	.word	0x0800daa2
 800488c:	0800d7e1 	.word	0x0800d7e1

08004890 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8004890:	b510      	push	{r4, lr}
  mqtt_client_t *client = (mqtt_client_t *)mem_malloc(sizeof(mqtt_client_t));
 8004892:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 8004896:	f000 fab9 	bl	8004e0c <mem_malloc>
  if (client != NULL) {
 800489a:	4604      	mov	r4, r0
 800489c:	b120      	cbz	r0, 80048a8 <mqtt_client_new+0x18>
    memset(client, 0, sizeof(mqtt_client_t));
 800489e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80048a2:	2100      	movs	r1, #0
 80048a4:	f007 ff34 	bl	800c710 <memset>
  }
  return client;
}
 80048a8:	4620      	mov	r0, r4
 80048aa:	bd10      	pop	{r4, pc}

080048ac <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	b087      	sub	sp, #28
 80048b2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80048b6:	461e      	mov	r6, r3
 80048b8:	9f11      	ldr	r7, [sp, #68]	; 0x44
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;

  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80048ba:	4604      	mov	r4, r0
 80048bc:	b930      	cbnz	r0, 80048cc <mqtt_client_connect+0x20>
 80048be:	4b7b      	ldr	r3, [pc, #492]	; (8004aac <mqtt_client_connect+0x200>)
 80048c0:	497b      	ldr	r1, [pc, #492]	; (8004ab0 <mqtt_client_connect+0x204>)
 80048c2:	487c      	ldr	r0, [pc, #496]	; (8004ab4 <mqtt_client_connect+0x208>)
 80048c4:	f240 42bb 	movw	r2, #1211	; 0x4bb
 80048c8:	f007 ffd2 	bl	800c870 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80048cc:	9b04      	ldr	r3, [sp, #16]
 80048ce:	b933      	cbnz	r3, 80048de <mqtt_client_connect+0x32>
 80048d0:	4b76      	ldr	r3, [pc, #472]	; (8004aac <mqtt_client_connect+0x200>)
 80048d2:	4979      	ldr	r1, [pc, #484]	; (8004ab8 <mqtt_client_connect+0x20c>)
 80048d4:	4877      	ldr	r0, [pc, #476]	; (8004ab4 <mqtt_client_connect+0x208>)
 80048d6:	f240 42bc 	movw	r2, #1212	; 0x4bc
 80048da:	f007 ffc9 	bl	800c870 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 80048de:	b937      	cbnz	r7, 80048ee <mqtt_client_connect+0x42>
 80048e0:	4b72      	ldr	r3, [pc, #456]	; (8004aac <mqtt_client_connect+0x200>)
 80048e2:	4976      	ldr	r1, [pc, #472]	; (8004abc <mqtt_client_connect+0x210>)
 80048e4:	4873      	ldr	r0, [pc, #460]	; (8004ab4 <mqtt_client_connect+0x208>)
 80048e6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80048ea:	f007 ffc1 	bl	800c870 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	b933      	cbnz	r3, 8004900 <mqtt_client_connect+0x54>
 80048f2:	4b6e      	ldr	r3, [pc, #440]	; (8004aac <mqtt_client_connect+0x200>)
 80048f4:	4972      	ldr	r1, [pc, #456]	; (8004ac0 <mqtt_client_connect+0x214>)
 80048f6:	486f      	ldr	r0, [pc, #444]	; (8004ab4 <mqtt_client_connect+0x208>)
 80048f8:	f240 42be 	movw	r2, #1214	; 0x4be
 80048fc:	f007 ffb8 	bl	800c870 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8004900:	7aa5      	ldrb	r5, [r4, #10]
 8004902:	2d00      	cmp	r5, #0
 8004904:	f040 80ce 	bne.w	8004aa4 <mqtt_client_connect+0x1f8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8004908:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800490c:	4629      	mov	r1, r5
 800490e:	4620      	mov	r0, r4
 8004910:	f007 fefe 	bl	800c710 <memset>
  client->connect_arg = arg;
 8004914:	9b10      	ldr	r3, [sp, #64]	; 0x40
  client->connect_cb = cb;
  client->keep_alive = client_info->keep_alive;
  mqtt_init_requests(client->req_list);

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8004916:	6938      	ldr	r0, [r7, #16]
  client->connect_cb = cb;
 8004918:	e9c4 3604 	strd	r3, r6, [r4, #16]
  client->keep_alive = client_info->keep_alive;
 800491c:	89bb      	ldrh	r3, [r7, #12]
 800491e:	8063      	strh	r3, [r4, #2]
  mqtt_init_requests(client->req_list);
 8004920:	f104 031c 	add.w	r3, r4, #28
    r_objs[n].next = &r_objs[n];
 8004924:	61e3      	str	r3, [r4, #28]
 8004926:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800492a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800492c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004930:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004932:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8004936:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8004938:	2800      	cmp	r0, #0
 800493a:	d043      	beq.n	80049c4 <mqtt_client_connect+0x118>
 800493c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8004940:	f1b8 0f00 	cmp.w	r8, #0
 8004944:	d03e      	beq.n	80049c4 <mqtt_client_connect+0x118>
    flags |= MQTT_CONNECT_FLAG_WILL;
    flags |= (client_info->will_qos & 3) << 3;
 8004946:	7e3d      	ldrb	r5, [r7, #24]
    if (client_info->will_retain) {
 8004948:	7e7b      	ldrb	r3, [r7, #25]
    flags |= (client_info->will_qos & 3) << 3;
 800494a:	00ed      	lsls	r5, r5, #3
 800494c:	f005 0518 	and.w	r5, r5, #24
 8004950:	f045 0504 	orr.w	r5, r5, #4
    if (client_info->will_retain) {
 8004954:	b10b      	cbz	r3, 800495a <mqtt_client_connect+0xae>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8004956:	f045 0520 	orr.w	r5, r5, #32
    }
    len = strlen(client_info->will_topic);
 800495a:	f7fb fc53 	bl	8000204 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800495e:	28ff      	cmp	r0, #255	; 0xff
    len = strlen(client_info->will_topic);
 8004960:	4606      	mov	r6, r0
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8004962:	d90c      	bls.n	800497e <mqtt_client_connect+0xd2>
 8004964:	4b51      	ldr	r3, [pc, #324]	; (8004aac <mqtt_client_connect+0x200>)
 8004966:	4957      	ldr	r1, [pc, #348]	; (8004ac4 <mqtt_client_connect+0x218>)
 8004968:	f240 42d4 	movw	r2, #1236	; 0x4d4
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800496c:	4851      	ldr	r0, [pc, #324]	; (8004ab4 <mqtt_client_connect+0x208>)
 800496e:	f007 ff7f 	bl	800c870 <iprintf>
 8004972:	f06f 0605 	mvn.w	r6, #5

tcp_fail:
  tcp_abort(client->conn);
  client->conn = NULL;
  return err;
}
 8004976:	4630      	mov	r0, r6
 8004978:	b007      	add	sp, #28
 800497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800497e:	b920      	cbnz	r0, 800498a <mqtt_client_connect+0xde>
 8004980:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <mqtt_client_connect+0x200>)
 8004982:	4951      	ldr	r1, [pc, #324]	; (8004ac8 <mqtt_client_connect+0x21c>)
 8004984:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8004988:	e7f0      	b.n	800496c <mqtt_client_connect+0xc0>
    will_topic_len = (u8_t)len;
 800498a:	fa5f fa80 	uxtb.w	sl, r0
    len = strlen(client_info->will_msg);
 800498e:	4640      	mov	r0, r8
 8004990:	f7fb fc38 	bl	8000204 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8004994:	28ff      	cmp	r0, #255	; 0xff
 8004996:	d904      	bls.n	80049a2 <mqtt_client_connect+0xf6>
 8004998:	4b44      	ldr	r3, [pc, #272]	; (8004aac <mqtt_client_connect+0x200>)
 800499a:	494c      	ldr	r1, [pc, #304]	; (8004acc <mqtt_client_connect+0x220>)
 800499c:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80049a0:	e7e4      	b.n	800496c <mqtt_client_connect+0xc0>
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 80049a2:	360e      	adds	r6, #14
 80049a4:	4406      	add	r6, r0
    will_msg_len = (u8_t)len;
 80049a6:	fa5f f980 	uxtb.w	r9, r0
    remaining_length = (u16_t)len;
 80049aa:	b2b6      	uxth	r6, r6
  len = strlen(client_info->client_id);
 80049ac:	6838      	ldr	r0, [r7, #0]
 80049ae:	f7fb fc29 	bl	8000204 <strlen>
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80049b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(client_info->client_id);
 80049b6:	4683      	mov	fp, r0
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80049b8:	d308      	bcc.n	80049cc <mqtt_client_connect+0x120>
 80049ba:	4b3c      	ldr	r3, [pc, #240]	; (8004aac <mqtt_client_connect+0x200>)
 80049bc:	4944      	ldr	r1, [pc, #272]	; (8004ad0 <mqtt_client_connect+0x224>)
 80049be:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80049c2:	e7d3      	b.n	800496c <mqtt_client_connect+0xc0>
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80049c4:	46a9      	mov	r9, r5
 80049c6:	46aa      	mov	sl, r5
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80049c8:	260a      	movs	r6, #10
 80049ca:	e7ef      	b.n	80049ac <mqtt_client_connect+0x100>
  len = remaining_length + 2 + client_id_length;
 80049cc:	3602      	adds	r6, #2
 80049ce:	4406      	add	r6, r0
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80049d0:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80049d4:	db04      	blt.n	80049e0 <mqtt_client_connect+0x134>
 80049d6:	4b35      	ldr	r3, [pc, #212]	; (8004aac <mqtt_client_connect+0x200>)
 80049d8:	493e      	ldr	r1, [pc, #248]	; (8004ad4 <mqtt_client_connect+0x228>)
 80049da:	f240 42e6 	movw	r2, #1254	; 0x4e6
 80049de:	e7c5      	b.n	800496c <mqtt_client_connect+0xc0>
  remaining_length = (u16_t)len;
 80049e0:	b2b3      	uxth	r3, r6
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80049e2:	f104 08ec 	add.w	r8, r4, #236	; 0xec
 80049e6:	4619      	mov	r1, r3
 80049e8:	4640      	mov	r0, r8
  remaining_length = (u16_t)len;
 80049ea:	9303      	str	r3, [sp, #12]
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80049ec:	f7ff fad2 	bl	8003f94 <mqtt_output_check_space>
 80049f0:	b910      	cbnz	r0, 80049f8 <mqtt_client_connect+0x14c>
    return ERR_MEM;
 80049f2:	f04f 36ff 	mov.w	r6, #4294967295
 80049f6:	e7be      	b.n	8004976 <mqtt_client_connect+0xca>
  client->conn = tcp_new();
 80049f8:	f001 fe14 	bl	8006624 <tcp_new>
 80049fc:	60e0      	str	r0, [r4, #12]
  if (client->conn == NULL) {
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d0f7      	beq.n	80049f2 <mqtt_client_connect+0x146>
  tcp_arg(client->conn, client);
 8004a02:	4621      	mov	r1, r4
 8004a04:	f001 f8e6 	bl	8005bd4 <tcp_arg>
  err = tcp_bind(client->conn, IP_ADDR_ANY, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4933      	ldr	r1, [pc, #204]	; (8004ad8 <mqtt_client_connect+0x22c>)
 8004a0c:	68e0      	ldr	r0, [r4, #12]
 8004a0e:	f001 f801 	bl	8005a14 <tcp_bind>
  if (err != ERR_OK) {
 8004a12:	4606      	mov	r6, r0
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d13f      	bne.n	8004a98 <mqtt_client_connect+0x1ec>
  err = tcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8004a18:	4b30      	ldr	r3, [pc, #192]	; (8004adc <mqtt_client_connect+0x230>)
 8004a1a:	68e0      	ldr	r0, [r4, #12]
 8004a1c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8004a20:	f001 fe20 	bl	8006664 <tcp_connect>
  if (err != ERR_OK) {
 8004a24:	4606      	mov	r6, r0
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d136      	bne.n	8004a98 <mqtt_client_connect+0x1ec>
  tcp_err(client->conn, mqtt_tcp_err_cb);
 8004a2a:	68e0      	ldr	r0, [r4, #12]
 8004a2c:	492c      	ldr	r1, [pc, #176]	; (8004ae0 <mqtt_client_connect+0x234>)
 8004a2e:	f001 f903 	bl	8005c38 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8004a32:	2101      	movs	r1, #1
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8004a34:	9b03      	ldr	r3, [sp, #12]
  client->conn_state = TCP_CONNECTING;
 8004a36:	72a1      	strb	r1, [r4, #10]
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8004a38:	4640      	mov	r0, r8
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	4633      	mov	r3, r6
 8004a40:	f7ff fc14 	bl	800426c <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8004a44:	2204      	movs	r2, #4
 8004a46:	4927      	ldr	r1, [pc, #156]	; (8004ae4 <mqtt_client_connect+0x238>)
 8004a48:	f7ff fa77 	bl	8003f3a <mqtt_output_append_string>
  mqtt_ringbuf_put(rb, value);
 8004a4c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8004a50:	fa54 f283 	uxtab	r2, r4, r3
 8004a54:	2104      	movs	r1, #4
 8004a56:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
 8004a62:	fa54 f483 	uxtab	r4, r4, r3
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8004a66:	f045 0302 	orr.w	r3, r5, #2
  mqtt_ringbuf_put(rb, value);
 8004a6a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8004a6e:	89b9      	ldrh	r1, [r7, #12]
 8004a70:	f7ff fa56 	bl	8003f20 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8004a74:	fa1f f28b 	uxth.w	r2, fp
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f7ff fa5d 	bl	8003f3a <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8004a80:	076b      	lsls	r3, r5, #29
 8004a82:	f57f af78 	bpl.w	8004976 <mqtt_client_connect+0xca>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8004a86:	4652      	mov	r2, sl
 8004a88:	6939      	ldr	r1, [r7, #16]
 8004a8a:	f7ff fa56 	bl	8003f3a <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8004a8e:	464a      	mov	r2, r9
 8004a90:	6979      	ldr	r1, [r7, #20]
 8004a92:	f7ff fa52 	bl	8003f3a <mqtt_output_append_string>
 8004a96:	e76e      	b.n	8004976 <mqtt_client_connect+0xca>
  tcp_abort(client->conn);
 8004a98:	68e0      	ldr	r0, [r4, #12]
 8004a9a:	f001 fd0b 	bl	80064b4 <tcp_abort>
  client->conn = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60e3      	str	r3, [r4, #12]
  return err;
 8004aa2:	e768      	b.n	8004976 <mqtt_client_connect+0xca>
    return ERR_ISCONN;
 8004aa4:	f06f 0609 	mvn.w	r6, #9
 8004aa8:	e765      	b.n	8004976 <mqtt_client_connect+0xca>
 8004aaa:	bf00      	nop
 8004aac:	0800da49 	.word	0x0800da49
 8004ab0:	0800d83e 	.word	0x0800d83e
 8004ab4:	0800d7e1 	.word	0x0800d7e1
 8004ab8:	0800d862 	.word	0x0800d862
 8004abc:	0800d887 	.word	0x0800d887
 8004ac0:	0800d8b0 	.word	0x0800d8b0
 8004ac4:	0800d8e4 	.word	0x0800d8e4
 8004ac8:	0800d921 	.word	0x0800d921
 8004acc:	0800d961 	.word	0x0800d961
 8004ad0:	0800d99c 	.word	0x0800d99c
 8004ad4:	0800d9d8 	.word	0x0800d9d8
 8004ad8:	0800f5ec 	.word	0x0800f5ec
 8004adc:	08004125 	.word	0x08004125
 8004ae0:	080041fd 	.word	0x080041fd
 8004ae4:	0800da07 	.word	0x0800da07

08004ae8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8004ae8:	ba40      	rev16	r0, r0
}
 8004aea:	b280      	uxth	r0, r0
 8004aec:	4770      	bx	lr

08004aee <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8004aee:	ba00      	rev	r0, r0
 8004af0:	4770      	bx	lr

08004af2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004af2:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8004af4:	f006 fe66 	bl	800b7c4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8004af8:	f000 f80c 	bl	8004b14 <mem_init>
  memp_init();
 8004afc:	f000 fa72 	bl	8004fe4 <memp_init>
  pbuf_init();
  netif_init();
 8004b00:	f000 fabd 	bl	800507e <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004b04:	f004 f92e 	bl	8008d64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004b08:	f000 ff82 	bl	8005a10 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8004b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8004b10:	f004 b87a 	b.w	8008c08 <sys_timeouts_init>

08004b14 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <mem_init+0x4c>)
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <mem_init+0x50>)
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004b18:	4813      	ldr	r0, [pc, #76]	; (8004b68 <mem_init+0x54>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
{
 8004b1e:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b20:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8004b22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b26:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8004b28:	2200      	movs	r2, #0
 8004b2a:	711a      	strb	r2, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004b2c:	4a0f      	ldr	r2, [pc, #60]	; (8004b6c <mem_init+0x58>)
 8004b2e:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
 8004b32:	6011      	str	r1, [r2, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b34:	4a0e      	ldr	r2, [pc, #56]	; (8004b70 <mem_init+0x5c>)
 8004b36:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8004b40:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <mem_init+0x60>)
 8004b42:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004b44:	f006 fe4a 	bl	800b7dc <sys_mutex_new>
 8004b48:	b140      	cbz	r0, 8004b5c <mem_init+0x48>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <mem_init+0x64>)
 8004b4c:	490b      	ldr	r1, [pc, #44]	; (8004b7c <mem_init+0x68>)
 8004b4e:	480c      	ldr	r0, [pc, #48]	; (8004b80 <mem_init+0x6c>)
 8004b50:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 8004b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004b58:	f007 be8a 	b.w	800c870 <iprintf>
}
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	bf00      	nop
 8004b60:	200083bf 	.word	0x200083bf
 8004b64:	200081f4 	.word	0x200081f4
 8004b68:	200081f0 	.word	0x200081f0
 8004b6c:	200081f8 	.word	0x200081f8
 8004b70:	06400640 	.word	0x06400640
 8004b74:	200081ec 	.word	0x200081ec
 8004b78:	0800dcb4 	.word	0x0800dcb4
 8004b7c:	0800dce3 	.word	0x0800dce3
 8004b80:	0800d7e1 	.word	0x0800d7e1

08004b84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004b88:	4604      	mov	r4, r0
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f000 8096 	beq.w	8004cbc <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004b90:	0783      	lsls	r3, r0, #30
 8004b92:	d006      	beq.n	8004ba2 <mem_free+0x1e>
 8004b94:	4b4a      	ldr	r3, [pc, #296]	; (8004cc0 <mem_free+0x13c>)
 8004b96:	494b      	ldr	r1, [pc, #300]	; (8004cc4 <mem_free+0x140>)
 8004b98:	484b      	ldr	r0, [pc, #300]	; (8004cc8 <mem_free+0x144>)
 8004b9a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004b9e:	f007 fe67 	bl	800c870 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004ba2:	4f4a      	ldr	r7, [pc, #296]	; (8004ccc <mem_free+0x148>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	d803      	bhi.n	8004bb2 <mem_free+0x2e>
 8004baa:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <mem_free+0x14c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	d806      	bhi.n	8004bc0 <mem_free+0x3c>
 8004bb2:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <mem_free+0x13c>)
 8004bb4:	4947      	ldr	r1, [pc, #284]	; (8004cd4 <mem_free+0x150>)
 8004bb6:	4844      	ldr	r0, [pc, #272]	; (8004cc8 <mem_free+0x144>)
 8004bb8:	f240 12af 	movw	r2, #431	; 0x1af
 8004bbc:	f007 fe58 	bl	800c870 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	42a3      	cmp	r3, r4
 8004bc4:	d804      	bhi.n	8004bd0 <mem_free+0x4c>
 8004bc6:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <mem_free+0x14c>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	42a2      	cmp	r2, r4
 8004bcc:	4698      	mov	r8, r3
 8004bce:	d805      	bhi.n	8004bdc <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004bd0:	f006 fe2c 	bl	800b82c <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8004bd8:	f006 be34 	b.w	800b844 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8004bdc:	483e      	ldr	r0, [pc, #248]	; (8004cd8 <mem_free+0x154>)
 8004bde:	f006 fe0c 	bl	800b7fa <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004be2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004be6:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004bea:	b933      	cbnz	r3, 8004bfa <mem_free+0x76>
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <mem_free+0x13c>)
 8004bee:	493b      	ldr	r1, [pc, #236]	; (8004cdc <mem_free+0x158>)
 8004bf0:	4835      	ldr	r0, [pc, #212]	; (8004cc8 <mem_free+0x144>)
 8004bf2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004bf6:	f007 fe3b 	bl	800c870 <iprintf>
  if (mem < lfree) {
 8004bfa:	4e39      	ldr	r6, [pc, #228]	; (8004ce0 <mem_free+0x15c>)
  mem->used = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8004c02:	6833      	ldr	r3, [r6, #0]
 8004c04:	42ab      	cmp	r3, r5
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004c06:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8004c08:	bf88      	it	hi
 8004c0a:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004c0c:	429d      	cmp	r5, r3
 8004c0e:	d206      	bcs.n	8004c1e <mem_free+0x9a>
 8004c10:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <mem_free+0x13c>)
 8004c12:	4934      	ldr	r1, [pc, #208]	; (8004ce4 <mem_free+0x160>)
 8004c14:	482c      	ldr	r0, [pc, #176]	; (8004cc8 <mem_free+0x144>)
 8004c16:	f240 125d 	movw	r2, #349	; 0x15d
 8004c1a:	f007 fe29 	bl	800c870 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c22:	429d      	cmp	r5, r3
 8004c24:	d306      	bcc.n	8004c34 <mem_free+0xb0>
 8004c26:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <mem_free+0x13c>)
 8004c28:	492f      	ldr	r1, [pc, #188]	; (8004ce8 <mem_free+0x164>)
 8004c2a:	4827      	ldr	r0, [pc, #156]	; (8004cc8 <mem_free+0x144>)
 8004c2c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004c30:	f007 fe1e 	bl	800c870 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004c34:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8004c38:	b133      	cbz	r3, 8004c48 <mem_free+0xc4>
 8004c3a:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <mem_free+0x13c>)
 8004c3c:	492b      	ldr	r1, [pc, #172]	; (8004cec <mem_free+0x168>)
 8004c3e:	4822      	ldr	r0, [pc, #136]	; (8004cc8 <mem_free+0x144>)
 8004c40:	f240 125f 	movw	r2, #351	; 0x15f
 8004c44:	f007 fe14 	bl	800c870 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004c48:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8004c4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c50:	d906      	bls.n	8004c60 <mem_free+0xdc>
 8004c52:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <mem_free+0x13c>)
 8004c54:	4926      	ldr	r1, [pc, #152]	; (8004cf0 <mem_free+0x16c>)
 8004c56:	481c      	ldr	r0, [pc, #112]	; (8004cc8 <mem_free+0x144>)
 8004c58:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004c5c:	f007 fe08 	bl	800c870 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004c66:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004c68:	4295      	cmp	r5, r2
 8004c6a:	d010      	beq.n	8004c8e <mem_free+0x10a>
 8004c6c:	7910      	ldrb	r0, [r2, #4]
 8004c6e:	b970      	cbnz	r0, 8004c8e <mem_free+0x10a>
 8004c70:	f8d8 0000 	ldr.w	r0, [r8]
 8004c74:	4282      	cmp	r2, r0
 8004c76:	d00a      	beq.n	8004c8e <mem_free+0x10a>
    if (lfree == nmem) {
 8004c78:	6830      	ldr	r0, [r6, #0]
 8004c7a:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8004c7c:	5a5a      	ldrh	r2, [r3, r1]
 8004c7e:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004c82:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8004c84:	bf08      	it	eq
 8004c86:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004c88:	441a      	add	r2, r3
 8004c8a:	1ae9      	subs	r1, r5, r3
 8004c8c:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004c8e:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8004c92:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8004c94:	428d      	cmp	r5, r1
 8004c96:	d00c      	beq.n	8004cb2 <mem_free+0x12e>
 8004c98:	7908      	ldrb	r0, [r1, #4]
 8004c9a:	b950      	cbnz	r0, 8004cb2 <mem_free+0x12e>
    if (lfree == mem) {
 8004c9c:	6830      	ldr	r0, [r6, #0]
 8004c9e:	4285      	cmp	r5, r0
      lfree = pmem;
 8004ca0:	bf08      	it	eq
 8004ca2:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8004ca4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004ca8:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004caa:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004cae:	440b      	add	r3, r1
 8004cb0:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8004cb2:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <mem_free+0x154>)
}
 8004cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8004cb8:	f006 bda4 	b.w	800b804 <sys_mutex_unlock>
}
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	0800dcb4 	.word	0x0800dcb4
 8004cc4:	0800dbf2 	.word	0x0800dbf2
 8004cc8:	0800d7e1 	.word	0x0800d7e1
 8004ccc:	200081f4 	.word	0x200081f4
 8004cd0:	200081f8 	.word	0x200081f8
 8004cd4:	0800dc13 	.word	0x0800dc13
 8004cd8:	200081f0 	.word	0x200081f0
 8004cdc:	0800dc2a 	.word	0x0800dc2a
 8004ce0:	200081ec 	.word	0x200081ec
 8004ce4:	0800dc3e 	.word	0x0800dc3e
 8004ce8:	0800dc55 	.word	0x0800dc55
 8004cec:	0800dc6f 	.word	0x0800dc6f
 8004cf0:	0800dc8a 	.word	0x0800dc8a

08004cf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004cf8:	3103      	adds	r1, #3
 8004cfa:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8004cfe:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8004d00:	2d0b      	cmp	r5, #11
{
 8004d02:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d04:	d904      	bls.n	8004d10 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004d06:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8004d0a:	d902      	bls.n	8004d12 <mem_trim+0x1e>
    return NULL;
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	e01c      	b.n	8004d4a <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8004d10:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d12:	4b36      	ldr	r3, [pc, #216]	; (8004dec <mem_trim+0xf8>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	42a2      	cmp	r2, r4
 8004d18:	4698      	mov	r8, r3
 8004d1a:	d803      	bhi.n	8004d24 <mem_trim+0x30>
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <mem_trim+0xfc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d806      	bhi.n	8004d32 <mem_trim+0x3e>
 8004d24:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <mem_trim+0x100>)
 8004d26:	4934      	ldr	r1, [pc, #208]	; (8004df8 <mem_trim+0x104>)
 8004d28:	4834      	ldr	r0, [pc, #208]	; (8004dfc <mem_trim+0x108>)
 8004d2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d2e:	f007 fd9f 	bl	800c870 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d32:	f8d8 3000 	ldr.w	r3, [r8]
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	d803      	bhi.n	8004d42 <mem_trim+0x4e>
 8004d3a:	4a2d      	ldr	r2, [pc, #180]	; (8004df0 <mem_trim+0xfc>)
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	42a2      	cmp	r2, r4
 8004d40:	d806      	bhi.n	8004d50 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004d42:	f006 fd73 	bl	800b82c <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8004d46:	f006 fd7d 	bl	800b844 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004d50:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004d54:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004d58:	1af6      	subs	r6, r6, r3
 8004d5a:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004d5c:	3f08      	subs	r7, #8
 8004d5e:	1bbf      	subs	r7, r7, r6
 8004d60:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004d62:	42af      	cmp	r7, r5
 8004d64:	d219      	bcs.n	8004d9a <mem_trim+0xa6>
 8004d66:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <mem_trim+0x100>)
 8004d68:	4925      	ldr	r1, [pc, #148]	; (8004e00 <mem_trim+0x10c>)
 8004d6a:	4824      	ldr	r0, [pc, #144]	; (8004dfc <mem_trim+0x108>)
 8004d6c:	f240 2206 	movw	r2, #518	; 0x206
 8004d70:	f007 fd7e 	bl	800c870 <iprintf>
 8004d74:	e7ca      	b.n	8004d0c <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004d76:	f105 0214 	add.w	r2, r5, #20
 8004d7a:	42ba      	cmp	r2, r7
 8004d7c:	d832      	bhi.n	8004de4 <mem_trim+0xf0>
    if (mem2 < lfree) {
 8004d7e:	4821      	ldr	r0, [pc, #132]	; (8004e04 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004d80:	f106 0208 	add.w	r2, r6, #8
 8004d84:	4415      	add	r5, r2
    if (mem2 < lfree) {
 8004d86:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004d88:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004d8a:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8004d8c:	4297      	cmp	r7, r2
      lfree = mem2;
 8004d8e:	bf88      	it	hi
 8004d90:	6002      	strhi	r2, [r0, #0]
    mem2->used = 0;
 8004d92:	2000      	movs	r0, #0
 8004d94:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8004d96:	5359      	strh	r1, [r3, r5]
 8004d98:	e01b      	b.n	8004dd2 <mem_trim+0xde>
  if (newsize == size) {
 8004d9a:	d0d6      	beq.n	8004d4a <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 8004d9c:	481a      	ldr	r0, [pc, #104]	; (8004e08 <mem_trim+0x114>)
 8004d9e:	f006 fd2c 	bl	800b7fa <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004da2:	f8d8 3000 	ldr.w	r3, [r8]
 8004da6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004daa:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8004dac:	7902      	ldrb	r2, [r0, #4]
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d1e1      	bne.n	8004d76 <mem_trim+0x82>
    next = mem2->next;
 8004db2:	f833 c001 	ldrh.w	ip, [r3, r1]
    if (lfree == mem2) {
 8004db6:	4913      	ldr	r1, [pc, #76]	; (8004e04 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004db8:	f106 0208 	add.w	r2, r6, #8
    if (lfree == mem2) {
 8004dbc:	680f      	ldr	r7, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004dbe:	4415      	add	r5, r2
 8004dc0:	b2ad      	uxth	r5, r5
 8004dc2:	195a      	adds	r2, r3, r5
    if (lfree == mem2) {
 8004dc4:	4287      	cmp	r7, r0
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004dc6:	bf08      	it	eq
 8004dc8:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 8004dca:	2100      	movs	r1, #0
 8004dcc:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8004dce:	f823 c005 	strh.w	ip, [r3, r5]
    mem2->prev = ptr;
 8004dd2:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8004dd4:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004dd8:	5b5a      	ldrh	r2, [r3, r5]
 8004dda:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004dde:	bf1c      	itt	ne
 8004de0:	189b      	addne	r3, r3, r2
 8004de2:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8004de4:	4808      	ldr	r0, [pc, #32]	; (8004e08 <mem_trim+0x114>)
 8004de6:	f006 fd0d 	bl	800b804 <sys_mutex_unlock>
  return rmem;
 8004dea:	e7ae      	b.n	8004d4a <mem_trim+0x56>
 8004dec:	200081f4 	.word	0x200081f4
 8004df0:	200081f8 	.word	0x200081f8
 8004df4:	0800dcb4 	.word	0x0800dcb4
 8004df8:	0800dd99 	.word	0x0800dd99
 8004dfc:	0800d7e1 	.word	0x0800d7e1
 8004e00:	0800ddb0 	.word	0x0800ddb0
 8004e04:	200081ec 	.word	0x200081ec
 8004e08:	200081f0 	.word	0x200081f0

08004e0c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d07b      	beq.n	8004f0c <mem_malloc+0x100>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004e14:	3003      	adds	r0, #3
 8004e16:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8004e1a:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8004e1c:	2d0b      	cmp	r5, #11
 8004e1e:	d904      	bls.n	8004e2a <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004e20:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8004e24:	d902      	bls.n	8004e2c <mem_malloc+0x20>
    return NULL;
 8004e26:	2000      	movs	r0, #0
 8004e28:	e070      	b.n	8004f0c <mem_malloc+0x100>
    size = MIN_SIZE_ALIGNED;
 8004e2a:	250c      	movs	r5, #12
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8004e2c:	483c      	ldr	r0, [pc, #240]	; (8004f20 <mem_malloc+0x114>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004e2e:	4e3d      	ldr	r6, [pc, #244]	; (8004f24 <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 8004e30:	f006 fce3 	bl	800b7fa <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004e34:	483c      	ldr	r0, [pc, #240]	; (8004f28 <mem_malloc+0x11c>)
 8004e36:	6831      	ldr	r1, [r6, #0]
 8004e38:	6807      	ldr	r7, [r0, #0]
 8004e3a:	1a7b      	subs	r3, r7, r1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004e42:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004e46:	4543      	cmp	r3, r8
 8004e48:	d303      	bcc.n	8004e52 <mem_malloc+0x46>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8004e4a:	4835      	ldr	r0, [pc, #212]	; (8004f20 <mem_malloc+0x114>)
 8004e4c:	f006 fcda 	bl	800b804 <sys_mutex_unlock>
 8004e50:	e7e9      	b.n	8004e26 <mem_malloc+0x1a>
      mem = (struct mem *)(void *)&ram[ptr];
 8004e52:	18cc      	adds	r4, r1, r3
 8004e54:	f831 c003 	ldrh.w	ip, [r1, r3]
      if ((!mem->used) &&
 8004e58:	f894 e004 	ldrb.w	lr, [r4, #4]
 8004e5c:	f1be 0f00 	cmp.w	lr, #0
 8004e60:	d15c      	bne.n	8004f1c <mem_malloc+0x110>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004e62:	eba9 0203 	sub.w	r2, r9, r3
 8004e66:	4462      	add	r2, ip
      if ((!mem->used) &&
 8004e68:	42aa      	cmp	r2, r5
 8004e6a:	d357      	bcc.n	8004f1c <mem_malloc+0x110>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004e6c:	f105 0814 	add.w	r8, r5, #20
 8004e70:	4542      	cmp	r2, r8
 8004e72:	d34d      	bcc.n	8004f10 <mem_malloc+0x104>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004e74:	f105 0208 	add.w	r2, r5, #8
 8004e78:	441a      	add	r2, r3
 8004e7a:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004e7c:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8004e80:	f888 e004 	strb.w	lr, [r8, #4]
          mem2->next = mem->next;
 8004e84:	f821 c002 	strh.w	ip, [r1, r2]
          mem2->prev = ptr;
 8004e88:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8004e8c:	2301      	movs	r3, #1
          mem->next = ptr2;
 8004e8e:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8004e90:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e92:	5a8b      	ldrh	r3, [r1, r2]
 8004e94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e98:	d001      	beq.n	8004e9e <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004e9a:	4419      	add	r1, r3
 8004e9c:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8004e9e:	42a7      	cmp	r7, r4
 8004ea0:	4f22      	ldr	r7, [pc, #136]	; (8004f2c <mem_malloc+0x120>)
 8004ea2:	d112      	bne.n	8004eca <mem_malloc+0xbe>
          while (cur->used && cur != ram_end) {
 8004ea4:	683a      	ldr	r2, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8004ea6:	6836      	ldr	r6, [r6, #0]
 8004ea8:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8004eaa:	7919      	ldrb	r1, [r3, #4]
 8004eac:	b111      	cbz	r1, 8004eb4 <mem_malloc+0xa8>
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d131      	bne.n	8004f16 <mem_malloc+0x10a>
 8004eb2:	4613      	mov	r3, r2
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004eb4:	429a      	cmp	r2, r3
          lfree = cur;
 8004eb6:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004eb8:	d007      	beq.n	8004eca <mem_malloc+0xbe>
 8004eba:	b131      	cbz	r1, 8004eca <mem_malloc+0xbe>
 8004ebc:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <mem_malloc+0x124>)
 8004ebe:	491d      	ldr	r1, [pc, #116]	; (8004f34 <mem_malloc+0x128>)
 8004ec0:	481d      	ldr	r0, [pc, #116]	; (8004f38 <mem_malloc+0x12c>)
 8004ec2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004ec6:	f007 fcd3 	bl	800c870 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8004eca:	4815      	ldr	r0, [pc, #84]	; (8004f20 <mem_malloc+0x114>)
 8004ecc:	f006 fc9a 	bl	800b804 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004ed0:	3508      	adds	r5, #8
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	4425      	add	r5, r4
 8004ed6:	42ab      	cmp	r3, r5
 8004ed8:	d206      	bcs.n	8004ee8 <mem_malloc+0xdc>
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <mem_malloc+0x124>)
 8004edc:	4917      	ldr	r1, [pc, #92]	; (8004f3c <mem_malloc+0x130>)
 8004ede:	4816      	ldr	r0, [pc, #88]	; (8004f38 <mem_malloc+0x12c>)
 8004ee0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8004ee4:	f007 fcc4 	bl	800c870 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004ee8:	07a3      	lsls	r3, r4, #30
 8004eea:	d00d      	beq.n	8004f08 <mem_malloc+0xfc>
 8004eec:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <mem_malloc+0x124>)
 8004eee:	4914      	ldr	r1, [pc, #80]	; (8004f40 <mem_malloc+0x134>)
 8004ef0:	4811      	ldr	r0, [pc, #68]	; (8004f38 <mem_malloc+0x12c>)
 8004ef2:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004ef6:	f007 fcbb 	bl	800c870 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <mem_malloc+0x124>)
 8004efc:	4911      	ldr	r1, [pc, #68]	; (8004f44 <mem_malloc+0x138>)
 8004efe:	480e      	ldr	r0, [pc, #56]	; (8004f38 <mem_malloc+0x12c>)
 8004f00:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004f04:	f007 fcb4 	bl	800c870 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004f08:	f104 0008 	add.w	r0, r4, #8
  return NULL;
}
 8004f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8004f10:	2301      	movs	r3, #1
 8004f12:	7123      	strb	r3, [r4, #4]
 8004f14:	e7c3      	b.n	8004e9e <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	4433      	add	r3, r6
 8004f1a:	e7c6      	b.n	8004eaa <mem_malloc+0x9e>
 8004f1c:	4663      	mov	r3, ip
 8004f1e:	e792      	b.n	8004e46 <mem_malloc+0x3a>
 8004f20:	200081f0 	.word	0x200081f0
 8004f24:	200081f4 	.word	0x200081f4
 8004f28:	200081ec 	.word	0x200081ec
 8004f2c:	200081f8 	.word	0x200081f8
 8004f30:	0800dcb4 	.word	0x0800dcb4
 8004f34:	0800dcfe 	.word	0x0800dcfe
 8004f38:	0800d7e1 	.word	0x0800d7e1
 8004f3c:	0800dd17 	.word	0x0800dd17
 8004f40:	0800dd47 	.word	0x0800dd47
 8004f44:	0800dd76 	.word	0x0800dd76

08004f48 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8004f4c:	f006 fc6e 	bl	800b82c <sys_arch_protect>

  memp = *desc->tab;
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8004f54:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004f56:	b15c      	cbz	r4, 8004f70 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004f5c:	07a3      	lsls	r3, r4, #30
 8004f5e:	d006      	beq.n	8004f6e <do_memp_malloc_pool.isra.0+0x26>
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <do_memp_malloc_pool.isra.0+0x30>)
 8004f62:	4906      	ldr	r1, [pc, #24]	; (8004f7c <do_memp_malloc_pool.isra.0+0x34>)
 8004f64:	4806      	ldr	r0, [pc, #24]	; (8004f80 <do_memp_malloc_pool.isra.0+0x38>)
 8004f66:	f240 1249 	movw	r2, #329	; 0x149
 8004f6a:	f007 fc81 	bl	800c870 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8004f6e:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8004f70:	f006 fc68 	bl	800b844 <sys_arch_unprotect>
  return NULL;
}
 8004f74:	4620      	mov	r0, r4
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	0800ddf0 	.word	0x0800ddf0
 8004f7c:	0800de20 	.word	0x0800de20
 8004f80:	0800d7e1 	.word	0x0800d7e1

08004f84 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8004f84:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004f86:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8004f88:	4605      	mov	r5, r0
 8004f8a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8004f8c:	d006      	beq.n	8004f9c <do_memp_free_pool.isra.1+0x18>
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <do_memp_free_pool.isra.1+0x2c>)
 8004f90:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <do_memp_free_pool.isra.1+0x30>)
 8004f92:	4809      	ldr	r0, [pc, #36]	; (8004fb8 <do_memp_free_pool.isra.1+0x34>)
 8004f94:	f240 129d 	movw	r2, #413	; 0x19d
 8004f98:	f007 fc6a 	bl	800c870 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8004f9c:	f006 fc46 	bl	800b82c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8004fa6:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8004fac:	f006 bc4a 	b.w	800b844 <sys_arch_unprotect>
 8004fb0:	0800ddf0 	.word	0x0800ddf0
 8004fb4:	0800ddd0 	.word	0x0800ddd0
 8004fb8:	0800d7e1 	.word	0x0800d7e1

08004fbc <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004fbc:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8004fbe:	6881      	ldr	r1, [r0, #8]
{
 8004fc0:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8004fc2:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004fc4:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8004fc6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8004fc8:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004fca:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8004fce:	4294      	cmp	r4, r2
 8004fd0:	dc00      	bgt.n	8004fd4 <memp_init_pool+0x18>
}
 8004fd2:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8004fd4:	680d      	ldr	r5, [r1, #0]
 8004fd6:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004fd8:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8004fda:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8004fdc:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004fde:	442b      	add	r3, r5
 8004fe0:	e7f5      	b.n	8004fce <memp_init_pool+0x12>
	...

08004fe4 <memp_init>:
{
 8004fe4:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8004fe6:	4d05      	ldr	r5, [pc, #20]	; (8004ffc <memp_init+0x18>)
{
 8004fe8:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8004fea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004fee:	3401      	adds	r4, #1
 8004ff0:	f7ff ffe4 	bl	8004fbc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004ff4:	2c0d      	cmp	r4, #13
 8004ff6:	d1f8      	bne.n	8004fea <memp_init+0x6>
}
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
 8004ffa:	bf00      	nop
 8004ffc:	0800df18 	.word	0x0800df18

08005000 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005000:	280c      	cmp	r0, #12
{
 8005002:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005004:	d807      	bhi.n	8005016 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <memp_malloc+0x28>)
 8005008:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800500c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005010:	3008      	adds	r0, #8
 8005012:	f7ff bf99 	b.w	8004f48 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <memp_malloc+0x2c>)
 8005018:	4905      	ldr	r1, [pc, #20]	; (8005030 <memp_malloc+0x30>)
 800501a:	4806      	ldr	r0, [pc, #24]	; (8005034 <memp_malloc+0x34>)
 800501c:	f240 1287 	movw	r2, #391	; 0x187
 8005020:	f007 fc26 	bl	800c870 <iprintf>
}
 8005024:	2000      	movs	r0, #0
 8005026:	bd08      	pop	{r3, pc}
 8005028:	0800df18 	.word	0x0800df18
 800502c:	0800ddf0 	.word	0x0800ddf0
 8005030:	0800defb 	.word	0x0800defb
 8005034:	0800d7e1 	.word	0x0800d7e1

08005038 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005038:	280c      	cmp	r0, #12
 800503a:	d906      	bls.n	800504a <memp_free+0x12>
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <memp_free+0x24>)
 800503e:	4908      	ldr	r1, [pc, #32]	; (8005060 <memp_free+0x28>)
 8005040:	4808      	ldr	r0, [pc, #32]	; (8005064 <memp_free+0x2c>)
 8005042:	f240 12db 	movw	r2, #475	; 0x1db
 8005046:	f007 bc13 	b.w	800c870 <iprintf>

  if (mem == NULL) {
 800504a:	b129      	cbz	r1, 8005058 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <memp_free+0x30>)
 800504e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005052:	3008      	adds	r0, #8
 8005054:	f7ff bf96 	b.w	8004f84 <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	0800ddf0 	.word	0x0800ddf0
 8005060:	0800dee0 	.word	0x0800dee0
 8005064:	0800d7e1 	.word	0x0800d7e1
 8005068:	0800df18 	.word	0x0800df18

0800506c <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800506c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005070:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8005072:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005074:	d502      	bpl.n	800507c <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8005076:	3104      	adds	r1, #4
 8005078:	f005 bada 	b.w	800a630 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800507c:	4770      	bx	lr

0800507e <netif_init>:
}
 800507e:	4770      	bx	lr

08005080 <netif_set_ipaddr>:
{
 8005080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005082:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005084:	460d      	mov	r5, r1
 8005086:	b191      	cbz	r1, 80050ae <netif_set_ipaddr+0x2e>
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800508c:	9a01      	ldr	r2, [sp, #4]
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d00a      	beq.n	80050aa <netif_set_ipaddr+0x2a>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005094:	1d26      	adds	r6, r4, #4
 8005096:	a901      	add	r1, sp, #4
 8005098:	4630      	mov	r0, r6
 800509a:	f001 fb65 	bl	8006768 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800509e:	a901      	add	r1, sp, #4
 80050a0:	4630      	mov	r0, r6
 80050a2:	f004 f81f 	bl	80090e4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80050a6:	b92d      	cbnz	r5, 80050b4 <netif_set_ipaddr+0x34>
 80050a8:	6065      	str	r5, [r4, #4]
}
 80050aa:	b002      	add	sp, #8
 80050ac:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <netif_set_ipaddr+0x44>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	e7ea      	b.n	800508a <netif_set_ipaddr+0xa>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f6      	beq.n	80050aa <netif_set_ipaddr+0x2a>
 80050bc:	4620      	mov	r0, r4
 80050be:	f7ff ffd5 	bl	800506c <netif_issue_reports.part.0>
}
 80050c2:	e7f2      	b.n	80050aa <netif_set_ipaddr+0x2a>
 80050c4:	0800f5ec 	.word	0x0800f5ec

080050c8 <netif_set_addr>:
{
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4606      	mov	r6, r0
 80050cc:	4615      	mov	r5, r2
 80050ce:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 80050d0:	b109      	cbz	r1, 80050d6 <netif_set_addr+0xe>
 80050d2:	680b      	ldr	r3, [r1, #0]
 80050d4:	b94b      	cbnz	r3, 80050ea <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7ff ffd2 	bl	8005080 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80050dc:	b105      	cbz	r5, 80050e0 <netif_set_addr+0x18>
 80050de:	682d      	ldr	r5, [r5, #0]
 80050e0:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80050e2:	b104      	cbz	r4, 80050e6 <netif_set_addr+0x1e>
 80050e4:	6824      	ldr	r4, [r4, #0]
 80050e6:	60f4      	str	r4, [r6, #12]
}
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80050ea:	b102      	cbz	r2, 80050ee <netif_set_addr+0x26>
 80050ec:	6815      	ldr	r5, [r2, #0]
 80050ee:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80050f0:	b104      	cbz	r4, 80050f4 <netif_set_addr+0x2c>
 80050f2:	6824      	ldr	r4, [r4, #0]
 80050f4:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 80050f6:	4630      	mov	r0, r6
}
 80050f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80050fc:	f7ff bfc0 	b.w	8005080 <netif_set_ipaddr>

08005100 <netif_add>:
{
 8005100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005106:	4604      	mov	r4, r0
 8005108:	460f      	mov	r7, r1
 800510a:	4690      	mov	r8, r2
 800510c:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 800510e:	b92e      	cbnz	r6, 800511c <netif_add+0x1c>
 8005110:	4b15      	ldr	r3, [pc, #84]	; (8005168 <netif_add+0x68>)
 8005112:	4916      	ldr	r1, [pc, #88]	; (800516c <netif_add+0x6c>)
 8005114:	4816      	ldr	r0, [pc, #88]	; (8005170 <netif_add+0x70>)
 8005116:	22fb      	movs	r2, #251	; 0xfb
 8005118:	f007 fbaa 	bl	800c870 <iprintf>
  netif->num = netif_num++;
 800511c:	4a15      	ldr	r2, [pc, #84]	; (8005174 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800511e:	2303      	movs	r3, #3
 8005120:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8005124:	9b08      	ldr	r3, [sp, #32]
 8005126:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8005128:	7813      	ldrb	r3, [r2, #0]
 800512a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800512e:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8005130:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8005132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8005134:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8005136:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005138:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->netmask);
 800513a:	e9c4 5501 	strd	r5, r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 800513e:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8005140:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005144:	6225      	str	r5, [r4, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005146:	464b      	mov	r3, r9
 8005148:	4642      	mov	r2, r8
 800514a:	4639      	mov	r1, r7
 800514c:	f7ff ffbc 	bl	80050c8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005150:	4620      	mov	r0, r4
 8005152:	47b0      	blx	r6
 8005154:	b930      	cbnz	r0, 8005164 <netif_add+0x64>
  netif->next = netif_list;
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <netif_add+0x78>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800515c:	601c      	str	r4, [r3, #0]
}
 800515e:	4620      	mov	r0, r4
 8005160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8005164:	462c      	mov	r4, r5
 8005166:	e7fa      	b.n	800515e <netif_add+0x5e>
 8005168:	0800df4c 	.word	0x0800df4c
 800516c:	0800df7d 	.word	0x0800df7d
 8005170:	0800d7e1 	.word	0x0800d7e1
 8005174:	20008230 	.word	0x20008230
 8005178:	2000bab8 	.word	0x2000bab8

0800517c <netif_set_default>:
  netif_default = netif;
 800517c:	4b01      	ldr	r3, [pc, #4]	; (8005184 <netif_set_default+0x8>)
 800517e:	6018      	str	r0, [r3, #0]
}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000babc 	.word	0x2000babc

08005188 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005188:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800518c:	07d1      	lsls	r1, r2, #31
 800518e:	d409      	bmi.n	80051a4 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8005190:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005194:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8005196:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800519a:	d503      	bpl.n	80051a4 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800519c:	6843      	ldr	r3, [r0, #4]
 800519e:	b10b      	cbz	r3, 80051a4 <netif_set_up+0x1c>
 80051a0:	f7ff bf64 	b.w	800506c <netif_issue_reports.part.0>
}
 80051a4:	4770      	bx	lr

080051a6 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 80051a6:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80051aa:	07d9      	lsls	r1, r3, #31
 80051ac:	d507      	bpl.n	80051be <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 80051ae:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80051b2:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 80051b4:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80051b8:	d501      	bpl.n	80051be <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 80051ba:	f005 b97f 	b.w	800a4bc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80051be:	4770      	bx	lr

080051c0 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf* q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80051c0:	b110      	cbz	r0, 80051c8 <pbuf_skip_const+0x8>
 80051c2:	8943      	ldrh	r3, [r0, #10]
 80051c4:	428b      	cmp	r3, r1
 80051c6:	d902      	bls.n	80051ce <pbuf_skip_const+0xe>
    offset_left -= q->len;
    q = q->next;
  }
  if (out_offset != NULL) {
 80051c8:	b102      	cbz	r2, 80051cc <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 80051ca:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 80051cc:	4770      	bx	lr
    offset_left -= q->len;
 80051ce:	1ac9      	subs	r1, r1, r3
 80051d0:	b289      	uxth	r1, r1
    q = q->next;
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	e7f4      	b.n	80051c0 <pbuf_skip_const>
	...

080051d8 <pbuf_free_ooseq_callback>:
{
 80051d8:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80051da:	f006 fb27 	bl	800b82c <sys_arch_protect>
 80051de:	4b08      	ldr	r3, [pc, #32]	; (8005200 <pbuf_free_ooseq_callback+0x28>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	f006 fb2e 	bl	800b844 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <pbuf_free_ooseq_callback+0x2c>)
 80051ea:	681c      	ldr	r4, [r3, #0]
 80051ec:	b12c      	cbz	r4, 80051fa <pbuf_free_ooseq_callback+0x22>
    if (NULL != pcb->ooseq) {
 80051ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80051f0:	b120      	cbz	r0, 80051fc <pbuf_free_ooseq_callback+0x24>
      tcp_segs_free(pcb->ooseq);
 80051f2:	f000 fcd1 	bl	8005b98 <tcp_segs_free>
      pcb->ooseq = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	6723      	str	r3, [r4, #112]	; 0x70
}
 80051fa:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80051fc:	68e4      	ldr	r4, [r4, #12]
 80051fe:	e7f5      	b.n	80051ec <pbuf_free_ooseq_callback+0x14>
 8005200:	2000bac0 	.word	0x2000bac0
 8005204:	2000bac8 	.word	0x2000bac8

08005208 <pbuf_header_impl>:
{
 8005208:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800520a:	4604      	mov	r4, r0
 800520c:	bb70      	cbnz	r0, 800526c <pbuf_header_impl+0x64>
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <pbuf_header_impl+0x88>)
 8005210:	4920      	ldr	r1, [pc, #128]	; (8005294 <pbuf_header_impl+0x8c>)
 8005212:	4821      	ldr	r0, [pc, #132]	; (8005298 <pbuf_header_impl+0x90>)
 8005214:	f240 223f 	movw	r2, #575	; 0x23f
 8005218:	f007 fb2a 	bl	800c870 <iprintf>
  return 0;
 800521c:	2000      	movs	r0, #0
}
 800521e:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8005220:	461d      	mov	r5, r3
  type = p->type;
 8005222:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 8005224:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005226:	b10e      	cbz	r6, 800522c <pbuf_header_impl+0x24>
 8005228:	2e03      	cmp	r6, #3
 800522a:	d106      	bne.n	800523a <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800522c:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800522e:	f104 0210 	add.w	r2, r4, #16
 8005232:	4290      	cmp	r0, r2
 8005234:	d20a      	bcs.n	800524c <pbuf_header_impl+0x44>
      return 1;
 8005236:	2001      	movs	r0, #1
 8005238:	e7f1      	b.n	800521e <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800523a:	3e01      	subs	r6, #1
 800523c:	2e01      	cmp	r6, #1
 800523e:	d810      	bhi.n	8005262 <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005240:	2900      	cmp	r1, #0
 8005242:	da0b      	bge.n	800525c <pbuf_header_impl+0x54>
 8005244:	8962      	ldrh	r2, [r4, #10]
 8005246:	42aa      	cmp	r2, r5
 8005248:	d3f5      	bcc.n	8005236 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800524a:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 800524c:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 800524e:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 8005250:	441a      	add	r2, r3
 8005252:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 8005254:	8922      	ldrh	r2, [r4, #8]
 8005256:	4413      	add	r3, r2
 8005258:	8123      	strh	r3, [r4, #8]
 800525a:	e7df      	b.n	800521c <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 800525c:	2a00      	cmp	r2, #0
 800525e:	d1f4      	bne.n	800524a <pbuf_header_impl+0x42>
 8005260:	e7e9      	b.n	8005236 <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <pbuf_header_impl+0x88>)
 8005264:	490d      	ldr	r1, [pc, #52]	; (800529c <pbuf_header_impl+0x94>)
 8005266:	f240 2277 	movw	r2, #631	; 0x277
 800526a:	e00c      	b.n	8005286 <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 800526c:	2900      	cmp	r1, #0
 800526e:	d0d5      	beq.n	800521c <pbuf_header_impl+0x14>
 8005270:	b28b      	uxth	r3, r1
  if (header_size_increment < 0) {
 8005272:	dad5      	bge.n	8005220 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 8005274:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005276:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8005278:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800527a:	42a8      	cmp	r0, r5
 800527c:	d2d1      	bcs.n	8005222 <pbuf_header_impl+0x1a>
 800527e:	4b04      	ldr	r3, [pc, #16]	; (8005290 <pbuf_header_impl+0x88>)
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <pbuf_header_impl+0x98>)
 8005282:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8005286:	4804      	ldr	r0, [pc, #16]	; (8005298 <pbuf_header_impl+0x90>)
 8005288:	f007 faf2 	bl	800c870 <iprintf>
 800528c:	e7d3      	b.n	8005236 <pbuf_header_impl+0x2e>
 800528e:	bf00      	nop
 8005290:	0800e1f9 	.word	0x0800e1f9
 8005294:	0800e263 	.word	0x0800e263
 8005298:	0800d7e1 	.word	0x0800d7e1
 800529c:	0800e247 	.word	0x0800e247
 80052a0:	0800e229 	.word	0x0800e229

080052a4 <pbuf_pool_is_empty>:
{
 80052a4:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 80052a6:	4d0c      	ldr	r5, [pc, #48]	; (80052d8 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 80052a8:	f006 fac0 	bl	800b82c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 80052ac:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 80052ae:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 80052b0:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 80052b2:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80052b4:	f006 fac6 	bl	800b844 <sys_arch_unprotect>
  if (!queued) {
 80052b8:	b964      	cbnz	r4, 80052d4 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80052ba:	4622      	mov	r2, r4
 80052bc:	4621      	mov	r1, r4
 80052be:	4807      	ldr	r0, [pc, #28]	; (80052dc <pbuf_pool_is_empty+0x38>)
 80052c0:	f7fe fdbc 	bl	8003e3c <tcpip_callback_with_block>
 80052c4:	b130      	cbz	r0, 80052d4 <pbuf_pool_is_empty+0x30>
 80052c6:	f006 fab1 	bl	800b82c <sys_arch_protect>
 80052ca:	702c      	strb	r4, [r5, #0]
}
 80052cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80052d0:	f006 bab8 	b.w	800b844 <sys_arch_unprotect>
}
 80052d4:	bd38      	pop	{r3, r4, r5, pc}
 80052d6:	bf00      	nop
 80052d8:	2000bac0 	.word	0x2000bac0
 80052dc:	080051d9 	.word	0x080051d9

080052e0 <pbuf_alloced_custom>:
{
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 80052e4:	2804      	cmp	r0, #4
 80052e6:	d81e      	bhi.n	8005326 <pbuf_alloced_custom+0x46>
 80052e8:	e8df f000 	tbb	[pc, r0]
 80052ec:	1b280326 	.word	0x1b280326
 80052f0:	1b          	.byte	0x1b
 80052f1:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80052f2:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80052f4:	3003      	adds	r0, #3
 80052f6:	f020 0403 	bic.w	r4, r0, #3
 80052fa:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80052fe:	190e      	adds	r6, r1, r4
 8005300:	4286      	cmp	r6, r0
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	d816      	bhi.n	8005336 <pbuf_alloced_custom+0x56>
  p->pbuf.next = NULL;
 8005308:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800530a:	b1cd      	cbz	r5, 8005340 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800530c:	442c      	add	r4, r5
 800530e:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005310:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8005312:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005314:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005316:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005318:	8119      	strh	r1, [r3, #8]
 800531a:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 800531c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800531e:	4618      	mov	r0, r3
 8005320:	e009      	b.n	8005336 <pbuf_alloced_custom+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005322:	2000      	movs	r0, #0
    break;
 8005324:	e7e6      	b.n	80052f4 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <pbuf_alloced_custom+0x64>)
 8005328:	4907      	ldr	r1, [pc, #28]	; (8005348 <pbuf_alloced_custom+0x68>)
 800532a:	4808      	ldr	r0, [pc, #32]	; (800534c <pbuf_alloced_custom+0x6c>)
 800532c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005330:	f007 fa9e 	bl	800c870 <iprintf>
    return NULL;
 8005334:	2000      	movs	r0, #0
}
 8005336:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005338:	2036      	movs	r0, #54	; 0x36
 800533a:	e7db      	b.n	80052f4 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800533c:	200e      	movs	r0, #14
 800533e:	e7d9      	b.n	80052f4 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8005340:	605d      	str	r5, [r3, #4]
 8005342:	e7e5      	b.n	8005310 <pbuf_alloced_custom+0x30>
 8005344:	0800e1f9 	.word	0x0800e1f9
 8005348:	0800e03c 	.word	0x0800e03c
 800534c:	0800d7e1 	.word	0x0800d7e1

08005350 <pbuf_header>:
   return pbuf_header_impl(p, header_size_increment, 0);
 8005350:	2200      	movs	r2, #0
 8005352:	f7ff bf59 	b.w	8005208 <pbuf_header_impl>

08005356 <pbuf_header_force>:
   return pbuf_header_impl(p, header_size_increment, 1);
 8005356:	2201      	movs	r2, #1
 8005358:	f7ff bf56 	b.w	8005208 <pbuf_header_impl>

0800535c <pbuf_free>:
{
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 8005360:	4604      	mov	r4, r0
 8005362:	b950      	cbnz	r0, 800537a <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005364:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <pbuf_free+0xb8>)
 8005366:	492c      	ldr	r1, [pc, #176]	; (8005418 <pbuf_free+0xbc>)
 8005368:	482c      	ldr	r0, [pc, #176]	; (800541c <pbuf_free+0xc0>)
 800536a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800536e:	f007 fa7f 	bl	800c870 <iprintf>
    return 0;
 8005372:	4625      	mov	r5, r4
}
 8005374:	4628      	mov	r0, r5
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800537a:	7b03      	ldrb	r3, [r0, #12]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d906      	bls.n	800538e <pbuf_free+0x32>
 8005380:	4b24      	ldr	r3, [pc, #144]	; (8005414 <pbuf_free+0xb8>)
 8005382:	4927      	ldr	r1, [pc, #156]	; (8005420 <pbuf_free+0xc4>)
 8005384:	4825      	ldr	r0, [pc, #148]	; (800541c <pbuf_free+0xc0>)
 8005386:	f240 22de 	movw	r2, #734	; 0x2de
 800538a:	f007 fa71 	bl	800c870 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800538e:	4f21      	ldr	r7, [pc, #132]	; (8005414 <pbuf_free+0xb8>)
 8005390:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8005428 <pbuf_free+0xcc>
 8005394:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800541c <pbuf_free+0xc0>
{
 8005398:	2500      	movs	r5, #0
    SYS_ARCH_PROTECT(old_level);
 800539a:	f006 fa47 	bl	800b82c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800539e:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 80053a0:	4682      	mov	sl, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80053a2:	b933      	cbnz	r3, 80053b2 <pbuf_free+0x56>
 80053a4:	463b      	mov	r3, r7
 80053a6:	f240 22eb 	movw	r2, #747	; 0x2eb
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	f007 fa5f 	bl	800c870 <iprintf>
    ref = --(p->ref);
 80053b2:	89e6      	ldrh	r6, [r4, #14]
 80053b4:	3e01      	subs	r6, #1
 80053b6:	b2b6      	uxth	r6, r6
 80053b8:	81e6      	strh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80053ba:	4650      	mov	r0, sl
 80053bc:	f006 fa42 	bl	800b844 <sys_arch_unprotect>
    if (ref == 0) {
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	d1d7      	bne.n	8005374 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80053c4:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80053c6:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80053c8:	079b      	lsls	r3, r3, #30
 80053ca:	d511      	bpl.n	80053f0 <pbuf_free+0x94>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	b933      	cbnz	r3, 80053de <pbuf_free+0x82>
 80053d0:	463b      	mov	r3, r7
 80053d2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80053d6:	4913      	ldr	r1, [pc, #76]	; (8005424 <pbuf_free+0xc8>)
 80053d8:	4640      	mov	r0, r8
 80053da:	f007 fa49 	bl	800c870 <iprintf>
        pc->custom_free_function(p);
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	4620      	mov	r0, r4
 80053e2:	4798      	blx	r3
      count++;
 80053e4:	3501      	adds	r5, #1
 80053e6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80053e8:	4634      	mov	r4, r6
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	d1d5      	bne.n	800539a <pbuf_free+0x3e>
 80053ee:	e7c1      	b.n	8005374 <pbuf_free+0x18>
      type = p->type;
 80053f0:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d104      	bne.n	8005400 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF_POOL, p);
 80053f6:	4621      	mov	r1, r4
 80053f8:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 80053fa:	f7ff fe1d 	bl	8005038 <memp_free>
 80053fe:	e7f1      	b.n	80053e4 <pbuf_free+0x88>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005400:	3b01      	subs	r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d802      	bhi.n	800540c <pbuf_free+0xb0>
          memp_free(MEMP_PBUF, p);
 8005406:	4621      	mov	r1, r4
 8005408:	200b      	movs	r0, #11
 800540a:	e7f6      	b.n	80053fa <pbuf_free+0x9e>
          mem_free(p);
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff fbb9 	bl	8004b84 <mem_free>
 8005412:	e7e7      	b.n	80053e4 <pbuf_free+0x88>
 8005414:	0800e1f9 	.word	0x0800e1f9
 8005418:	0800e263 	.word	0x0800e263
 800541c:	0800d7e1 	.word	0x0800d7e1
 8005420:	0800e1ad 	.word	0x0800e1ad
 8005424:	0800e1d8 	.word	0x0800e1d8
 8005428:	0800e1c2 	.word	0x0800e1c2

0800542c <pbuf_alloc>:
{
 800542c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	460e      	mov	r6, r1
 8005432:	4617      	mov	r7, r2
  switch (layer) {
 8005434:	2804      	cmp	r0, #4
 8005436:	d80e      	bhi.n	8005456 <pbuf_alloc+0x2a>
 8005438:	e8df f000 	tbb	[pc, r0]
 800543c:	0b170315 	.word	0x0b170315
 8005440:	0b          	.byte	0x0b
 8005441:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005442:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8005444:	2f03      	cmp	r7, #3
 8005446:	f200 80ba 	bhi.w	80055be <pbuf_alloc+0x192>
 800544a:	e8df f007 	tbb	[pc, r7]
 800544e:	ab90      	.short	0xab90
 8005450:	10ab      	.short	0x10ab
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005452:	2500      	movs	r5, #0
    break;
 8005454:	e7f6      	b.n	8005444 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8005456:	4b5c      	ldr	r3, [pc, #368]	; (80055c8 <pbuf_alloc+0x19c>)
 8005458:	495c      	ldr	r1, [pc, #368]	; (80055cc <pbuf_alloc+0x1a0>)
 800545a:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800545e:	485c      	ldr	r0, [pc, #368]	; (80055d0 <pbuf_alloc+0x1a4>)
 8005460:	f007 fa06 	bl	800c870 <iprintf>
 8005464:	e04a      	b.n	80054fc <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005466:	2536      	movs	r5, #54	; 0x36
 8005468:	e7ec      	b.n	8005444 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800546a:	250e      	movs	r5, #14
 800546c:	e7ea      	b.n	8005444 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800546e:	200c      	movs	r0, #12
 8005470:	f7ff fdc6 	bl	8005000 <memp_malloc>
    if (p == NULL) {
 8005474:	4604      	mov	r4, r0
 8005476:	b920      	cbnz	r0, 8005482 <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 8005478:	f7ff ff14 	bl	80052a4 <pbuf_pool_is_empty>
}
 800547c:	4620      	mov	r0, r4
 800547e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8005482:	2303      	movs	r3, #3
 8005484:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800548a:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800548c:	3503      	adds	r5, #3
 800548e:	f025 0503 	bic.w	r5, r5, #3
 8005492:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 8005496:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005498:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800549c:	bf28      	it	cs
 800549e:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80054a0:	f023 0303 	bic.w	r3, r3, #3
 80054a4:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80054a6:	f500 7718 	add.w	r7, r0, #608	; 0x260
 80054aa:	442b      	add	r3, r5
 80054ac:	429f      	cmp	r7, r3
    p->tot_len = length;
 80054ae:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80054b0:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80054b2:	d206      	bcs.n	80054c2 <pbuf_alloc+0x96>
 80054b4:	4b44      	ldr	r3, [pc, #272]	; (80055c8 <pbuf_alloc+0x19c>)
 80054b6:	4947      	ldr	r1, [pc, #284]	; (80055d4 <pbuf_alloc+0x1a8>)
 80054b8:	4845      	ldr	r0, [pc, #276]	; (80055d0 <pbuf_alloc+0x1a4>)
 80054ba:	f44f 7298 	mov.w	r2, #304	; 0x130
 80054be:	f007 f9d7 	bl	800c870 <iprintf>
    p->ref = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 80054c6:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80054c8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80055c8 <pbuf_alloc+0x19c>
 80054cc:	f8df a110 	ldr.w	sl, [pc, #272]	; 80055e0 <pbuf_alloc+0x1b4>
 80054d0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80055d0 <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 80054d4:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 80054d6:	46a3      	mov	fp, r4
 80054d8:	2e00      	cmp	r6, #0
 80054da:	dc04      	bgt.n	80054e6 <pbuf_alloc+0xba>
  p->ref = 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	7363      	strb	r3, [r4, #13]
  return p;
 80054e4:	e7ca      	b.n	800547c <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80054e6:	200c      	movs	r0, #12
 80054e8:	f7ff fd8a 	bl	8005000 <memp_malloc>
 80054ec:	2300      	movs	r3, #0
      if (q == NULL) {
 80054ee:	4605      	mov	r5, r0
 80054f0:	b930      	cbnz	r0, 8005500 <pbuf_alloc+0xd4>
        PBUF_POOL_IS_EMPTY();
 80054f2:	f7ff fed7 	bl	80052a4 <pbuf_pool_is_empty>
        pbuf_free(p);
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff ff30 	bl	800535c <pbuf_free>
    return NULL;
 80054fc:	2400      	movs	r4, #0
 80054fe:	e7bd      	b.n	800547c <pbuf_alloc+0x50>
      q->flags = 0;
 8005500:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8005502:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005504:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8005508:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800550a:	429e      	cmp	r6, r3
      q->type = type;
 800550c:	7302      	strb	r2, [r0, #12]
      r->next = q;
 800550e:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005512:	d106      	bne.n	8005522 <pbuf_alloc+0xf6>
 8005514:	4643      	mov	r3, r8
 8005516:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800551a:	4651      	mov	r1, sl
 800551c:	4648      	mov	r0, r9
 800551e:	f007 f9a7 	bl	800c870 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005522:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005524:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8005528:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800552a:	bf28      	it	cs
 800552c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005530:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8005532:	f105 0310 	add.w	r3, r5, #16
 8005536:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005538:	079b      	lsls	r3, r3, #30
 800553a:	d006      	beq.n	800554a <pbuf_alloc+0x11e>
 800553c:	4643      	mov	r3, r8
 800553e:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005542:	4925      	ldr	r1, [pc, #148]	; (80055d8 <pbuf_alloc+0x1ac>)
 8005544:	4648      	mov	r0, r9
 8005546:	f007 f993 	bl	800c870 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800554a:	8962      	ldrh	r2, [r4, #10]
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	4413      	add	r3, r2
 8005550:	429f      	cmp	r7, r3
 8005552:	d206      	bcs.n	8005562 <pbuf_alloc+0x136>
 8005554:	4643      	mov	r3, r8
 8005556:	f240 1255 	movw	r2, #341	; 0x155
 800555a:	491e      	ldr	r1, [pc, #120]	; (80055d4 <pbuf_alloc+0x1a8>)
 800555c:	4648      	mov	r0, r9
 800555e:	f007 f987 	bl	800c870 <iprintf>
      q->ref = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8005566:	896b      	ldrh	r3, [r5, #10]
 8005568:	46ab      	mov	fp, r5
 800556a:	1af6      	subs	r6, r6, r3
 800556c:	e7b4      	b.n	80054d8 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800556e:	f105 0013 	add.w	r0, r5, #19
 8005572:	1cf3      	adds	r3, r6, #3
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	f020 0003 	bic.w	r0, r0, #3
 800557c:	4418      	add	r0, r3
 800557e:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005580:	4298      	cmp	r0, r3
 8005582:	d3bb      	bcc.n	80054fc <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005584:	f7ff fc42 	bl	8004e0c <mem_malloc>
    if (p == NULL) {
 8005588:	4604      	mov	r4, r0
 800558a:	2800      	cmp	r0, #0
 800558c:	d0b6      	beq.n	80054fc <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800558e:	4405      	add	r5, r0
 8005590:	3513      	adds	r5, #19
    p->next = NULL;
 8005592:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005594:	f025 0503 	bic.w	r5, r5, #3
 8005598:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 800559a:	8106      	strh	r6, [r0, #8]
 800559c:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800559e:	6003      	str	r3, [r0, #0]
    p->type = type;
 80055a0:	7303      	strb	r3, [r0, #12]
 80055a2:	e79b      	b.n	80054dc <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80055a4:	200b      	movs	r0, #11
 80055a6:	f7ff fd2b 	bl	8005000 <memp_malloc>
    if (p == NULL) {
 80055aa:	4604      	mov	r4, r0
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0a5      	beq.n	80054fc <pbuf_alloc+0xd0>
    p->payload = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80055b4:	8106      	strh	r6, [r0, #8]
 80055b6:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80055b8:	6003      	str	r3, [r0, #0]
    p->type = type;
 80055ba:	7307      	strb	r7, [r0, #12]
    break;
 80055bc:	e78e      	b.n	80054dc <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80055be:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <pbuf_alloc+0x19c>)
 80055c0:	4906      	ldr	r1, [pc, #24]	; (80055dc <pbuf_alloc+0x1b0>)
 80055c2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80055c6:	e74a      	b.n	800545e <pbuf_alloc+0x32>
 80055c8:	0800e1f9 	.word	0x0800e1f9
 80055cc:	0800df94 	.word	0x0800df94
 80055d0:	0800d7e1 	.word	0x0800d7e1
 80055d4:	0800dfaf 	.word	0x0800dfaf
 80055d8:	0800dff4 	.word	0x0800dff4
 80055dc:	0800e021 	.word	0x0800e021
 80055e0:	0800dfe0 	.word	0x0800dfe0

080055e4 <pbuf_realloc>:
{
 80055e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80055ea:	4604      	mov	r4, r0
 80055ec:	b930      	cbnz	r0, 80055fc <pbuf_realloc+0x18>
 80055ee:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <pbuf_realloc+0xc4>)
 80055f0:	492e      	ldr	r1, [pc, #184]	; (80056ac <pbuf_realloc+0xc8>)
 80055f2:	482f      	ldr	r0, [pc, #188]	; (80056b0 <pbuf_realloc+0xcc>)
 80055f4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80055f8:	f007 f93a 	bl	800c870 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80055fc:	7b23      	ldrb	r3, [r4, #12]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d906      	bls.n	8005610 <pbuf_realloc+0x2c>
 8005602:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <pbuf_realloc+0xc4>)
 8005604:	492b      	ldr	r1, [pc, #172]	; (80056b4 <pbuf_realloc+0xd0>)
 8005606:	482a      	ldr	r0, [pc, #168]	; (80056b0 <pbuf_realloc+0xcc>)
 8005608:	f240 12f7 	movw	r2, #503	; 0x1f7
 800560c:	f007 f930 	bl	800c870 <iprintf>
  if (new_len >= p->tot_len) {
 8005610:	8926      	ldrh	r6, [r4, #8]
 8005612:	42ae      	cmp	r6, r5
 8005614:	d945      	bls.n	80056a2 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005616:	4f24      	ldr	r7, [pc, #144]	; (80056a8 <pbuf_realloc+0xc4>)
 8005618:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80056c0 <pbuf_realloc+0xdc>
 800561c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80056b0 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8005620:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8005622:	8963      	ldrh	r3, [r4, #10]
 8005624:	42ab      	cmp	r3, r5
 8005626:	d319      	bcc.n	800565c <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005628:	7b22      	ldrb	r2, [r4, #12]
 800562a:	2a00      	cmp	r2, #0
 800562c:	d131      	bne.n	8005692 <pbuf_realloc+0xae>
 800562e:	42ab      	cmp	r3, r5
 8005630:	d02f      	beq.n	8005692 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005632:	7b63      	ldrb	r3, [r4, #13]
 8005634:	079b      	lsls	r3, r3, #30
 8005636:	d42c      	bmi.n	8005692 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005638:	6861      	ldr	r1, [r4, #4]
 800563a:	1b09      	subs	r1, r1, r4
 800563c:	4429      	add	r1, r5
 800563e:	4620      	mov	r0, r4
 8005640:	b289      	uxth	r1, r1
 8005642:	f7ff fb57 	bl	8004cf4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005646:	4604      	mov	r4, r0
 8005648:	bb18      	cbnz	r0, 8005692 <pbuf_realloc+0xae>
 800564a:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <pbuf_realloc+0xc4>)
 800564c:	491a      	ldr	r1, [pc, #104]	; (80056b8 <pbuf_realloc+0xd4>)
 800564e:	4818      	ldr	r0, [pc, #96]	; (80056b0 <pbuf_realloc+0xcc>)
 8005650:	f240 221d 	movw	r2, #541	; 0x21d
 8005654:	f007 f90c 	bl	800c870 <iprintf>
  q->len = rem_len;
 8005658:	8164      	strh	r4, [r4, #10]
 800565a:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 800565c:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800565e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005662:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8005664:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005666:	dd06      	ble.n	8005676 <pbuf_realloc+0x92>
 8005668:	463b      	mov	r3, r7
 800566a:	f240 220b 	movw	r2, #523	; 0x20b
 800566e:	4649      	mov	r1, r9
 8005670:	4640      	mov	r0, r8
 8005672:	f007 f8fd 	bl	800c870 <iprintf>
    q->tot_len += (u16_t)grow;
 8005676:	8923      	ldrh	r3, [r4, #8]
 8005678:	4433      	add	r3, r6
 800567a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800567c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800567e:	2c00      	cmp	r4, #0
 8005680:	d1cf      	bne.n	8005622 <pbuf_realloc+0x3e>
 8005682:	463b      	mov	r3, r7
 8005684:	f240 220f 	movw	r2, #527	; 0x20f
 8005688:	490c      	ldr	r1, [pc, #48]	; (80056bc <pbuf_realloc+0xd8>)
 800568a:	4640      	mov	r0, r8
 800568c:	f007 f8f0 	bl	800c870 <iprintf>
 8005690:	e7c7      	b.n	8005622 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8005692:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8005694:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8005696:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8005698:	b108      	cbz	r0, 800569e <pbuf_realloc+0xba>
    pbuf_free(q->next);
 800569a:	f7ff fe5f 	bl	800535c <pbuf_free>
  q->next = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	6023      	str	r3, [r4, #0]
}
 80056a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a6:	bf00      	nop
 80056a8:	0800e1f9 	.word	0x0800e1f9
 80056ac:	0800e255 	.word	0x0800e255
 80056b0:	0800d7e1 	.word	0x0800d7e1
 80056b4:	0800e26d 	.word	0x0800e26d
 80056b8:	0800e2b1 	.word	0x0800e2b1
 80056bc:	0800e299 	.word	0x0800e299
 80056c0:	0800e288 	.word	0x0800e288

080056c4 <pbuf_clen>:
{
 80056c4:	4603      	mov	r3, r0
  while (p != NULL) {
 80056c6:	2200      	movs	r2, #0
 80056c8:	b290      	uxth	r0, r2
 80056ca:	3201      	adds	r2, #1
 80056cc:	b903      	cbnz	r3, 80056d0 <pbuf_clen+0xc>
}
 80056ce:	4770      	bx	lr
    p = p->next;
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	e7f9      	b.n	80056c8 <pbuf_clen+0x4>

080056d4 <pbuf_ref>:
{
 80056d4:	b510      	push	{r4, lr}
  if (p != NULL) {
 80056d6:	4604      	mov	r4, r0
 80056d8:	b188      	cbz	r0, 80056fe <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 80056da:	f006 f8a7 	bl	800b82c <sys_arch_protect>
 80056de:	89e3      	ldrh	r3, [r4, #14]
 80056e0:	3301      	adds	r3, #1
 80056e2:	81e3      	strh	r3, [r4, #14]
 80056e4:	f006 f8ae 	bl	800b844 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80056e8:	89e3      	ldrh	r3, [r4, #14]
 80056ea:	b943      	cbnz	r3, 80056fe <pbuf_ref+0x2a>
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <pbuf_ref+0x2c>)
 80056ee:	4905      	ldr	r1, [pc, #20]	; (8005704 <pbuf_ref+0x30>)
 80056f0:	4805      	ldr	r0, [pc, #20]	; (8005708 <pbuf_ref+0x34>)
 80056f2:	f240 3239 	movw	r2, #825	; 0x339
}
 80056f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80056fa:	f007 b8b9 	b.w	800c870 <iprintf>
}
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	0800e1f9 	.word	0x0800e1f9
 8005704:	0800e2cd 	.word	0x0800e2cd
 8005708:	0800d7e1 	.word	0x0800d7e1

0800570c <pbuf_cat>:
{
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005710:	4604      	mov	r4, r0
 8005712:	b100      	cbz	r0, 8005716 <pbuf_cat+0xa>
 8005714:	b961      	cbnz	r1, 8005730 <pbuf_cat+0x24>
 8005716:	4b15      	ldr	r3, [pc, #84]	; (800576c <pbuf_cat+0x60>)
 8005718:	4915      	ldr	r1, [pc, #84]	; (8005770 <pbuf_cat+0x64>)
 800571a:	4816      	ldr	r0, [pc, #88]	; (8005774 <pbuf_cat+0x68>)
 800571c:	f240 324d 	movw	r2, #845	; 0x34d
}
 8005720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005724:	f007 b8a4 	b.w	800c870 <iprintf>
    p->tot_len += t->tot_len;
 8005728:	8929      	ldrh	r1, [r5, #8]
 800572a:	440b      	add	r3, r1
 800572c:	8123      	strh	r3, [r4, #8]
 800572e:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	8923      	ldrh	r3, [r4, #8]
 8005734:	2a00      	cmp	r2, #0
 8005736:	d1f7      	bne.n	8005728 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005738:	8962      	ldrh	r2, [r4, #10]
 800573a:	429a      	cmp	r2, r3
 800573c:	d006      	beq.n	800574c <pbuf_cat+0x40>
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <pbuf_cat+0x60>)
 8005740:	490d      	ldr	r1, [pc, #52]	; (8005778 <pbuf_cat+0x6c>)
 8005742:	480c      	ldr	r0, [pc, #48]	; (8005774 <pbuf_cat+0x68>)
 8005744:	f240 3255 	movw	r2, #853	; 0x355
 8005748:	f007 f892 	bl	800c870 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	b133      	cbz	r3, 800575e <pbuf_cat+0x52>
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <pbuf_cat+0x60>)
 8005752:	490a      	ldr	r1, [pc, #40]	; (800577c <pbuf_cat+0x70>)
 8005754:	4807      	ldr	r0, [pc, #28]	; (8005774 <pbuf_cat+0x68>)
 8005756:	f240 3256 	movw	r2, #854	; 0x356
 800575a:	f007 f889 	bl	800c870 <iprintf>
  p->tot_len += t->tot_len;
 800575e:	892a      	ldrh	r2, [r5, #8]
 8005760:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8005762:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8005764:	4413      	add	r3, r2
 8005766:	8123      	strh	r3, [r4, #8]
}
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	bf00      	nop
 800576c:	0800e1f9 	.word	0x0800e1f9
 8005770:	0800e060 	.word	0x0800e060
 8005774:	0800d7e1 	.word	0x0800d7e1
 8005778:	0800e095 	.word	0x0800e095
 800577c:	0800e0c2 	.word	0x0800e0c2

08005780 <pbuf_chain>:
{
 8005780:	b510      	push	{r4, lr}
 8005782:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8005784:	f7ff ffc2 	bl	800570c <pbuf_cat>
  pbuf_ref(t);
 8005788:	4620      	mov	r0, r4
}
 800578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800578e:	f7ff bfa1 	b.w	80056d4 <pbuf_ref>
	...

08005794 <pbuf_copy>:
{
 8005794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800579a:	4605      	mov	r5, r0
 800579c:	b120      	cbz	r0, 80057a8 <pbuf_copy+0x14>
 800579e:	b119      	cbz	r1, 80057a8 <pbuf_copy+0x14>
 80057a0:	8902      	ldrh	r2, [r0, #8]
 80057a2:	890b      	ldrh	r3, [r1, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d20a      	bcs.n	80057be <pbuf_copy+0x2a>
 80057a8:	4b36      	ldr	r3, [pc, #216]	; (8005884 <pbuf_copy+0xf0>)
 80057aa:	4937      	ldr	r1, [pc, #220]	; (8005888 <pbuf_copy+0xf4>)
 80057ac:	f240 32bd 	movw	r2, #957	; 0x3bd
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80057b0:	4836      	ldr	r0, [pc, #216]	; (800588c <pbuf_copy+0xf8>)
 80057b2:	f007 f85d 	bl	800c870 <iprintf>
 80057b6:	f06f 000f 	mvn.w	r0, #15
}
 80057ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 80057be:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057c2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005884 <pbuf_copy+0xf0>
 80057c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800589c <pbuf_copy+0x108>
 80057ca:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800588c <pbuf_copy+0xf8>
  u16_t offset_to=0, offset_from=0, len;
 80057ce:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80057d0:	896e      	ldrh	r6, [r5, #10]
 80057d2:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80057d4:	6868      	ldr	r0, [r5, #4]
 80057d6:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80057d8:	1bf6      	subs	r6, r6, r7
 80057da:	eba3 030b 	sub.w	r3, r3, fp
 80057de:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 80057e0:	bfac      	ite	ge
 80057e2:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 80057e4:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80057e6:	4632      	mov	r2, r6
 80057e8:	4459      	add	r1, fp
 80057ea:	4438      	add	r0, r7
 80057ec:	f006 ff85 	bl	800c6fa <memcpy>
    offset_to += len;
 80057f0:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057f2:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 80057f4:	b2bf      	uxth	r7, r7
    offset_from += len;
 80057f6:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057f8:	42bb      	cmp	r3, r7
    offset_from += len;
 80057fa:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057fe:	d206      	bcs.n	800580e <pbuf_copy+0x7a>
 8005800:	4643      	mov	r3, r8
 8005802:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005806:	4651      	mov	r1, sl
 8005808:	4648      	mov	r0, r9
 800580a:	f007 f831 	bl	800c870 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800580e:	8963      	ldrh	r3, [r4, #10]
 8005810:	455b      	cmp	r3, fp
 8005812:	d206      	bcs.n	8005822 <pbuf_copy+0x8e>
 8005814:	4643      	mov	r3, r8
 8005816:	f240 32ce 	movw	r2, #974	; 0x3ce
 800581a:	491d      	ldr	r1, [pc, #116]	; (8005890 <pbuf_copy+0xfc>)
 800581c:	4648      	mov	r0, r9
 800581e:	f007 f827 	bl	800c870 <iprintf>
    if (offset_from >= p_from->len) {
 8005822:	8963      	ldrh	r3, [r4, #10]
 8005824:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8005826:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8005828:	bf9c      	itt	ls
 800582a:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800582c:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8005830:	42bb      	cmp	r3, r7
 8005832:	d108      	bne.n	8005846 <pbuf_copy+0xb2>
      p_to = p_to->next;
 8005834:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005836:	b92d      	cbnz	r5, 8005844 <pbuf_copy+0xb0>
 8005838:	b314      	cbz	r4, 8005880 <pbuf_copy+0xec>
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <pbuf_copy+0xf0>)
 800583c:	4915      	ldr	r1, [pc, #84]	; (8005894 <pbuf_copy+0x100>)
 800583e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005842:	e7b5      	b.n	80057b0 <pbuf_copy+0x1c>
      offset_to = 0;
 8005844:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005846:	b17c      	cbz	r4, 8005868 <pbuf_copy+0xd4>
 8005848:	8962      	ldrh	r2, [r4, #10]
 800584a:	8923      	ldrh	r3, [r4, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	d10b      	bne.n	8005868 <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	b14b      	cbz	r3, 8005868 <pbuf_copy+0xd4>
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <pbuf_copy+0xf0>)
 8005856:	f240 32de 	movw	r2, #990	; 0x3de
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800585a:	490f      	ldr	r1, [pc, #60]	; (8005898 <pbuf_copy+0x104>)
 800585c:	480b      	ldr	r0, [pc, #44]	; (800588c <pbuf_copy+0xf8>)
 800585e:	f007 f807 	bl	800c870 <iprintf>
 8005862:	f06f 0005 	mvn.w	r0, #5
 8005866:	e7a8      	b.n	80057ba <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005868:	896a      	ldrh	r2, [r5, #10]
 800586a:	892b      	ldrh	r3, [r5, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d105      	bne.n	800587c <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b11b      	cbz	r3, 800587c <pbuf_copy+0xe8>
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <pbuf_copy+0xf0>)
 8005876:	f240 32e3 	movw	r2, #995	; 0x3e3
 800587a:	e7ee      	b.n	800585a <pbuf_copy+0xc6>
  } while (p_from);
 800587c:	2c00      	cmp	r4, #0
 800587e:	d1a7      	bne.n	80057d0 <pbuf_copy+0x3c>
  return ERR_OK;
 8005880:	4620      	mov	r0, r4
 8005882:	e79a      	b.n	80057ba <pbuf_copy+0x26>
 8005884:	0800e1f9 	.word	0x0800e1f9
 8005888:	0800e0d2 	.word	0x0800e0d2
 800588c:	0800d7e1 	.word	0x0800d7e1
 8005890:	0800e119 	.word	0x0800e119
 8005894:	0800e134 	.word	0x0800e134
 8005898:	0800e141 	.word	0x0800e141
 800589c:	0800e102 	.word	0x0800e102

080058a0 <pbuf_copy_partial>:
{
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	460f      	mov	r7, r1
 80058a6:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80058a8:	4606      	mov	r6, r0
 80058aa:	b950      	cbnz	r0, 80058c2 <pbuf_copy_partial+0x22>
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <pbuf_copy_partial+0x7c>)
 80058ae:	491c      	ldr	r1, [pc, #112]	; (8005920 <pbuf_copy_partial+0x80>)
 80058b0:	481c      	ldr	r0, [pc, #112]	; (8005924 <pbuf_copy_partial+0x84>)
 80058b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80058b6:	f006 ffdb 	bl	800c870 <iprintf>
 80058ba:	4635      	mov	r5, r6
}
 80058bc:	4628      	mov	r0, r5
 80058be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80058c2:	bb41      	cbnz	r1, 8005916 <pbuf_copy_partial+0x76>
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <pbuf_copy_partial+0x7c>)
 80058c6:	4918      	ldr	r1, [pc, #96]	; (8005928 <pbuf_copy_partial+0x88>)
 80058c8:	4816      	ldr	r0, [pc, #88]	; (8005924 <pbuf_copy_partial+0x84>)
 80058ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80058ce:	f006 ffcf 	bl	800c870 <iprintf>
 80058d2:	463d      	mov	r5, r7
 80058d4:	e7f2      	b.n	80058bc <pbuf_copy_partial+0x1c>
 80058d6:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 80058d8:	b153      	cbz	r3, 80058f0 <pbuf_copy_partial+0x50>
 80058da:	4293      	cmp	r3, r2
 80058dc:	d308      	bcc.n	80058f0 <pbuf_copy_partial+0x50>
      offset -= p->len;
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80058e2:	6836      	ldr	r6, [r6, #0]
 80058e4:	f1b8 0f00 	cmp.w	r8, #0
 80058e8:	d0e8      	beq.n	80058bc <pbuf_copy_partial+0x1c>
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	d1f3      	bne.n	80058d6 <pbuf_copy_partial+0x36>
 80058ee:	e7e5      	b.n	80058bc <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	b294      	uxth	r4, r2
 80058f4:	4544      	cmp	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80058f6:	6871      	ldr	r1, [r6, #4]
 80058f8:	bf28      	it	cs
 80058fa:	4644      	movcs	r4, r8
 80058fc:	4622      	mov	r2, r4
 80058fe:	4419      	add	r1, r3
 8005900:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8005902:	4425      	add	r5, r4
      len -= buf_copy_len;
 8005904:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005908:	f006 fef7 	bl	800c6fa <memcpy>
      copied_total += buf_copy_len;
 800590c:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 800590e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	e7e5      	b.n	80058e2 <pbuf_copy_partial+0x42>
  left = 0;
 8005916:	2500      	movs	r5, #0
 8005918:	e7e4      	b.n	80058e4 <pbuf_copy_partial+0x44>
 800591a:	bf00      	nop
 800591c:	0800e1f9 	.word	0x0800e1f9
 8005920:	0800e16b 	.word	0x0800e16b
 8005924:	0800d7e1 	.word	0x0800d7e1
 8005928:	0800e18a 	.word	0x0800e18a

0800592c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
 800592c:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
 800592e:	f10d 0206 	add.w	r2, sp, #6
 8005932:	f7ff fc45 	bl	80051c0 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8005936:	b148      	cbz	r0, 800594c <pbuf_try_get_at+0x20>
 8005938:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800593c:	8942      	ldrh	r2, [r0, #10]
 800593e:	429a      	cmp	r2, r3
 8005940:	d904      	bls.n	800594c <pbuf_try_get_at+0x20>
    return ((u8_t*)q->payload)[q_idx];
 8005942:	6842      	ldr	r2, [r0, #4]
 8005944:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 8005946:	b003      	add	sp, #12
 8005948:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e7f9      	b.n	8005946 <pbuf_try_get_at+0x1a>

08005952 <pbuf_get_at>:
{
 8005952:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 8005954:	f7ff ffea 	bl	800592c <pbuf_try_get_at>
 8005958:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800595c:	b2c0      	uxtb	r0, r0
 800595e:	bd08      	pop	{r3, pc}

08005960 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005960:	4911      	ldr	r1, [pc, #68]	; (80059a8 <tcp_new_port+0x48>)
 8005962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005964:	880a      	ldrh	r2, [r1, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005966:	4f11      	ldr	r7, [pc, #68]	; (80059ac <tcp_new_port+0x4c>)
{
 8005968:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800596c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005970:	42b2      	cmp	r2, r6
 8005972:	bf1a      	itte	ne
 8005974:	1c50      	addne	r0, r2, #1
 8005976:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005978:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 800597c:	2400      	movs	r4, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800597e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8005982:	6815      	ldr	r5, [r2, #0]
 8005984:	b925      	cbnz	r5, 8005990 <tcp_new_port+0x30>
 8005986:	3401      	adds	r4, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005988:	2c04      	cmp	r4, #4
 800598a:	d1f8      	bne.n	800597e <tcp_new_port+0x1e>
 800598c:	8008      	strh	r0, [r1, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800598e:	e008      	b.n	80059a2 <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 8005990:	8aea      	ldrh	r2, [r5, #22]
 8005992:	4282      	cmp	r2, r0
 8005994:	d106      	bne.n	80059a4 <tcp_new_port+0x44>
 8005996:	3b01      	subs	r3, #1
 8005998:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e8      	bne.n	8005970 <tcp_new_port+0x10>
 800599e:	8008      	strh	r0, [r1, #0]
          return 0;
 80059a0:	4618      	mov	r0, r3
}
 80059a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80059a4:	68ed      	ldr	r5, [r5, #12]
 80059a6:	e7ed      	b.n	8005984 <tcp_new_port+0x24>
 80059a8:	2000000c 	.word	0x2000000c
 80059ac:	0800e3f0 	.word	0x0800e3f0

080059b0 <tcp_close_shutdown_fin>:
{
 80059b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80059b2:	4604      	mov	r4, r0
 80059b4:	b930      	cbnz	r0, 80059c4 <tcp_close_shutdown_fin+0x14>
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <tcp_close_shutdown_fin+0x54>)
 80059b8:	4913      	ldr	r1, [pc, #76]	; (8005a08 <tcp_close_shutdown_fin+0x58>)
 80059ba:	4814      	ldr	r0, [pc, #80]	; (8005a0c <tcp_close_shutdown_fin+0x5c>)
 80059bc:	f240 124d 	movw	r2, #333	; 0x14d
 80059c0:	f006 ff56 	bl	800c870 <iprintf>
  switch (pcb->state) {
 80059c4:	7d23      	ldrb	r3, [r4, #20]
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d003      	beq.n	80059d2 <tcp_close_shutdown_fin+0x22>
 80059ca:	2b07      	cmp	r3, #7
 80059cc:	d00c      	beq.n	80059e8 <tcp_close_shutdown_fin+0x38>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d108      	bne.n	80059e4 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 80059d2:	4620      	mov	r0, r4
 80059d4:	f002 fd72 	bl	80084bc <tcp_send_fin>
    if (err == ERR_OK) {
 80059d8:	b960      	cbnz	r0, 80059f4 <tcp_close_shutdown_fin+0x44>
      pcb->state = FIN_WAIT_1;
 80059da:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80059dc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80059de:	4620      	mov	r0, r4
 80059e0:	f002 fdc4 	bl	800856c <tcp_output>
    return ERR_OK;
 80059e4:	2000      	movs	r0, #0
}
 80059e6:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 80059e8:	4620      	mov	r0, r4
 80059ea:	f002 fd67 	bl	80084bc <tcp_send_fin>
    if (err == ERR_OK) {
 80059ee:	b908      	cbnz	r0, 80059f4 <tcp_close_shutdown_fin+0x44>
      pcb->state = LAST_ACK;
 80059f0:	2309      	movs	r3, #9
 80059f2:	e7f3      	b.n	80059dc <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d1f6      	bne.n	80059e6 <tcp_close_shutdown_fin+0x36>
    pcb->flags |= TF_CLOSEPEND;
 80059f8:	7ea3      	ldrb	r3, [r4, #26]
 80059fa:	f043 0308 	orr.w	r3, r3, #8
 80059fe:	76a3      	strb	r3, [r4, #26]
 8005a00:	e7f0      	b.n	80059e4 <tcp_close_shutdown_fin+0x34>
 8005a02:	bf00      	nop
 8005a04:	0800e35e 	.word	0x0800e35e
 8005a08:	0800e38d 	.word	0x0800e38d
 8005a0c:	0800d7e1 	.word	0x0800d7e1

08005a10 <tcp_init>:
}
 8005a10:	4770      	bx	lr
	...

08005a14 <tcp_bind>:
{
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8005a16:	4d1e      	ldr	r5, [pc, #120]	; (8005a90 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005a18:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	bf18      	it	ne
 8005a1e:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005a20:	b140      	cbz	r0, 8005a34 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005a22:	7d03      	ldrb	r3, [r0, #20]
 8005a24:	b14b      	cbz	r3, 8005a3a <tcp_bind+0x26>
 8005a26:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <tcp_bind+0x80>)
 8005a28:	491b      	ldr	r1, [pc, #108]	; (8005a98 <tcp_bind+0x84>)
 8005a2a:	481c      	ldr	r0, [pc, #112]	; (8005a9c <tcp_bind+0x88>)
 8005a2c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8005a30:	f006 ff1e 	bl	800c870 <iprintf>
    return ERR_VAL;
 8005a34:	f06f 0005 	mvn.w	r0, #5
 8005a38:	e01a      	b.n	8005a70 <tcp_bind+0x5c>
  if (port == 0) {
 8005a3a:	b932      	cbnz	r2, 8005a4a <tcp_bind+0x36>
    port = tcp_new_port();
 8005a3c:	f7ff ff90 	bl	8005960 <tcp_new_port>
    if (port == 0) {
 8005a40:	4602      	mov	r2, r0
 8005a42:	b950      	cbnz	r0, 8005a5a <tcp_bind+0x46>
      return ERR_BUF;
 8005a44:	f06f 0001 	mvn.w	r0, #1
 8005a48:	e012      	b.n	8005a70 <tcp_bind+0x5c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005a4a:	4f15      	ldr	r7, [pc, #84]	; (8005aa0 <tcp_bind+0x8c>)
 8005a4c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	b970      	cbnz	r0, 8005a72 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8005a54:	3301      	adds	r3, #1
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d1f8      	bne.n	8005a4c <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b103      	cbz	r3, 8005a60 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005a5e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <tcp_bind+0x90>)
  pcb->local_port = port;
 8005a62:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	60e2      	str	r2, [r4, #12]
 8005a68:	601c      	str	r4, [r3, #0]
 8005a6a:	f003 f897 	bl	8008b9c <tcp_timer_needed>
  return ERR_OK;
 8005a6e:	2000      	movs	r0, #0
}
 8005a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8005a72:	8ac1      	ldrh	r1, [r0, #22]
 8005a74:	4291      	cmp	r1, r2
 8005a76:	d105      	bne.n	8005a84 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005a78:	6806      	ldr	r6, [r0, #0]
 8005a7a:	b12e      	cbz	r6, 8005a88 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8005a7c:	6829      	ldr	r1, [r5, #0]
 8005a7e:	b119      	cbz	r1, 8005a88 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005a80:	428e      	cmp	r6, r1
 8005a82:	d001      	beq.n	8005a88 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005a84:	68c0      	ldr	r0, [r0, #12]
 8005a86:	e7e4      	b.n	8005a52 <tcp_bind+0x3e>
              return ERR_USE;
 8005a88:	f06f 0007 	mvn.w	r0, #7
 8005a8c:	e7f0      	b.n	8005a70 <tcp_bind+0x5c>
 8005a8e:	bf00      	nop
 8005a90:	0800f5ec 	.word	0x0800f5ec
 8005a94:	0800e35e 	.word	0x0800e35e
 8005a98:	0800e31d 	.word	0x0800e31d
 8005a9c:	0800d7e1 	.word	0x0800d7e1
 8005aa0:	0800e3f0 	.word	0x0800e3f0
 8005aa4:	2000bad4 	.word	0x2000bad4

08005aa8 <tcp_update_rcv_ann_wnd>:
{
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005aac:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005aae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005ab0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005ab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ab4:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005ab6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005aba:	4428      	add	r0, r5
 8005abc:	bf94      	ite	ls
 8005abe:	1a82      	subls	r2, r0, r2
 8005ac0:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	db01      	blt.n	8005acc <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005ac8:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005acc:	1aea      	subs	r2, r5, r3
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	dd02      	ble.n	8005ad8 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	8560      	strh	r0, [r4, #42]	; 0x2a
 8005ad6:	e7f8      	b.n	8005aca <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005ad8:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005ada:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8005ade:	d306      	bcc.n	8005aee <tcp_update_rcv_ann_wnd+0x46>
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <tcp_update_rcv_ann_wnd+0x4c>)
 8005ae2:	4905      	ldr	r1, [pc, #20]	; (8005af8 <tcp_update_rcv_ann_wnd+0x50>)
 8005ae4:	4805      	ldr	r0, [pc, #20]	; (8005afc <tcp_update_rcv_ann_wnd+0x54>)
 8005ae6:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005aea:	f006 fec1 	bl	800c870 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005aee:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8005af0:	2000      	movs	r0, #0
 8005af2:	e7ea      	b.n	8005aca <tcp_update_rcv_ann_wnd+0x22>
 8005af4:	0800e35e 	.word	0x0800e35e
 8005af8:	0800e654 	.word	0x0800e654
 8005afc:	0800d7e1 	.word	0x0800d7e1

08005b00 <tcp_recved>:
{
 8005b00:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005b02:	7d03      	ldrb	r3, [r0, #20]
 8005b04:	2b01      	cmp	r3, #1
{
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005b0a:	d106      	bne.n	8005b1a <tcp_recved+0x1a>
 8005b0c:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <tcp_recved+0x6c>)
 8005b0e:	4918      	ldr	r1, [pc, #96]	; (8005b70 <tcp_recved+0x70>)
 8005b10:	4818      	ldr	r0, [pc, #96]	; (8005b74 <tcp_recved+0x74>)
 8005b12:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b16:	f006 feab 	bl	800c870 <iprintf>
  pcb->rcv_wnd += len;
 8005b1a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8005b1c:	4429      	add	r1, r5
 8005b1e:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005b20:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8005b24:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005b26:	d911      	bls.n	8005b4c <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005b28:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8005b2c:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ffba 	bl	8005aa8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005b34:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8005b38:	db17      	blt.n	8005b6a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8005b3a:	7ea3      	ldrb	r3, [r4, #26]
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005b42:	4620      	mov	r0, r4
}
 8005b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8005b48:	f002 bd10 	b.w	800856c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	d1ee      	bne.n	8005b2e <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005b50:	7d23      	ldrb	r3, [r4, #20]
 8005b52:	2b07      	cmp	r3, #7
 8005b54:	d0e8      	beq.n	8005b28 <tcp_recved+0x28>
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d0e6      	beq.n	8005b28 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005b5a:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <tcp_recved+0x6c>)
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <tcp_recved+0x78>)
 8005b5e:	4805      	ldr	r0, [pc, #20]	; (8005b74 <tcp_recved+0x74>)
 8005b60:	f240 322d 	movw	r2, #813	; 0x32d
 8005b64:	f006 fe84 	bl	800c870 <iprintf>
 8005b68:	e7e1      	b.n	8005b2e <tcp_recved+0x2e>
}
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	0800e35e 	.word	0x0800e35e
 8005b70:	0800e494 	.word	0x0800e494
 8005b74:	0800d7e1 	.word	0x0800d7e1
 8005b78:	0800e4ba 	.word	0x0800e4ba

08005b7c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005b7c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8005b7e:	4604      	mov	r4, r0
 8005b80:	b148      	cbz	r0, 8005b96 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8005b82:	6840      	ldr	r0, [r0, #4]
 8005b84:	b108      	cbz	r0, 8005b8a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8005b86:	f7ff fbe9 	bl	800535c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	2003      	movs	r0, #3
  }
}
 8005b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8005b92:	f7ff ba51 	b.w	8005038 <memp_free>
}
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <tcp_segs_free>:
{
 8005b98:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8005b9a:	b900      	cbnz	r0, 8005b9e <tcp_segs_free+0x6>
}
 8005b9c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8005b9e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8005ba0:	f7ff ffec 	bl	8005b7c <tcp_seg_free>
    seg = next;
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	e7f8      	b.n	8005b9a <tcp_segs_free+0x2>

08005ba8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005bac:	2003      	movs	r0, #3
 8005bae:	f7ff fa27 	bl	8005000 <memp_malloc>
  if (cseg == NULL) {
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	b160      	cbz	r0, 8005bd0 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	462b      	mov	r3, r5
 8005bba:	f104 0210 	add.w	r2, r4, #16
 8005bbe:	f850 1b04 	ldr.w	r1, [r0], #4
 8005bc2:	f843 1b04 	str.w	r1, [r3], #4
 8005bc6:	4290      	cmp	r0, r2
 8005bc8:	d1f9      	bne.n	8005bbe <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8005bca:	6868      	ldr	r0, [r5, #4]
 8005bcc:	f7ff fd82 	bl	80056d4 <pbuf_ref>
  return cseg;
}
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}

08005bd4 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8005bd4:	b100      	cbz	r0, 8005bd8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8005bd6:	6101      	str	r1, [r0, #16]
  }
}
 8005bd8:	4770      	bx	lr
	...

08005bdc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8005be0:	4604      	mov	r4, r0
 8005be2:	b158      	cbz	r0, 8005bfc <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8005be4:	7d03      	ldrb	r3, [r0, #20]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d106      	bne.n	8005bf8 <tcp_recv+0x1c>
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <tcp_recv+0x24>)
 8005bec:	4905      	ldr	r1, [pc, #20]	; (8005c04 <tcp_recv+0x28>)
 8005bee:	4806      	ldr	r0, [pc, #24]	; (8005c08 <tcp_recv+0x2c>)
 8005bf0:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8005bf4:	f006 fe3c 	bl	800c870 <iprintf>
    pcb->recv = recv;
 8005bf8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	0800e35e 	.word	0x0800e35e
 8005c04:	0800e46d 	.word	0x0800e46d
 8005c08:	0800d7e1 	.word	0x0800d7e1

08005c0c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8005c10:	4604      	mov	r4, r0
 8005c12:	b150      	cbz	r0, 8005c2a <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8005c14:	7d03      	ldrb	r3, [r0, #20]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d106      	bne.n	8005c28 <tcp_sent+0x1c>
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <tcp_sent+0x20>)
 8005c1c:	4904      	ldr	r1, [pc, #16]	; (8005c30 <tcp_sent+0x24>)
 8005c1e:	4805      	ldr	r0, [pc, #20]	; (8005c34 <tcp_sent+0x28>)
 8005c20:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8005c24:	f006 fe24 	bl	800c870 <iprintf>
    pcb->sent = sent;
 8005c28:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	0800e35e 	.word	0x0800e35e
 8005c30:	0800e4db 	.word	0x0800e4db
 8005c34:	0800d7e1 	.word	0x0800d7e1

08005c38 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	b158      	cbz	r0, 8005c58 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8005c40:	7d03      	ldrb	r3, [r0, #20]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d106      	bne.n	8005c54 <tcp_err+0x1c>
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <tcp_err+0x24>)
 8005c48:	4905      	ldr	r1, [pc, #20]	; (8005c60 <tcp_err+0x28>)
 8005c4a:	4806      	ldr	r0, [pc, #24]	; (8005c64 <tcp_err+0x2c>)
 8005c4c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8005c50:	f006 fe0e 	bl	800c870 <iprintf>
    pcb->errf = err;
 8005c54:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8005c58:	bd38      	pop	{r3, r4, r5, pc}
 8005c5a:	bf00      	nop
 8005c5c:	0800e35e 	.word	0x0800e35e
 8005c60:	0800e3c9 	.word	0x0800e3c9
 8005c64:	0800d7e1 	.word	0x0800d7e1

08005c68 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8005c68:	7d03      	ldrb	r3, [r0, #20]
 8005c6a:	2b01      	cmp	r3, #1
{
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460e      	mov	r6, r1
 8005c72:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8005c74:	d106      	bne.n	8005c84 <tcp_poll+0x1c>
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <tcp_poll+0x24>)
 8005c78:	4905      	ldr	r1, [pc, #20]	; (8005c90 <tcp_poll+0x28>)
 8005c7a:	4806      	ldr	r0, [pc, #24]	; (8005c94 <tcp_poll+0x2c>)
 8005c7c:	f240 7203 	movw	r2, #1795	; 0x703
 8005c80:	f006 fdf6 	bl	800c870 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8005c84:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8005c88:	7725      	strb	r5, [r4, #28]
}
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	0800e35e 	.word	0x0800e35e
 8005c90:	0800e44f 	.word	0x0800e44f
 8005c94:	0800d7e1 	.word	0x0800d7e1

08005c98 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005c98:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8005c9a:	7d03      	ldrb	r3, [r0, #20]
 8005c9c:	2b01      	cmp	r3, #1
{
 8005c9e:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8005ca0:	d919      	bls.n	8005cd6 <tcp_pcb_purge+0x3e>
 8005ca2:	2b0a      	cmp	r3, #10
 8005ca4:	d017      	beq.n	8005cd6 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005ca6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8005ca8:	b118      	cbz	r0, 8005cb2 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005caa:	f7ff fb57 	bl	800535c <pbuf_free>
      pcb->refused_data = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8005cb2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005cb4:	f7ff ff70 	bl	8005b98 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005cb8:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cbe:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005cc0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8005cc2:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8005cc4:	f7ff ff68 	bl	8005b98 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005cc8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005cca:	f7ff ff65 	bl	8005b98 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005cce:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005cd2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}

08005cd8 <tcp_slowtmr>:
{
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8005cdc:	4eb0      	ldr	r6, [pc, #704]	; (8005fa0 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 8005cde:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8005fd4 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8005ce2:	6833      	ldr	r3, [r6, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8005ce8:	4bae      	ldr	r3, [pc, #696]	; (8005fa4 <tcp_slowtmr+0x2cc>)
 8005cea:	781a      	ldrb	r2, [r3, #0]
{
 8005cec:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8005cee:	3201      	adds	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8005cf4:	4fac      	ldr	r7, [pc, #688]	; (8005fa8 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005cf6:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8005fd8 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8005cfa:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 8005cfc:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8005d00:	b96c      	cbnz	r4, 8005d1e <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8005d02:	4faa      	ldr	r7, [pc, #680]	; (8005fac <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005d04:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8005fd8 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8005d08:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005d0a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8005fdc <tcp_slowtmr+0x304>
 8005d0e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8005fb4 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	f040 8185 	bne.w	8006022 <tcp_slowtmr+0x34a>
}
 8005d18:	b005      	add	sp, #20
 8005d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005d1e:	7d23      	ldrb	r3, [r4, #20]
 8005d20:	b933      	cbnz	r3, 8005d30 <tcp_slowtmr+0x58>
 8005d22:	464b      	mov	r3, r9
 8005d24:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005d28:	49a1      	ldr	r1, [pc, #644]	; (8005fb0 <tcp_slowtmr+0x2d8>)
 8005d2a:	48a2      	ldr	r0, [pc, #648]	; (8005fb4 <tcp_slowtmr+0x2dc>)
 8005d2c:	f006 fda0 	bl	800c870 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005d30:	7d23      	ldrb	r3, [r4, #20]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d106      	bne.n	8005d44 <tcp_slowtmr+0x6c>
 8005d36:	464b      	mov	r3, r9
 8005d38:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005d3c:	499e      	ldr	r1, [pc, #632]	; (8005fb8 <tcp_slowtmr+0x2e0>)
 8005d3e:	489d      	ldr	r0, [pc, #628]	; (8005fb4 <tcp_slowtmr+0x2dc>)
 8005d40:	f006 fd96 	bl	800c870 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005d44:	7d23      	ldrb	r3, [r4, #20]
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	d106      	bne.n	8005d58 <tcp_slowtmr+0x80>
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005d50:	499a      	ldr	r1, [pc, #616]	; (8005fbc <tcp_slowtmr+0x2e4>)
 8005d52:	4898      	ldr	r0, [pc, #608]	; (8005fb4 <tcp_slowtmr+0x2dc>)
 8005d54:	f006 fd8c 	bl	800c870 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005d58:	9b02      	ldr	r3, [sp, #8]
 8005d5a:	7f62      	ldrb	r2, [r4, #29]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d104      	bne.n	8005d6c <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8005d62:	68e5      	ldr	r5, [r4, #12]
 8005d64:	4644      	mov	r4, r8
 8005d66:	46a0      	mov	r8, r4
 8005d68:	462c      	mov	r4, r5
 8005d6a:	e7c9      	b.n	8005d00 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005d6c:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8005d6e:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005d70:	2902      	cmp	r1, #2
 8005d72:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005d76:	f040 809e 	bne.w	8005eb6 <tcp_slowtmr+0x1de>
 8005d7a:	2a05      	cmp	r2, #5
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005d7c:	f200 80e5 	bhi.w	8005f4a <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8005d80:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8005d84:	f1bb 0f00 	cmp.w	fp, #0
 8005d88:	f000 80a8 	beq.w	8005edc <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005d8c:	488c      	ldr	r0, [pc, #560]	; (8005fc0 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8005d8e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005d92:	4483      	add	fp, r0
 8005d94:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8005d98:	4293      	cmp	r3, r2
          pcb->persist_cnt++;
 8005d9a:	bf3c      	itt	cc
 8005d9c:	3301      	addcc	r3, #1
 8005d9e:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8005da2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8005da6:	4293      	cmp	r3, r2
 8005da8:	f080 8087 	bcs.w	8005eba <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8005dac:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8005db0:	7d23      	ldrb	r3, [r4, #20]
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d10b      	bne.n	8005dce <tcp_slowtmr+0xf6>
      if (pcb->flags & TF_RXCLOSED) {
 8005db6:	7ea2      	ldrb	r2, [r4, #26]
 8005db8:	06d2      	lsls	r2, r2, #27
 8005dba:	d508      	bpl.n	8005dce <tcp_slowtmr+0xf6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005dbc:	6832      	ldr	r2, [r6, #0]
 8005dbe:	6a21      	ldr	r1, [r4, #32]
 8005dc0:	1a52      	subs	r2, r2, r1
 8005dc2:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8005dc4:	bf84      	itt	hi
 8005dc6:	f10b 0b01 	addhi.w	fp, fp, #1
 8005dca:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005dce:	7a25      	ldrb	r5, [r4, #8]
 8005dd0:	f015 0508 	ands.w	r5, r5, #8
 8005dd4:	d019      	beq.n	8005e0a <tcp_slowtmr+0x132>
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d002      	beq.n	8005de0 <tcp_slowtmr+0x108>
       ((pcb->state == ESTABLISHED) ||
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	f040 80ca 	bne.w	8005f74 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005de0:	6831      	ldr	r1, [r6, #0]
 8005de2:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005de4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005de8:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005dea:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8005dee:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8005df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005df6:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005dfa:	4291      	cmp	r1, r2
 8005dfc:	f240 80a8 	bls.w	8005f50 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8005e00:	f10b 0b01 	add.w	fp, fp, #1
 8005e04:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8005e08:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 8005e0a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005e0c:	b168      	cbz	r0, 8005e2a <tcp_slowtmr+0x152>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005e0e:	6833      	ldr	r3, [r6, #0]
 8005e10:	6a22      	ldr	r2, [r4, #32]
 8005e12:	1a9a      	subs	r2, r3, r2
 8005e14:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8005e1c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8005e20:	d303      	bcc.n	8005e2a <tcp_slowtmr+0x152>
      tcp_segs_free(pcb->ooseq);
 8005e22:	f7ff feb9 	bl	8005b98 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8005e2a:	7d23      	ldrb	r3, [r4, #20]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	f040 80a3 	bne.w	8005f78 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e32:	6833      	ldr	r3, [r6, #0]
 8005e34:	6a22      	ldr	r2, [r4, #32]
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005e3a:	d803      	bhi.n	8005e44 <tcp_slowtmr+0x16c>
    if (pcb_remove) {
 8005e3c:	f1bb 0f00 	cmp.w	fp, #0
 8005e40:	f000 80ce 	beq.w	8005fe0 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8005e44:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8005e46:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8005e4a:	f7ff ff25 	bl	8005c98 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005e4e:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8005e50:	f1b8 0f00 	cmp.w	r8, #0
 8005e54:	f000 8098 	beq.w	8005f88 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d106      	bne.n	8005e6a <tcp_slowtmr+0x192>
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	f240 4289 	movw	r2, #1161	; 0x489
 8005e62:	4958      	ldr	r1, [pc, #352]	; (8005fc4 <tcp_slowtmr+0x2ec>)
 8005e64:	4853      	ldr	r0, [pc, #332]	; (8005fb4 <tcp_slowtmr+0x2dc>)
 8005e66:	f006 fd03 	bl	800c870 <iprintf>
        prev->next = pcb->next;
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8005e70:	b14d      	cbz	r5, 8005e86 <tcp_slowtmr+0x1ae>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e72:	8b23      	ldrh	r3, [r4, #24]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	8ae3      	ldrh	r3, [r4, #22]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	1d23      	adds	r3, r4, #4
 8005e7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005e82:	f002 fceb 	bl	800885c <tcp_rst>
      err_arg = pcb->callback_arg;
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	2001      	movs	r0, #1
      pcb = pcb->next;
 8005e8e:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005e90:	f7ff f8d2 	bl	8005038 <memp_free>
      tcp_active_pcbs_changed = 0;
 8005e94:	2200      	movs	r2, #0
 8005e96:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005e9a:	f1bb 0f00 	cmp.w	fp, #0
 8005e9e:	d004      	beq.n	8005eaa <tcp_slowtmr+0x1d2>
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	f06f 010c 	mvn.w	r1, #12
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8005eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f43f af58 	beq.w	8005d64 <tcp_slowtmr+0x8c>
tcp_slowtmr_start:
 8005eb4:	e71e      	b.n	8005cf4 <tcp_slowtmr+0x1c>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005eb6:	2a0b      	cmp	r2, #11
 8005eb8:	e760      	b.n	8005d7c <tcp_slowtmr+0xa4>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f002 fdbe 	bl	8008a3c <tcp_zero_window_probe>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f47f af73 	bne.w	8005dac <tcp_slowtmr+0xd4>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005ec6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8005eca:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005ece:	2b06      	cmp	r3, #6
 8005ed0:	f63f af6c 	bhi.w	8005dac <tcp_slowtmr+0xd4>
              pcb->persist_backoff++;
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8005eda:	e767      	b.n	8005dac <tcp_slowtmr+0xd4>
        if (pcb->rtime >= 0) {
 8005edc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8005ee0:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8005ee2:	bfa4      	itt	ge
 8005ee4:	3301      	addge	r3, #1
 8005ee6:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005ee8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f43f af5e 	beq.w	8005dac <tcp_slowtmr+0xd4>
 8005ef0:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8005ef4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005ef8:	4298      	cmp	r0, r3
 8005efa:	f6ff af57 	blt.w	8005dac <tcp_slowtmr+0xd4>
          if (pcb->state != SYN_SENT) {
 8005efe:	2902      	cmp	r1, #2
 8005f00:	d00a      	beq.n	8005f18 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005f02:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8005f06:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8005f0a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8005f0e:	492e      	ldr	r1, [pc, #184]	; (8005fc8 <tcp_slowtmr+0x2f0>)
 8005f10:	5c8a      	ldrb	r2, [r1, r2]
 8005f12:	4093      	lsls	r3, r2
 8005f14:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8005f18:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005f1a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8005f1e:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005f20:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005f24:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8005f26:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	bf28      	it	cs
 8005f2e:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005f30:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8005f32:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005f34:	b292      	uxth	r2, r2
 8005f36:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8005f38:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005f3c:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 8005f3e:	bf38      	it	cc
 8005f40:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005f44:	f002 fce4 	bl	8008910 <tcp_rexmit_rto>
 8005f48:	e732      	b.n	8005db0 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8005f4a:	f04f 0b01 	mov.w	fp, #1
 8005f4e:	e72f      	b.n	8005db0 <tcp_slowtmr+0xd8>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005f50:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005f54:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <tcp_slowtmr+0x2f4>)
 8005f56:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8005f5a:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	d908      	bls.n	8005f74 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8005f62:	4620      	mov	r0, r4
 8005f64:	f002 fd40 	bl	80089e8 <tcp_keepalive>
        if (err == ERR_OK) {
 8005f68:	b920      	cbnz	r0, 8005f74 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8005f6a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005f6e:	3301      	adds	r3, #1
 8005f70:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8005f74:	2500      	movs	r5, #0
 8005f76:	e748      	b.n	8005e0a <tcp_slowtmr+0x132>
    if (pcb->state == LAST_ACK) {
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	f47f af5f 	bne.w	8005e3c <tcp_slowtmr+0x164>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f7e:	6833      	ldr	r3, [r6, #0]
 8005f80:	6a22      	ldr	r2, [r4, #32]
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	2bf0      	cmp	r3, #240	; 0xf0
 8005f86:	e758      	b.n	8005e3a <tcp_slowtmr+0x162>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	d006      	beq.n	8005f9a <tcp_slowtmr+0x2c2>
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	f240 428d 	movw	r2, #1165	; 0x48d
 8005f92:	490f      	ldr	r1, [pc, #60]	; (8005fd0 <tcp_slowtmr+0x2f8>)
 8005f94:	4807      	ldr	r0, [pc, #28]	; (8005fb4 <tcp_slowtmr+0x2dc>)
 8005f96:	f006 fc6b 	bl	800c870 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005f9a:	68e3      	ldr	r3, [r4, #12]
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	e767      	b.n	8005e70 <tcp_slowtmr+0x198>
 8005fa0:	2000bacc 	.word	0x2000bacc
 8005fa4:	20008232 	.word	0x20008232
 8005fa8:	2000bac8 	.word	0x2000bac8
 8005fac:	2000bad8 	.word	0x2000bad8
 8005fb0:	0800e502 	.word	0x0800e502
 8005fb4:	0800d7e1 	.word	0x0800d7e1
 8005fb8:	0800e52c 	.word	0x0800e52c
 8005fbc:	0800e556 	.word	0x0800e556
 8005fc0:	0800e448 	.word	0x0800e448
 8005fc4:	0800e583 	.word	0x0800e583
 8005fc8:	0800e310 	.word	0x0800e310
 8005fcc:	000124f8 	.word	0x000124f8
 8005fd0:	0800e5ae 	.word	0x0800e5ae
 8005fd4:	2000bac4 	.word	0x2000bac4
 8005fd8:	0800e35e 	.word	0x0800e35e
 8005fdc:	0800e5d8 	.word	0x0800e5d8
      ++prev->polltmr;
 8005fe0:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005fe2:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8005fe4:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8005fea:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8005fec:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005fee:	f63f aeba 	bhi.w	8005d66 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8005ff2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8005ff6:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8005ffa:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8005ffe:	b173      	cbz	r3, 800601e <tcp_slowtmr+0x346>
 8006000:	4621      	mov	r1, r4
 8006002:	6920      	ldr	r0, [r4, #16]
 8006004:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8006006:	f89a 3000 	ldrb.w	r3, [sl]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f47f ae72 	bne.w	8005cf4 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8006010:	2800      	cmp	r0, #0
 8006012:	f47f aea8 	bne.w	8005d66 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8006016:	4620      	mov	r0, r4
 8006018:	f002 faa8 	bl	800856c <tcp_output>
 800601c:	e6a3      	b.n	8005d66 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800601e:	4658      	mov	r0, fp
 8006020:	e7f1      	b.n	8006006 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006022:	7d2b      	ldrb	r3, [r5, #20]
 8006024:	2b0a      	cmp	r3, #10
 8006026:	d006      	beq.n	8006036 <tcp_slowtmr+0x35e>
 8006028:	4643      	mov	r3, r8
 800602a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800602e:	4651      	mov	r1, sl
 8006030:	4648      	mov	r0, r9
 8006032:	f006 fc1d 	bl	800c870 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006036:	6833      	ldr	r3, [r6, #0]
 8006038:	6a2a      	ldr	r2, [r5, #32]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	2bf0      	cmp	r3, #240	; 0xf0
 800603e:	d802      	bhi.n	8006046 <tcp_slowtmr+0x36e>
      pcb = pcb->next;
 8006040:	462c      	mov	r4, r5
 8006042:	68ed      	ldr	r5, [r5, #12]
 8006044:	e665      	b.n	8005d12 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fe26 	bl	8005c98 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800604c:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 800604e:	b194      	cbz	r4, 8006076 <tcp_slowtmr+0x39e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006050:	42ab      	cmp	r3, r5
 8006052:	d106      	bne.n	8006062 <tcp_slowtmr+0x38a>
 8006054:	4643      	mov	r3, r8
 8006056:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800605a:	490d      	ldr	r1, [pc, #52]	; (8006090 <tcp_slowtmr+0x3b8>)
 800605c:	4648      	mov	r0, r9
 800605e:	f006 fc07 	bl	800c870 <iprintf>
        prev->next = pcb->next;
 8006062:	68eb      	ldr	r3, [r5, #12]
 8006064:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8006066:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800606a:	4629      	mov	r1, r5
 800606c:	2001      	movs	r0, #1
 800606e:	f7fe ffe3 	bl	8005038 <memp_free>
      pcb = pcb->next;
 8006072:	465d      	mov	r5, fp
 8006074:	e64d      	b.n	8005d12 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006076:	42ab      	cmp	r3, r5
 8006078:	d006      	beq.n	8006088 <tcp_slowtmr+0x3b0>
 800607a:	4643      	mov	r3, r8
 800607c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006080:	4904      	ldr	r1, [pc, #16]	; (8006094 <tcp_slowtmr+0x3bc>)
 8006082:	4648      	mov	r0, r9
 8006084:	f006 fbf4 	bl	800c870 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006088:	68eb      	ldr	r3, [r5, #12]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	e7eb      	b.n	8006066 <tcp_slowtmr+0x38e>
 800608e:	bf00      	nop
 8006090:	0800e607 	.word	0x0800e607
 8006094:	0800e62e 	.word	0x0800e62e

08006098 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006098:	6803      	ldr	r3, [r0, #0]
 800609a:	428b      	cmp	r3, r1
{
 800609c:	b510      	push	{r4, lr}
 800609e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80060a0:	d137      	bne.n	8006112 <tcp_pcb_remove+0x7a>
 80060a2:	68cb      	ldr	r3, [r1, #12]
 80060a4:	6003      	str	r3, [r0, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7ff fdf4 	bl	8005c98 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80060b0:	7d23      	ldrb	r3, [r4, #20]
 80060b2:	2b0a      	cmp	r3, #10
 80060b4:	d00a      	beq.n	80060cc <tcp_pcb_remove+0x34>
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d008      	beq.n	80060cc <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80060ba:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80060bc:	07da      	lsls	r2, r3, #31
 80060be:	d505      	bpl.n	80060cc <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80060c6:	4620      	mov	r0, r4
 80060c8:	f002 fa50 	bl	800856c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80060cc:	7d23      	ldrb	r3, [r4, #20]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d01a      	beq.n	8006108 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80060d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80060d4:	b133      	cbz	r3, 80060e4 <tcp_pcb_remove+0x4c>
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <tcp_pcb_remove+0x8c>)
 80060d8:	4913      	ldr	r1, [pc, #76]	; (8006128 <tcp_pcb_remove+0x90>)
 80060da:	4814      	ldr	r0, [pc, #80]	; (800612c <tcp_pcb_remove+0x94>)
 80060dc:	f240 7253 	movw	r2, #1875	; 0x753
 80060e0:	f006 fbc6 	bl	800c870 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80060e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80060e6:	b133      	cbz	r3, 80060f6 <tcp_pcb_remove+0x5e>
 80060e8:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <tcp_pcb_remove+0x8c>)
 80060ea:	4911      	ldr	r1, [pc, #68]	; (8006130 <tcp_pcb_remove+0x98>)
 80060ec:	480f      	ldr	r0, [pc, #60]	; (800612c <tcp_pcb_remove+0x94>)
 80060ee:	f240 7254 	movw	r2, #1876	; 0x754
 80060f2:	f006 fbbd 	bl	800c870 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80060f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80060f8:	b133      	cbz	r3, 8006108 <tcp_pcb_remove+0x70>
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <tcp_pcb_remove+0x8c>)
 80060fc:	490d      	ldr	r1, [pc, #52]	; (8006134 <tcp_pcb_remove+0x9c>)
 80060fe:	480b      	ldr	r0, [pc, #44]	; (800612c <tcp_pcb_remove+0x94>)
 8006100:	f240 7256 	movw	r2, #1878	; 0x756
 8006104:	f006 fbb4 	bl	800c870 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006108:	2300      	movs	r3, #0
 800610a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800610c:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800610e:	bd10      	pop	{r4, pc}
 8006110:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c7      	beq.n	80060a6 <tcp_pcb_remove+0xe>
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	42a2      	cmp	r2, r4
 800611a:	d1f9      	bne.n	8006110 <tcp_pcb_remove+0x78>
 800611c:	68e2      	ldr	r2, [r4, #12]
 800611e:	60da      	str	r2, [r3, #12]
 8006120:	e7c1      	b.n	80060a6 <tcp_pcb_remove+0xe>
 8006122:	bf00      	nop
 8006124:	0800e35e 	.word	0x0800e35e
 8006128:	0800e400 	.word	0x0800e400
 800612c:	0800d7e1 	.word	0x0800d7e1
 8006130:	0800e418 	.word	0x0800e418
 8006134:	0800e431 	.word	0x0800e431

08006138 <tcp_close_shutdown>:
{
 8006138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800613a:	7d03      	ldrb	r3, [r0, #20]
 800613c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800613e:	2900      	cmp	r1, #0
 8006140:	d049      	beq.n	80061d6 <tcp_close_shutdown+0x9e>
 8006142:	2b04      	cmp	r3, #4
 8006144:	d001      	beq.n	800614a <tcp_close_shutdown+0x12>
 8006146:	2b07      	cmp	r3, #7
 8006148:	d145      	bne.n	80061d6 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800614a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800614c:	b91a      	cbnz	r2, 8006156 <tcp_close_shutdown+0x1e>
 800614e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006150:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8006154:	d03f      	beq.n	80061d6 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006156:	7ea3      	ldrb	r3, [r4, #26]
 8006158:	06db      	lsls	r3, r3, #27
 800615a:	d406      	bmi.n	800616a <tcp_close_shutdown+0x32>
 800615c:	4b3f      	ldr	r3, [pc, #252]	; (800625c <tcp_close_shutdown+0x124>)
 800615e:	4940      	ldr	r1, [pc, #256]	; (8006260 <tcp_close_shutdown+0x128>)
 8006160:	4840      	ldr	r0, [pc, #256]	; (8006264 <tcp_close_shutdown+0x12c>)
 8006162:	f240 120f 	movw	r2, #271	; 0x10f
 8006166:	f006 fb83 	bl	800c870 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800616a:	8b23      	ldrh	r3, [r4, #24]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	8ae3      	ldrh	r3, [r4, #22]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	4622      	mov	r2, r4
 8006174:	1d23      	adds	r3, r4, #4
 8006176:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006178:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800617a:	f002 fb6f 	bl	800885c <tcp_rst>
      tcp_pcb_purge(pcb);
 800617e:	4620      	mov	r0, r4
 8006180:	f7ff fd8a 	bl	8005c98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006184:	4a38      	ldr	r2, [pc, #224]	; (8006268 <tcp_close_shutdown+0x130>)
 8006186:	6813      	ldr	r3, [r2, #0]
 8006188:	42a3      	cmp	r3, r4
 800618a:	d115      	bne.n	80061b8 <tcp_close_shutdown+0x80>
 800618c:	68e3      	ldr	r3, [r4, #12]
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	2300      	movs	r3, #0
 8006192:	60e3      	str	r3, [r4, #12]
 8006194:	4b35      	ldr	r3, [pc, #212]	; (800626c <tcp_close_shutdown+0x134>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800619a:	7d23      	ldrb	r3, [r4, #20]
 800619c:	2b04      	cmp	r3, #4
 800619e:	d113      	bne.n	80061c8 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 80061a0:	230a      	movs	r3, #10
 80061a2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80061a4:	4b32      	ldr	r3, [pc, #200]	; (8006270 <tcp_close_shutdown+0x138>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	60e2      	str	r2, [r4, #12]
 80061aa:	601c      	str	r4, [r3, #0]
 80061ac:	f002 fcf6 	bl	8008b9c <tcp_timer_needed>
}
 80061b0:	2000      	movs	r0, #0
 80061b2:	b003      	add	sp, #12
 80061b4:	bd30      	pop	{r4, r5, pc}
 80061b6:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0e9      	beq.n	8006190 <tcp_close_shutdown+0x58>
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	42a2      	cmp	r2, r4
 80061c0:	d1f9      	bne.n	80061b6 <tcp_close_shutdown+0x7e>
 80061c2:	68e2      	ldr	r2, [r4, #12]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e7e3      	b.n	8006190 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 80061c8:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <tcp_close_shutdown+0x13c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d117      	bne.n	8006200 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 80061d0:	f001 fd7a 	bl	8007cc8 <tcp_trigger_input_pcb_close>
 80061d4:	e7ec      	b.n	80061b0 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d020      	beq.n	800621c <tcp_close_shutdown+0xe4>
 80061da:	d307      	bcc.n	80061ec <tcp_close_shutdown+0xb4>
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d033      	beq.n	8006248 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 80061e0:	4620      	mov	r0, r4
}
 80061e2:	b003      	add	sp, #12
 80061e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 80061e8:	f7ff bbe2 	b.w	80059b0 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 80061ec:	8ae3      	ldrh	r3, [r4, #22]
 80061ee:	b13b      	cbz	r3, 8006200 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80061f0:	4a21      	ldr	r2, [pc, #132]	; (8006278 <tcp_close_shutdown+0x140>)
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d109      	bne.n	800620c <tcp_close_shutdown+0xd4>
 80061f8:	68e3      	ldr	r3, [r4, #12]
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8006200:	4621      	mov	r1, r4
 8006202:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8006204:	f7fe ff18 	bl	8005038 <memp_free>
    break;
 8006208:	e7d2      	b.n	80061b0 <tcp_close_shutdown+0x78>
 800620a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f5      	beq.n	80061fc <tcp_close_shutdown+0xc4>
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	42a2      	cmp	r2, r4
 8006214:	d1f9      	bne.n	800620a <tcp_close_shutdown+0xd2>
 8006216:	68e2      	ldr	r2, [r4, #12]
 8006218:	60da      	str	r2, [r3, #12]
 800621a:	e7ef      	b.n	80061fc <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800621c:	4917      	ldr	r1, [pc, #92]	; (800627c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 800621e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006220:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006224:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006226:	b94a      	cbnz	r2, 800623c <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006228:	3301      	adds	r3, #1
 800622a:	2b04      	cmp	r3, #4
 800622c:	d1f8      	bne.n	8006220 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800622e:	4621      	mov	r1, r4
 8006230:	4813      	ldr	r0, [pc, #76]	; (8006280 <tcp_close_shutdown+0x148>)
 8006232:	f7ff ff31 	bl	8006098 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006236:	4621      	mov	r1, r4
 8006238:	2002      	movs	r0, #2
 800623a:	e7e3      	b.n	8006204 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 800623c:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800623e:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8006240:	bf08      	it	eq
 8006242:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	e7ee      	b.n	8006226 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006248:	4621      	mov	r1, r4
 800624a:	4807      	ldr	r0, [pc, #28]	; (8006268 <tcp_close_shutdown+0x130>)
 800624c:	f7ff ff24 	bl	8006098 <tcp_pcb_remove>
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <tcp_close_shutdown+0x134>)
 8006252:	2001      	movs	r0, #1
 8006254:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006256:	4621      	mov	r1, r4
 8006258:	e7d4      	b.n	8006204 <tcp_close_shutdown+0xcc>
 800625a:	bf00      	nop
 800625c:	0800e35e 	.word	0x0800e35e
 8006260:	0800e345 	.word	0x0800e345
 8006264:	0800d7e1 	.word	0x0800d7e1
 8006268:	2000bac8 	.word	0x2000bac8
 800626c:	2000bac4 	.word	0x2000bac4
 8006270:	2000bad8 	.word	0x2000bad8
 8006274:	2000badc 	.word	0x2000badc
 8006278:	2000bad4 	.word	0x2000bad4
 800627c:	0800e3f0 	.word	0x0800e3f0
 8006280:	2000bad0 	.word	0x2000bad0

08006284 <tcp_close>:
  if (pcb->state != LISTEN) {
 8006284:	7d03      	ldrb	r3, [r0, #20]
 8006286:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8006288:	bf1e      	ittt	ne
 800628a:	7e83      	ldrbne	r3, [r0, #26]
 800628c:	f043 0310 	orrne.w	r3, r3, #16
 8006290:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006292:	2101      	movs	r1, #1
 8006294:	f7ff bf50 	b.w	8006138 <tcp_close_shutdown>

08006298 <tcp_recv_null>:
{
 8006298:	b510      	push	{r4, lr}
 800629a:	4608      	mov	r0, r1
  if (p != NULL) {
 800629c:	4614      	mov	r4, r2
 800629e:	b13a      	cbz	r2, 80062b0 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 80062a0:	8911      	ldrh	r1, [r2, #8]
 80062a2:	f7ff fc2d 	bl	8005b00 <tcp_recved>
    pbuf_free(p);
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7ff f858 	bl	800535c <pbuf_free>
}
 80062ac:	2000      	movs	r0, #0
 80062ae:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1fb      	bne.n	80062ac <tcp_recv_null+0x14>
}
 80062b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80062b8:	f7ff bfe4 	b.w	8006284 <tcp_close>

080062bc <tcp_process_refused_data>:
{
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80062be:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80062c0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 80062c4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80062c6:	2300      	movs	r3, #0
{
 80062c8:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 80062ca:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80062cc:	b1dd      	cbz	r5, 8006306 <tcp_process_refused_data+0x4a>
 80062ce:	4601      	mov	r1, r0
 80062d0:	4632      	mov	r2, r6
 80062d2:	6900      	ldr	r0, [r0, #16]
 80062d4:	47a8      	blx	r5
 80062d6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80062d8:	b9e0      	cbnz	r0, 8006314 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80062da:	06bb      	lsls	r3, r7, #26
 80062dc:	d511      	bpl.n	8006302 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80062de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80062e0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80062e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80062e8:	bf1c      	itt	ne
 80062ea:	3301      	addne	r3, #1
 80062ec:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80062ee:	b146      	cbz	r6, 8006302 <tcp_process_refused_data+0x46>
 80062f0:	2300      	movs	r3, #0
 80062f2:	461a      	mov	r2, r3
 80062f4:	4621      	mov	r1, r4
 80062f6:	6920      	ldr	r0, [r4, #16]
 80062f8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80062fa:	300d      	adds	r0, #13
 80062fc:	d101      	bne.n	8006302 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 80062fe:	f06f 050c 	mvn.w	r5, #12
}
 8006302:	4628      	mov	r0, r5
 8006304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006306:	4601      	mov	r1, r0
 8006308:	462b      	mov	r3, r5
 800630a:	4632      	mov	r2, r6
 800630c:	4628      	mov	r0, r5
 800630e:	f7ff ffc3 	bl	8006298 <tcp_recv_null>
 8006312:	e7e0      	b.n	80062d6 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8006314:	f110 050d 	adds.w	r5, r0, #13
 8006318:	d0f1      	beq.n	80062fe <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800631a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800631c:	f06f 0504 	mvn.w	r5, #4
 8006320:	e7ef      	b.n	8006302 <tcp_process_refused_data+0x46>
	...

08006324 <tcp_fasttmr>:
{
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8006328:	4d1b      	ldr	r5, [pc, #108]	; (8006398 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800632a:	4f1c      	ldr	r7, [pc, #112]	; (800639c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800632c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800632e:	4e1c      	ldr	r6, [pc, #112]	; (80063a0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8006330:	3301      	adds	r3, #1
 8006332:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8006334:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8006336:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800633a:	b90c      	cbnz	r4, 8006340 <tcp_fasttmr+0x1c>
}
 800633c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8006340:	782b      	ldrb	r3, [r5, #0]
 8006342:	7f62      	ldrb	r2, [r4, #29]
 8006344:	429a      	cmp	r2, r3
 8006346:	d024      	beq.n	8006392 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8006348:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800634a:	7ea3      	ldrb	r3, [r4, #26]
 800634c:	07d9      	lsls	r1, r3, #31
 800634e:	d509      	bpl.n	8006364 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8006350:	f043 0302 	orr.w	r3, r3, #2
 8006354:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8006356:	4620      	mov	r0, r4
 8006358:	f002 f908 	bl	800856c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800635c:	7ea3      	ldrb	r3, [r4, #26]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8006364:	7ea3      	ldrb	r3, [r4, #26]
 8006366:	071a      	lsls	r2, r3, #28
 8006368:	d505      	bpl.n	8006376 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800636a:	f023 0308 	bic.w	r3, r3, #8
 800636e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff fb1d 	bl	80059b0 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8006376:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8006378:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800637c:	b13b      	cbz	r3, 800638e <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800637e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8006380:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8006384:	f7ff ff9a 	bl	80062bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006388:	7833      	ldrb	r3, [r6, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d2      	bne.n	8006334 <tcp_fasttmr+0x10>
{
 800638e:	464c      	mov	r4, r9
 8006390:	e7d3      	b.n	800633a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8006392:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8006396:	e7fa      	b.n	800638e <tcp_fasttmr+0x6a>
 8006398:	20008232 	.word	0x20008232
 800639c:	2000bac8 	.word	0x2000bac8
 80063a0:	2000bac4 	.word	0x2000bac4

080063a4 <tcp_tmr>:
{
 80063a4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80063a6:	f7ff ffbd 	bl	8006324 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80063aa:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <tcp_tmr+0x20>)
 80063ac:	7813      	ldrb	r3, [r2, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	7013      	strb	r3, [r2, #0]
 80063b4:	07db      	lsls	r3, r3, #31
 80063b6:	d503      	bpl.n	80063c0 <tcp_tmr+0x1c>
}
 80063b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80063bc:	f7ff bc8c 	b.w	8005cd8 <tcp_slowtmr>
}
 80063c0:	bd08      	pop	{r3, pc}
 80063c2:	bf00      	nop
 80063c4:	20008231 	.word	0x20008231

080063c8 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80063c8:	7d03      	ldrb	r3, [r0, #20]
 80063ca:	2b01      	cmp	r3, #1
{
 80063cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	4604      	mov	r4, r0
 80063d2:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80063d4:	d106      	bne.n	80063e4 <tcp_abandon+0x1c>
 80063d6:	4b30      	ldr	r3, [pc, #192]	; (8006498 <tcp_abandon+0xd0>)
 80063d8:	4930      	ldr	r1, [pc, #192]	; (800649c <tcp_abandon+0xd4>)
 80063da:	4831      	ldr	r0, [pc, #196]	; (80064a0 <tcp_abandon+0xd8>)
 80063dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063e0:	f006 fa46 	bl	800c870 <iprintf>
  if (pcb->state == TIME_WAIT) {
 80063e4:	7d23      	ldrb	r3, [r4, #20]
 80063e6:	2b0a      	cmp	r3, #10
 80063e8:	d10a      	bne.n	8006400 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80063ea:	4621      	mov	r1, r4
 80063ec:	482d      	ldr	r0, [pc, #180]	; (80064a4 <tcp_abandon+0xdc>)
 80063ee:	f7ff fe53 	bl	8006098 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80063f2:	4621      	mov	r1, r4
 80063f4:	2001      	movs	r0, #1
}
 80063f6:	b002      	add	sp, #8
 80063f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80063fc:	f7fe be1c 	b.w	8005038 <memp_free>
    seqno = pcb->snd_nxt;
 8006400:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8006404:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8006408:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800640c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006410:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8006412:	b99b      	cbnz	r3, 800643c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8006414:	b13d      	cbz	r5, 8006426 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006416:	4a24      	ldr	r2, [pc, #144]	; (80064a8 <tcp_abandon+0xe0>)
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	42a3      	cmp	r3, r4
 800641c:	d106      	bne.n	800642c <tcp_abandon+0x64>
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	2500      	movs	r5, #0
 8006424:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8006426:	462e      	mov	r6, r5
 8006428:	e00f      	b.n	800644a <tcp_abandon+0x82>
 800642a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0f8      	beq.n	8006422 <tcp_abandon+0x5a>
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	42a2      	cmp	r2, r4
 8006434:	d1f9      	bne.n	800642a <tcp_abandon+0x62>
 8006436:	68e2      	ldr	r2, [r4, #12]
 8006438:	60da      	str	r2, [r3, #12]
 800643a:	e7f2      	b.n	8006422 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800643c:	4621      	mov	r1, r4
 800643e:	481b      	ldr	r0, [pc, #108]	; (80064ac <tcp_abandon+0xe4>)
 8006440:	f7ff fe2a 	bl	8006098 <tcp_pcb_remove>
 8006444:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <tcp_abandon+0xe8>)
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800644a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800644c:	b108      	cbz	r0, 8006452 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 800644e:	f7ff fba3 	bl	8005b98 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006452:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006454:	b108      	cbz	r0, 800645a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8006456:	f7ff fb9f 	bl	8005b98 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800645a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800645c:	b108      	cbz	r0, 8006462 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800645e:	f7ff fb9b 	bl	8005b98 <tcp_segs_free>
    if (send_rst) {
 8006462:	b146      	cbz	r6, 8006476 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006464:	8b23      	ldrh	r3, [r4, #24]
 8006466:	4622      	mov	r2, r4
 8006468:	e9cd 5300 	strd	r5, r3, [sp]
 800646c:	4651      	mov	r1, sl
 800646e:	1d23      	adds	r3, r4, #4
 8006470:	4648      	mov	r0, r9
 8006472:	f002 f9f3 	bl	800885c <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8006476:	4621      	mov	r1, r4
 8006478:	2001      	movs	r0, #1
 800647a:	f7fe fddd 	bl	8005038 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800647e:	b13f      	cbz	r7, 8006490 <tcp_abandon+0xc8>
 8006480:	f06f 010c 	mvn.w	r1, #12
 8006484:	4640      	mov	r0, r8
 8006486:	463b      	mov	r3, r7
}
 8006488:	b002      	add	sp, #8
 800648a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800648e:	4718      	bx	r3
}
 8006490:	b002      	add	sp, #8
 8006492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006496:	bf00      	nop
 8006498:	0800e35e 	.word	0x0800e35e
 800649c:	0800e2df 	.word	0x0800e2df
 80064a0:	0800d7e1 	.word	0x0800d7e1
 80064a4:	2000bad8 	.word	0x2000bad8
 80064a8:	2000bad4 	.word	0x2000bad4
 80064ac:	2000bac8 	.word	0x2000bac8
 80064b0:	2000bac4 	.word	0x2000bac4

080064b4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80064b4:	2101      	movs	r1, #1
 80064b6:	f7ff bf87 	b.w	80063c8 <tcp_abandon>

080064ba <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80064ba:	b538      	push	{r3, r4, r5, lr}
 80064bc:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80064be:	b901      	cbnz	r1, 80064c2 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80064c0:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80064c2:	680a      	ldr	r2, [r1, #0]
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	68cd      	ldr	r5, [r1, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d102      	bne.n	80064d2 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 80064cc:	4608      	mov	r0, r1
 80064ce:	f7ff fff1 	bl	80064b4 <tcp_abort>
{
 80064d2:	4629      	mov	r1, r5
 80064d4:	e7f3      	b.n	80064be <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

080064d8 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064d8:	4b0c      	ldr	r3, [pc, #48]	; (800650c <tcp_kill_state+0x34>)
 80064da:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80064dc:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <tcp_kill_state+0x38>)
{
 80064de:	b430      	push	{r4, r5}
  inactivity = 0;
 80064e0:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80064e2:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80064e4:	4622      	mov	r2, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064e6:	b921      	cbnz	r1, 80064f2 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 80064e8:	b172      	cbz	r2, 8006508 <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 80064ea:	4610      	mov	r0, r2
}
 80064ec:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80064ee:	f7ff bf6b 	b.w	80063c8 <tcp_abandon>
    if (pcb->state == state) {
 80064f2:	7d0b      	ldrb	r3, [r1, #20]
 80064f4:	4283      	cmp	r3, r0
 80064f6:	d105      	bne.n	8006504 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80064f8:	6a0b      	ldr	r3, [r1, #32]
 80064fa:	1aeb      	subs	r3, r5, r3
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	bf24      	itt	cs
 8006500:	461c      	movcs	r4, r3
 8006502:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006504:	68c9      	ldr	r1, [r1, #12]
 8006506:	e7ee      	b.n	80064e6 <tcp_kill_state+0xe>
}
 8006508:	bc30      	pop	{r4, r5}
 800650a:	4770      	bx	lr
 800650c:	2000bac8 	.word	0x2000bac8
 8006510:	2000bacc 	.word	0x2000bacc

08006514 <tcp_alloc>:
{
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006518:	2001      	movs	r0, #1
 800651a:	f7fe fd71 	bl	8005000 <memp_malloc>
 800651e:	4c39      	ldr	r4, [pc, #228]	; (8006604 <tcp_alloc+0xf0>)
  if (pcb == NULL) {
 8006520:	4603      	mov	r3, r0
 8006522:	bb90      	cbnz	r0, 800658a <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006524:	4a38      	ldr	r2, [pc, #224]	; (8006608 <tcp_alloc+0xf4>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006526:	6826      	ldr	r6, [r4, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	2a00      	cmp	r2, #0
 800652c:	d154      	bne.n	80065d8 <tcp_alloc+0xc4>
  if (inactive != NULL) {
 800652e:	b113      	cbz	r3, 8006536 <tcp_alloc+0x22>
    tcp_abort(inactive);
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff ffbf 	bl	80064b4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006536:	2001      	movs	r0, #1
 8006538:	f7fe fd62 	bl	8005000 <memp_malloc>
    if (pcb == NULL) {
 800653c:	4603      	mov	r3, r0
 800653e:	bb20      	cbnz	r0, 800658a <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8006540:	2009      	movs	r0, #9
 8006542:	f7ff ffc9 	bl	80064d8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006546:	2001      	movs	r0, #1
 8006548:	f7fe fd5a 	bl	8005000 <memp_malloc>
      if (pcb == NULL) {
 800654c:	4603      	mov	r3, r0
 800654e:	b9e0      	cbnz	r0, 800658a <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8006550:	2008      	movs	r0, #8
 8006552:	f7ff ffc1 	bl	80064d8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006556:	2001      	movs	r0, #1
 8006558:	f7fe fd52 	bl	8005000 <memp_malloc>
        if (pcb == NULL) {
 800655c:	4603      	mov	r3, r0
 800655e:	b9a0      	cbnz	r0, 800658a <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006560:	4a2a      	ldr	r2, [pc, #168]	; (800660c <tcp_alloc+0xf8>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006562:	f8d4 c000 	ldr.w	ip, [r4]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006566:	6812      	ldr	r2, [r2, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006568:	f015 0f80 	tst.w	r5, #128	; 0x80
 800656c:	bf0c      	ite	eq
 800656e:	4628      	moveq	r0, r5
 8006570:	207f      	movne	r0, #127	; 0x7f
  inactivity = 0;
 8006572:	461e      	mov	r6, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006574:	2a00      	cmp	r2, #0
 8006576:	d137      	bne.n	80065e8 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 8006578:	b113      	cbz	r3, 8006580 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ff9a 	bl	80064b4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006580:	2001      	movs	r0, #1
 8006582:	f7fe fd3d 	bl	8005000 <memp_malloc>
  if (pcb != NULL) {
 8006586:	4603      	mov	r3, r0
 8006588:	b320      	cbz	r0, 80065d4 <tcp_alloc+0xc0>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800658a:	2298      	movs	r2, #152	; 0x98
 800658c:	2100      	movs	r1, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f006 f8be 	bl	800c710 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006594:	491e      	ldr	r1, [pc, #120]	; (8006610 <tcp_alloc+0xfc>)
 8006596:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006598:	21ff      	movs	r1, #255	; 0xff
 800659a:	7281      	strb	r1, [r0, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800659c:	2106      	movs	r1, #6
 800659e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80065a2:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 80065a4:	491b      	ldr	r1, [pc, #108]	; (8006614 <tcp_alloc+0x100>)
 80065a6:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 80065a8:	2101      	movs	r1, #1
 80065aa:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80065ae:	6821      	ldr	r1, [r4, #0]
 80065b0:	6201      	str	r1, [r0, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80065b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 80065b6:	4918      	ldr	r1, [pc, #96]	; (8006618 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 80065b8:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 80065bc:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80065c0:	4a16      	ldr	r2, [pc, #88]	; (800661c <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 80065c2:	7809      	ldrb	r1, [r1, #0]
    pcb->recv = tcp_recv_null;
 80065c4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 80065ca:	7545      	strb	r5, [r0, #21]
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80065cc:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 80065ce:	7741      	strb	r1, [r0, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80065d0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065d8:	6a11      	ldr	r1, [r2, #32]
 80065da:	1a71      	subs	r1, r6, r1
 80065dc:	4281      	cmp	r1, r0
 80065de:	bf24      	itt	cs
 80065e0:	4613      	movcs	r3, r2
 80065e2:	4608      	movcs	r0, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065e4:	68d2      	ldr	r2, [r2, #12]
 80065e6:	e7a0      	b.n	800652a <tcp_alloc+0x16>
    if (pcb->prio <= mprio &&
 80065e8:	7d57      	ldrb	r7, [r2, #21]
 80065ea:	4287      	cmp	r7, r0
 80065ec:	d807      	bhi.n	80065fe <tcp_alloc+0xea>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065ee:	6a11      	ldr	r1, [r2, #32]
 80065f0:	ebac 0101 	sub.w	r1, ip, r1
    if (pcb->prio <= mprio &&
 80065f4:	42b1      	cmp	r1, r6
 80065f6:	bf22      	ittt	cs
 80065f8:	4638      	movcs	r0, r7
 80065fa:	460e      	movcs	r6, r1
 80065fc:	4613      	movcs	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065fe:	68d2      	ldr	r2, [r2, #12]
 8006600:	e7b8      	b.n	8006574 <tcp_alloc+0x60>
 8006602:	bf00      	nop
 8006604:	2000bacc 	.word	0x2000bacc
 8006608:	2000bad8 	.word	0x2000bad8
 800660c:	2000bac8 	.word	0x2000bac8
 8006610:	08600860 	.word	0x08600860
 8006614:	0218ffff 	.word	0x0218ffff
 8006618:	20008232 	.word	0x20008232
 800661c:	08006299 	.word	0x08006299
 8006620:	006ddd00 	.word	0x006ddd00

08006624 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006624:	2040      	movs	r0, #64	; 0x40
 8006626:	f7ff bf75 	b.w	8006514 <tcp_alloc>
	...

0800662c <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <tcp_next_iss+0x10>)
 800662e:	4a04      	ldr	r2, [pc, #16]	; (8006640 <tcp_next_iss+0x14>)
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	4410      	add	r0, r2
 8006636:	6018      	str	r0, [r3, #0]
}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000008 	.word	0x20000008
 8006640:	2000bacc 	.word	0x2000bacc

08006644 <tcp_eff_send_mss_impl>:
{
 8006644:	b510      	push	{r4, lr}
 8006646:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8006648:	4608      	mov	r0, r1
 800664a:	f004 fab1 	bl	800abb0 <ip4_route>
    if (outif == NULL) {
 800664e:	b130      	cbz	r0, 800665e <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8006650:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8006652:	b123      	cbz	r3, 800665e <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006654:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006656:	b29b      	uxth	r3, r3
 8006658:	429c      	cmp	r4, r3
 800665a:	bf28      	it	cs
 800665c:	461c      	movcs	r4, r3
}
 800665e:	4620      	mov	r0, r4
 8006660:	bd10      	pop	{r4, pc}
	...

08006664 <tcp_connect>:
{
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	461d      	mov	r5, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006668:	4604      	mov	r4, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	d068      	beq.n	8006740 <tcp_connect+0xdc>
 800666e:	2900      	cmp	r1, #0
 8006670:	d066      	beq.n	8006740 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006672:	7d03      	ldrb	r3, [r0, #20]
 8006674:	b153      	cbz	r3, 800668c <tcp_connect+0x28>
 8006676:	4b35      	ldr	r3, [pc, #212]	; (800674c <tcp_connect+0xe8>)
 8006678:	4935      	ldr	r1, [pc, #212]	; (8006750 <tcp_connect+0xec>)
 800667a:	4836      	ldr	r0, [pc, #216]	; (8006754 <tcp_connect+0xf0>)
 800667c:	f44f 725e 	mov.w	r2, #888	; 0x378
 8006680:	f006 f8f6 	bl	800c870 <iprintf>
 8006684:	f06f 0509 	mvn.w	r5, #9
}
 8006688:	4628      	mov	r0, r5
 800668a:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800668c:	680b      	ldr	r3, [r1, #0]
 800668e:	6043      	str	r3, [r0, #4]
  if (ip_addr_isany(&pcb->local_ip)) {
 8006690:	6803      	ldr	r3, [r0, #0]
  pcb->remote_port = port;
 8006692:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 8006694:	b933      	cbnz	r3, 80066a4 <tcp_connect+0x40>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8006696:	3004      	adds	r0, #4
 8006698:	f004 fa8a 	bl	800abb0 <ip4_route>
 800669c:	2800      	cmp	r0, #0
 800669e:	d052      	beq.n	8006746 <tcp_connect+0xe2>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80066a0:	6843      	ldr	r3, [r0, #4]
 80066a2:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 80066a4:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	d039      	beq.n	800671e <tcp_connect+0xba>
  iss = tcp_next_iss(pcb);
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7ff ffbe 	bl	800662c <tcp_next_iss>
  pcb->rcv_nxt = 0;
 80066b0:	4a29      	ldr	r2, [pc, #164]	; (8006758 <tcp_connect+0xf4>)
  pcb->snd_nxt = iss;
 80066b2:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->rcv_nxt = 0;
 80066b4:	2300      	movs	r3, #0
  pcb->lastack = iss - 1;
 80066b6:	3801      	subs	r0, #1
  pcb->rcv_nxt = 0;
 80066b8:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
  pcb->lastack = iss - 1;
 80066bc:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_lbb = iss - 1;
 80066be:	e9c4 0015 	strd	r0, r0, [r4, #84]	; 0x54
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80066c2:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->mss = INITIAL_MSS;
 80066c4:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->snd_wnd = TCP_WND;
 80066c8:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80066cc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80066d0:	1d21      	adds	r1, r4, #4
  pcb->mss = INITIAL_MSS;
 80066d2:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80066d4:	f7ff ffb6 	bl	8006644 <tcp_eff_send_mss_impl>
  pcb->cwnd = 1;
 80066d8:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80066da:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->connected = connected;
 80066dc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  pcb->cwnd = 1;
 80066e0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80066e4:	2102      	movs	r1, #2
 80066e6:	4620      	mov	r0, r4
 80066e8:	f001 fe58 	bl	800839c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 80066ec:	4605      	mov	r5, r0
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d1ca      	bne.n	8006688 <tcp_connect+0x24>
    pcb->state = SYN_SENT;
 80066f2:	2302      	movs	r3, #2
 80066f4:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80066f6:	b12e      	cbz	r6, 8006704 <tcp_connect+0xa0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80066f8:	4a18      	ldr	r2, [pc, #96]	; (800675c <tcp_connect+0xf8>)
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d117      	bne.n	8006730 <tcp_connect+0xcc>
 8006700:	68e3      	ldr	r3, [r4, #12]
 8006702:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8006704:	4b16      	ldr	r3, [pc, #88]	; (8006760 <tcp_connect+0xfc>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	60e2      	str	r2, [r4, #12]
 800670a:	601c      	str	r4, [r3, #0]
 800670c:	f002 fa46 	bl	8008b9c <tcp_timer_needed>
 8006710:	4b14      	ldr	r3, [pc, #80]	; (8006764 <tcp_connect+0x100>)
 8006712:	2201      	movs	r2, #1
    tcp_output(pcb);
 8006714:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8006716:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8006718:	f001 ff28 	bl	800856c <tcp_output>
 800671c:	e7b4      	b.n	8006688 <tcp_connect+0x24>
    pcb->local_port = tcp_new_port();
 800671e:	f7ff f91f 	bl	8005960 <tcp_new_port>
 8006722:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8006724:	2800      	cmp	r0, #0
 8006726:	d1c0      	bne.n	80066aa <tcp_connect+0x46>
      return ERR_BUF;
 8006728:	f06f 0501 	mvn.w	r5, #1
 800672c:	e7ac      	b.n	8006688 <tcp_connect+0x24>
 800672e:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0e7      	beq.n	8006704 <tcp_connect+0xa0>
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	42a2      	cmp	r2, r4
 8006738:	d1f9      	bne.n	800672e <tcp_connect+0xca>
 800673a:	68e2      	ldr	r2, [r4, #12]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	e7e1      	b.n	8006704 <tcp_connect+0xa0>
    return ERR_VAL;
 8006740:	f06f 0505 	mvn.w	r5, #5
 8006744:	e7a0      	b.n	8006688 <tcp_connect+0x24>
      return ERR_RTE;
 8006746:	f06f 0503 	mvn.w	r5, #3
 800674a:	e79d      	b.n	8006688 <tcp_connect+0x24>
 800674c:	0800e35e 	.word	0x0800e35e
 8006750:	0800e399 	.word	0x0800e399
 8006754:	0800d7e1 	.word	0x0800d7e1
 8006758:	08600860 	.word	0x08600860
 800675c:	2000bad4 	.word	0x2000bad4
 8006760:	2000bac8 	.word	0x2000bac8
 8006764:	2000bac4 	.word	0x2000bac4

08006768 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800676c:	4604      	mov	r4, r0
 800676e:	b180      	cbz	r0, 8006792 <tcp_netif_ip_addr_changed+0x2a>
 8006770:	6803      	ldr	r3, [r0, #0]
 8006772:	b173      	cbz	r3, 8006792 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <tcp_netif_ip_addr_changed+0x40>)
 8006776:	6819      	ldr	r1, [r3, #0]
 8006778:	f7ff fe9f 	bl	80064ba <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <tcp_netif_ip_addr_changed+0x44>)
 800677e:	4620      	mov	r0, r4
 8006780:	6819      	ldr	r1, [r3, #0]
 8006782:	f7ff fe9a 	bl	80064ba <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006786:	b125      	cbz	r5, 8006792 <tcp_netif_ip_addr_changed+0x2a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b113      	cbz	r3, 8006792 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800678c:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <tcp_netif_ip_addr_changed+0x48>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	b903      	cbnz	r3, 8006794 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8006792:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8006798:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800679a:	4288      	cmp	r0, r1
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800679c:	bf04      	itt	eq
 800679e:	6829      	ldreq	r1, [r5, #0]
 80067a0:	6019      	streq	r1, [r3, #0]
{
 80067a2:	4613      	mov	r3, r2
 80067a4:	e7f4      	b.n	8006790 <tcp_netif_ip_addr_changed+0x28>
 80067a6:	bf00      	nop
 80067a8:	2000bac8 	.word	0x2000bac8
 80067ac:	2000bad4 	.word	0x2000bad4
 80067b0:	2000bad0 	.word	0x2000bad0

080067b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80067b6:	68c3      	ldr	r3, [r0, #12]
{
 80067b8:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80067ba:	8998      	ldrh	r0, [r3, #12]
{
 80067bc:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80067be:	f7fe f993 	bl	8004ae8 <lwip_htons>
 80067c2:	07c2      	lsls	r2, r0, #31
 80067c4:	d414      	bmi.n	80067f0 <tcp_oos_insert_segment+0x3c>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 80067c6:	4e18      	ldr	r6, [pc, #96]	; (8006828 <tcp_oos_insert_segment+0x74>)
 80067c8:	68e7      	ldr	r7, [r4, #12]
 80067ca:	6830      	ldr	r0, [r6, #0]
 80067cc:	892b      	ldrh	r3, [r5, #8]
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	8922      	ldrh	r2, [r4, #8]
 80067d2:	4403      	add	r3, r0
 80067d4:	440a      	add	r2, r1
 80067d6:	1a9a      	subs	r2, r3, r2
    while (next &&
 80067d8:	2a00      	cmp	r2, #0
 80067da:	da0f      	bge.n	80067fc <tcp_oos_insert_segment+0x48>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80067dc:	1a5b      	subs	r3, r3, r1
    if (next &&
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dd0a      	ble.n	80067f8 <tcp_oos_insert_segment+0x44>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80067e2:	1a09      	subs	r1, r1, r0
 80067e4:	b289      	uxth	r1, r1
 80067e6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80067e8:	6868      	ldr	r0, [r5, #4]
 80067ea:	f7fe fefb 	bl	80055e4 <pbuf_realloc>
 80067ee:	e003      	b.n	80067f8 <tcp_oos_insert_segment+0x44>
    tcp_segs_free(next);
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff f9d1 	bl	8005b98 <tcp_segs_free>
    next = NULL;
 80067f6:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 80067f8:	602c      	str	r4, [r5, #0]
}
 80067fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80067fc:	89b8      	ldrh	r0, [r7, #12]
 80067fe:	f7fe f973 	bl	8004ae8 <lwip_htons>
 8006802:	07c3      	lsls	r3, r0, #31
 8006804:	d507      	bpl.n	8006816 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006806:	68eb      	ldr	r3, [r5, #12]
 8006808:	2001      	movs	r0, #1
 800680a:	899f      	ldrh	r7, [r3, #12]
 800680c:	f7fe f96c 	bl	8004ae8 <lwip_htons>
 8006810:	68eb      	ldr	r3, [r5, #12]
 8006812:	4338      	orrs	r0, r7
 8006814:	8198      	strh	r0, [r3, #12]
      next = next->next;
 8006816:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8006818:	4620      	mov	r0, r4
 800681a:	f7ff f9af 	bl	8005b7c <tcp_seg_free>
 800681e:	463c      	mov	r4, r7
    while (next &&
 8006820:	2f00      	cmp	r7, #0
 8006822:	d1d1      	bne.n	80067c8 <tcp_oos_insert_segment+0x14>
 8006824:	e7e8      	b.n	80067f8 <tcp_oos_insert_segment+0x44>
 8006826:	bf00      	nop
 8006828:	20008258 	.word	0x20008258

0800682c <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800682c:	7d03      	ldrb	r3, [r0, #20]
 800682e:	2b03      	cmp	r3, #3
{
 8006830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006836:	d806      	bhi.n	8006846 <tcp_receive+0x1a>
 8006838:	4b83      	ldr	r3, [pc, #524]	; (8006a48 <tcp_receive+0x21c>)
 800683a:	4984      	ldr	r1, [pc, #528]	; (8006a4c <tcp_receive+0x220>)
 800683c:	4884      	ldr	r0, [pc, #528]	; (8006a50 <tcp_receive+0x224>)
 800683e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006842:	f006 f815 	bl	800c870 <iprintf>

  if (flags & TCP_ACK) {
 8006846:	4b83      	ldr	r3, [pc, #524]	; (8006a54 <tcp_receive+0x228>)
 8006848:	4e83      	ldr	r6, [pc, #524]	; (8006a58 <tcp_receive+0x22c>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f013 0f10 	tst.w	r3, #16
 8006850:	f000 8174 	beq.w	8006b3c <tcp_receive+0x310>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006854:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 8006858:	6831      	ldr	r1, [r6, #0]
 800685a:	4d80      	ldr	r5, [pc, #512]	; (8006a5c <tcp_receive+0x230>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800685c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8006860:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006862:	1a47      	subs	r7, r0, r1
 8006864:	2f00      	cmp	r7, #0
 8006866:	db0c      	blt.n	8006882 <tcp_receive+0x56>
 8006868:	4288      	cmp	r0, r1
 800686a:	d103      	bne.n	8006874 <tcp_receive+0x48>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800686c:	ebac 0003 	sub.w	r0, ip, r3
 8006870:	2800      	cmp	r0, #0
 8006872:	db06      	blt.n	8006882 <tcp_receive+0x56>
 8006874:	459c      	cmp	ip, r3
 8006876:	d11a      	bne.n	80068ae <tcp_receive+0x82>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006878:	4879      	ldr	r0, [pc, #484]	; (8006a60 <tcp_receive+0x234>)
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	89c0      	ldrh	r0, [r0, #14]
 800687e:	4290      	cmp	r0, r2
 8006880:	d915      	bls.n	80068ae <tcp_receive+0x82>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006882:	4877      	ldr	r0, [pc, #476]	; (8006a60 <tcp_receive+0x234>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006884:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006888:	6800      	ldr	r0, [r0, #0]
 800688a:	89c0      	ldrh	r0, [r0, #14]
 800688c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
 8006890:	b287      	uxth	r7, r0
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006892:	45be      	cmp	lr, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 8006894:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006898:	bf38      	it	cc
 800689a:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
 800689e:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80068a2:	bb97      	cbnz	r7, 800690a <tcp_receive+0xde>
        if (pcb->persist_backoff == 0) {
 80068a4:	b919      	cbnz	r1, 80068ae <tcp_receive+0x82>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80068a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068aa:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80068ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80068b0:	4f6c      	ldr	r7, [pc, #432]	; (8006a64 <tcp_receive+0x238>)
 80068b2:	1a19      	subs	r1, r3, r0
 80068b4:	2900      	cmp	r1, #0
 80068b6:	dc37      	bgt.n	8006928 <tcp_receive+0xfc>
      /* Clause 2 */
      if (tcplen == 0) {
 80068b8:	496b      	ldr	r1, [pc, #428]	; (8006a68 <tcp_receive+0x23c>)
 80068ba:	8809      	ldrh	r1, [r1, #0]
 80068bc:	bb81      	cbnz	r1, 8006920 <tcp_receive+0xf4>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80068be:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
 80068c2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80068c4:	4462      	add	r2, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80068c6:	4471      	add	r1, lr
 80068c8:	4291      	cmp	r1, r2
 80068ca:	d129      	bne.n	8006920 <tcp_receive+0xf4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80068cc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	db25      	blt.n	8006920 <tcp_receive+0xf4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80068d4:	4298      	cmp	r0, r3
 80068d6:	d123      	bne.n	8006920 <tcp_receive+0xf4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80068d8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068dc:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 80068de:	bf1c      	itt	ne
 80068e0:	3301      	addne	r3, #1
 80068e2:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80068e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d913      	bls.n	8006916 <tcp_receive+0xea>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80068ee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80068f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80068f4:	4413      	add	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d201      	bcs.n	8006900 <tcp_receive+0xd4>
                  pcb->cwnd += pcb->mss;
 80068fc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006900:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006a48 <tcp_receive+0x21c>
 8006904:	f8df a148 	ldr.w	sl, [pc, #328]	; 8006a50 <tcp_receive+0x224>
 8006908:	e10b      	b.n	8006b22 <tcp_receive+0x2f6>
      } else if (pcb->persist_backoff > 0) {
 800690a:	2900      	cmp	r1, #0
 800690c:	d0cf      	beq.n	80068ae <tcp_receive+0x82>
          pcb->persist_backoff = 0;
 800690e:	2100      	movs	r1, #0
 8006910:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 8006914:	e7cb      	b.n	80068ae <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8006916:	d1f3      	bne.n	8006900 <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
 8006918:	4620      	mov	r0, r4
 800691a:	f002 f83e 	bl	800899a <tcp_rexmit_fast>
 800691e:	e7ef      	b.n	8006900 <tcp_receive+0xd4>
        pcb->dupacks = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006926:	e7eb      	b.n	8006900 <tcp_receive+0xd4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006928:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800692a:	1a9a      	subs	r2, r3, r2
 800692c:	2a00      	cmp	r2, #0
 800692e:	f300 8087 	bgt.w	8006a40 <tcp_receive+0x214>
      if (pcb->flags & TF_INFR) {
 8006932:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006934:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8006938:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 800693a:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 800693c:	bf41      	itttt	mi
 800693e:	f022 0204 	bicmi.w	r2, r2, #4
 8006942:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8006944:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8006948:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800694c:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800694e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8006950:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006952:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8006956:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8006958:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800695c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8006960:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8006964:	d90f      	bls.n	8006986 <tcp_receive+0x15a>
        if (pcb->cwnd < pcb->ssthresh) {
 8006966:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800696a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800696e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006970:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8006972:	bf9c      	itt	ls
 8006974:	435b      	mulls	r3, r3
 8006976:	fb93 f3f2 	sdivls	r3, r3, r2
 800697a:	4413      	add	r3, r2
 800697c:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800697e:	429a      	cmp	r2, r3
 8006980:	d201      	bcs.n	8006986 <tcp_receive+0x15a>
            pcb->cwnd = new_cwnd;
 8006982:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006986:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006a48 <tcp_receive+0x21c>
 800698a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a50 <tcp_receive+0x224>
 800698e:	e04a      	b.n	8006a26 <tcp_receive+0x1fa>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	6858      	ldr	r0, [r3, #4]
 8006994:	f7fe f8ab 	bl	8004aee <lwip_htonl>
 8006998:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800699a:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4683      	mov	fp, r0
 80069a2:	8998      	ldrh	r0, [r3, #12]
 80069a4:	f7fe f8a0 	bl	8004ae8 <lwip_htons>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	f010 0003 	ands.w	r0, r0, #3
 80069ae:	eba8 0803 	sub.w	r8, r8, r3
 80069b2:	bf18      	it	ne
 80069b4:	2001      	movne	r0, #1
 80069b6:	44d8      	add	r8, fp
 80069b8:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80069ba:	f1b8 0f00 	cmp.w	r8, #0
 80069be:	dc35      	bgt.n	8006a2c <tcp_receive+0x200>
        next = pcb->unacked;
 80069c0:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80069c4:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80069c8:	f8d8 3000 	ldr.w	r3, [r8]
 80069cc:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80069ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069d2:	f7fe fe77 	bl	80056c4 <pbuf_clen>
 80069d6:	4583      	cmp	fp, r0
 80069d8:	d206      	bcs.n	80069e8 <tcp_receive+0x1bc>
 80069da:	464b      	mov	r3, r9
 80069dc:	f240 429e 	movw	r2, #1182	; 0x49e
 80069e0:	4922      	ldr	r1, [pc, #136]	; (8006a6c <tcp_receive+0x240>)
 80069e2:	4650      	mov	r0, sl
 80069e4:	f005 ff44 	bl	800c870 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80069e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069ec:	f7fe fe6a 	bl	80056c4 <pbuf_clen>
 80069f0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80069f4:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80069f6:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80069f8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80069fc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006a00:	4413      	add	r3, r2
        tcp_seg_free(next);
 8006a02:	4640      	mov	r0, r8
        recv_acked += next->len;
 8006a04:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8006a06:	f7ff f8b9 	bl	8005b7c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8006a0a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006a0e:	b153      	cbz	r3, 8006a26 <tcp_receive+0x1fa>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8006a10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006a12:	b943      	cbnz	r3, 8006a26 <tcp_receive+0x1fa>
 8006a14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006a16:	b933      	cbnz	r3, 8006a26 <tcp_receive+0x1fa>
 8006a18:	464b      	mov	r3, r9
 8006a1a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8006a1e:	4914      	ldr	r1, [pc, #80]	; (8006a70 <tcp_receive+0x244>)
 8006a20:	4650      	mov	r0, sl
 8006a22:	f005 ff25 	bl	800c870 <iprintf>
      while (pcb->unacked != NULL &&
 8006a26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1b1      	bne.n	8006990 <tcp_receive+0x164>
      if (pcb->unacked == NULL) {
 8006a2c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006a2e:	2300      	movs	r3, #0
 8006a30:	b922      	cbnz	r2, 8006a3c <tcp_receive+0x210>
        pcb->rtime = -1;
 8006a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a36:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8006a38:	76e3      	strb	r3, [r4, #27]
 8006a3a:	e761      	b.n	8006900 <tcp_receive+0xd4>
        pcb->rtime = 0;
 8006a3c:	8623      	strh	r3, [r4, #48]	; 0x30
 8006a3e:	e7fb      	b.n	8006a38 <tcp_receive+0x20c>
      tcp_send_empty_ack(pcb);
 8006a40:	4620      	mov	r0, r4
 8006a42:	f001 fd5e 	bl	8008502 <tcp_send_empty_ack>
 8006a46:	e75b      	b.n	8006900 <tcp_receive+0xd4>
 8006a48:	0800e824 	.word	0x0800e824
 8006a4c:	0800e856 	.word	0x0800e856
 8006a50:	0800d7e1 	.word	0x0800d7e1
 8006a54:	20008238 	.word	0x20008238
 8006a58:	20008258 	.word	0x20008258
 8006a5c:	20008234 	.word	0x20008234
 8006a60:	20008260 	.word	0x20008260
 8006a64:	2000824c 	.word	0x2000824c
 8006a68:	2000826e 	.word	0x2000826e
 8006a6c:	0800e86f 	.word	0x0800e86f
 8006a70:	0800e897 	.word	0x0800e897
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006a74:	682a      	ldr	r2, [r5, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	9201      	str	r2, [sp, #4]
 8006a7a:	6858      	ldr	r0, [r3, #4]
 8006a7c:	f7fe f837 	bl	8004aee <lwip_htonl>
 8006a80:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006a82:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4683      	mov	fp, r0
 8006a8a:	8998      	ldrh	r0, [r3, #12]
 8006a8c:	f7fe f82c 	bl	8004ae8 <lwip_htons>
 8006a90:	9a01      	ldr	r2, [sp, #4]
 8006a92:	f010 0003 	ands.w	r0, r0, #3
 8006a96:	eba2 0808 	sub.w	r8, r2, r8
 8006a9a:	bf18      	it	ne
 8006a9c:	2001      	movne	r0, #1
 8006a9e:	eba8 080b 	sub.w	r8, r8, fp
 8006aa2:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8006aa6:	f1b8 0f00 	cmp.w	r8, #0
 8006aaa:	db3d      	blt.n	8006b28 <tcp_receive+0x2fc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	dc38      	bgt.n	8006b28 <tcp_receive+0x2fc>
      next = pcb->unsent;
 8006ab6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8006aba:	f8d8 3000 	ldr.w	r3, [r8]
 8006abe:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8006ac0:	b90b      	cbnz	r3, 8006ac6 <tcp_receive+0x29a>
        pcb->unsent_oversize = 0;
 8006ac2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006ac6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006aca:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8006ace:	f7fe fdf9 	bl	80056c4 <pbuf_clen>
 8006ad2:	4583      	cmp	fp, r0
 8006ad4:	d206      	bcs.n	8006ae4 <tcp_receive+0x2b8>
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006adc:	49b5      	ldr	r1, [pc, #724]	; (8006db4 <tcp_receive+0x588>)
 8006ade:	4650      	mov	r0, sl
 8006ae0:	f005 fec6 	bl	800c870 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006ae4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ae8:	f7fe fdec 	bl	80056c4 <pbuf_clen>
 8006aec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006af0:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006af2:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8006af4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006af8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006afc:	4413      	add	r3, r2
      tcp_seg_free(next);
 8006afe:	4640      	mov	r0, r8
      recv_acked += next->len;
 8006b00:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8006b02:	f7ff f83b 	bl	8005b7c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8006b06:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006b0a:	b153      	cbz	r3, 8006b22 <tcp_receive+0x2f6>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8006b0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b0e:	b943      	cbnz	r3, 8006b22 <tcp_receive+0x2f6>
 8006b10:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006b12:	b933      	cbnz	r3, 8006b22 <tcp_receive+0x2f6>
 8006b14:	464b      	mov	r3, r9
 8006b16:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8006b1a:	49a7      	ldr	r1, [pc, #668]	; (8006db8 <tcp_receive+0x58c>)
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	f005 fea7 	bl	800c870 <iprintf>
    while (pcb->unsent != NULL &&
 8006b22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1a5      	bne.n	8006a74 <tcp_receive+0x248>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8006b28:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006b2c:	883a      	ldrh	r2, [r7, #0]
 8006b2e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006b30:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8006b32:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	f040 8118 	bne.w	8006d6c <tcp_receive+0x540>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006b3c:	4f9f      	ldr	r7, [pc, #636]	; (8006dbc <tcp_receive+0x590>)
 8006b3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b40:	8838      	ldrh	r0, [r7, #0]
 8006b42:	6833      	ldr	r3, [r6, #0]
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f000 831b 	beq.w	8007180 <tcp_receive+0x954>
 8006b4a:	7d21      	ldrb	r1, [r4, #20]
 8006b4c:	2906      	cmp	r1, #6
 8006b4e:	f200 8317 	bhi.w	8007180 <tcp_receive+0x954>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006b52:	eba2 0a03 	sub.w	sl, r2, r3
 8006b56:	f1ba 0f01 	cmp.w	sl, #1
 8006b5a:	f100 815a 	bmi.w	8006e12 <tcp_receive+0x5e6>
 8006b5e:	f1c3 0101 	rsb	r1, r3, #1
 8006b62:	1a09      	subs	r1, r1, r0
 8006b64:	4411      	add	r1, r2
 8006b66:	2900      	cmp	r1, #0
 8006b68:	f300 8153 	bgt.w	8006e12 <tcp_receive+0x5e6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8006b6c:	4d94      	ldr	r5, [pc, #592]	; (8006dc0 <tcp_receive+0x594>)
 8006b6e:	f8d5 8004 	ldr.w	r8, [r5, #4]
      off = pcb->rcv_nxt - seqno;
 8006b72:	46d1      	mov	r9, sl
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006b74:	f1b8 0f00 	cmp.w	r8, #0
 8006b78:	d106      	bne.n	8006b88 <tcp_receive+0x35c>
 8006b7a:	4b92      	ldr	r3, [pc, #584]	; (8006dc4 <tcp_receive+0x598>)
 8006b7c:	4992      	ldr	r1, [pc, #584]	; (8006dc8 <tcp_receive+0x59c>)
 8006b7e:	4893      	ldr	r0, [pc, #588]	; (8006dcc <tcp_receive+0x5a0>)
 8006b80:	f240 523c 	movw	r2, #1340	; 0x53c
 8006b84:	f005 fe74 	bl	800c870 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8006b88:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006b8c:	459a      	cmp	sl, r3
 8006b8e:	dd06      	ble.n	8006b9e <tcp_receive+0x372>
 8006b90:	4b8c      	ldr	r3, [pc, #560]	; (8006dc4 <tcp_receive+0x598>)
 8006b92:	498f      	ldr	r1, [pc, #572]	; (8006dd0 <tcp_receive+0x5a4>)
 8006b94:	488d      	ldr	r0, [pc, #564]	; (8006dcc <tcp_receive+0x5a0>)
 8006b96:	f240 523d 	movw	r2, #1341	; 0x53d
 8006b9a:	f005 fe69 	bl	800c870 <iprintf>
      if (inseg.p->len < off) {
 8006b9e:	6868      	ldr	r0, [r5, #4]
 8006ba0:	8943      	ldrh	r3, [r0, #10]
 8006ba2:	4553      	cmp	r3, sl
 8006ba4:	fa1f fb8a 	uxth.w	fp, sl
 8006ba8:	f280 8127 	bge.w	8006dfa <tcp_receive+0x5ce>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006bac:	8903      	ldrh	r3, [r0, #8]
 8006bae:	4553      	cmp	r3, sl
 8006bb0:	da06      	bge.n	8006bc0 <tcp_receive+0x394>
 8006bb2:	4b84      	ldr	r3, [pc, #528]	; (8006dc4 <tcp_receive+0x598>)
 8006bb4:	4987      	ldr	r1, [pc, #540]	; (8006dd4 <tcp_receive+0x5a8>)
 8006bb6:	4885      	ldr	r0, [pc, #532]	; (8006dcc <tcp_receive+0x5a0>)
 8006bb8:	f240 523f 	movw	r2, #1343	; 0x53f
 8006bbc:	f005 fe58 	bl	800c870 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006bc0:	686b      	ldr	r3, [r5, #4]
 8006bc2:	8919      	ldrh	r1, [r3, #8]
 8006bc4:	eba1 010b 	sub.w	r1, r1, fp
 8006bc8:	b289      	uxth	r1, r1
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8006bca:	2200      	movs	r2, #0
        while (p->len < off) {
 8006bcc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006bd0:	454b      	cmp	r3, r9
 8006bd2:	f2c0 8109 	blt.w	8006de8 <tcp_receive+0x5bc>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8006bd6:	f1c9 0100 	rsb	r1, r9, #0
 8006bda:	b209      	sxth	r1, r1
 8006bdc:	4640      	mov	r0, r8
 8006bde:	f7fe fbb7 	bl	8005350 <pbuf_header>
 8006be2:	b130      	cbz	r0, 8006bf2 <tcp_receive+0x3c6>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006be4:	4b77      	ldr	r3, [pc, #476]	; (8006dc4 <tcp_receive+0x598>)
 8006be6:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006bea:	497b      	ldr	r1, [pc, #492]	; (8006dd8 <tcp_receive+0x5ac>)
 8006bec:	4877      	ldr	r0, [pc, #476]	; (8006dcc <tcp_receive+0x5a0>)
 8006bee:	f005 fe3f 	bl	800c870 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006bf2:	8929      	ldrh	r1, [r5, #8]
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006bf8:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006bfa:	440b      	add	r3, r1
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006c00:	68eb      	ldr	r3, [r5, #12]
 8006c02:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006c04:	6831      	ldr	r1, [r6, #0]
 8006c06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c08:	1a8b      	subs	r3, r1, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f2c0 82b2 	blt.w	8007174 <tcp_receive+0x948>
 8006c10:	1c4b      	adds	r3, r1, #1
 8006c12:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	1a1b      	subs	r3, r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f300 82ab 	bgt.w	8007174 <tcp_receive+0x948>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	f040 81c7 	bne.w	8006fb2 <tcp_receive+0x786>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006c24:	4d66      	ldr	r5, [pc, #408]	; (8006dc0 <tcp_receive+0x594>)
 8006c26:	68eb      	ldr	r3, [r5, #12]
 8006c28:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8006c2c:	8998      	ldrh	r0, [r3, #12]
 8006c2e:	f7fd ff5b 	bl	8004ae8 <lwip_htons>
 8006c32:	f010 0003 	ands.w	r0, r0, #3
 8006c36:	bf18      	it	ne
 8006c38:	2001      	movne	r0, #1
 8006c3a:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8006c3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8006c3e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8006c40:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8006c42:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8006c44:	d242      	bcs.n	8006ccc <tcp_receive+0x4a0>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006c46:	68eb      	ldr	r3, [r5, #12]
 8006c48:	8998      	ldrh	r0, [r3, #12]
 8006c4a:	f7fd ff4d 	bl	8004ae8 <lwip_htons>
 8006c4e:	07c2      	lsls	r2, r0, #31
 8006c50:	d510      	bpl.n	8006c74 <tcp_receive+0x448>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006c52:	68eb      	ldr	r3, [r5, #12]
 8006c54:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8006c58:	4640      	mov	r0, r8
 8006c5a:	f7fd ff45 	bl	8004ae8 <lwip_htons>
 8006c5e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006c62:	f7fd ff41 	bl	8004ae8 <lwip_htons>
 8006c66:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8006c6a:	68eb      	ldr	r3, [r5, #12]
 8006c6c:	ea40 0808 	orr.w	r8, r0, r8
 8006c70:	f8a3 800c 	strh.w	r8, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006c74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c76:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006c78:	68eb      	ldr	r3, [r5, #12]
 8006c7a:	8998      	ldrh	r0, [r3, #12]
 8006c7c:	f7fd ff34 	bl	8004ae8 <lwip_htons>
 8006c80:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8006c82:	bf48      	it	mi
 8006c84:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8006c86:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8006c88:	bf44      	itt	mi
 8006c8a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8006c8e:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8006c90:	8929      	ldrh	r1, [r5, #8]
 8006c92:	f7fe fca7 	bl	80055e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006c96:	68eb      	ldr	r3, [r5, #12]
 8006c98:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8006c9c:	8998      	ldrh	r0, [r3, #12]
 8006c9e:	f7fd ff23 	bl	8004ae8 <lwip_htons>
 8006ca2:	f010 0003 	ands.w	r0, r0, #3
 8006ca6:	bf18      	it	ne
 8006ca8:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006caa:	6833      	ldr	r3, [r6, #0]
 8006cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8006cae:	4440      	add	r0, r8
 8006cb0:	b280      	uxth	r0, r0
 8006cb2:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006cb4:	4418      	add	r0, r3
 8006cb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006cb8:	4413      	add	r3, r2
 8006cba:	4298      	cmp	r0, r3
 8006cbc:	d006      	beq.n	8006ccc <tcp_receive+0x4a0>
 8006cbe:	4b41      	ldr	r3, [pc, #260]	; (8006dc4 <tcp_receive+0x598>)
 8006cc0:	4946      	ldr	r1, [pc, #280]	; (8006ddc <tcp_receive+0x5b0>)
 8006cc2:	4842      	ldr	r0, [pc, #264]	; (8006dcc <tcp_receive+0x5a0>)
 8006cc4:	f240 527f 	movw	r2, #1407	; 0x57f
 8006cc8:	f005 fdd2 	bl	800c870 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8006ccc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80ae 	beq.w	8006e30 <tcp_receive+0x604>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006cd4:	68eb      	ldr	r3, [r5, #12]
 8006cd6:	8998      	ldrh	r0, [r3, #12]
 8006cd8:	f7fd ff06 	bl	8004ae8 <lwip_htons>
 8006cdc:	07c0      	lsls	r0, r0, #31
 8006cde:	f100 80a4 	bmi.w	8006e2a <tcp_receive+0x5fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8006ce2:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
 8006ce6:	6830      	ldr	r0, [r6, #0]
 8006ce8:	883b      	ldrh	r3, [r7, #0]
 8006cea:	4403      	add	r3, r0
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8006cec:	f1b8 0f00 	cmp.w	r8, #0
 8006cf0:	d039      	beq.n	8006d66 <tcp_receive+0x53a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8006cf2:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8006cf6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8006cfa:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8006cfe:	4411      	add	r1, r2
 8006d00:	1a59      	subs	r1, r3, r1
            while (next &&
 8006d02:	2900      	cmp	r1, #0
 8006d04:	f280 80c1 	bge.w	8006e8a <tcp_receive+0x65e>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8006d08:	1a9b      	subs	r3, r3, r2
            if (next &&
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dd2b      	ble.n	8006d66 <tcp_receive+0x53a>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006d0e:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8006d10:	1a12      	subs	r2, r2, r0
 8006d12:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006d14:	8998      	ldrh	r0, [r3, #12]
 8006d16:	f7fd fee7 	bl	8004ae8 <lwip_htons>
 8006d1a:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8006d1c:	bf48      	it	mi
 8006d1e:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8006d20:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8006d22:	bf44      	itt	mi
 8006d24:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8006d28:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8006d2a:	8929      	ldrh	r1, [r5, #8]
 8006d2c:	f7fe fc5a 	bl	80055e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8006d30:	68eb      	ldr	r3, [r5, #12]
 8006d32:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006d36:	8998      	ldrh	r0, [r3, #12]
 8006d38:	f7fd fed6 	bl	8004ae8 <lwip_htons>
 8006d3c:	f010 0003 	ands.w	r0, r0, #3
 8006d40:	bf18      	it	ne
 8006d42:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8006d44:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8006d46:	4448      	add	r0, r9
 8006d48:	b280      	uxth	r0, r0
 8006d4a:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8006d4c:	4418      	add	r0, r3
 8006d4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4298      	cmp	r0, r3
 8006d56:	d006      	beq.n	8006d66 <tcp_receive+0x53a>
 8006d58:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <tcp_receive+0x598>)
 8006d5a:	4921      	ldr	r1, [pc, #132]	; (8006de0 <tcp_receive+0x5b4>)
 8006d5c:	481b      	ldr	r0, [pc, #108]	; (8006dcc <tcp_receive+0x5a0>)
 8006d5e:	f240 52af 	movw	r2, #1455	; 0x5af
 8006d62:	f005 fd85 	bl	800c870 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8006d66:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8006d6a:	e061      	b.n	8006e30 <tcp_receive+0x604>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006d6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d6e:	6829      	ldr	r1, [r5, #0]
 8006d70:	1a5b      	subs	r3, r3, r1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f6bf aee2 	bge.w	8006b3c <tcp_receive+0x310>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <tcp_receive+0x5b8>)
      m = m - (pcb->sa >> 3);
 8006d7a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8006d82:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8006d86:	b289      	uxth	r1, r1
 8006d88:	b20b      	sxth	r3, r1
      if (m < 0) {
 8006d8a:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8006d8c:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8006d90:	4408      	add	r0, r1
        m = -m;
 8006d92:	bfbc      	itt	lt
 8006d94:	4249      	neglt	r1, r1
 8006d96:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8006d98:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8006d9c:	4413      	add	r3, r2
      pcb->sa += m;
 8006d9e:	b200      	sxth	r0, r0
      pcb->sv += m;
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006da4:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8006da8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8006dac:	2300      	movs	r3, #0
      pcb->sa += m;
 8006dae:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8006db0:	6363      	str	r3, [r4, #52]	; 0x34
 8006db2:	e6c3      	b.n	8006b3c <tcp_receive+0x310>
 8006db4:	0800e86f 	.word	0x0800e86f
 8006db8:	0800e897 	.word	0x0800e897
 8006dbc:	2000826e 	.word	0x2000826e
 8006dc0:	2000823c 	.word	0x2000823c
 8006dc4:	0800e824 	.word	0x0800e824
 8006dc8:	0800e8b7 	.word	0x0800e8b7
 8006dcc:	0800d7e1 	.word	0x0800d7e1
 8006dd0:	0800e8c7 	.word	0x0800e8c7
 8006dd4:	0800e8d6 	.word	0x0800e8d6
 8006dd8:	0800e8e6 	.word	0x0800e8e6
 8006ddc:	0800e8f9 	.word	0x0800e8f9
 8006de0:	0800e930 	.word	0x0800e930
 8006de4:	2000bacc 	.word	0x2000bacc
          p->tot_len = new_tot_len;
 8006de8:	f8a8 1008 	strh.w	r1, [r8, #8]
          p->len = 0;
 8006dec:	f8a8 200a 	strh.w	r2, [r8, #10]
          off -= p->len;
 8006df0:	eba9 0903 	sub.w	r9, r9, r3
          p = p->next;
 8006df4:	f8d8 8000 	ldr.w	r8, [r8]
 8006df8:	e6e8      	b.n	8006bcc <tcp_receive+0x3a0>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8006dfa:	f1cb 0100 	rsb	r1, fp, #0
 8006dfe:	b209      	sxth	r1, r1
 8006e00:	f7fe faa6 	bl	8005350 <pbuf_header>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f43f aef4 	beq.w	8006bf2 <tcp_receive+0x3c6>
          LWIP_ASSERT("pbuf_header failed", 0);
 8006e0a:	4b9b      	ldr	r3, [pc, #620]	; (8007078 <tcp_receive+0x84c>)
 8006e0c:	f240 5251 	movw	r2, #1361	; 0x551
 8006e10:	e6eb      	b.n	8006bea <tcp_receive+0x3be>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8006e16:	bfbe      	ittt	lt
 8006e18:	7ea3      	ldrblt	r3, [r4, #26]
 8006e1a:	f043 0302 	orrlt.w	r3, r3, #2
 8006e1e:	76a3      	strblt	r3, [r4, #26]
 8006e20:	e6f0      	b.n	8006c04 <tcp_receive+0x3d8>
              pcb->ooseq = pcb->ooseq->next;
 8006e22:	6803      	ldr	r3, [r0, #0]
 8006e24:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8006e26:	f7fe fea9 	bl	8005b7c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8006e2a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1f8      	bne.n	8006e22 <tcp_receive+0x5f6>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8006e30:	883a      	ldrh	r2, [r7, #0]
 8006e32:	6833      	ldr	r3, [r6, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8006e38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d206      	bcs.n	8006e4c <tcp_receive+0x620>
 8006e3e:	4b8e      	ldr	r3, [pc, #568]	; (8007078 <tcp_receive+0x84c>)
 8006e40:	498e      	ldr	r1, [pc, #568]	; (800707c <tcp_receive+0x850>)
 8006e42:	488f      	ldr	r0, [pc, #572]	; (8007080 <tcp_receive+0x854>)
 8006e44:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8006e48:	f005 fd12 	bl	800c870 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8006e4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e4e:	883a      	ldrh	r2, [r7, #0]
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7fe fe27 	bl	8005aa8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8006e5a:	686b      	ldr	r3, [r5, #4]
 8006e5c:	891a      	ldrh	r2, [r3, #8]
 8006e5e:	b11a      	cbz	r2, 8006e68 <tcp_receive+0x63c>
          recv_data = inseg.p;
 8006e60:	4a88      	ldr	r2, [pc, #544]	; (8007084 <tcp_receive+0x858>)
 8006e62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006e68:	68eb      	ldr	r3, [r5, #12]
 8006e6a:	8998      	ldrh	r0, [r3, #12]
 8006e6c:	f7fd fe3c 	bl	8004ae8 <lwip_htons>
 8006e70:	07c5      	lsls	r5, r0, #31
 8006e72:	d504      	bpl.n	8006e7e <tcp_receive+0x652>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8006e74:	4a84      	ldr	r2, [pc, #528]	; (8007088 <tcp_receive+0x85c>)
 8006e76:	7813      	ldrb	r3, [r2, #0]
 8006e78:	f043 0320 	orr.w	r3, r3, #32
 8006e7c:	7013      	strb	r3, [r2, #0]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006e7e:	4f7e      	ldr	r7, [pc, #504]	; (8007078 <tcp_receive+0x84c>)
 8006e80:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8007090 <tcp_receive+0x864>
 8006e84:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007080 <tcp_receive+0x854>
 8006e88:	e07c      	b.n	8006f84 <tcp_receive+0x758>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006e8a:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8006e8e:	f7fd fe2b 	bl	8004ae8 <lwip_htons>
 8006e92:	07c1      	lsls	r1, r0, #31
 8006e94:	d51b      	bpl.n	8006ece <tcp_receive+0x6a2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8006e96:	68eb      	ldr	r3, [r5, #12]
 8006e98:	8998      	ldrh	r0, [r3, #12]
 8006e9a:	f7fd fe25 	bl	8004ae8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006e9e:	0782      	lsls	r2, r0, #30
 8006ea0:	d415      	bmi.n	8006ece <tcp_receive+0x6a2>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006ea2:	68eb      	ldr	r3, [r5, #12]
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8006eaa:	f7fd fe1d 	bl	8004ae8 <lwip_htons>
 8006eae:	68eb      	ldr	r3, [r5, #12]
 8006eb0:	ea49 0000 	orr.w	r0, r9, r0
 8006eb4:	b280      	uxth	r0, r0
 8006eb6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8006eb8:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006ebc:	f7fd fe14 	bl	8004ae8 <lwip_htons>
 8006ec0:	f010 0003 	ands.w	r0, r0, #3
 8006ec4:	bf18      	it	ne
 8006ec6:	2001      	movne	r0, #1
 8006ec8:	4481      	add	r9, r0
 8006eca:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8006ece:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f7fe fe52 	bl	8005b7c <tcp_seg_free>
              next = next->next;
 8006ed8:	46c8      	mov	r8, r9
 8006eda:	e704      	b.n	8006ce6 <tcp_receive+0x4ba>
          seqno = pcb->ooseq->tcphdr->seqno;
 8006edc:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006ede:	8990      	ldrh	r0, [r2, #12]
 8006ee0:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006ee4:	f7fd fe00 	bl	8004ae8 <lwip_htons>
 8006ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006eea:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006eee:	f010 0003 	ands.w	r0, r0, #3
 8006ef2:	449a      	add	sl, r3
 8006ef4:	bf18      	it	ne
 8006ef6:	2001      	movne	r0, #1
 8006ef8:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006efa:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006efc:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006efe:	8998      	ldrh	r0, [r3, #12]
 8006f00:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8006f04:	f7fd fdf0 	bl	8004ae8 <lwip_htons>
 8006f08:	f010 0003 	ands.w	r0, r0, #3
 8006f0c:	bf18      	it	ne
 8006f0e:	2001      	movne	r0, #1
 8006f10:	4458      	add	r0, fp
 8006f12:	4582      	cmp	sl, r0
 8006f14:	d206      	bcs.n	8006f24 <tcp_receive+0x6f8>
 8006f16:	463b      	mov	r3, r7
 8006f18:	f240 52de 	movw	r2, #1502	; 0x5de
 8006f1c:	4641      	mov	r1, r8
 8006f1e:	4648      	mov	r0, r9
 8006f20:	f005 fca6 	bl	800c870 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8006f24:	68eb      	ldr	r3, [r5, #12]
 8006f26:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006f2a:	8998      	ldrh	r0, [r3, #12]
 8006f2c:	f7fd fddc 	bl	8004ae8 <lwip_htons>
 8006f30:	f010 0003 	ands.w	r0, r0, #3
 8006f34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f36:	bf18      	it	ne
 8006f38:	2001      	movne	r0, #1
 8006f3a:	4450      	add	r0, sl
 8006f3c:	1a18      	subs	r0, r3, r0
 8006f3e:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7fe fdb1 	bl	8005aa8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8006f46:	6869      	ldr	r1, [r5, #4]
 8006f48:	890b      	ldrh	r3, [r1, #8]
 8006f4a:	b133      	cbz	r3, 8006f5a <tcp_receive+0x72e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	; (8007084 <tcp_receive+0x858>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	b338      	cbz	r0, 8006fa2 <tcp_receive+0x776>
              pbuf_cat(recv_data, cseg->p);
 8006f52:	f7fe fbdb 	bl	800570c <pbuf_cat>
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006f5a:	68eb      	ldr	r3, [r5, #12]
 8006f5c:	8998      	ldrh	r0, [r3, #12]
 8006f5e:	f7fd fdc3 	bl	8004ae8 <lwip_htons>
 8006f62:	07c0      	lsls	r0, r0, #31
 8006f64:	d509      	bpl.n	8006f7a <tcp_receive+0x74e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8006f66:	4a48      	ldr	r2, [pc, #288]	; (8007088 <tcp_receive+0x85c>)
 8006f68:	7813      	ldrb	r3, [r2, #0]
 8006f6a:	f043 0320 	orr.w	r3, r3, #32
 8006f6e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8006f70:	7d23      	ldrb	r3, [r4, #20]
 8006f72:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8006f74:	bf04      	itt	eq
 8006f76:	2307      	moveq	r3, #7
 8006f78:	7523      	strbeq	r3, [r4, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f7fe fdfc 	bl	8005b7c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8006f84:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006f86:	b125      	cbz	r5, 8006f92 <tcp_receive+0x766>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006f88:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8006f8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006f8c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8006f8e:	428b      	cmp	r3, r1
 8006f90:	d0a4      	beq.n	8006edc <tcp_receive+0x6b0>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8006f92:	7ea3      	ldrb	r3, [r4, #26]
 8006f94:	07d9      	lsls	r1, r3, #31
 8006f96:	d506      	bpl.n	8006fa6 <tcp_receive+0x77a>
 8006f98:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8006f9c:	f043 0302 	orr.w	r3, r3, #2
 8006fa0:	e003      	b.n	8006faa <tcp_receive+0x77e>
              recv_data = cseg->p;
 8006fa2:	6019      	str	r1, [r3, #0]
 8006fa4:	e7d7      	b.n	8006f56 <tcp_receive+0x72a>
        tcp_ack(pcb);
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8006fac:	b003      	add	sp, #12
 8006fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f001 faa5 	bl	8008502 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8006fb8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006fba:	b925      	cbnz	r5, 8006fc6 <tcp_receive+0x79a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8006fbc:	4833      	ldr	r0, [pc, #204]	; (800708c <tcp_receive+0x860>)
 8006fbe:	f7fe fdf3 	bl	8005ba8 <tcp_seg_copy>
 8006fc2:	6720      	str	r0, [r4, #112]	; 0x70
 8006fc4:	e7f2      	b.n	8006fac <tcp_receive+0x780>
            if (seqno == next->tcphdr->seqno) {
 8006fc6:	6833      	ldr	r3, [r6, #0]
          prev = NULL;
 8006fc8:	f04f 0800 	mov.w	r8, #0
 8006fcc:	f103 3eff 	add.w	lr, r3, #4294967295
 8006fd0:	f103 0c01 	add.w	ip, r3, #1
            if (seqno == next->tcphdr->seqno) {
 8006fd4:	68e8      	ldr	r0, [r5, #12]
 8006fd6:	6842      	ldr	r2, [r0, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d117      	bne.n	800700c <tcp_receive+0x7e0>
              if (inseg.len > next->len) {
 8006fdc:	482b      	ldr	r0, [pc, #172]	; (800708c <tcp_receive+0x860>)
 8006fde:	892b      	ldrh	r3, [r5, #8]
 8006fe0:	8902      	ldrh	r2, [r0, #8]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d9e2      	bls.n	8006fac <tcp_receive+0x780>
                cseg = tcp_seg_copy(&inseg);
 8006fe6:	f7fe fddf 	bl	8005ba8 <tcp_seg_copy>
                if (cseg != NULL) {
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d0de      	beq.n	8006fac <tcp_receive+0x780>
                  if (prev != NULL) {
 8006fee:	f1b8 0f00 	cmp.w	r8, #0
 8006ff2:	d009      	beq.n	8007008 <tcp_receive+0x7dc>
                    prev->next = cseg;
 8006ff4:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006ff8:	4629      	mov	r1, r5
}
 8006ffa:	b003      	add	sp, #12
 8006ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8007000:	f7ff bbd8 	b.w	80067b4 <tcp_oos_insert_segment>
 8007004:	460d      	mov	r5, r1
 8007006:	e7e5      	b.n	8006fd4 <tcp_receive+0x7a8>
                    pcb->ooseq = cseg;
 8007008:	6720      	str	r0, [r4, #112]	; 0x70
 800700a:	e7f5      	b.n	8006ff8 <tcp_receive+0x7cc>
              if (prev == NULL) {
 800700c:	f1b8 0f00 	cmp.w	r8, #0
 8007010:	d109      	bne.n	8007026 <tcp_receive+0x7fa>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007012:	1a99      	subs	r1, r3, r2
 8007014:	2900      	cmp	r1, #0
 8007016:	da3d      	bge.n	8007094 <tcp_receive+0x868>
                  cseg = tcp_seg_copy(&inseg);
 8007018:	481c      	ldr	r0, [pc, #112]	; (800708c <tcp_receive+0x860>)
 800701a:	f7fe fdc5 	bl	8005ba8 <tcp_seg_copy>
                  if (cseg != NULL) {
 800701e:	2800      	cmp	r0, #0
 8007020:	d0c4      	beq.n	8006fac <tcp_receive+0x780>
                    pcb->ooseq = cseg;
 8007022:	6720      	str	r0, [r4, #112]	; 0x70
 8007024:	e7e8      	b.n	8006ff8 <tcp_receive+0x7cc>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007026:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800702a:	6849      	ldr	r1, [r1, #4]
 800702c:	ebae 0101 	sub.w	r1, lr, r1
 8007030:	2900      	cmp	r1, #0
 8007032:	db2f      	blt.n	8007094 <tcp_receive+0x868>
 8007034:	ebac 0102 	sub.w	r1, ip, r2
 8007038:	2900      	cmp	r1, #0
 800703a:	dc2b      	bgt.n	8007094 <tcp_receive+0x868>
                  cseg = tcp_seg_copy(&inseg);
 800703c:	4813      	ldr	r0, [pc, #76]	; (800708c <tcp_receive+0x860>)
 800703e:	f7fe fdb3 	bl	8005ba8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007042:	4604      	mov	r4, r0
 8007044:	2800      	cmp	r0, #0
 8007046:	d0b1      	beq.n	8006fac <tcp_receive+0x780>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007048:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800704c:	6831      	ldr	r1, [r6, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007054:	4413      	add	r3, r2
 8007056:	1a5b      	subs	r3, r3, r1
 8007058:	2b00      	cmp	r3, #0
 800705a:	dd07      	ble.n	800706c <tcp_receive+0x840>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800705c:	1a89      	subs	r1, r1, r2
 800705e:	b289      	uxth	r1, r1
 8007060:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007064:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007068:	f7fe fabc 	bl	80055e4 <pbuf_realloc>
                    prev->next = cseg;
 800706c:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007070:	4629      	mov	r1, r5
 8007072:	4620      	mov	r0, r4
 8007074:	e7c1      	b.n	8006ffa <tcp_receive+0x7ce>
 8007076:	bf00      	nop
 8007078:	0800e824 	.word	0x0800e824
 800707c:	0800e96b 	.word	0x0800e96b
 8007080:	0800d7e1 	.word	0x0800d7e1
 8007084:	20008250 	.word	0x20008250
 8007088:	20008254 	.word	0x20008254
 800708c:	2000823c 	.word	0x2000823c
 8007090:	0800e98a 	.word	0x0800e98a
              if (next->next == NULL &&
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	46a8      	mov	r8, r5
 8007098:	2900      	cmp	r1, #0
 800709a:	d1b3      	bne.n	8007004 <tcp_receive+0x7d8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800709c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800709e:	2b00      	cmp	r3, #0
 80070a0:	dd84      	ble.n	8006fac <tcp_receive+0x780>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80070a2:	8980      	ldrh	r0, [r0, #12]
 80070a4:	f7fd fd20 	bl	8004ae8 <lwip_htons>
 80070a8:	07c2      	lsls	r2, r0, #31
 80070aa:	f53f af7f 	bmi.w	8006fac <tcp_receive+0x780>
                next->next = tcp_seg_copy(&inseg);
 80070ae:	483a      	ldr	r0, [pc, #232]	; (8007198 <tcp_receive+0x96c>)
 80070b0:	f7fe fd7a 	bl	8005ba8 <tcp_seg_copy>
 80070b4:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f af78 	beq.w	8006fac <tcp_receive+0x780>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80070bc:	68eb      	ldr	r3, [r5, #12]
 80070be:	6831      	ldr	r1, [r6, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	892b      	ldrh	r3, [r5, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	1a5b      	subs	r3, r3, r1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	dd05      	ble.n	80070d8 <tcp_receive+0x8ac>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80070cc:	1a89      	subs	r1, r1, r2
 80070ce:	b289      	uxth	r1, r1
 80070d0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80070d2:	6868      	ldr	r0, [r5, #4]
 80070d4:	f7fe fa86 	bl	80055e4 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80070d8:	6832      	ldr	r2, [r6, #0]
 80070da:	883b      	ldrh	r3, [r7, #0]
 80070dc:	4413      	add	r3, r2
 80070de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f77f af60 	ble.w	8006fac <tcp_receive+0x780>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	8998      	ldrh	r0, [r3, #12]
 80070f2:	f7fd fcf9 	bl	8004ae8 <lwip_htons>
 80070f6:	07c3      	lsls	r3, r0, #31
 80070f8:	d512      	bpl.n	8007120 <tcp_receive+0x8f4>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80070fa:	682b      	ldr	r3, [r5, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8007102:	4640      	mov	r0, r8
 8007104:	f7fd fcf0 	bl	8004ae8 <lwip_htons>
 8007108:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800710c:	f7fd fcec 	bl	8004ae8 <lwip_htons>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	ea40 0808 	orr.w	r8, r0, r8
 800711c:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007120:	6832      	ldr	r2, [r6, #0]
 8007122:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	1a89      	subs	r1, r1, r2
 8007128:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800712a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800712c:	4411      	add	r1, r2
 800712e:	b289      	uxth	r1, r1
 8007130:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007132:	f7fe fa57 	bl	80055e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007136:	682b      	ldr	r3, [r5, #0]
 8007138:	891d      	ldrh	r5, [r3, #8]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	8998      	ldrh	r0, [r3, #12]
 800713e:	f7fd fcd3 	bl	8004ae8 <lwip_htons>
 8007142:	f010 0003 	ands.w	r0, r0, #3
 8007146:	bf18      	it	ne
 8007148:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800714a:	6833      	ldr	r3, [r6, #0]
 800714c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800714e:	4428      	add	r0, r5
 8007150:	b280      	uxth	r0, r0
 8007152:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007154:	4418      	add	r0, r3
 8007156:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007158:	4413      	add	r3, r2
 800715a:	4298      	cmp	r0, r3
 800715c:	f43f af26 	beq.w	8006fac <tcp_receive+0x780>
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <tcp_receive+0x970>)
 8007162:	490f      	ldr	r1, [pc, #60]	; (80071a0 <tcp_receive+0x974>)
 8007164:	480f      	ldr	r0, [pc, #60]	; (80071a4 <tcp_receive+0x978>)
 8007166:	f240 627b 	movw	r2, #1659	; 0x67b
}
 800716a:	b003      	add	sp, #12
 800716c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007170:	f005 bb7e 	b.w	800c870 <iprintf>
      tcp_send_empty_ack(pcb);
 8007174:	4620      	mov	r0, r4
}
 8007176:	b003      	add	sp, #12
 8007178:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 800717c:	f001 b9c1 	b.w	8008502 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007180:	1a99      	subs	r1, r3, r2
 8007182:	2900      	cmp	r1, #0
 8007184:	db06      	blt.n	8007194 <tcp_receive+0x968>
 8007186:	3301      	adds	r3, #1
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	f77f af0c 	ble.w	8006fac <tcp_receive+0x780>
      tcp_ack_now(pcb);
 8007194:	7ea3      	ldrb	r3, [r4, #26]
 8007196:	e701      	b.n	8006f9c <tcp_receive+0x770>
 8007198:	2000823c 	.word	0x2000823c
 800719c:	0800e824 	.word	0x0800e824
 80071a0:	0800e8f9 	.word	0x0800e8f9
 80071a4:	0800d7e1 	.word	0x0800d7e1

080071a8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80071a8:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <tcp_getoptbyte+0x30>)
 80071aa:	490c      	ldr	r1, [pc, #48]	; (80071dc <tcp_getoptbyte+0x34>)
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	880b      	ldrh	r3, [r1, #0]
 80071b0:	1c5a      	adds	r2, r3, #1
{
 80071b2:	b530      	push	{r4, r5, lr}
 80071b4:	b292      	uxth	r2, r2
 80071b6:	460d      	mov	r5, r1
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80071b8:	b118      	cbz	r0, 80071c2 <tcp_getoptbyte+0x1a>
 80071ba:	4c09      	ldr	r4, [pc, #36]	; (80071e0 <tcp_getoptbyte+0x38>)
 80071bc:	8824      	ldrh	r4, [r4, #0]
 80071be:	429c      	cmp	r4, r3
 80071c0:	d905      	bls.n	80071ce <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80071c2:	4908      	ldr	r1, [pc, #32]	; (80071e4 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80071c4:	802a      	strh	r2, [r5, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80071c6:	6809      	ldr	r1, [r1, #0]
    return opts[tcp_optidx++];
 80071c8:	440b      	add	r3, r1
 80071ca:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 80071cc:	bd30      	pop	{r4, r5, pc}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80071ce:	1b1b      	subs	r3, r3, r4
    return tcphdr_opt2[idx];
 80071d0:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80071d2:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
 80071d4:	5cc0      	ldrb	r0, [r0, r3]
 80071d6:	e7f9      	b.n	80071cc <tcp_getoptbyte+0x24>
 80071d8:	20008268 	.word	0x20008268
 80071dc:	2000825c 	.word	0x2000825c
 80071e0:	20008264 	.word	0x20008264
 80071e4:	20008260 	.word	0x20008260

080071e8 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80071ea:	4e1a      	ldr	r6, [pc, #104]	; (8007254 <tcp_parseopt.isra.1+0x6c>)
 80071ec:	8833      	ldrh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 80071ee:	4607      	mov	r7, r0
  if (tcphdr_optlen != 0) {
 80071f0:	b133      	cbz	r3, 8007200 <tcp_parseopt.isra.1+0x18>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80071f2:	4d19      	ldr	r5, [pc, #100]	; (8007258 <tcp_parseopt.isra.1+0x70>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	802b      	strh	r3, [r5, #0]
 80071f8:	8834      	ldrh	r4, [r6, #0]
 80071fa:	882b      	ldrh	r3, [r5, #0]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d300      	bcc.n	8007202 <tcp_parseopt.isra.1+0x1a>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 8007200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8007202:	f7ff ffd1 	bl	80071a8 <tcp_getoptbyte>
      switch (opt) {
 8007206:	2801      	cmp	r0, #1
 8007208:	d0f6      	beq.n	80071f8 <tcp_parseopt.isra.1+0x10>
 800720a:	d3f9      	bcc.n	8007200 <tcp_parseopt.isra.1+0x18>
 800720c:	2802      	cmp	r0, #2
 800720e:	d117      	bne.n	8007240 <tcp_parseopt.isra.1+0x58>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007210:	f7ff ffca 	bl	80071a8 <tcp_getoptbyte>
 8007214:	2804      	cmp	r0, #4
 8007216:	d1f3      	bne.n	8007200 <tcp_parseopt.isra.1+0x18>
 8007218:	882b      	ldrh	r3, [r5, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	42a3      	cmp	r3, r4
 800721e:	daef      	bge.n	8007200 <tcp_parseopt.isra.1+0x18>
        mss = (tcp_getoptbyte() << 8);
 8007220:	f7ff ffc2 	bl	80071a8 <tcp_getoptbyte>
 8007224:	0200      	lsls	r0, r0, #8
 8007226:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007228:	f7ff ffbe 	bl	80071a8 <tcp_getoptbyte>
 800722c:	4320      	orrs	r0, r4
 800722e:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007230:	1e43      	subs	r3, r0, #1
 8007232:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007236:	bf28      	it	cs
 8007238:	f44f 7006 	movcs.w	r0, #536	; 0x218
 800723c:	8038      	strh	r0, [r7, #0]
 800723e:	e7db      	b.n	80071f8 <tcp_parseopt.isra.1+0x10>
        data = tcp_getoptbyte();
 8007240:	f7ff ffb2 	bl	80071a8 <tcp_getoptbyte>
        if (data < 2) {
 8007244:	2801      	cmp	r0, #1
 8007246:	d9db      	bls.n	8007200 <tcp_parseopt.isra.1+0x18>
        tcp_optidx += data - 2;
 8007248:	882b      	ldrh	r3, [r5, #0]
 800724a:	3b02      	subs	r3, #2
 800724c:	4418      	add	r0, r3
 800724e:	8028      	strh	r0, [r5, #0]
 8007250:	e7d2      	b.n	80071f8 <tcp_parseopt.isra.1+0x10>
 8007252:	bf00      	nop
 8007254:	2000826c 	.word	0x2000826c
 8007258:	2000825c 	.word	0x2000825c

0800725c <tcp_input_delayed_close>:
{
 800725c:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <tcp_input_delayed_close+0x38>)
{
 8007260:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8007262:	7818      	ldrb	r0, [r3, #0]
 8007264:	f010 0010 	ands.w	r0, r0, #16
 8007268:	d012      	beq.n	8007290 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800726a:	7ea3      	ldrb	r3, [r4, #26]
 800726c:	06db      	lsls	r3, r3, #27
 800726e:	d406      	bmi.n	800727e <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007270:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007274:	b11b      	cbz	r3, 800727e <tcp_input_delayed_close+0x22>
 8007276:	f06f 010e 	mvn.w	r1, #14
 800727a:	6920      	ldr	r0, [r4, #16]
 800727c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800727e:	4621      	mov	r1, r4
 8007280:	4805      	ldr	r0, [pc, #20]	; (8007298 <tcp_input_delayed_close+0x3c>)
 8007282:	f7fe ff09 	bl	8006098 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007286:	2001      	movs	r0, #1
 8007288:	4621      	mov	r1, r4
 800728a:	f7fd fed5 	bl	8005038 <memp_free>
 800728e:	2001      	movs	r0, #1
}
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	20008254 	.word	0x20008254
 8007298:	2000bac8 	.word	0x2000bac8

0800729c <tcp_input>:
{
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80072a0:	4ea3      	ldr	r6, [pc, #652]	; (8007530 <tcp_input+0x294>)
 80072a2:	6843      	ldr	r3, [r0, #4]
 80072a4:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 80072a6:	8943      	ldrh	r3, [r0, #10]
 80072a8:	2b13      	cmp	r3, #19
{
 80072aa:	b089      	sub	sp, #36	; 0x24
 80072ac:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 80072ae:	f240 81b7 	bls.w	8007620 <tcp_input+0x384>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80072b2:	4fa0      	ldr	r7, [pc, #640]	; (8007534 <tcp_input+0x298>)
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	f003 fdfd 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 80072bc:	46b8      	mov	r8, r7
 80072be:	4604      	mov	r4, r0
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f040 81ad 	bne.w	8007620 <tcp_input+0x384>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80072cc:	2be0      	cmp	r3, #224	; 0xe0
 80072ce:	f000 81a7 	beq.w	8007620 <tcp_input+0x384>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80072d2:	6833      	ldr	r3, [r6, #0]
 80072d4:	8998      	ldrh	r0, [r3, #12]
 80072d6:	f7fd fc07 	bl	8004ae8 <lwip_htons>
 80072da:	0a81      	lsrs	r1, r0, #10
 80072dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80072e0:	2913      	cmp	r1, #19
 80072e2:	f240 819d 	bls.w	8007620 <tcp_input+0x384>
 80072e6:	892b      	ldrh	r3, [r5, #8]
 80072e8:	b289      	uxth	r1, r1
 80072ea:	428b      	cmp	r3, r1
 80072ec:	f0c0 8198 	bcc.w	8007620 <tcp_input+0x384>
  if (p->len >= hdrlen_bytes) {
 80072f0:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80072f2:	4a91      	ldr	r2, [pc, #580]	; (8007538 <tcp_input+0x29c>)
  tcphdr_opt2 = NULL;
 80072f4:	4f91      	ldr	r7, [pc, #580]	; (800753c <tcp_input+0x2a0>)
 80072f6:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800758c <tcp_input+0x2f0>
 80072fa:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80072fc:	f1a1 0314 	sub.w	r3, r1, #20
 8007300:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8007302:	4288      	cmp	r0, r1
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007304:	8013      	strh	r3, [r2, #0]
 8007306:	4614      	mov	r4, r2
  if (p->len >= hdrlen_bytes) {
 8007308:	d34a      	bcc.n	80073a0 <tcp_input+0x104>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800730a:	4249      	negs	r1, r1
 800730c:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800730e:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007312:	f7fe f81d 	bl	8005350 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007316:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007318:	f8df a274 	ldr.w	sl, [pc, #628]	; 8007590 <tcp_input+0x2f4>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800731c:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800731e:	4f88      	ldr	r7, [pc, #544]	; (8007540 <tcp_input+0x2a4>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007320:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007554 <tcp_input+0x2b8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007324:	f7fd fbe0 	bl	8004ae8 <lwip_htons>
 8007328:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800732a:	6834      	ldr	r4, [r6, #0]
 800732c:	8860      	ldrh	r0, [r4, #2]
 800732e:	f7fd fbdb 	bl	8004ae8 <lwip_htons>
 8007332:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007334:	6834      	ldr	r4, [r6, #0]
 8007336:	6860      	ldr	r0, [r4, #4]
 8007338:	f7fd fbd9 	bl	8004aee <lwip_htonl>
 800733c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800733e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007340:	f8ca 0000 	str.w	r0, [sl]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007344:	68a0      	ldr	r0, [r4, #8]
 8007346:	f7fd fbd2 	bl	8004aee <lwip_htonl>
 800734a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800734c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800734e:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007350:	89e0      	ldrh	r0, [r4, #14]
 8007352:	f7fd fbc9 	bl	8004ae8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007356:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007358:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800735a:	8998      	ldrh	r0, [r3, #12]
 800735c:	f7fd fbc4 	bl	8004ae8 <lwip_htons>
 8007360:	4a78      	ldr	r2, [pc, #480]	; (8007544 <tcp_input+0x2a8>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007362:	8929      	ldrh	r1, [r5, #8]
 8007364:	f8cd a00c 	str.w	sl, [sp, #12]
  flags = TCPH_FLAGS(tcphdr);
 8007368:	b2c0      	uxtb	r0, r0
 800736a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800736e:	f010 0003 	ands.w	r0, r0, #3
  flags = TCPH_FLAGS(tcphdr);
 8007372:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007374:	bf18      	it	ne
 8007376:	2001      	movne	r0, #1
 8007378:	4b73      	ldr	r3, [pc, #460]	; (8007548 <tcp_input+0x2ac>)
 800737a:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800737c:	4973      	ldr	r1, [pc, #460]	; (800754c <tcp_input+0x2b0>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800737e:	8018      	strh	r0, [r3, #0]
 8007380:	e9cd 2304 	strd	r2, r3, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007384:	680c      	ldr	r4, [r1, #0]
 8007386:	46ba      	mov	sl, r7
  prev = NULL;
 8007388:	f04f 0900 	mov.w	r9, #0
 800738c:	460f      	mov	r7, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800738e:	2c00      	cmp	r4, #0
 8007390:	d140      	bne.n	8007414 <tcp_input+0x178>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007392:	4b6f      	ldr	r3, [pc, #444]	; (8007550 <tcp_input+0x2b4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007394:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8007554 <tcp_input+0x2b8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007398:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800739a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800755c <tcp_input+0x2c0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800739e:	e146      	b.n	800762e <tcp_input+0x392>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	b92b      	cbnz	r3, 80073b0 <tcp_input+0x114>
 80073a4:	4b6b      	ldr	r3, [pc, #428]	; (8007554 <tcp_input+0x2b8>)
 80073a6:	496c      	ldr	r1, [pc, #432]	; (8007558 <tcp_input+0x2bc>)
 80073a8:	486c      	ldr	r0, [pc, #432]	; (800755c <tcp_input+0x2c0>)
 80073aa:	22b2      	movs	r2, #178	; 0xb2
 80073ac:	f005 fa60 	bl	800c870 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 80073b0:	f06f 0113 	mvn.w	r1, #19
 80073b4:	4628      	mov	r0, r5
 80073b6:	f7fd ffcb 	bl	8005350 <pbuf_header>
    tcphdr_opt1len = p->len;
 80073ba:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80073bc:	8824      	ldrh	r4, [r4, #0]
    tcphdr_opt1len = p->len;
 80073be:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80073c2:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80073c4:	4249      	negs	r1, r1
 80073c6:	b209      	sxth	r1, r1
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7fd ffc1 	bl	8005350 <pbuf_header>
    if (opt2len > p->next->len) {
 80073ce:	6828      	ldr	r0, [r5, #0]
 80073d0:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80073d2:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	f0c0 8123 	bcc.w	8007620 <tcp_input+0x384>
    pbuf_header(p->next, -(s16_t)opt2len);
 80073da:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80073dc:	6843      	ldr	r3, [r0, #4]
 80073de:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80073e0:	b209      	sxth	r1, r1
 80073e2:	f7fd ffb5 	bl	8005350 <pbuf_header>
    p->tot_len -= opt2len;
 80073e6:	892b      	ldrh	r3, [r5, #8]
 80073e8:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80073ea:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 80073ec:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80073ee:	b12b      	cbz	r3, 80073fc <tcp_input+0x160>
 80073f0:	4b58      	ldr	r3, [pc, #352]	; (8007554 <tcp_input+0x2b8>)
 80073f2:	495b      	ldr	r1, [pc, #364]	; (8007560 <tcp_input+0x2c4>)
 80073f4:	4859      	ldr	r0, [pc, #356]	; (800755c <tcp_input+0x2c0>)
 80073f6:	22cf      	movs	r2, #207	; 0xcf
 80073f8:	f005 fa3a 	bl	800c870 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	892a      	ldrh	r2, [r5, #8]
 8007400:	891b      	ldrh	r3, [r3, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	d087      	beq.n	8007316 <tcp_input+0x7a>
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <tcp_input+0x2b8>)
 8007408:	4956      	ldr	r1, [pc, #344]	; (8007564 <tcp_input+0x2c8>)
 800740a:	4854      	ldr	r0, [pc, #336]	; (800755c <tcp_input+0x2c0>)
 800740c:	22d0      	movs	r2, #208	; 0xd0
 800740e:	f005 fa2f 	bl	800c870 <iprintf>
 8007412:	e780      	b.n	8007316 <tcp_input+0x7a>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007414:	7d23      	ldrb	r3, [r4, #20]
 8007416:	b92b      	cbnz	r3, 8007424 <tcp_input+0x188>
 8007418:	465b      	mov	r3, fp
 800741a:	22e2      	movs	r2, #226	; 0xe2
 800741c:	4952      	ldr	r1, [pc, #328]	; (8007568 <tcp_input+0x2cc>)
 800741e:	484f      	ldr	r0, [pc, #316]	; (800755c <tcp_input+0x2c0>)
 8007420:	f005 fa26 	bl	800c870 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007424:	7d23      	ldrb	r3, [r4, #20]
 8007426:	2b0a      	cmp	r3, #10
 8007428:	d105      	bne.n	8007436 <tcp_input+0x19a>
 800742a:	465b      	mov	r3, fp
 800742c:	22e3      	movs	r2, #227	; 0xe3
 800742e:	494f      	ldr	r1, [pc, #316]	; (800756c <tcp_input+0x2d0>)
 8007430:	484a      	ldr	r0, [pc, #296]	; (800755c <tcp_input+0x2c0>)
 8007432:	f005 fa1d 	bl	800c870 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007436:	7d23      	ldrb	r3, [r4, #20]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d105      	bne.n	8007448 <tcp_input+0x1ac>
 800743c:	465b      	mov	r3, fp
 800743e:	22e4      	movs	r2, #228	; 0xe4
 8007440:	494b      	ldr	r1, [pc, #300]	; (8007570 <tcp_input+0x2d4>)
 8007442:	4846      	ldr	r0, [pc, #280]	; (800755c <tcp_input+0x2c0>)
 8007444:	f005 fa14 	bl	800c870 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007448:	6832      	ldr	r2, [r6, #0]
 800744a:	8b21      	ldrh	r1, [r4, #24]
 800744c:	8813      	ldrh	r3, [r2, #0]
 800744e:	4299      	cmp	r1, r3
 8007450:	68e3      	ldr	r3, [r4, #12]
 8007452:	d16a      	bne.n	800752a <tcp_input+0x28e>
 8007454:	8ae1      	ldrh	r1, [r4, #22]
 8007456:	8852      	ldrh	r2, [r2, #2]
 8007458:	4291      	cmp	r1, r2
 800745a:	d166      	bne.n	800752a <tcp_input+0x28e>
        pcb->local_port == tcphdr->dest &&
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007462:	4291      	cmp	r1, r2
 8007464:	d161      	bne.n	800752a <tcp_input+0x28e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007466:	6821      	ldr	r1, [r4, #0]
 8007468:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800746c:	4291      	cmp	r1, r2
 800746e:	d15c      	bne.n	800752a <tcp_input+0x28e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007470:	42a3      	cmp	r3, r4
 8007472:	f040 8416 	bne.w	8007ca2 <tcp_input+0xa06>
 8007476:	4b37      	ldr	r3, [pc, #220]	; (8007554 <tcp_input+0x2b8>)
 8007478:	493e      	ldr	r1, [pc, #248]	; (8007574 <tcp_input+0x2d8>)
 800747a:	4838      	ldr	r0, [pc, #224]	; (800755c <tcp_input+0x2c0>)
 800747c:	22ec      	movs	r2, #236	; 0xec
 800747e:	f005 f9f7 	bl	800c870 <iprintf>
      if (prev != NULL) {
 8007482:	f1b9 0f00 	cmp.w	r9, #0
 8007486:	d005      	beq.n	8007494 <tcp_input+0x1f8>
        prev->next = pcb->next;
 8007488:	68e3      	ldr	r3, [r4, #12]
 800748a:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8007492:	603c      	str	r4, [r7, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007494:	68e3      	ldr	r3, [r4, #12]
 8007496:	42a3      	cmp	r3, r4
 8007498:	d105      	bne.n	80074a6 <tcp_input+0x20a>
 800749a:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <tcp_input+0x2b8>)
 800749c:	4936      	ldr	r1, [pc, #216]	; (8007578 <tcp_input+0x2dc>)
 800749e:	482f      	ldr	r0, [pc, #188]	; (800755c <tcp_input+0x2c0>)
 80074a0:	22f4      	movs	r2, #244	; 0xf4
 80074a2:	f005 f9e5 	bl	800c870 <iprintf>
    inseg.next = NULL;
 80074a6:	4b35      	ldr	r3, [pc, #212]	; (800757c <tcp_input+0x2e0>)
    inseg.len = p->tot_len;
 80074a8:	8929      	ldrh	r1, [r5, #8]
 80074aa:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 80074ac:	6831      	ldr	r1, [r6, #0]
    recv_acked = 0;
 80074ae:	4834      	ldr	r0, [pc, #208]	; (8007580 <tcp_input+0x2e4>)
    inseg.tcphdr = tcphdr;
 80074b0:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 80074b2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8007594 <tcp_input+0x2f8>
    recv_data = NULL;
 80074b6:	4933      	ldr	r1, [pc, #204]	; (8007584 <tcp_input+0x2e8>)
    inseg.p = p;
 80074b8:	605d      	str	r5, [r3, #4]
    inseg.next = NULL;
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80074be:	600a      	str	r2, [r1, #0]
    recv_flags = 0;
 80074c0:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 80074c4:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 80074c6:	9a04      	ldr	r2, [sp, #16]
 80074c8:	9306      	str	r3, [sp, #24]
 80074ca:	7812      	ldrb	r2, [r2, #0]
 80074cc:	f012 0f08 	tst.w	r2, #8
 80074d0:	4681      	mov	r9, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	d003      	beq.n	80074de <tcp_input+0x242>
      p->flags |= PBUF_FLAG_PUSH;
 80074d6:	7b6b      	ldrb	r3, [r5, #13]
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80074de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 813e 	beq.w	8007762 <tcp_input+0x4c6>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80074e6:	4620      	mov	r0, r4
 80074e8:	f7fe fee8 	bl	80062bc <tcp_process_refused_data>
 80074ec:	300d      	adds	r0, #13
 80074ee:	d008      	beq.n	8007502 <tcp_input+0x266>
 80074f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8135 	beq.w	8007762 <tcp_input+0x4c6>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8130 	beq.w	8007762 <tcp_input+0x4c6>
        if (pcb->rcv_ann_wnd == 0) {
 8007502:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007504:	b913      	cbnz	r3, 800750c <tcp_input+0x270>
          tcp_send_empty_ack(pcb);
 8007506:	4620      	mov	r0, r4
 8007508:	f000 fffb 	bl	8008502 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <tcp_input+0x2ec>)
 800750e:	2400      	movs	r4, #0
 8007510:	601c      	str	r4, [r3, #0]
    if (inseg.p != NULL)
 8007512:	9b06      	ldr	r3, [sp, #24]
    recv_data = NULL;
 8007514:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL)
 8007518:	6858      	ldr	r0, [r3, #4]
 800751a:	b118      	cbz	r0, 8007524 <tcp_input+0x288>
      pbuf_free(inseg.p);
 800751c:	f7fd ff1e 	bl	800535c <pbuf_free>
      inseg.p = NULL;
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	605c      	str	r4, [r3, #4]
}
 8007524:	b009      	add	sp, #36	; 0x24
 8007526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800752a:	46a1      	mov	r9, r4
 800752c:	461c      	mov	r4, r3
 800752e:	e72e      	b.n	800738e <tcp_input+0xf2>
 8007530:	20008260 	.word	0x20008260
 8007534:	200083a4 	.word	0x200083a4
 8007538:	2000826c 	.word	0x2000826c
 800753c:	20008268 	.word	0x20008268
 8007540:	20008234 	.word	0x20008234
 8007544:	20008238 	.word	0x20008238
 8007548:	2000826e 	.word	0x2000826e
 800754c:	2000bac8 	.word	0x2000bac8
 8007550:	2000bad8 	.word	0x2000bad8
 8007554:	0800e824 	.word	0x0800e824
 8007558:	0800e66e 	.word	0x0800e66e
 800755c:	0800d7e1 	.word	0x0800d7e1
 8007560:	0800e67e 	.word	0x0800e67e
 8007564:	0800e68a 	.word	0x0800e68a
 8007568:	0800e6a9 	.word	0x0800e6a9
 800756c:	0800e6d0 	.word	0x0800e6d0
 8007570:	0800e6fa 	.word	0x0800e6fa
 8007574:	0800e721 	.word	0x0800e721
 8007578:	0800e74c 	.word	0x0800e74c
 800757c:	2000823c 	.word	0x2000823c
 8007580:	2000824c 	.word	0x2000824c
 8007584:	20008250 	.word	0x20008250
 8007588:	2000badc 	.word	0x2000badc
 800758c:	20008264 	.word	0x20008264
 8007590:	20008258 	.word	0x20008258
 8007594:	20008254 	.word	0x20008254
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007598:	7d23      	ldrb	r3, [r4, #20]
 800759a:	2b0a      	cmp	r3, #10
 800759c:	d005      	beq.n	80075aa <tcp_input+0x30e>
 800759e:	464b      	mov	r3, r9
 80075a0:	22fe      	movs	r2, #254	; 0xfe
 80075a2:	49a6      	ldr	r1, [pc, #664]	; (800783c <tcp_input+0x5a0>)
 80075a4:	4658      	mov	r0, fp
 80075a6:	f005 f963 	bl	800c870 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80075aa:	6833      	ldr	r3, [r6, #0]
 80075ac:	8b22      	ldrh	r2, [r4, #24]
 80075ae:	8818      	ldrh	r0, [r3, #0]
 80075b0:	4290      	cmp	r0, r2
 80075b2:	d13b      	bne.n	800762c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 80075b4:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80075b6:	885a      	ldrh	r2, [r3, #2]
 80075b8:	428a      	cmp	r2, r1
 80075ba:	d137      	bne.n	800762c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 80075bc:	6861      	ldr	r1, [r4, #4]
 80075be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d132      	bne.n	800762c <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80075cc:	4299      	cmp	r1, r3
 80075ce:	d12d      	bne.n	800762c <tcp_input+0x390>
  if (flags & TCP_RST) {
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	075e      	lsls	r6, r3, #29
 80075d6:	d423      	bmi.n	8007620 <tcp_input+0x384>
 80075d8:	9905      	ldr	r1, [sp, #20]
 80075da:	880e      	ldrh	r6, [r1, #0]
  if (flags & TCP_SYN) {
 80075dc:	0799      	lsls	r1, r3, #30
 80075de:	d512      	bpl.n	8007606 <tcp_input+0x36a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	6819      	ldr	r1, [r3, #0]
 80075e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e6:	1acb      	subs	r3, r1, r3
 80075e8:	d412      	bmi.n	8007610 <tcp_input+0x374>
 80075ea:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 80075ec:	1bdb      	subs	r3, r3, r7
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	dc0e      	bgt.n	8007610 <tcp_input+0x374>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80075f2:	4b93      	ldr	r3, [pc, #588]	; (8007840 <tcp_input+0x5a4>)
 80075f4:	e9cd 2000 	strd	r2, r0, [sp]
 80075f8:	4431      	add	r1, r6
 80075fa:	1d1a      	adds	r2, r3, #4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80075fc:	f8da 0000 	ldr.w	r0, [sl]
 8007600:	f001 f92c 	bl	800885c <tcp_rst>
 8007604:	e00c      	b.n	8007620 <tcp_input+0x384>
  } else if (flags & TCP_FIN) {
 8007606:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
 8007608:	bf42      	ittt	mi
 800760a:	4b8e      	ldrmi	r3, [pc, #568]	; (8007844 <tcp_input+0x5a8>)
 800760c:	681b      	ldrmi	r3, [r3, #0]
 800760e:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8007610:	b136      	cbz	r6, 8007620 <tcp_input+0x384>
    pcb->flags |= TF_ACK_NOW;
 8007612:	7ea3      	ldrb	r3, [r4, #26]
 8007614:	f043 0302 	orr.w	r3, r3, #2
 8007618:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800761a:	4620      	mov	r0, r4
 800761c:	f000 ffa6 	bl	800856c <tcp_output>
  pbuf_free(p);
 8007620:	4628      	mov	r0, r5
}
 8007622:	b009      	add	sp, #36	; 0x24
 8007624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007628:	f7fd be98 	b.w	800535c <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800762c:	68e4      	ldr	r4, [r4, #12]
 800762e:	2c00      	cmp	r4, #0
 8007630:	d1b2      	bne.n	8007598 <tcp_input+0x2fc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007632:	4b85      	ldr	r3, [pc, #532]	; (8007848 <tcp_input+0x5ac>)
      if (lpcb->local_port == tcphdr->dest) {
 8007634:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007636:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007638:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800763c:	4689      	mov	r9, r1
 800763e:	f1b9 0f00 	cmp.w	r9, #0
 8007642:	d111      	bne.n	8007668 <tcp_input+0x3cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007644:	8990      	ldrh	r0, [r2, #12]
 8007646:	f7fd fa4f 	bl	8004ae8 <lwip_htons>
 800764a:	0743      	lsls	r3, r0, #29
 800764c:	d4e8      	bmi.n	8007620 <tcp_input+0x384>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800764e:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007650:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007652:	8810      	ldrh	r0, [r2, #0]
 8007654:	9a03      	ldr	r2, [sp, #12]
 8007656:	6811      	ldr	r1, [r2, #0]
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	9201      	str	r2, [sp, #4]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4b77      	ldr	r3, [pc, #476]	; (8007840 <tcp_input+0x5a4>)
 8007662:	4401      	add	r1, r0
 8007664:	1d1a      	adds	r2, r3, #4
 8007666:	e7c9      	b.n	80075fc <tcp_input+0x360>
      if (lpcb->local_port == tcphdr->dest) {
 8007668:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800766c:	8853      	ldrh	r3, [r2, #2]
 800766e:	4283      	cmp	r3, r0
 8007670:	d107      	bne.n	8007682 <tcp_input+0x3e6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007672:	f8d9 3000 	ldr.w	r3, [r9]
 8007676:	4563      	cmp	r3, ip
 8007678:	f000 82f6 	beq.w	8007c68 <tcp_input+0x9cc>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 82f3 	beq.w	8007c68 <tcp_input+0x9cc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007682:	464c      	mov	r4, r9
 8007684:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8007688:	e7d9      	b.n	800763e <tcp_input+0x3a2>
  } else if (flags & TCP_SYN) {
 800768a:	0799      	lsls	r1, r3, #30
 800768c:	d5c8      	bpl.n	8007620 <tcp_input+0x384>
    npcb = tcp_alloc(pcb->prio);
 800768e:	f899 0015 	ldrb.w	r0, [r9, #21]
 8007692:	f7fe ff3f 	bl	8006514 <tcp_alloc>
    if (npcb == NULL) {
 8007696:	4682      	mov	sl, r0
 8007698:	b950      	cbnz	r0, 80076b0 <tcp_input+0x414>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800769a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0be      	beq.n	8007620 <tcp_input+0x384>
 80076a2:	4601      	mov	r1, r0
 80076a4:	f04f 32ff 	mov.w	r2, #4294967295
 80076a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80076ac:	4798      	blx	r3
 80076ae:	e7b7      	b.n	8007620 <tcp_input+0x384>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80076b0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80076b4:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80076b6:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80076b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80076bc:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80076be:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80076c2:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80076c4:	7813      	ldrb	r3, [r2, #0]
 80076c6:	7852      	ldrb	r2, [r2, #1]
 80076c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076cc:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80076ce:	2303      	movs	r3, #3
 80076d0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80076da:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80076dc:	f7fe ffa6 	bl	800662c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80076e0:	9b03      	ldr	r3, [sp, #12]
    npcb->snd_wl2 = iss;
 80076e2:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80076e6:	681b      	ldr	r3, [r3, #0]
    npcb->snd_nxt = iss;
 80076e8:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80076f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->lastack = iss;
 80076f6:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 80076fa:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80076fe:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 8007702:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007706:	f899 3008 	ldrb.w	r3, [r9, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
 800770e:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f8ca 300c 	str.w	r3, [sl, #12]
 8007718:	f8c7 a000 	str.w	sl, [r7]
 800771c:	f001 fa3e 	bl	8008b9c <tcp_timer_needed>
 8007720:	4b4a      	ldr	r3, [pc, #296]	; (800784c <tcp_input+0x5b0>)
 8007722:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 8007724:	f10a 0032 	add.w	r0, sl, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
 8007728:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800772a:	f7ff fd5d 	bl	80071e8 <tcp_parseopt.isra.1>
    npcb->snd_wnd = tcphdr->wnd;
 800772e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007730:	f8ba 0032 	ldrh.w	r0, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8007734:	89db      	ldrh	r3, [r3, #14]
 8007736:	f8aa 305c 	strh.w	r3, [sl, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800773a:	f10a 0104 	add.w	r1, sl, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800773e:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007742:	f7fe ff7f 	bl	8006644 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007746:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007748:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800774c:	4650      	mov	r0, sl
 800774e:	f000 fe25 	bl	800839c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007752:	b120      	cbz	r0, 800775e <tcp_input+0x4c2>
      tcp_abandon(npcb, 0);
 8007754:	4621      	mov	r1, r4
 8007756:	4650      	mov	r0, sl
 8007758:	f7fe fe36 	bl	80063c8 <tcp_abandon>
 800775c:	e760      	b.n	8007620 <tcp_input+0x384>
    tcp_output(npcb);
 800775e:	4650      	mov	r0, sl
 8007760:	e75c      	b.n	800761c <tcp_input+0x380>
    tcp_input_pcb = pcb;
 8007762:	4b3b      	ldr	r3, [pc, #236]	; (8007850 <tcp_input+0x5b4>)
 8007764:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	781d      	ldrb	r5, [r3, #0]
 800776a:	076a      	lsls	r2, r5, #29
 800776c:	d53d      	bpl.n	80077ea <tcp_input+0x54e>
    if (pcb->state == SYN_SENT) {
 800776e:	7d21      	ldrb	r1, [r4, #20]
 8007770:	2902      	cmp	r1, #2
 8007772:	d123      	bne.n	80077bc <tcp_input+0x520>
      if (ackno == pcb->snd_nxt) {
 8007774:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007776:	f8da 3000 	ldr.w	r3, [sl]
 800777a:	429a      	cmp	r2, r3
 800777c:	d109      	bne.n	8007792 <tcp_input+0x4f6>
      recv_flags |= TF_RESET;
 800777e:	f898 3000 	ldrb.w	r3, [r8]
 8007782:	f043 0308 	orr.w	r3, r3, #8
 8007786:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 800778a:	7ea3      	ldrb	r3, [r4, #26]
 800778c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8007790:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8007792:	f898 3000 	ldrb.w	r3, [r8]
 8007796:	0719      	lsls	r1, r3, #28
 8007798:	f140 81ff 	bpl.w	8007b9a <tcp_input+0x8fe>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800779c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80077a0:	b11b      	cbz	r3, 80077aa <tcp_input+0x50e>
 80077a2:	f06f 010d 	mvn.w	r1, #13
 80077a6:	6920      	ldr	r0, [r4, #16]
 80077a8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80077aa:	4621      	mov	r1, r4
 80077ac:	4829      	ldr	r0, [pc, #164]	; (8007854 <tcp_input+0x5b8>)
 80077ae:	f7fe fc73 	bl	8006098 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80077b2:	4621      	mov	r1, r4
 80077b4:	2001      	movs	r0, #1
 80077b6:	f7fd fc3f 	bl	8005038 <memp_free>
 80077ba:	e6a7      	b.n	800750c <tcp_input+0x270>
      if (seqno == pcb->rcv_nxt) {
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d007      	beq.n	80077d6 <tcp_input+0x53a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	d4e3      	bmi.n	8007792 <tcp_input+0x4f6>
 80077ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dcdf      	bgt.n	8007792 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 80077d2:	7ea3      	ldrb	r3, [r4, #26]
 80077d4:	e011      	b.n	80077fa <tcp_input+0x55e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d1d1      	bne.n	800777e <tcp_input+0x4e2>
 80077da:	4b1f      	ldr	r3, [pc, #124]	; (8007858 <tcp_input+0x5bc>)
 80077dc:	491f      	ldr	r1, [pc, #124]	; (800785c <tcp_input+0x5c0>)
 80077de:	4820      	ldr	r0, [pc, #128]	; (8007860 <tcp_input+0x5c4>)
 80077e0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80077e4:	f005 f844 	bl	800c870 <iprintf>
 80077e8:	e7c9      	b.n	800777e <tcp_input+0x4e2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80077ea:	f015 0202 	ands.w	r2, r5, #2
 80077ee:	7ea3      	ldrb	r3, [r4, #26]
 80077f0:	d006      	beq.n	8007800 <tcp_input+0x564>
 80077f2:	7d21      	ldrb	r1, [r4, #20]
 80077f4:	3902      	subs	r1, #2
 80077f6:	2901      	cmp	r1, #1
 80077f8:	d902      	bls.n	8007800 <tcp_input+0x564>
      tcp_ack_now(pcb);
 80077fa:	f043 0302 	orr.w	r3, r3, #2
 80077fe:	e7c7      	b.n	8007790 <tcp_input+0x4f4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007800:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 8007802:	bf58      	it	pl
 8007804:	4b0f      	ldrpl	r3, [pc, #60]	; (8007844 <tcp_input+0x5a8>)
 8007806:	9207      	str	r2, [sp, #28]
 8007808:	bf5c      	itt	pl
 800780a:	681b      	ldrpl	r3, [r3, #0]
 800780c:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8007814:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007818:	f7ff fce6 	bl	80071e8 <tcp_parseopt.isra.1>
  switch (pcb->state) {
 800781c:	7d23      	ldrb	r3, [r4, #20]
 800781e:	9a07      	ldr	r2, [sp, #28]
 8007820:	3b02      	subs	r3, #2
 8007822:	2b07      	cmp	r3, #7
 8007824:	d8b5      	bhi.n	8007792 <tcp_input+0x4f6>
 8007826:	e8df f013 	tbh	[pc, r3, lsl #1]
 800782a:	001d      	.short	0x001d
 800782c:	0109009f 	.word	0x0109009f
 8007830:	0157010d 	.word	0x0157010d
 8007834:	01700109 	.word	0x01700109
 8007838:	019f      	.short	0x019f
 800783a:	bf00      	nop
 800783c:	0800e776 	.word	0x0800e776
 8007840:	200083b4 	.word	0x200083b4
 8007844:	2000bacc 	.word	0x2000bacc
 8007848:	2000bad0 	.word	0x2000bad0
 800784c:	2000bac4 	.word	0x2000bac4
 8007850:	2000badc 	.word	0x2000badc
 8007854:	2000bac8 	.word	0x2000bac8
 8007858:	0800e824 	.word	0x0800e824
 800785c:	0800e7a3 	.word	0x0800e7a3
 8007860:	0800d7e1 	.word	0x0800d7e1
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007864:	f005 0312 	and.w	r3, r5, #18
 8007868:	2b12      	cmp	r3, #18
 800786a:	d15f      	bne.n	800792c <tcp_input+0x690>
        && (ackno == pcb->lastack + 1)) {
 800786c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800786e:	f8da 3000 	ldr.w	r3, [sl]
 8007872:	3201      	adds	r2, #1
 8007874:	429a      	cmp	r2, r3
 8007876:	d159      	bne.n	800792c <tcp_input+0x690>
      pcb->rcv_nxt = seqno + 1;
 8007878:	9b03      	ldr	r3, [sp, #12]
      pcb->lastack = ackno;
 800787a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800787c:	681b      	ldr	r3, [r3, #0]
      pcb->snd_wnd = tcphdr->wnd;
 800787e:	6832      	ldr	r2, [r6, #0]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007880:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8007882:	1c59      	adds	r1, r3, #1
 8007884:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007886:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007888:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800788a:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800788c:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800788e:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8007890:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007894:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8007898:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800789a:	18e1      	adds	r1, r4, r3
 800789c:	f7fe fed2 	bl	8006644 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80078a0:	f241 121c 	movw	r2, #4380	; 0x111c
 80078a4:	0043      	lsls	r3, r0, #1
 80078a6:	4293      	cmp	r3, r2
 80078a8:	bf38      	it	cc
 80078aa:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80078ac:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80078ae:	0080      	lsls	r0, r0, #2
 80078b0:	4283      	cmp	r3, r0
 80078b2:	bf28      	it	cs
 80078b4:	4603      	movcs	r3, r0
 80078b6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80078ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80078be:	b933      	cbnz	r3, 80078ce <tcp_input+0x632>
 80078c0:	4ba1      	ldr	r3, [pc, #644]	; (8007b48 <tcp_input+0x8ac>)
 80078c2:	49a2      	ldr	r1, [pc, #648]	; (8007b4c <tcp_input+0x8b0>)
 80078c4:	48a2      	ldr	r0, [pc, #648]	; (8007b50 <tcp_input+0x8b4>)
 80078c6:	f240 321a 	movw	r2, #794	; 0x31a
 80078ca:	f004 ffd1 	bl	800c870 <iprintf>
      --pcb->snd_queuelen;
 80078ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80078d2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80078d4:	3b01      	subs	r3, #1
 80078d6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80078da:	b9fd      	cbnz	r5, 800791c <tcp_input+0x680>
        rseg = pcb->unsent;
 80078dc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80078de:	b935      	cbnz	r5, 80078ee <tcp_input+0x652>
 80078e0:	4b99      	ldr	r3, [pc, #612]	; (8007b48 <tcp_input+0x8ac>)
 80078e2:	499c      	ldr	r1, [pc, #624]	; (8007b54 <tcp_input+0x8b8>)
 80078e4:	489a      	ldr	r0, [pc, #616]	; (8007b50 <tcp_input+0x8b4>)
 80078e6:	f240 3222 	movw	r2, #802	; 0x322
 80078ea:	f004 ffc1 	bl	800c870 <iprintf>
        pcb->unsent = rseg->next;
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 80078f2:	4628      	mov	r0, r5
 80078f4:	f7fe f942 	bl	8005b7c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80078f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078fa:	b993      	cbnz	r3, 8007922 <tcp_input+0x686>
        pcb->rtime = -1;
 80078fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007900:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007902:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007906:	2b00      	cmp	r3, #0
 8007908:	f43f af63 	beq.w	80077d2 <tcp_input+0x536>
 800790c:	2200      	movs	r2, #0
 800790e:	4621      	mov	r1, r4
 8007910:	6920      	ldr	r0, [r4, #16]
 8007912:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8007914:	300d      	adds	r0, #13
 8007916:	f47f af5c 	bne.w	80077d2 <tcp_input+0x536>
 800791a:	e5f7      	b.n	800750c <tcp_input+0x270>
        pcb->unacked = rseg->next;
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007920:	e7e7      	b.n	80078f2 <tcp_input+0x656>
        pcb->rtime = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8007926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800792a:	e7ea      	b.n	8007902 <tcp_input+0x666>
    else if (flags & TCP_ACK) {
 800792c:	06e8      	lsls	r0, r5, #27
 800792e:	f57f af30 	bpl.w	8007792 <tcp_input+0x4f6>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007932:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007934:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007936:	8810      	ldrh	r0, [r2, #0]
 8007938:	9a03      	ldr	r2, [sp, #12]
 800793a:	6811      	ldr	r1, [r2, #0]
 800793c:	881a      	ldrh	r2, [r3, #0]
 800793e:	9201      	str	r2, [sp, #4]
 8007940:	885b      	ldrh	r3, [r3, #2]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	4b84      	ldr	r3, [pc, #528]	; (8007b58 <tcp_input+0x8bc>)
 8007946:	4401      	add	r1, r0
 8007948:	1d1a      	adds	r2, r3, #4
 800794a:	f8da 0000 	ldr.w	r0, [sl]
 800794e:	f000 ff85 	bl	800885c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007952:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007956:	2b05      	cmp	r3, #5
 8007958:	f63f af1b 	bhi.w	8007792 <tcp_input+0x4f6>
        pcb->rtime = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007960:	4620      	mov	r0, r4
 8007962:	f000 ffd5 	bl	8008910 <tcp_rexmit_rto>
 8007966:	e714      	b.n	8007792 <tcp_input+0x4f6>
    if (flags & TCP_ACK) {
 8007968:	06e9      	lsls	r1, r5, #27
 800796a:	d559      	bpl.n	8007a20 <tcp_input+0x784>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800796c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800796e:	f8da 0000 	ldr.w	r0, [sl]
 8007972:	43db      	mvns	r3, r3
 8007974:	42c3      	cmn	r3, r0
 8007976:	d444      	bmi.n	8007a02 <tcp_input+0x766>
 8007978:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800797a:	1ac3      	subs	r3, r0, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	dc40      	bgt.n	8007a02 <tcp_input+0x766>
        pcb->state = ESTABLISHED;
 8007980:	2304      	movs	r3, #4
 8007982:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007984:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007986:	b143      	cbz	r3, 800799a <tcp_input+0x6fe>
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	b933      	cbnz	r3, 800799a <tcp_input+0x6fe>
 800798c:	4b6e      	ldr	r3, [pc, #440]	; (8007b48 <tcp_input+0x8ac>)
 800798e:	4973      	ldr	r1, [pc, #460]	; (8007b5c <tcp_input+0x8c0>)
 8007990:	486f      	ldr	r0, [pc, #444]	; (8007b50 <tcp_input+0x8b4>)
 8007992:	f240 3251 	movw	r2, #849	; 0x351
 8007996:	f004 ff6b 	bl	800c870 <iprintf>
        if (pcb->listener == NULL) {
 800799a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800799c:	b91b      	cbnz	r3, 80079a6 <tcp_input+0x70a>
            tcp_abort(pcb);
 800799e:	4620      	mov	r0, r4
 80079a0:	f7fe fd88 	bl	80064b4 <tcp_abort>
            goto aborted;
 80079a4:	e5b2      	b.n	800750c <tcp_input+0x270>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f8      	beq.n	800799e <tcp_input+0x702>
 80079ac:	2200      	movs	r2, #0
 80079ae:	4621      	mov	r1, r4
 80079b0:	6920      	ldr	r0, [r4, #16]
 80079b2:	4798      	blx	r3
        if (err != ERR_OK) {
 80079b4:	b118      	cbz	r0, 80079be <tcp_input+0x722>
          if (err != ERR_ABRT) {
 80079b6:	300d      	adds	r0, #13
 80079b8:	f43f ada8 	beq.w	800750c <tcp_input+0x270>
 80079bc:	e7ef      	b.n	800799e <tcp_input+0x702>
        tcp_receive(pcb);
 80079be:	4620      	mov	r0, r4
 80079c0:	f7fe ff34 	bl	800682c <tcp_receive>
        if (recv_acked != 0) {
 80079c4:	f8b9 3000 	ldrh.w	r3, [r9]
 80079c8:	b113      	cbz	r3, 80079d0 <tcp_input+0x734>
          recv_acked--;
 80079ca:	3b01      	subs	r3, #1
 80079cc:	f8a9 3000 	strh.w	r3, [r9]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80079d0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80079d2:	f241 111c 	movw	r1, #4380	; 0x111c
 80079d6:	0053      	lsls	r3, r2, #1
 80079d8:	428b      	cmp	r3, r1
 80079da:	bf38      	it	cc
 80079dc:	460b      	movcc	r3, r1
 80079de:	0092      	lsls	r2, r2, #2
 80079e0:	4293      	cmp	r3, r2
 80079e2:	bf28      	it	cs
 80079e4:	4613      	movcs	r3, r2
 80079e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80079ea:	f898 3000 	ldrb.w	r3, [r8]
 80079ee:	069b      	lsls	r3, r3, #26
 80079f0:	f57f aecf 	bpl.w	8007792 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 80079f4:	7ea3      	ldrb	r3, [r4, #26]
 80079f6:	f043 0302 	orr.w	r3, r3, #2
 80079fa:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80079fc:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 80079fe:	7523      	strb	r3, [r4, #20]
 8007a00:	e6c7      	b.n	8007792 <tcp_input+0x4f6>
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a02:	9a05      	ldr	r2, [sp, #20]
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a04:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a06:	8815      	ldrh	r5, [r2, #0]
 8007a08:	9a03      	ldr	r2, [sp, #12]
 8007a0a:	6811      	ldr	r1, [r2, #0]
 8007a0c:	881a      	ldrh	r2, [r3, #0]
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4b50      	ldr	r3, [pc, #320]	; (8007b58 <tcp_input+0x8bc>)
 8007a16:	4429      	add	r1, r5
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	f000 ff1f 	bl	800885c <tcp_rst>
 8007a1e:	e6b8      	b.n	8007792 <tcp_input+0x4f6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	f43f aeb6 	beq.w	8007792 <tcp_input+0x4f6>
 8007a26:	9a03      	ldr	r2, [sp, #12]
 8007a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	f47f aeaf 	bne.w	8007792 <tcp_input+0x4f6>
      tcp_rexmit(pcb);
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 ff87 	bl	8008948 <tcp_rexmit>
 8007a3a:	e6aa      	b.n	8007792 <tcp_input+0x4f6>
    tcp_receive(pcb);
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f7fe fef5 	bl	800682c <tcp_receive>
 8007a42:	e7d2      	b.n	80079ea <tcp_input+0x74e>
    tcp_receive(pcb);
 8007a44:	4620      	mov	r0, r4
 8007a46:	f7fe fef1 	bl	800682c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007a4a:	f898 3000 	ldrb.w	r3, [r8]
 8007a4e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a52:	9b04      	ldr	r3, [sp, #16]
 8007a54:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8007a56:	d030      	beq.n	8007aba <tcp_input+0x81e>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a58:	f013 0f10 	tst.w	r3, #16
 8007a5c:	7ea3      	ldrb	r3, [r4, #26]
 8007a5e:	d027      	beq.n	8007ab0 <tcp_input+0x814>
 8007a60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007a62:	f8da 2000 	ldr.w	r2, [sl]
 8007a66:	4291      	cmp	r1, r2
 8007a68:	d122      	bne.n	8007ab0 <tcp_input+0x814>
 8007a6a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007a6c:	bb02      	cbnz	r2, 8007ab0 <tcp_input+0x814>
        tcp_ack_now(pcb);
 8007a6e:	f043 0302 	orr.w	r3, r3, #2
 8007a72:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7fe f90f 	bl	8005c98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	d109      	bne.n	8007a94 <tcp_input+0x7f8>
      TCP_RMV_ACTIVE(pcb);
 8007a80:	68e3      	ldr	r3, [r4, #12]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	e008      	b.n	8007a98 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	4294      	cmp	r4, r2
 8007a8a:	d102      	bne.n	8007a92 <tcp_input+0x7f6>
      TCP_RMV_ACTIVE(pcb);
 8007a8c:	68e2      	ldr	r2, [r4, #12]
 8007a8e:	60da      	str	r2, [r3, #12]
 8007a90:	e002      	b.n	8007a98 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 8007a92:	4613      	mov	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f6      	bne.n	8007a86 <tcp_input+0x7ea>
      TCP_RMV_ACTIVE(pcb);
 8007a98:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <tcp_input+0x8c4>)
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007a9e:	230a      	movs	r3, #10
 8007aa0:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007aa2:	4b30      	ldr	r3, [pc, #192]	; (8007b64 <tcp_input+0x8c8>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	60e2      	str	r2, [r4, #12]
 8007aa8:	601c      	str	r4, [r3, #0]
 8007aaa:	f001 f877 	bl	8008b9c <tcp_timer_needed>
 8007aae:	e670      	b.n	8007792 <tcp_input+0x4f6>
        tcp_ack_now(pcb);
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	e7a1      	b.n	80079fe <tcp_input+0x762>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007aba:	06df      	lsls	r7, r3, #27
 8007abc:	f57f ae69 	bpl.w	8007792 <tcp_input+0x4f6>
 8007ac0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ac2:	f8da 3000 	ldr.w	r3, [sl]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	f47f ae63 	bne.w	8007792 <tcp_input+0x4f6>
 8007acc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f47f ae5f 	bne.w	8007792 <tcp_input+0x4f6>
      pcb->state = FIN_WAIT_2;
 8007ad4:	2306      	movs	r3, #6
 8007ad6:	e792      	b.n	80079fe <tcp_input+0x762>
    tcp_receive(pcb);
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f7fe fea7 	bl	800682c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007ade:	f898 3000 	ldrb.w	r3, [r8]
 8007ae2:	069e      	lsls	r6, r3, #26
 8007ae4:	f57f ae55 	bpl.w	8007792 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8007ae8:	7ea3      	ldrb	r3, [r4, #26]
 8007aea:	f043 0302 	orr.w	r3, r3, #2
 8007aee:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8007af0:	4620      	mov	r0, r4
 8007af2:	f7fe f8d1 	bl	8005c98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	429c      	cmp	r4, r3
 8007afa:	d0c1      	beq.n	8007a80 <tcp_input+0x7e4>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0cb      	beq.n	8007a98 <tcp_input+0x7fc>
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	4294      	cmp	r4, r2
 8007b04:	d0c2      	beq.n	8007a8c <tcp_input+0x7f0>
 8007b06:	4613      	mov	r3, r2
 8007b08:	e7f8      	b.n	8007afc <tcp_input+0x860>
    tcp_receive(pcb);
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f7fe fe8e 	bl	800682c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	06dd      	lsls	r5, r3, #27
 8007b16:	f57f ae3c 	bpl.w	8007792 <tcp_input+0x4f6>
 8007b1a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b1c:	f8da 3000 	ldr.w	r3, [sl]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	f47f ae36 	bne.w	8007792 <tcp_input+0x4f6>
 8007b26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f ae32 	bne.w	8007792 <tcp_input+0x4f6>
      tcp_pcb_purge(pcb);
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7fe f8b2 	bl	8005c98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d0a2      	beq.n	8007a80 <tcp_input+0x7e4>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ac      	beq.n	8007a98 <tcp_input+0x7fc>
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	4294      	cmp	r4, r2
 8007b42:	d0a3      	beq.n	8007a8c <tcp_input+0x7f0>
 8007b44:	4613      	mov	r3, r2
 8007b46:	e7f8      	b.n	8007b3a <tcp_input+0x89e>
 8007b48:	0800e824 	.word	0x0800e824
 8007b4c:	0800e7c3 	.word	0x0800e7c3
 8007b50:	0800d7e1 	.word	0x0800d7e1
 8007b54:	0800e7d9 	.word	0x0800e7d9
 8007b58:	200083b4 	.word	0x200083b4
 8007b5c:	0800e7ec 	.word	0x0800e7ec
 8007b60:	2000bac4 	.word	0x2000bac4
 8007b64:	2000bad8 	.word	0x2000bad8
    tcp_receive(pcb);
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7fe fe5f 	bl	800682c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	06d8      	lsls	r0, r3, #27
 8007b74:	f57f ae0d 	bpl.w	8007792 <tcp_input+0x4f6>
 8007b78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b7a:	f8da 3000 	ldr.w	r3, [sl]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	f47f ae07 	bne.w	8007792 <tcp_input+0x4f6>
 8007b84:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f47f ae03 	bne.w	8007792 <tcp_input+0x4f6>
      recv_flags |= TF_CLOSED;
 8007b8c:	f898 3000 	ldrb.w	r3, [r8]
 8007b90:	f043 0310 	orr.w	r3, r3, #16
 8007b94:	f888 3000 	strb.w	r3, [r8]
 8007b98:	e5fb      	b.n	8007792 <tcp_input+0x4f6>
        if (recv_acked > 0) {
 8007b9a:	f8b9 2000 	ldrh.w	r2, [r9]
 8007b9e:	b122      	cbz	r2, 8007baa <tcp_input+0x90e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007ba0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007ba2:	b9f3      	cbnz	r3, 8007be2 <tcp_input+0x946>
          recv_acked = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f8a9 3000 	strh.w	r3, [r9]
        if (tcp_input_delayed_close(pcb)) {
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff fb56 	bl	800725c <tcp_input_delayed_close>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f47f acab 	bne.w	800750c <tcp_input+0x270>
        if (recv_data != NULL) {
 8007bb6:	f8db 3000 	ldr.w	r3, [fp]
 8007bba:	b333      	cbz	r3, 8007c0a <tcp_input+0x96e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007bbc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007bbe:	b133      	cbz	r3, 8007bce <tcp_input+0x932>
 8007bc0:	4b3b      	ldr	r3, [pc, #236]	; (8007cb0 <tcp_input+0xa14>)
 8007bc2:	493c      	ldr	r1, [pc, #240]	; (8007cb4 <tcp_input+0xa18>)
 8007bc4:	483c      	ldr	r0, [pc, #240]	; (8007cb8 <tcp_input+0xa1c>)
 8007bc6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007bca:	f004 fe51 	bl	800c870 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007bce:	7ea3      	ldrb	r3, [r4, #26]
 8007bd0:	f8db 2000 	ldr.w	r2, [fp]
 8007bd4:	f013 0310 	ands.w	r3, r3, #16
 8007bd8:	d009      	beq.n	8007bee <tcp_input+0x952>
            pbuf_free(recv_data);
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f7fd fbbe 	bl	800535c <pbuf_free>
 8007be0:	e6dd      	b.n	800799e <tcp_input+0x702>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007be2:	4621      	mov	r1, r4
 8007be4:	6920      	ldr	r0, [r4, #16]
 8007be6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8007be8:	300d      	adds	r0, #13
 8007bea:	d1db      	bne.n	8007ba4 <tcp_input+0x908>
 8007bec:	e48e      	b.n	800750c <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007bee:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8007bf2:	b30d      	cbz	r5, 8007c38 <tcp_input+0x99c>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	6920      	ldr	r0, [r4, #16]
 8007bf8:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8007bfa:	f110 0f0d 	cmn.w	r0, #13
 8007bfe:	f43f ac85 	beq.w	800750c <tcp_input+0x270>
          if (err != ERR_OK) {
 8007c02:	b110      	cbz	r0, 8007c0a <tcp_input+0x96e>
            pcb->refused_data = recv_data;
 8007c04:	f8db 3000 	ldr.w	r3, [fp]
 8007c08:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8007c0a:	f898 3000 	ldrb.w	r3, [r8]
 8007c0e:	069a      	lsls	r2, r3, #26
 8007c10:	d505      	bpl.n	8007c1e <tcp_input+0x982>
          if (pcb->refused_data != NULL) {
 8007c12:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007c14:	b1b3      	cbz	r3, 8007c44 <tcp_input+0x9a8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007c16:	7b5a      	ldrb	r2, [r3, #13]
 8007c18:	f042 0220 	orr.w	r2, r2, #32
 8007c1c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8007c1e:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <tcp_input+0xa20>)
 8007c20:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8007c22:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8007c24:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007c26:	f7ff fb19 	bl	800725c <tcp_input_delayed_close>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f47f ac6e 	bne.w	800750c <tcp_input+0x270>
        tcp_output(pcb);
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 fc9b 	bl	800856c <tcp_output>
 8007c36:	e469      	b.n	800750c <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007c38:	462b      	mov	r3, r5
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7fe fb2b 	bl	8006298 <tcp_recv_null>
 8007c42:	e7da      	b.n	8007bfa <tcp_input+0x95e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007c46:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8007c4e:	bf1c      	itt	ne
 8007c50:	3301      	addne	r3, #1
 8007c52:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007c54:	2d00      	cmp	r5, #0
 8007c56:	d0e2      	beq.n	8007c1e <tcp_input+0x982>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	6920      	ldr	r0, [r4, #16]
 8007c60:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8007c62:	300d      	adds	r0, #13
 8007c64:	d1db      	bne.n	8007c1e <tcp_input+0x982>
aborted:
 8007c66:	e451      	b.n	800750c <tcp_input+0x270>
      if (prev != NULL) {
 8007c68:	b13c      	cbz	r4, 8007c7a <tcp_input+0x9de>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007c6a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007c6e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c70:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <tcp_input+0xa24>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007c72:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c76:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	075c      	lsls	r4, r3, #29
 8007c80:	f53f acce 	bmi.w	8007620 <tcp_input+0x384>
  if (flags & TCP_ACK) {
 8007c84:	f013 0410 	ands.w	r4, r3, #16
 8007c88:	f43f acff 	beq.w	800768a <tcp_input+0x3ee>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	881c      	ldrh	r4, [r3, #0]
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	8813      	ldrh	r3, [r2, #0]
 8007c96:	e9cd 0300 	strd	r0, r3, [sp]
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <tcp_input+0xa28>)
 8007c9c:	4421      	add	r1, r4
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	e4ac      	b.n	80075fc <tcp_input+0x360>
      if (prev != NULL) {
 8007ca2:	f1b9 0f00 	cmp.w	r9, #0
 8007ca6:	f47f abef 	bne.w	8007488 <tcp_input+0x1ec>
 8007caa:	f7ff bbfc 	b.w	80074a6 <tcp_input+0x20a>
 8007cae:	bf00      	nop
 8007cb0:	0800e824 	.word	0x0800e824
 8007cb4:	0800e80a 	.word	0x0800e80a
 8007cb8:	0800d7e1 	.word	0x0800d7e1
 8007cbc:	2000badc 	.word	0x2000badc
 8007cc0:	2000bad0 	.word	0x2000bad0
 8007cc4:	200083b4 	.word	0x200083b4

08007cc8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8007cc8:	4a02      	ldr	r2, [pc, #8]	; (8007cd4 <tcp_trigger_input_pcb_close+0xc>)
 8007cca:	7813      	ldrb	r3, [r2, #0]
 8007ccc:	f043 0310 	orr.w	r3, r3, #16
 8007cd0:	7013      	strb	r3, [r2, #0]
}
 8007cd2:	4770      	bx	lr
 8007cd4:	20008254 	.word	0x20008254

08007cd8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8007cdc:	4294      	cmp	r4, r2
{
 8007cde:	461e      	mov	r6, r3
 8007ce0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8007ce4:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8007ce6:	d228      	bcs.n	8007d3a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8007ce8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8007cec:	07ad      	lsls	r5, r5, #30
 8007cee:	d407      	bmi.n	8007d00 <tcp_pbuf_prealloc+0x28>
 8007cf0:	7e9d      	ldrb	r5, [r3, #26]
 8007cf2:	066d      	lsls	r5, r5, #25
 8007cf4:	d421      	bmi.n	8007d3a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8007cf6:	b119      	cbz	r1, 8007d00 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8007cf8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007cfa:	b909      	cbnz	r1, 8007d00 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8007cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cfe:	b1e3      	cbz	r3, 8007d3a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8007d00:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8007d04:	f023 0103 	bic.w	r1, r3, #3
 8007d08:	428a      	cmp	r2, r1
 8007d0a:	bf28      	it	cs
 8007d0c:	460a      	movcs	r2, r1
 8007d0e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8007d10:	2200      	movs	r2, #0
 8007d12:	f7fd fb8b 	bl	800542c <pbuf_alloc>
  if (p == NULL) {
 8007d16:	4605      	mov	r5, r0
 8007d18:	b168      	cbz	r0, 8007d36 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8007d1a:	6803      	ldr	r3, [r0, #0]
 8007d1c:	b133      	cbz	r3, 8007d2c <tcp_pbuf_prealloc+0x54>
 8007d1e:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <tcp_pbuf_prealloc+0x68>)
 8007d20:	4908      	ldr	r1, [pc, #32]	; (8007d44 <tcp_pbuf_prealloc+0x6c>)
 8007d22:	4809      	ldr	r0, [pc, #36]	; (8007d48 <tcp_pbuf_prealloc+0x70>)
 8007d24:	f44f 7288 	mov.w	r2, #272	; 0x110
 8007d28:	f004 fda2 	bl	800c870 <iprintf>
  *oversize = p->len - length;
 8007d2c:	896b      	ldrh	r3, [r5, #10]
 8007d2e:	1b1b      	subs	r3, r3, r4
 8007d30:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8007d32:	812c      	strh	r4, [r5, #8]
 8007d34:	816c      	strh	r4, [r5, #10]
  return p;
}
 8007d36:	4628      	mov	r0, r5
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	e7e8      	b.n	8007d10 <tcp_pbuf_prealloc+0x38>
 8007d3e:	bf00      	nop
 8007d40:	0800eb27 	.word	0x0800eb27
 8007d44:	0800eb5a 	.word	0x0800eb5a
 8007d48:	0800d7e1 	.word	0x0800d7e1

08007d4c <tcp_create_segment>:
{
 8007d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4681      	mov	r9, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007d52:	2003      	movs	r0, #3
{
 8007d54:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 8007d58:	460e      	mov	r6, r1
 8007d5a:	4690      	mov	r8, r2
 8007d5c:	469a      	mov	sl, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007d5e:	f7fd f94f 	bl	8005000 <memp_malloc>
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007d62:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8007d66:	b2fd      	uxtb	r5, r7
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007d68:	4604      	mov	r4, r0
 8007d6a:	b928      	cbnz	r0, 8007d78 <tcp_create_segment+0x2c>
    pbuf_free(p);
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7fd faf5 	bl	800535c <pbuf_free>
}
 8007d72:	4620      	mov	r0, r4
 8007d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  seg->next = NULL;
 8007d78:	2300      	movs	r3, #0
  seg->flags = optflags;
 8007d7a:	f880 b00a 	strb.w	fp, [r0, #10]
  seg->p = p;
 8007d7e:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007d82:	8933      	ldrh	r3, [r6, #8]
 8007d84:	b2bf      	uxth	r7, r7
 8007d86:	42bb      	cmp	r3, r7
 8007d88:	d205      	bcs.n	8007d96 <tcp_create_segment+0x4a>
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <tcp_create_segment+0xac>)
 8007d8c:	491b      	ldr	r1, [pc, #108]	; (8007dfc <tcp_create_segment+0xb0>)
 8007d8e:	481c      	ldr	r0, [pc, #112]	; (8007e00 <tcp_create_segment+0xb4>)
 8007d90:	22ba      	movs	r2, #186	; 0xba
 8007d92:	f004 fd6d 	bl	800c870 <iprintf>
  seg->len = p->tot_len - optlen;
 8007d96:	8933      	ldrh	r3, [r6, #8]
 8007d98:	1bdf      	subs	r7, r3, r7
 8007d9a:	8127      	strh	r7, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8007d9c:	2114      	movs	r1, #20
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7fd fad6 	bl	8005350 <pbuf_header>
 8007da4:	4607      	mov	r7, r0
 8007da6:	b120      	cbz	r0, 8007db2 <tcp_create_segment+0x66>
    tcp_seg_free(seg);
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7fd fee7 	bl	8005b7c <tcp_seg_free>
    return NULL;
 8007dae:	2400      	movs	r4, #0
 8007db0:	e7df      	b.n	8007d72 <tcp_create_segment+0x26>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007db2:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007db4:	f8b9 0016 	ldrh.w	r0, [r9, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007db8:	685e      	ldr	r6, [r3, #4]
 8007dba:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007dbc:	f7fc fe94 	bl	8004ae8 <lwip_htons>
 8007dc0:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007dc2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8007dc6:	68e6      	ldr	r6, [r4, #12]
 8007dc8:	f7fc fe8e 	bl	8004ae8 <lwip_htons>
 8007dcc:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007dce:	4650      	mov	r0, sl
 8007dd0:	68e6      	ldr	r6, [r4, #12]
 8007dd2:	f7fc fe8c 	bl	8004aee <lwip_htonl>
 8007dd6:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007dd8:	02a8      	lsls	r0, r5, #10
 8007dda:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 8007dde:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8007de2:	ea40 0008 	orr.w	r0, r0, r8
 8007de6:	68e6      	ldr	r6, [r4, #12]
 8007de8:	f7fc fe7e 	bl	8004ae8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8007dec:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007dee:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8007df0:	749f      	strb	r7, [r3, #18]
 8007df2:	74df      	strb	r7, [r3, #19]
  return seg;
 8007df4:	e7bd      	b.n	8007d72 <tcp_create_segment+0x26>
 8007df6:	bf00      	nop
 8007df8:	0800eb27 	.word	0x0800eb27
 8007dfc:	0800e9af 	.word	0x0800e9af
 8007e00:	0800d7e1 	.word	0x0800d7e1

08007e04 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007e04:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007e08:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007e0e:	2001      	movs	r0, #1
 8007e10:	2200      	movs	r2, #0
 8007e12:	f7fd fb0b 	bl	800542c <pbuf_alloc>
  if (p != NULL) {
 8007e16:	4606      	mov	r6, r0
 8007e18:	b340      	cbz	r0, 8007e6c <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007e1a:	8943      	ldrh	r3, [r0, #10]
 8007e1c:	2b13      	cmp	r3, #19
 8007e1e:	d805      	bhi.n	8007e2c <tcp_output_alloc_header.constprop.0+0x28>
 8007e20:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <tcp_output_alloc_header.constprop.0+0x6c>)
 8007e22:	4914      	ldr	r1, [pc, #80]	; (8007e74 <tcp_output_alloc_header.constprop.0+0x70>)
 8007e24:	4814      	ldr	r0, [pc, #80]	; (8007e78 <tcp_output_alloc_header.constprop.0+0x74>)
 8007e26:	2273      	movs	r2, #115	; 0x73
 8007e28:	f004 fd22 	bl	800c870 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8007e2c:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8007e2e:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8007e30:	f7fc fe5a 	bl	8004ae8 <lwip_htons>
 8007e34:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007e36:	8b28      	ldrh	r0, [r5, #24]
 8007e38:	f7fc fe56 	bl	8004ae8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8007e3c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007e3e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007e40:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007e42:	f7fc fe54 	bl	8004aee <lwip_htonl>
 8007e46:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8007e48:	f245 0010 	movw	r0, #20496	; 0x5010
 8007e4c:	f7fc fe4c 	bl	8004ae8 <lwip_htons>
 8007e50:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007e52:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8007e54:	f7fc fe48 	bl	8004ae8 <lwip_htons>
    tcphdr->chksum = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	7423      	strb	r3, [r4, #16]
 8007e5c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8007e5e:	74a3      	strb	r3, [r4, #18]
 8007e60:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007e62:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8007e64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007e66:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007e68:	4413      	add	r3, r2
 8007e6a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e70:	0800eb27 	.word	0x0800eb27
 8007e74:	0800eaf9 	.word	0x0800eaf9
 8007e78:	0800d7e1 	.word	0x0800d7e1

08007e7c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	b091      	sub	sp, #68	; 0x44
 8007e82:	4604      	mov	r4, r0
 8007e84:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8007e8c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 8007e94:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8007e96:	9a07      	ldr	r2, [sp, #28]
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	bf28      	it	cs
 8007e9e:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf18      	it	ne
 8007ea4:	461a      	movne	r2, r3
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8007ea6:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8007eaa:	b959      	cbnz	r1, 8007ec4 <tcp_write+0x48>
 8007eac:	4ba4      	ldr	r3, [pc, #656]	; (8008140 <tcp_write+0x2c4>)
 8007eae:	49a5      	ldr	r1, [pc, #660]	; (8008144 <tcp_write+0x2c8>)
 8007eb0:	48a5      	ldr	r0, [pc, #660]	; (8008148 <tcp_write+0x2cc>)
 8007eb2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8007eb6:	f004 fcdb 	bl	800c870 <iprintf>
 8007eba:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 8007ebe:	b011      	add	sp, #68	; 0x44
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 8007ec4:	7d03      	ldrb	r3, [r0, #20]
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d003      	beq.n	8007ed2 <tcp_write+0x56>
      (pcb->state != CLOSE_WAIT) &&
 8007eca:	3b02      	subs	r3, #2
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	f200 824c 	bhi.w	800836a <tcp_write+0x4ee>
  } else if (len == 0) {
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	b1eb      	cbz	r3, 8007f12 <tcp_write+0x96>
  if (len > pcb->snd_buf) {
 8007ed6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007eda:	9a05      	ldr	r2, [sp, #20]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d206      	bcs.n	8007eee <tcp_write+0x72>
    pcb->flags |= TF_NAGLEMEMERR;
 8007ee0:	7ea3      	ldrb	r3, [r4, #26]
 8007ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ee6:	76a3      	strb	r3, [r4, #26]
  return ERR_MEM;
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	e7e7      	b.n	8007ebe <tcp_write+0x42>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8007eee:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8007ef2:	2a08      	cmp	r2, #8
 8007ef4:	d8f4      	bhi.n	8007ee0 <tcp_write+0x64>
 8007ef6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	f000 809f 	beq.w	800803c <tcp_write+0x1c0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8007efe:	b943      	cbnz	r3, 8007f12 <tcp_write+0x96>
 8007f00:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007f02:	b933      	cbnz	r3, 8007f12 <tcp_write+0x96>
 8007f04:	4b8e      	ldr	r3, [pc, #568]	; (8008140 <tcp_write+0x2c4>)
 8007f06:	4991      	ldr	r1, [pc, #580]	; (800814c <tcp_write+0x2d0>)
 8007f08:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8007f0c:	488e      	ldr	r0, [pc, #568]	; (8008148 <tcp_write+0x2cc>)
 8007f0e:	f004 fcaf 	bl	800c870 <iprintf>
  if (pcb->unsent != NULL) {
 8007f12:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8007f16:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007f1a:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8007f1c:	f1b8 0f00 	cmp.w	r8, #0
 8007f20:	f000 80c2 	beq.w	80080a8 <tcp_write+0x22c>
 8007f24:	4646      	mov	r6, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007f26:	f8d6 b000 	ldr.w	fp, [r6]
 8007f2a:	f1bb 0f00 	cmp.w	fp, #0
 8007f2e:	f040 808f 	bne.w	8008050 <tcp_write+0x1d4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007f32:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8007f34:	8933      	ldrh	r3, [r6, #8]
 8007f36:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007f38:	00ad      	lsls	r5, r5, #2
 8007f3a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8007f3e:	442b      	add	r3, r5
 8007f40:	429a      	cmp	r2, r3
 8007f42:	da06      	bge.n	8007f52 <tcp_write+0xd6>
 8007f44:	4b7e      	ldr	r3, [pc, #504]	; (8008140 <tcp_write+0x2c4>)
 8007f46:	4982      	ldr	r1, [pc, #520]	; (8008150 <tcp_write+0x2d4>)
 8007f48:	487f      	ldr	r0, [pc, #508]	; (8008148 <tcp_write+0x2cc>)
 8007f4a:	f240 12c7 	movw	r2, #455	; 0x1c7
 8007f4e:	f004 fc8f 	bl	800c870 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007f52:	8937      	ldrh	r7, [r6, #8]
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	1bdf      	subs	r7, r3, r7
 8007f58:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 8007f5a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8007f5e:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007f62:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	d075      	beq.n	8008054 <tcp_write+0x1d8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8007f68:	42bd      	cmp	r5, r7
 8007f6a:	d906      	bls.n	8007f7a <tcp_write+0xfe>
 8007f6c:	4b74      	ldr	r3, [pc, #464]	; (8008140 <tcp_write+0x2c4>)
 8007f6e:	4979      	ldr	r1, [pc, #484]	; (8008154 <tcp_write+0x2d8>)
 8007f70:	4875      	ldr	r0, [pc, #468]	; (8008148 <tcp_write+0x2cc>)
 8007f72:	f240 12d9 	movw	r2, #473	; 0x1d9
 8007f76:	f004 fc7b 	bl	800c870 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8007f7a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007f7e:	9a05      	ldr	r2, [sp, #20]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bf28      	it	cs
 8007f84:	461a      	movcs	r2, r3
 8007f86:	42ba      	cmp	r2, r7
 8007f88:	4615      	mov	r5, r2
 8007f8a:	bfa8      	it	ge
 8007f8c:	463d      	movge	r5, r7
      oversize -= oversize_used;
 8007f8e:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 8007f90:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 8007f92:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8007f96:	b2bf      	uxth	r7, r7
 8007f98:	46b0      	mov	r8, r6
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8007f9a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007f9e:	b153      	cbz	r3, 8007fb6 <tcp_write+0x13a>
 8007fa0:	9b05      	ldr	r3, [sp, #20]
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	f000 81e4 	beq.w	8008370 <tcp_write+0x4f4>
 8007fa8:	4b65      	ldr	r3, [pc, #404]	; (8008140 <tcp_write+0x2c4>)
 8007faa:	496b      	ldr	r1, [pc, #428]	; (8008158 <tcp_write+0x2dc>)
 8007fac:	4866      	ldr	r0, [pc, #408]	; (8008148 <tcp_write+0x2cc>)
 8007fae:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007fb2:	f004 fc5d 	bl	800c870 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	429d      	cmp	r5, r3
 8007fba:	f080 81d9 	bcs.w	8008370 <tcp_write+0x4f4>
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	f000 8162 	beq.w	8008288 <tcp_write+0x40c>
 8007fc4:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8007fc8:	f1ba 0f00 	cmp.w	sl, #0
 8007fcc:	f000 815d 	beq.w	800828a <tcp_write+0x40e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8007fd0:	eba3 0a05 	sub.w	sl, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8007fd6:	45ba      	cmp	sl, r7
 8007fd8:	bfa8      	it	ge
 8007fda:	46ba      	movge	sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007fdc:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8007fde:	fa1f f88a 	uxth.w	r8, sl
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007fe2:	d539      	bpl.n	8008058 <tcp_write+0x1dc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	9302      	str	r3, [sp, #8]
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	463a      	mov	r2, r7
 8007fec:	e9cd 4300 	strd	r4, r3, [sp]
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8007ff6:	2004      	movs	r0, #4
 8007ff8:	f7ff fe6e 	bl	8007cd8 <tcp_pbuf_prealloc>
 8007ffc:	4681      	mov	r9, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f000 81b0 	beq.w	8008364 <tcp_write+0x4e8>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008004:	9b08      	ldr	r3, [sp, #32]
 8008006:	6840      	ldr	r0, [r0, #4]
 8008008:	4642      	mov	r2, r8
 800800a:	1959      	adds	r1, r3, r5
 800800c:	f004 fb75 	bl	800c6fa <memcpy>
        queuelen += pbuf_clen(concat_p);
 8008010:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8008012:	f7fd fb57 	bl	80056c4 <pbuf_clen>
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	4403      	add	r3, r0
 800801a:	b29b      	uxth	r3, r3
 800801c:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 800801e:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8008022:	eb05 0708 	add.w	r7, r5, r8
 8008026:	b2bf      	uxth	r7, r7
 8008028:	46b0      	mov	r8, r6
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      pos += seglen;
 800802c:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008030:	f003 0301 	and.w	r3, r3, #1
      pos += seglen;
 8008034:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008038:	930c      	str	r3, [sp, #48]	; 0x30
 800803a:	e0fe      	b.n	800823a <tcp_write+0x3be>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800803c:	b91b      	cbnz	r3, 8008046 <tcp_write+0x1ca>
 800803e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008040:	2b00      	cmp	r3, #0
 8008042:	f43f af66 	beq.w	8007f12 <tcp_write+0x96>
 8008046:	4b3e      	ldr	r3, [pc, #248]	; (8008140 <tcp_write+0x2c4>)
 8008048:	4944      	ldr	r1, [pc, #272]	; (800815c <tcp_write+0x2e0>)
 800804a:	f240 1259 	movw	r2, #345	; 0x159
 800804e:	e75d      	b.n	8007f0c <tcp_write+0x90>
 8008050:	465e      	mov	r6, fp
 8008052:	e768      	b.n	8007f26 <tcp_write+0xaa>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008054:	46a8      	mov	r8, r5
 8008056:	e7a0      	b.n	8007f9a <tcp_write+0x11e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008058:	6873      	ldr	r3, [r6, #4]
 800805a:	f8d3 9000 	ldr.w	r9, [r3]
 800805e:	f1b9 0f00 	cmp.w	r9, #0
 8008062:	d112      	bne.n	800808a <tcp_write+0x20e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008064:	7b1a      	ldrb	r2, [r3, #12]
 8008066:	2a01      	cmp	r2, #1
 8008068:	d111      	bne.n	800808e <tcp_write+0x212>
 800806a:	895a      	ldrh	r2, [r3, #10]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	4413      	add	r3, r2
 8008070:	9a08      	ldr	r2, [sp, #32]
 8008072:	429a      	cmp	r2, r3
 8008074:	d10b      	bne.n	800808e <tcp_write+0x212>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008076:	b135      	cbz	r5, 8008086 <tcp_write+0x20a>
 8008078:	4b31      	ldr	r3, [pc, #196]	; (8008140 <tcp_write+0x2c4>)
 800807a:	4939      	ldr	r1, [pc, #228]	; (8008160 <tcp_write+0x2e4>)
 800807c:	4832      	ldr	r0, [pc, #200]	; (8008148 <tcp_write+0x2cc>)
 800807e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008082:	f004 fbf5 	bl	800c870 <iprintf>
          extendlen = seglen;
 8008086:	46c2      	mov	sl, r8
 8008088:	e7cb      	b.n	8008022 <tcp_write+0x1a6>
 800808a:	464b      	mov	r3, r9
 800808c:	e7e5      	b.n	800805a <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800808e:	2201      	movs	r2, #1
 8008090:	4641      	mov	r1, r8
 8008092:	2004      	movs	r0, #4
 8008094:	f7fd f9ca 	bl	800542c <pbuf_alloc>
 8008098:	4681      	mov	r9, r0
 800809a:	2800      	cmp	r0, #0
 800809c:	f000 8162 	beq.w	8008364 <tcp_write+0x4e8>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80080a0:	9b08      	ldr	r3, [sp, #32]
 80080a2:	442b      	add	r3, r5
 80080a4:	6043      	str	r3, [r0, #4]
 80080a6:	e7b4      	b.n	8008012 <tcp_write+0x196>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80080a8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	f000 80ef 	beq.w	8008290 <tcp_write+0x414>
 80080b2:	4b23      	ldr	r3, [pc, #140]	; (8008140 <tcp_write+0x2c4>)
 80080b4:	492b      	ldr	r1, [pc, #172]	; (8008164 <tcp_write+0x2e8>)
 80080b6:	4824      	ldr	r0, [pc, #144]	; (8008148 <tcp_write+0x2cc>)
 80080b8:	f240 2225 	movw	r2, #549	; 0x225
 80080bc:	f004 fbd8 	bl	800c870 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80080c0:	4646      	mov	r6, r8
  u16_t extendlen = 0;
 80080c2:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 80080c4:	4645      	mov	r5, r8
  u16_t pos = 0; /* position in 'arg' data */
 80080c6:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 80080c8:	46c1      	mov	r9, r8
 80080ca:	e7ae      	b.n	800802a <tcp_write+0x1ae>
    u16_t left = len - pos;
 80080cc:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 80080ce:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 80080d0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bf28      	it	cs
 80080d8:	4613      	movcs	r3, r2
 80080da:	b29b      	uxth	r3, r3
 80080dc:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80080de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d043      	beq.n	800816c <tcp_write+0x2f0>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80080e4:	fabb f38b 	clz	r3, fp
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080f0:	e9cd 4300 	strd	r4, r3, [sp]
 80080f4:	2000      	movs	r0, #0
 80080f6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80080fa:	f7ff fded 	bl	8007cd8 <tcp_pbuf_prealloc>
 80080fe:	4680      	mov	r8, r0
 8008100:	2800      	cmp	r0, #0
 8008102:	d052      	beq.n	80081aa <tcp_write+0x32e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008104:	8943      	ldrh	r3, [r0, #10]
 8008106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008108:	4293      	cmp	r3, r2
 800810a:	d206      	bcs.n	800811a <tcp_write+0x29e>
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <tcp_write+0x2c4>)
 800810e:	4916      	ldr	r1, [pc, #88]	; (8008168 <tcp_write+0x2ec>)
 8008110:	480d      	ldr	r0, [pc, #52]	; (8008148 <tcp_write+0x2cc>)
 8008112:	f240 2241 	movw	r2, #577	; 0x241
 8008116:	f004 fbab 	bl	800c870 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800811a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800811e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008122:	19d9      	adds	r1, r3, r7
 8008124:	f004 fae9 	bl	800c6fa <memcpy>
    queuelen += pbuf_clen(p);
 8008128:	4640      	mov	r0, r8
 800812a:	f7fd facb 	bl	80056c4 <pbuf_clen>
 800812e:	9b06      	ldr	r3, [sp, #24]
 8008130:	4403      	add	r3, r0
 8008132:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008134:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8008136:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008138:	d960      	bls.n	80081fc <tcp_write+0x380>
      pbuf_free(p);
 800813a:	4640      	mov	r0, r8
 800813c:	e033      	b.n	80081a6 <tcp_write+0x32a>
 800813e:	bf00      	nop
 8008140:	0800eb27 	.word	0x0800eb27
 8008144:	0800eb6e 	.word	0x0800eb6e
 8008148:	0800d7e1 	.word	0x0800d7e1
 800814c:	0800eb9f 	.word	0x0800eb9f
 8008150:	0800ec0b 	.word	0x0800ec0b
 8008154:	0800ec22 	.word	0x0800ec22
 8008158:	0800ec42 	.word	0x0800ec42
 800815c:	0800ebd9 	.word	0x0800ebd9
 8008160:	0800ec60 	.word	0x0800ec60
 8008164:	0800ec89 	.word	0x0800ec89
 8008168:	0800ecb8 	.word	0x0800ecb8
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800816c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008170:	b133      	cbz	r3, 8008180 <tcp_write+0x304>
 8008172:	4b83      	ldr	r3, [pc, #524]	; (8008380 <tcp_write+0x504>)
 8008174:	4983      	ldr	r1, [pc, #524]	; (8008384 <tcp_write+0x508>)
 8008176:	4884      	ldr	r0, [pc, #528]	; (8008388 <tcp_write+0x50c>)
 8008178:	f240 224b 	movw	r2, #587	; 0x24b
 800817c:	f004 fb78 	bl	800c870 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008180:	2201      	movs	r2, #1
 8008182:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008184:	2000      	movs	r0, #0
 8008186:	f7fd f951 	bl	800542c <pbuf_alloc>
 800818a:	b170      	cbz	r0, 80081aa <tcp_write+0x32e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800818c:	9a08      	ldr	r2, [sp, #32]
 800818e:	900d      	str	r0, [sp, #52]	; 0x34
 8008190:	443a      	add	r2, r7
 8008192:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008194:	2200      	movs	r2, #0
 8008196:	4611      	mov	r1, r2
 8008198:	4610      	mov	r0, r2
 800819a:	f7fd f947 	bl	800542c <pbuf_alloc>
 800819e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081a0:	4680      	mov	r8, r0
 80081a2:	bb38      	cbnz	r0, 80081f4 <tcp_write+0x378>
        pbuf_free(p2);
 80081a4:	4618      	mov	r0, r3
      pbuf_free(p);
 80081a6:	f7fd f8d9 	bl	800535c <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 80081aa:	7ea3      	ldrb	r3, [r4, #26]
 80081ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081b0:	76a3      	strb	r3, [r4, #26]
  if (concat_p != NULL) {
 80081b2:	f1b9 0f00 	cmp.w	r9, #0
 80081b6:	d002      	beq.n	80081be <tcp_write+0x342>
    pbuf_free(concat_p);
 80081b8:	4648      	mov	r0, r9
 80081ba:	f7fd f8cf 	bl	800535c <pbuf_free>
  if (queue != NULL) {
 80081be:	f1bb 0f00 	cmp.w	fp, #0
 80081c2:	d002      	beq.n	80081ca <tcp_write+0x34e>
    tcp_segs_free(queue);
 80081c4:	4658      	mov	r0, fp
 80081c6:	f7fd fce7 	bl	8005b98 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80081ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f43f ae8a 	beq.w	8007ee8 <tcp_write+0x6c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80081d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f47f ae86 	bne.w	8007ee8 <tcp_write+0x6c>
 80081dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f47f ae82 	bne.w	8007ee8 <tcp_write+0x6c>
 80081e4:	4b66      	ldr	r3, [pc, #408]	; (8008380 <tcp_write+0x504>)
 80081e6:	4969      	ldr	r1, [pc, #420]	; (800838c <tcp_write+0x510>)
 80081e8:	4867      	ldr	r0, [pc, #412]	; (8008388 <tcp_write+0x50c>)
 80081ea:	f240 3202 	movw	r2, #770	; 0x302
 80081ee:	f004 fb3f 	bl	800c870 <iprintf>
 80081f2:	e679      	b.n	8007ee8 <tcp_write+0x6c>
      pbuf_cat(p/*header*/, p2/*data*/);
 80081f4:	4619      	mov	r1, r3
 80081f6:	f7fd fa89 	bl	800570c <pbuf_cat>
 80081fa:	e795      	b.n	8008128 <tcp_write+0x2ac>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80081fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081fe:	2200      	movs	r2, #0
 8008200:	4641      	mov	r1, r8
 8008202:	9200      	str	r2, [sp, #0]
 8008204:	443b      	add	r3, r7
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff fda0 	bl	8007d4c <tcp_create_segment>
 800820c:	4680      	mov	r8, r0
 800820e:	2800      	cmp	r0, #0
 8008210:	d0cb      	beq.n	80081aa <tcp_write+0x32e>
    if (queue == NULL) {
 8008212:	f1bb 0f00 	cmp.w	fp, #0
 8008216:	d035      	beq.n	8008284 <tcp_write+0x408>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821a:	b933      	cbnz	r3, 800822a <tcp_write+0x3ae>
 800821c:	4b58      	ldr	r3, [pc, #352]	; (8008380 <tcp_write+0x504>)
 800821e:	495c      	ldr	r1, [pc, #368]	; (8008390 <tcp_write+0x514>)
 8008220:	4859      	ldr	r0, [pc, #356]	; (8008388 <tcp_write+0x50c>)
 8008222:	f240 2285 	movw	r2, #645	; 0x285
 8008226:	f004 fb23 	bl	800c870 <iprintf>
      prev_seg->next = seg;
 800822a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800822c:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8008236:	441f      	add	r7, r3
 8008238:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	429f      	cmp	r7, r3
 800823e:	f4ff af45 	bcc.w	80080cc <tcp_write+0x250>
  if (oversize_used > 0) {
 8008242:	b125      	cbz	r5, 800824e <tcp_write+0x3d2>
    for (p = last_unsent->p; p; p = p->next) {
 8008244:	6877      	ldr	r7, [r6, #4]
 8008246:	bb67      	cbnz	r7, 80082a2 <tcp_write+0x426>
    last_unsent->len += oversize_used;
 8008248:	8933      	ldrh	r3, [r6, #8]
 800824a:	441d      	add	r5, r3
 800824c:	8135      	strh	r5, [r6, #8]
  pcb->unsent_oversize = oversize;
 800824e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008252:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if (concat_p != NULL) {
 8008256:	f1b9 0f00 	cmp.w	r9, #0
 800825a:	d033      	beq.n	80082c4 <tcp_write+0x448>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800825c:	b936      	cbnz	r6, 800826c <tcp_write+0x3f0>
 800825e:	4b48      	ldr	r3, [pc, #288]	; (8008380 <tcp_write+0x504>)
 8008260:	494c      	ldr	r1, [pc, #304]	; (8008394 <tcp_write+0x518>)
 8008262:	4849      	ldr	r0, [pc, #292]	; (8008388 <tcp_write+0x50c>)
 8008264:	f240 22bb 	movw	r2, #699	; 0x2bb
 8008268:	f004 fb02 	bl	800c870 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800826c:	4649      	mov	r1, r9
 800826e:	6870      	ldr	r0, [r6, #4]
 8008270:	f7fd fa4c 	bl	800570c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8008274:	8933      	ldrh	r3, [r6, #8]
 8008276:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800827a:	4413      	add	r3, r2
 800827c:	8133      	strh	r3, [r6, #8]
    last_unsent->next = queue;
 800827e:	f8c6 b000 	str.w	fp, [r6]
 8008282:	e041      	b.n	8008308 <tcp_write+0x48c>
 8008284:	4683      	mov	fp, r0
 8008286:	e7d3      	b.n	8008230 <tcp_write+0x3b4>
  u16_t extendlen = 0;
 8008288:	46ba      	mov	sl, r7
 800828a:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 800828c:	46d1      	mov	r9, sl
 800828e:	e6cc      	b.n	800802a <tcp_write+0x1ae>
  u16_t extendlen = 0;
 8008290:	46ba      	mov	sl, r7
  u16_t oversize_used = 0;
 8008292:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008294:	463e      	mov	r6, r7
  struct pbuf *concat_p = NULL;
 8008296:	46b9      	mov	r9, r7
 8008298:	e6c7      	b.n	800802a <tcp_write+0x1ae>
  if (oversize_used > 0) {
 800829a:	f04f 0a00 	mov.w	sl, #0
 800829e:	46d1      	mov	r9, sl
 80082a0:	e7d0      	b.n	8008244 <tcp_write+0x3c8>
      p->tot_len += oversize_used;
 80082a2:	893b      	ldrh	r3, [r7, #8]
 80082a4:	442b      	add	r3, r5
 80082a6:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	b94b      	cbnz	r3, 80082c0 <tcp_write+0x444>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	8978      	ldrh	r0, [r7, #10]
 80082b0:	9908      	ldr	r1, [sp, #32]
 80082b2:	4418      	add	r0, r3
 80082b4:	462a      	mov	r2, r5
 80082b6:	f004 fa20 	bl	800c6fa <memcpy>
        p->len += oversize_used;
 80082ba:	897b      	ldrh	r3, [r7, #10]
 80082bc:	442b      	add	r3, r5
 80082be:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80082c0:	683f      	ldr	r7, [r7, #0]
 80082c2:	e7c0      	b.n	8008246 <tcp_write+0x3ca>
  } else if (extendlen > 0) {
 80082c4:	f1ba 0f00 	cmp.w	sl, #0
 80082c8:	d01a      	beq.n	8008300 <tcp_write+0x484>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80082ca:	b10e      	cbz	r6, 80082d0 <tcp_write+0x454>
 80082cc:	6873      	ldr	r3, [r6, #4]
 80082ce:	b933      	cbnz	r3, 80082de <tcp_write+0x462>
 80082d0:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <tcp_write+0x504>)
 80082d2:	4931      	ldr	r1, [pc, #196]	; (8008398 <tcp_write+0x51c>)
 80082d4:	482c      	ldr	r0, [pc, #176]	; (8008388 <tcp_write+0x50c>)
 80082d6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80082da:	f004 fac9 	bl	800c870 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80082de:	6873      	ldr	r3, [r6, #4]
 80082e0:	891a      	ldrh	r2, [r3, #8]
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	4452      	add	r2, sl
 80082e6:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 80082e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80082ea:	b939      	cbnz	r1, 80082fc <tcp_write+0x480>
    p->len += extendlen;
 80082ec:	895a      	ldrh	r2, [r3, #10]
 80082ee:	4452      	add	r2, sl
 80082f0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80082f2:	8933      	ldrh	r3, [r6, #8]
 80082f4:	449a      	add	sl, r3
 80082f6:	f8a6 a008 	strh.w	sl, [r6, #8]
 80082fa:	e7c0      	b.n	800827e <tcp_write+0x402>
      p->tot_len += extendlen;
 80082fc:	460b      	mov	r3, r1
 80082fe:	e7ef      	b.n	80082e0 <tcp_write+0x464>
  if (last_unsent == NULL) {
 8008300:	2e00      	cmp	r6, #0
 8008302:	d1bc      	bne.n	800827e <tcp_write+0x402>
    pcb->unsent = queue;
 8008304:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
  pcb->snd_lbb += len;
 8008308:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800830a:	9a05      	ldr	r2, [sp, #20]
 800830c:	4413      	add	r3, r2
 800830e:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_buf -= len;
 8008310:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008320:	b153      	cbz	r3, 8008338 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008322:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008324:	b943      	cbnz	r3, 8008338 <tcp_write+0x4bc>
 8008326:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008328:	b933      	cbnz	r3, 8008338 <tcp_write+0x4bc>
 800832a:	4b15      	ldr	r3, [pc, #84]	; (8008380 <tcp_write+0x504>)
 800832c:	4917      	ldr	r1, [pc, #92]	; (800838c <tcp_write+0x510>)
 800832e:	4816      	ldr	r0, [pc, #88]	; (8008388 <tcp_write+0x50c>)
 8008330:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008334:	f004 fa9c 	bl	800c870 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	d010      	beq.n	8008360 <tcp_write+0x4e4>
 800833e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f adbb 	beq.w	8007ebe <tcp_write+0x42>
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	f013 0502 	ands.w	r5, r3, #2
 800834e:	d107      	bne.n	8008360 <tcp_write+0x4e4>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008350:	8984      	ldrh	r4, [r0, #12]
 8008352:	2008      	movs	r0, #8
 8008354:	f7fc fbc8 	bl	8004ae8 <lwip_htons>
 8008358:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800835c:	4320      	orrs	r0, r4
 800835e:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 8008360:	2000      	movs	r0, #0
 8008362:	e5ac      	b.n	8007ebe <tcp_write+0x42>
      p->tot_len += extendlen;
 8008364:	f04f 0900 	mov.w	r9, #0
 8008368:	e71f      	b.n	80081aa <tcp_write+0x32e>
    return ERR_CONN;
 800836a:	f06f 000a 	mvn.w	r0, #10
 800836e:	e5a6      	b.n	8007ebe <tcp_write+0x42>
  if (oversize_used > 0) {
 8008370:	2d00      	cmp	r5, #0
 8008372:	d192      	bne.n	800829a <tcp_write+0x41e>
  pcb->unsent_oversize = oversize;
 8008374:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008378:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800837c:	e77f      	b.n	800827e <tcp_write+0x402>
 800837e:	bf00      	nop
 8008380:	0800eb27 	.word	0x0800eb27
 8008384:	0800ecf6 	.word	0x0800ecf6
 8008388:	0800d7e1 	.word	0x0800d7e1
 800838c:	0800ed82 	.word	0x0800ed82
 8008390:	0800ed04 	.word	0x0800ed04
 8008394:	0800ed15 	.word	0x0800ed15
 8008398:	0800ed4d 	.word	0x0800ed4d

0800839c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800839c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80083a0:	f011 0803 	ands.w	r8, r1, #3
{
 80083a4:	4604      	mov	r4, r0
 80083a6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80083a8:	d106      	bne.n	80083b8 <tcp_enqueue_flags+0x1c>
 80083aa:	4b3d      	ldr	r3, [pc, #244]	; (80084a0 <tcp_enqueue_flags+0x104>)
 80083ac:	493d      	ldr	r1, [pc, #244]	; (80084a4 <tcp_enqueue_flags+0x108>)
 80083ae:	483e      	ldr	r0, [pc, #248]	; (80084a8 <tcp_enqueue_flags+0x10c>)
 80083b0:	f240 321b 	movw	r2, #795	; 0x31b
 80083b4:	f004 fa5c 	bl	800c870 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80083b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d90a      	bls.n	80083d6 <tcp_enqueue_flags+0x3a>
 80083c0:	07f1      	lsls	r1, r6, #31
 80083c2:	d408      	bmi.n	80083d6 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 80083c4:	7ea3      	ldrb	r3, [r4, #26]
 80083c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083ca:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80083d0:	b003      	add	sp, #12
 80083d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (flags & TCP_SYN) {
 80083d6:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80083da:	2200      	movs	r2, #0
 80083dc:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80083e0:	4649      	mov	r1, r9
 80083e2:	4610      	mov	r0, r2
 80083e4:	f7fd f822 	bl	800542c <pbuf_alloc>
 80083e8:	4605      	mov	r5, r0
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d0ea      	beq.n	80083c4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80083ee:	8943      	ldrh	r3, [r0, #10]
 80083f0:	454b      	cmp	r3, r9
 80083f2:	d206      	bcs.n	8008402 <tcp_enqueue_flags+0x66>
 80083f4:	4b2a      	ldr	r3, [pc, #168]	; (80084a0 <tcp_enqueue_flags+0x104>)
 80083f6:	492d      	ldr	r1, [pc, #180]	; (80084ac <tcp_enqueue_flags+0x110>)
 80083f8:	482b      	ldr	r0, [pc, #172]	; (80084a8 <tcp_enqueue_flags+0x10c>)
 80083fa:	f240 3241 	movw	r2, #833	; 0x341
 80083fe:	f004 fa37 	bl	800c870 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008402:	9700      	str	r7, [sp, #0]
 8008404:	4629      	mov	r1, r5
 8008406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008408:	4632      	mov	r2, r6
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff fc9e 	bl	8007d4c <tcp_create_segment>
 8008410:	4605      	mov	r5, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d0d6      	beq.n	80083c4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008416:	68c3      	ldr	r3, [r0, #12]
 8008418:	079a      	lsls	r2, r3, #30
 800841a:	d006      	beq.n	800842a <tcp_enqueue_flags+0x8e>
 800841c:	4b20      	ldr	r3, [pc, #128]	; (80084a0 <tcp_enqueue_flags+0x104>)
 800841e:	4924      	ldr	r1, [pc, #144]	; (80084b0 <tcp_enqueue_flags+0x114>)
 8008420:	4821      	ldr	r0, [pc, #132]	; (80084a8 <tcp_enqueue_flags+0x10c>)
 8008422:	f240 3249 	movw	r2, #841	; 0x349
 8008426:	f004 fa23 	bl	800c870 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800842a:	892b      	ldrh	r3, [r5, #8]
 800842c:	b133      	cbz	r3, 800843c <tcp_enqueue_flags+0xa0>
 800842e:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <tcp_enqueue_flags+0x104>)
 8008430:	4920      	ldr	r1, [pc, #128]	; (80084b4 <tcp_enqueue_flags+0x118>)
 8008432:	481d      	ldr	r0, [pc, #116]	; (80084a8 <tcp_enqueue_flags+0x10c>)
 8008434:	f240 324a 	movw	r2, #842	; 0x34a
 8008438:	f004 fa1a 	bl	800c870 <iprintf>
  if (pcb->unsent == NULL) {
 800843c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800843e:	bb4b      	cbnz	r3, 8008494 <tcp_enqueue_flags+0xf8>
    pcb->unsent = seg;
 8008440:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	d002      	beq.n	8008454 <tcp_enqueue_flags+0xb8>
    pcb->snd_lbb++;
 800844e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008450:	3301      	adds	r3, #1
 8008452:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8008454:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8008456:	bf42      	ittt	mi
 8008458:	7ea3      	ldrbmi	r3, [r4, #26]
 800845a:	f043 0320 	orrmi.w	r3, r3, #32
 800845e:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008460:	6868      	ldr	r0, [r5, #4]
 8008462:	f7fd f92f 	bl	80056c4 <pbuf_clen>
 8008466:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800846a:	4418      	add	r0, r3
 800846c:	b280      	uxth	r0, r0
 800846e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008472:	2800      	cmp	r0, #0
 8008474:	d0ac      	beq.n	80083d0 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008476:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008478:	b948      	cbnz	r0, 800848e <tcp_enqueue_flags+0xf2>
 800847a:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800847c:	2c00      	cmp	r4, #0
 800847e:	d1a7      	bne.n	80083d0 <tcp_enqueue_flags+0x34>
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <tcp_enqueue_flags+0x104>)
 8008482:	490d      	ldr	r1, [pc, #52]	; (80084b8 <tcp_enqueue_flags+0x11c>)
 8008484:	4808      	ldr	r0, [pc, #32]	; (80084a8 <tcp_enqueue_flags+0x10c>)
 8008486:	f240 326d 	movw	r2, #877	; 0x36d
 800848a:	f004 f9f1 	bl	800c870 <iprintf>
  return ERR_OK;
 800848e:	2000      	movs	r0, #0
 8008490:	e79e      	b.n	80083d0 <tcp_enqueue_flags+0x34>
 8008492:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	2a00      	cmp	r2, #0
 8008498:	d1fb      	bne.n	8008492 <tcp_enqueue_flags+0xf6>
    useg->next = seg;
 800849a:	601d      	str	r5, [r3, #0]
 800849c:	e7d1      	b.n	8008442 <tcp_enqueue_flags+0xa6>
 800849e:	bf00      	nop
 80084a0:	0800eb27 	.word	0x0800eb27
 80084a4:	0800e9c4 	.word	0x0800e9c4
 80084a8:	0800d7e1 	.word	0x0800d7e1
 80084ac:	0800ea19 	.word	0x0800ea19
 80084b0:	0800ea52 	.word	0x0800ea52
 80084b4:	0800ea6a 	.word	0x0800ea6a
 80084b8:	0800ea94 	.word	0x0800ea94

080084bc <tcp_send_fin>:
{
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 80084be:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 80084c0:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 80084c2:	b934      	cbnz	r4, 80084d2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80084c4:	4628      	mov	r0, r5
 80084c6:	2101      	movs	r1, #1
}
 80084c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80084cc:	f7ff bf66 	b.w	800839c <tcp_enqueue_flags>
 80084d0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1fb      	bne.n	80084d0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80084d8:	68e3      	ldr	r3, [r4, #12]
 80084da:	8998      	ldrh	r0, [r3, #12]
 80084dc:	f7fc fb04 	bl	8004ae8 <lwip_htons>
 80084e0:	f010 0707 	ands.w	r7, r0, #7
 80084e4:	d1ee      	bne.n	80084c4 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	2001      	movs	r0, #1
 80084ea:	899e      	ldrh	r6, [r3, #12]
 80084ec:	f7fc fafc 	bl	8004ae8 <lwip_htons>
 80084f0:	68e3      	ldr	r3, [r4, #12]
 80084f2:	4330      	orrs	r0, r6
 80084f4:	8198      	strh	r0, [r3, #12]
      pcb->flags |= TF_FIN;
 80084f6:	7eab      	ldrb	r3, [r5, #26]
 80084f8:	f043 0320 	orr.w	r3, r3, #32
 80084fc:	76ab      	strb	r3, [r5, #26]
}
 80084fe:	4638      	mov	r0, r7
 8008500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008502 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008502:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008504:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008506:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008508:	f7fc faf1 	bl	8004aee <lwip_htonl>
 800850c:	2100      	movs	r1, #0
 800850e:	4602      	mov	r2, r0
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff fc77 	bl	8007e04 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008516:	4606      	mov	r6, r0
 8008518:	b940      	cbnz	r0, 800852c <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800851a:	7ea3      	ldrb	r3, [r4, #26]
 800851c:	f043 0303 	orr.w	r3, r3, #3
 8008520:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008522:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8008526:	4628      	mov	r0, r5
 8008528:	b004      	add	sp, #16
 800852a:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800852c:	1d25      	adds	r5, r4, #4
 800852e:	4628      	mov	r0, r5
 8008530:	f002 fb3e 	bl	800abb0 <ip4_route>
  if (netif == NULL) {
 8008534:	b1a0      	cbz	r0, 8008560 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008536:	2206      	movs	r2, #6
 8008538:	9201      	str	r2, [sp, #4]
 800853a:	7a62      	ldrb	r2, [r4, #9]
 800853c:	9002      	str	r0, [sp, #8]
 800853e:	9200      	str	r2, [sp, #0]
 8008540:	7aa3      	ldrb	r3, [r4, #10]
 8008542:	462a      	mov	r2, r5
 8008544:	4621      	mov	r1, r4
 8008546:	4630      	mov	r0, r6
 8008548:	f002 fca4 	bl	800ae94 <ip4_output_if>
 800854c:	4605      	mov	r5, r0
  pbuf_free(p);
 800854e:	4630      	mov	r0, r6
 8008550:	f7fc ff04 	bl	800535c <pbuf_free>
 8008554:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8008556:	b135      	cbz	r5, 8008566 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008558:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800855c:	76a3      	strb	r3, [r4, #26]
 800855e:	e7e2      	b.n	8008526 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8008560:	f06f 0503 	mvn.w	r5, #3
 8008564:	e7f3      	b.n	800854e <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	e7f7      	b.n	800855c <tcp_send_empty_ack+0x5a>

0800856c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008570:	7d03      	ldrb	r3, [r0, #20]
 8008572:	2b01      	cmp	r3, #1
{
 8008574:	b087      	sub	sp, #28
 8008576:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008578:	d106      	bne.n	8008588 <tcp_output+0x1c>
 800857a:	4ba4      	ldr	r3, [pc, #656]	; (800880c <tcp_output+0x2a0>)
 800857c:	49a4      	ldr	r1, [pc, #656]	; (8008810 <tcp_output+0x2a4>)
 800857e:	48a5      	ldr	r0, [pc, #660]	; (8008814 <tcp_output+0x2a8>)
 8008580:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008584:	f004 f974 	bl	800c870 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008588:	4ba3      	ldr	r3, [pc, #652]	; (8008818 <tcp_output+0x2ac>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	42a3      	cmp	r3, r4
 800858e:	d04f      	beq.n	8008630 <tcp_output+0xc4>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008590:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008594:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8008598:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800859a:	429e      	cmp	r6, r3
 800859c:	bf28      	it	cs
 800859e:	461e      	movcs	r6, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80085a0:	7ea3      	ldrb	r3, [r4, #26]
 80085a2:	0799      	lsls	r1, r3, #30
 80085a4:	d510      	bpl.n	80085c8 <tcp_output+0x5c>
 80085a6:	b92d      	cbnz	r5, 80085b4 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 80085a8:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 80085aa:	b007      	add	sp, #28
 80085ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 80085b0:	f7ff bfa7 	b.w	8008502 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80085b4:	68eb      	ldr	r3, [r5, #12]
 80085b6:	6858      	ldr	r0, [r3, #4]
 80085b8:	f7fc fa99 	bl	8004aee <lwip_htonl>
 80085bc:	892b      	ldrh	r3, [r5, #8]
 80085be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	4418      	add	r0, r3
     (seg == NULL ||
 80085c4:	42b0      	cmp	r0, r6
 80085c6:	d8ef      	bhi.n	80085a8 <tcp_output+0x3c>
  useg = pcb->unacked;
 80085c8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  if (useg != NULL) {
 80085ca:	2f00      	cmp	r7, #0
 80085cc:	d133      	bne.n	8008636 <tcp_output+0xca>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80085ce:	f104 0804 	add.w	r8, r4, #4
 80085d2:	4640      	mov	r0, r8
 80085d4:	f002 faec 	bl	800abb0 <ip4_route>
  if (netif == NULL) {
 80085d8:	4681      	mov	r9, r0
 80085da:	2800      	cmp	r0, #0
 80085dc:	f000 813a 	beq.w	8008854 <tcp_output+0x2e8>
  if (ip_addr_isany(&pcb->local_ip)) {
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	b90b      	cbnz	r3, 80085e8 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80085e4:	6843      	ldr	r3, [r0, #4]
 80085e6:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 80085e8:	b1cd      	cbz	r5, 800861e <tcp_output+0xb2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80085ea:	68eb      	ldr	r3, [r5, #12]
 80085ec:	6858      	ldr	r0, [r3, #4]
 80085ee:	f7fc fa7e 	bl	8004aee <lwip_htonl>
 80085f2:	892b      	ldrh	r3, [r5, #8]
 80085f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	4418      	add	r0, r3
  if (seg != NULL &&
 80085fa:	42b0      	cmp	r0, r6
 80085fc:	d96e      	bls.n	80086dc <tcp_output+0x170>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80085fe:	2e00      	cmp	r6, #0
 8008600:	d06c      	beq.n	80086dc <tcp_output+0x170>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008602:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008606:	42b3      	cmp	r3, r6
 8008608:	d168      	bne.n	80086dc <tcp_output+0x170>
 800860a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d165      	bne.n	80086dc <tcp_output+0x170>
    if (pcb->persist_backoff == 0) {
 8008610:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008614:	b91b      	cbnz	r3, 800861e <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 8008616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800861a:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
  if (pcb->unsent == NULL) {
 800861e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008620:	b913      	cbnz	r3, 8008628 <tcp_output+0xbc>
    pcb->unsent_oversize = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008628:	7ea3      	ldrb	r3, [r4, #26]
 800862a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800862e:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8008630:	2000      	movs	r0, #0
 8008632:	e0e8      	b.n	8008806 <tcp_output+0x29a>
 8008634:	461f      	mov	r7, r3
    for (; useg->next != NULL; useg = useg->next);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1fb      	bne.n	8008634 <tcp_output+0xc8>
 800863c:	e7c7      	b.n	80085ce <tcp_output+0x62>
    pcb->unsent = seg->next;
 800863e:	682b      	ldr	r3, [r5, #0]
 8008640:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008642:	7d23      	ldrb	r3, [r4, #20]
 8008644:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008646:	bf1e      	ittt	ne
 8008648:	7ea3      	ldrbne	r3, [r4, #26]
 800864a:	f023 0303 	bicne.w	r3, r3, #3
 800864e:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008650:	68eb      	ldr	r3, [r5, #12]
 8008652:	6858      	ldr	r0, [r3, #4]
 8008654:	f7fc fa4b 	bl	8004aee <lwip_htonl>
 8008658:	68e9      	ldr	r1, [r5, #12]
 800865a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800865e:	4683      	mov	fp, r0
 8008660:	8988      	ldrh	r0, [r1, #12]
 8008662:	f7fc fa41 	bl	8004ae8 <lwip_htons>
 8008666:	f010 0003 	ands.w	r0, r0, #3
 800866a:	eb0b 030a 	add.w	r3, fp, sl
 800866e:	bf18      	it	ne
 8008670:	2001      	movne	r0, #1
 8008672:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008674:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8008676:	68ea      	ldr	r2, [r5, #12]
 8008678:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800867c:	1a1b      	subs	r3, r3, r0
 800867e:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8008680:	bfb8      	it	lt
 8008682:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8008684:	8990      	ldrh	r0, [r2, #12]
 8008686:	f7fc fa2f 	bl	8004ae8 <lwip_htons>
 800868a:	f010 0003 	ands.w	r0, r0, #3
 800868e:	bf18      	it	ne
 8008690:	2001      	movne	r0, #1
 8008692:	eb10 0f0a 	cmn.w	r0, sl
 8008696:	f000 80d9 	beq.w	800884c <tcp_output+0x2e0>
      seg->next = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800869e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086a0:	b913      	cbnz	r3, 80086a8 <tcp_output+0x13c>
        pcb->unacked = seg;
 80086a2:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 80086a4:	462f      	mov	r7, r5
 80086a6:	e016      	b.n	80086d6 <tcp_output+0x16a>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80086a8:	68eb      	ldr	r3, [r5, #12]
 80086aa:	6858      	ldr	r0, [r3, #4]
 80086ac:	f7fc fa1f 	bl	8004aee <lwip_htonl>
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4682      	mov	sl, r0
 80086b4:	6850      	ldr	r0, [r2, #4]
 80086b6:	f7fc fa1a 	bl	8004aee <lwip_htonl>
 80086ba:	ebaa 0000 	sub.w	r0, sl, r0
 80086be:	2800      	cmp	r0, #0
 80086c0:	f280 80c2 	bge.w	8008848 <tcp_output+0x2dc>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80086c4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	f040 80aa 	bne.w	8008824 <tcp_output+0x2b8>
          seg->next = (*cur_seg);
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 80086d4:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 80086d6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 80086d8:	2d00      	cmp	r5, #0
 80086da:	d0a2      	beq.n	8008622 <tcp_output+0xb6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80086dc:	68eb      	ldr	r3, [r5, #12]
 80086de:	6858      	ldr	r0, [r3, #4]
 80086e0:	f7fc fa05 	bl	8004aee <lwip_htonl>
 80086e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80086e6:	1ac0      	subs	r0, r0, r3
 80086e8:	892b      	ldrh	r3, [r5, #8]
 80086ea:	4418      	add	r0, r3
  while (seg != NULL &&
 80086ec:	42b0      	cmp	r0, r6
 80086ee:	d896      	bhi.n	800861e <tcp_output+0xb2>
    LWIP_ASSERT("RST not expected here!",
 80086f0:	68eb      	ldr	r3, [r5, #12]
 80086f2:	8998      	ldrh	r0, [r3, #12]
 80086f4:	f7fc f9f8 	bl	8004ae8 <lwip_htons>
 80086f8:	0742      	lsls	r2, r0, #29
 80086fa:	d506      	bpl.n	800870a <tcp_output+0x19e>
 80086fc:	4b43      	ldr	r3, [pc, #268]	; (800880c <tcp_output+0x2a0>)
 80086fe:	4947      	ldr	r1, [pc, #284]	; (800881c <tcp_output+0x2b0>)
 8008700:	4844      	ldr	r0, [pc, #272]	; (8008814 <tcp_output+0x2a8>)
 8008702:	f240 4246 	movw	r2, #1094	; 0x446
 8008706:	f004 f8b3 	bl	800c870 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800870a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800870c:	b1b3      	cbz	r3, 800873c <tcp_output+0x1d0>
 800870e:	7ea2      	ldrb	r2, [r4, #26]
 8008710:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008714:	d112      	bne.n	800873c <tcp_output+0x1d0>
 8008716:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008718:	b12b      	cbz	r3, 8008726 <tcp_output+0x1ba>
 800871a:	6819      	ldr	r1, [r3, #0]
 800871c:	b971      	cbnz	r1, 800873c <tcp_output+0x1d0>
 800871e:	8919      	ldrh	r1, [r3, #8]
 8008720:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008722:	4299      	cmp	r1, r3
 8008724:	d20a      	bcs.n	800873c <tcp_output+0x1d0>
 8008726:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800872a:	b13b      	cbz	r3, 800873c <tcp_output+0x1d0>
 800872c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008730:	2b08      	cmp	r3, #8
 8008732:	d803      	bhi.n	800873c <tcp_output+0x1d0>
 8008734:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8008738:	f43f af71 	beq.w	800861e <tcp_output+0xb2>
    if (pcb->state != SYN_SENT) {
 800873c:	7d23      	ldrb	r3, [r4, #20]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d009      	beq.n	8008756 <tcp_output+0x1ea>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008742:	68eb      	ldr	r3, [r5, #12]
 8008744:	2010      	movs	r0, #16
 8008746:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800874a:	f7fc f9cd 	bl	8004ae8 <lwip_htons>
 800874e:	68ea      	ldr	r2, [r5, #12]
 8008750:	ea4a 0000 	orr.w	r0, sl, r0
 8008754:	8190      	strh	r0, [r2, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008756:	686b      	ldr	r3, [r5, #4]
 8008758:	89db      	ldrh	r3, [r3, #14]
 800875a:	2b01      	cmp	r3, #1
 800875c:	f47f af6f 	bne.w	800863e <tcp_output+0xd2>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008760:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008762:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008766:	f7fc f9c2 	bl	8004aee <lwip_htonl>
 800876a:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800876e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008770:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008774:	f7fc f9b8 	bl	8004ae8 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008778:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800877a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800877c:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008780:	4413      	add	r3, r2
 8008782:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008784:	7aab      	ldrb	r3, [r5, #10]
 8008786:	07db      	lsls	r3, r3, #31
 8008788:	d50c      	bpl.n	80087a4 <tcp_output+0x238>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800878a:	4641      	mov	r1, r8
 800878c:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008790:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008794:	f7fd ff56 	bl	8006644 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008798:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800879c:	f7fc f9a7 	bl	8004aee <lwip_htonl>
 80087a0:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80087a4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80087a8:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 80087aa:	bfbc      	itt	lt
 80087ac:	2300      	movlt	r3, #0
 80087ae:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80087b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087b2:	b93b      	cbnz	r3, 80087c4 <tcp_output+0x258>
    pcb->rttest = tcp_ticks;
 80087b4:	4a1a      	ldr	r2, [pc, #104]	; (8008820 <tcp_output+0x2b4>)
 80087b6:	68eb      	ldr	r3, [r5, #12]
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80087bc:	6858      	ldr	r0, [r3, #4]
 80087be:	f7fc f996 	bl	8004aee <lwip_htonl>
 80087c2:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80087c4:	6868      	ldr	r0, [r5, #4]
 80087c6:	68ea      	ldr	r2, [r5, #12]
 80087c8:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80087ca:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 80087cc:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 80087d2:	1ac9      	subs	r1, r1, r3
 80087d4:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 80087d6:	8901      	ldrh	r1, [r0, #8]
 80087d8:	1acb      	subs	r3, r1, r3
 80087da:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	7413      	strb	r3, [r2, #16]
 80087e0:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80087e2:	2206      	movs	r2, #6
 80087e4:	9201      	str	r2, [sp, #4]
 80087e6:	7a62      	ldrb	r2, [r4, #9]
 80087e8:	9200      	str	r2, [sp, #0]
 80087ea:	7aa3      	ldrb	r3, [r4, #10]
 80087ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80087f0:	4642      	mov	r2, r8
 80087f2:	4621      	mov	r1, r4
 80087f4:	f002 fb4e 	bl	800ae94 <ip4_output_if>
    if (err != ERR_OK) {
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f43f af20 	beq.w	800863e <tcp_output+0xd2>
      pcb->flags |= TF_NAGLEMEMERR;
 80087fe:	7ea3      	ldrb	r3, [r4, #26]
 8008800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008804:	76a3      	strb	r3, [r4, #26]
}
 8008806:	b007      	add	sp, #28
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	0800eb27 	.word	0x0800eb27
 8008810:	0800eabc 	.word	0x0800eabc
 8008814:	0800d7e1 	.word	0x0800d7e1
 8008818:	2000badc 	.word	0x2000badc
 800881c:	0800eae2 	.word	0x0800eae2
 8008820:	2000bacc 	.word	0x2000bacc
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008824:	68d2      	ldr	r2, [r2, #12]
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	6850      	ldr	r0, [r2, #4]
 800882a:	f7fc f960 	bl	8004aee <lwip_htonl>
 800882e:	68e9      	ldr	r1, [r5, #12]
 8008830:	4682      	mov	sl, r0
 8008832:	6848      	ldr	r0, [r1, #4]
 8008834:	f7fc f95b 	bl	8004aee <lwip_htonl>
 8008838:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800883c:	2800      	cmp	r0, #0
 800883e:	9b05      	ldr	r3, [sp, #20]
 8008840:	f6bf af46 	bge.w	80086d0 <tcp_output+0x164>
              cur_seg = &((*cur_seg)->next );
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	e73f      	b.n	80086c8 <tcp_output+0x15c>
          useg->next = seg;
 8008848:	603d      	str	r5, [r7, #0]
 800884a:	e72b      	b.n	80086a4 <tcp_output+0x138>
      tcp_seg_free(seg);
 800884c:	4628      	mov	r0, r5
 800884e:	f7fd f995 	bl	8005b7c <tcp_seg_free>
 8008852:	e740      	b.n	80086d6 <tcp_output+0x16a>
    return ERR_RTE;
 8008854:	f06f 0003 	mvn.w	r0, #3
 8008858:	e7d5      	b.n	8008806 <tcp_output+0x29a>
 800885a:	bf00      	nop

0800885c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	b085      	sub	sp, #20
 8008862:	4681      	mov	r9, r0
 8008864:	460e      	mov	r6, r1
 8008866:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008868:	2114      	movs	r1, #20
 800886a:	2200      	movs	r2, #0
 800886c:	2001      	movs	r0, #1
{
 800886e:	461f      	mov	r7, r3
 8008870:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8008874:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008878:	f7fc fdd8 	bl	800542c <pbuf_alloc>
  if (p == NULL) {
 800887c:	4605      	mov	r5, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	d03c      	beq.n	80088fc <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008882:	8943      	ldrh	r3, [r0, #10]
 8008884:	2b13      	cmp	r3, #19
 8008886:	d806      	bhi.n	8008896 <tcp_rst+0x3a>
 8008888:	4b1e      	ldr	r3, [pc, #120]	; (8008904 <tcp_rst+0xa8>)
 800888a:	491f      	ldr	r1, [pc, #124]	; (8008908 <tcp_rst+0xac>)
 800888c:	481f      	ldr	r0, [pc, #124]	; (800890c <tcp_rst+0xb0>)
 800888e:	f240 524d 	movw	r2, #1357	; 0x54d
 8008892:	f003 ffed 	bl	800c870 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8008896:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8008898:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800889a:	f7fc f925 	bl	8004ae8 <lwip_htons>
 800889e:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80088a0:	4650      	mov	r0, sl
 80088a2:	f7fc f921 	bl	8004ae8 <lwip_htons>
 80088a6:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80088a8:	4648      	mov	r0, r9
 80088aa:	f7fc f920 	bl	8004aee <lwip_htonl>
 80088ae:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7fc f91c 	bl	8004aee <lwip_htonl>
 80088b6:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80088b8:	f245 0014 	movw	r0, #20500	; 0x5014
 80088bc:	f7fc f914 	bl	8004ae8 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80088c0:	2308      	movs	r3, #8
 80088c2:	2600      	movs	r6, #0
 80088c4:	73a3      	strb	r3, [r4, #14]
 80088c6:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80088c8:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80088ca:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 80088cc:	7426      	strb	r6, [r4, #16]
 80088ce:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 80088d0:	74a6      	strb	r6, [r4, #18]
 80088d2:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80088d4:	4638      	mov	r0, r7
 80088d6:	f002 f96b 	bl	800abb0 <ip4_route>
  if (netif != NULL) {
 80088da:	b148      	cbz	r0, 80088f0 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80088dc:	2306      	movs	r3, #6
 80088de:	9002      	str	r0, [sp, #8]
 80088e0:	e9cd 6300 	strd	r6, r3, [sp]
 80088e4:	463a      	mov	r2, r7
 80088e6:	23ff      	movs	r3, #255	; 0xff
 80088e8:	4641      	mov	r1, r8
 80088ea:	4628      	mov	r0, r5
 80088ec:	f002 fad2 	bl	800ae94 <ip4_output_if>
  }
  pbuf_free(p);
 80088f0:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80088f2:	b005      	add	sp, #20
 80088f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80088f8:	f7fc bd30 	b.w	800535c <pbuf_free>
}
 80088fc:	b005      	add	sp, #20
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	bf00      	nop
 8008904:	0800eb27 	.word	0x0800eb27
 8008908:	0800eaf9 	.word	0x0800eaf9
 800890c:	0800d7e1 	.word	0x0800d7e1

08008910 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008910:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8008912:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8008914:	b1aa      	cbz	r2, 8008942 <tcp_rexmit_rto+0x32>
 8008916:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008918:	680b      	ldr	r3, [r1, #0]
 800891a:	b983      	cbnz	r3, 800893e <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800891c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800891e:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008920:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008924:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008928:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800892a:	bf1c      	itt	ne
 800892c:	3301      	addne	r3, #1
 800892e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8008936:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800893a:	f7ff be17 	b.w	800856c <tcp_output>
 800893e:	4619      	mov	r1, r3
 8008940:	e7ea      	b.n	8008918 <tcp_rexmit_rto+0x8>
}
 8008942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008946:	4770      	bx	lr

08008948 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800894a:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800894c:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800894e:	b1ad      	cbz	r5, 800897c <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008954:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	b983      	cbnz	r3, 800897e <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800895c:	6833      	ldr	r3, [r6, #0]
 800895e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8008960:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	b90b      	cbnz	r3, 800896a <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008966:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800896a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800896e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8008970:	bf1c      	itt	ne
 8008972:	3301      	addne	r3, #1
 8008974:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	6363      	str	r3, [r4, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	6858      	ldr	r0, [r3, #4]
 8008982:	f7fc f8b4 	bl	8004aee <lwip_htonl>
 8008986:	68eb      	ldr	r3, [r5, #12]
 8008988:	4607      	mov	r7, r0
 800898a:	6858      	ldr	r0, [r3, #4]
 800898c:	f7fc f8af 	bl	8004aee <lwip_htonl>
 8008990:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8008992:	2800      	cmp	r0, #0
 8008994:	dae2      	bge.n	800895c <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8008996:	6836      	ldr	r6, [r6, #0]
 8008998:	e7de      	b.n	8008958 <tcp_rexmit+0x10>

0800899a <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800899a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800899c:	b510      	push	{r4, lr}
 800899e:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80089a0:	b30b      	cbz	r3, 80089e6 <tcp_rexmit_fast+0x4c>
 80089a2:	7e83      	ldrb	r3, [r0, #26]
 80089a4:	075b      	lsls	r3, r3, #29
 80089a6:	d41e      	bmi.n	80089e6 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80089a8:	f7ff ffce 	bl	8008948 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80089ac:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80089b0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80089b4:	4293      	cmp	r3, r2
 80089b6:	bf38      	it	cc
 80089b8:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80089ba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80089bc:	bf28      	it	cs
 80089be:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80089c0:	0059      	lsls	r1, r3, #1
 80089c2:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80089c4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80089c8:	bf38      	it	cc
 80089ca:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80089ce:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80089d2:	440b      	add	r3, r1
 80089d4:	4413      	add	r3, r2
 80089d6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80089da:	7ea3      	ldrb	r3, [r4, #26]
 80089dc:	f043 0304 	orr.w	r3, r3, #4
 80089e0:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	8623      	strh	r3, [r4, #48]	; 0x30
  }
}
 80089e6:	bd10      	pop	{r4, pc}

080089e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80089e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80089ea:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80089ec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80089ee:	3801      	subs	r0, #1
 80089f0:	f7fc f87d 	bl	8004aee <lwip_htonl>
 80089f4:	2100      	movs	r1, #0
 80089f6:	4602      	mov	r2, r0
 80089f8:	4620      	mov	r0, r4
 80089fa:	f7ff fa03 	bl	8007e04 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80089fe:	4605      	mov	r5, r0
 8008a00:	b1c8      	cbz	r0, 8008a36 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008a02:	1d26      	adds	r6, r4, #4
 8008a04:	4630      	mov	r0, r6
 8008a06:	f002 f8d3 	bl	800abb0 <ip4_route>
  if (netif == NULL) {
 8008a0a:	b188      	cbz	r0, 8008a30 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2106      	movs	r1, #6
 8008a10:	7aa3      	ldrb	r3, [r4, #10]
 8008a12:	9002      	str	r0, [sp, #8]
 8008a14:	e9cd 2100 	strd	r2, r1, [sp]
 8008a18:	4628      	mov	r0, r5
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	f002 fa39 	bl	800ae94 <ip4_output_if>
 8008a22:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008a24:	4628      	mov	r0, r5
 8008a26:	f7fc fc99 	bl	800535c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	b004      	add	sp, #16
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8008a30:	f06f 0403 	mvn.w	r4, #3
 8008a34:	e7f6      	b.n	8008a24 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8008a36:	f04f 34ff 	mov.w	r4, #4294967295
 8008a3a:	e7f6      	b.n	8008a2a <tcp_keepalive+0x42>

08008a3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008a3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008a40:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8008a42:	4606      	mov	r6, r0

  if (seg == NULL) {
 8008a44:	b914      	cbnz	r4, 8008a4c <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8008a46:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8008a48:	2c00      	cmp	r4, #0
 8008a4a:	d042      	beq.n	8008ad2 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008a4c:	68e3      	ldr	r3, [r4, #12]
 8008a4e:	8998      	ldrh	r0, [r3, #12]
 8008a50:	f7fc f84a 	bl	8004ae8 <lwip_htons>
 8008a54:	f010 0501 	ands.w	r5, r0, #1
 8008a58:	bf18      	it	ne
 8008a5a:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008a5c:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008a5e:	bf1c      	itt	ne
 8008a60:	fab5 f585 	clzne	r5, r5
 8008a64:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	f085 0101 	eor.w	r1, r5, #1
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff f9c9 	bl	8007e04 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008a72:	4607      	mov	r7, r0
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d03e      	beq.n	8008af6 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008a78:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8008a7c:	b36d      	cbz	r5, 8008ada <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008a7e:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8008a82:	2011      	movs	r0, #17
 8008a84:	f7fc f830 	bl	8004ae8 <lwip_htons>
 8008a88:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8008a8c:	b2ad      	uxth	r5, r5
 8008a8e:	4328      	orrs	r0, r5
 8008a90:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008a94:	68e3      	ldr	r3, [r4, #12]
 8008a96:	6858      	ldr	r0, [r3, #4]
 8008a98:	f7fc f829 	bl	8004aee <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008a9c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008a9e:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008aa0:	1a1b      	subs	r3, r3, r0
 8008aa2:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008aa4:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 8008aa8:	bfb8      	it	lt
 8008aaa:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008aac:	4620      	mov	r0, r4
 8008aae:	f002 f87f 	bl	800abb0 <ip4_route>
  if (netif == NULL) {
 8008ab2:	b1e8      	cbz	r0, 8008af0 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2106      	movs	r1, #6
 8008ab8:	e9cd 2100 	strd	r2, r1, [sp]
 8008abc:	9002      	str	r0, [sp, #8]
 8008abe:	4622      	mov	r2, r4
 8008ac0:	7ab3      	ldrb	r3, [r6, #10]
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f002 f9e5 	bl	800ae94 <ip4_output_if>
 8008aca:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7fc fc45 	bl	800535c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	b004      	add	sp, #16
 8008ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008ada:	6860      	ldr	r0, [r4, #4]
 8008adc:	8922      	ldrh	r2, [r4, #8]
 8008ade:	8903      	ldrh	r3, [r0, #8]
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f108 0114 	add.w	r1, r8, #20
 8008aea:	f7fc fed9 	bl	80058a0 <pbuf_copy_partial>
 8008aee:	e7d1      	b.n	8008a94 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8008af0:	f06f 0403 	mvn.w	r4, #3
 8008af4:	e7ea      	b.n	8008acc <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 8008af6:	f04f 34ff 	mov.w	r4, #4294967295
 8008afa:	e7ea      	b.n	8008ad2 <tcp_zero_window_probe+0x96>

08008afc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008b02:	200a      	movs	r0, #10
{
 8008b04:	460f      	mov	r7, r1
 8008b06:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008b08:	f7fc fa7a 	bl	8005000 <memp_malloc>
  if (timeout == NULL) {
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	b938      	cbnz	r0, 8008b20 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008b10:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <sys_timeout+0x8c>)
 8008b12:	491e      	ldr	r1, [pc, #120]	; (8008b8c <sys_timeout+0x90>)
 8008b14:	481e      	ldr	r0, [pc, #120]	; (8008b90 <sys_timeout+0x94>)
 8008b16:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8008b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008b1c:	f003 bea8 	b.w	800c870 <iprintf>
  now = sys_now();
 8008b20:	f003 f880 	bl	800bc24 <sys_now>
  if (next_timeout == NULL) {
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <sys_timeout+0x98>)
 8008b26:	491c      	ldr	r1, [pc, #112]	; (8008b98 <sys_timeout+0x9c>)
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	b95b      	cbnz	r3, 8008b44 <sys_timeout+0x48>
    timeouts_last_time = now;
 8008b2c:	6008      	str	r0, [r1, #0]
    diff = 0;
 8008b2e:	4618      	mov	r0, r3
  timeout->next = NULL;
 8008b30:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8008b32:	4428      	add	r0, r5
  timeout->next = NULL;
 8008b34:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8008b36:	e9c4 7602 	strd	r7, r6, [r4, #8]
  timeout->time = msecs + diff;
 8008b3a:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8008b3c:	b92b      	cbnz	r3, 8008b4a <sys_timeout+0x4e>
    next_timeout = timeout;
 8008b3e:	6014      	str	r4, [r2, #0]
}
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8008b44:	6809      	ldr	r1, [r1, #0]
 8008b46:	1a40      	subs	r0, r0, r1
 8008b48:	e7f2      	b.n	8008b30 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8008b4a:	6859      	ldr	r1, [r3, #4]
 8008b4c:	42a9      	cmp	r1, r5
 8008b4e:	d903      	bls.n	8008b58 <sys_timeout+0x5c>
    next_timeout->time -= msecs;
 8008b50:	1b4d      	subs	r5, r1, r5
 8008b52:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	e7f2      	b.n	8008b3e <sys_timeout+0x42>
 8008b58:	4618      	mov	r0, r3
      timeout->time -= t->time;
 8008b5a:	6841      	ldr	r1, [r0, #4]
 8008b5c:	6862      	ldr	r2, [r4, #4]
 8008b5e:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8008b60:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8008b62:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8008b64:	b139      	cbz	r1, 8008b76 <sys_timeout+0x7a>
 8008b66:	684e      	ldr	r6, [r1, #4]
 8008b68:	42b2      	cmp	r2, r6
 8008b6a:	d301      	bcc.n	8008b70 <sys_timeout+0x74>
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	e7f4      	b.n	8008b5a <sys_timeout+0x5e>
          t->next->time -= timeout->time;
 8008b70:	1ab2      	subs	r2, r6, r2
 8008b72:	604a      	str	r2, [r1, #4]
 8008b74:	e004      	b.n	8008b80 <sys_timeout+0x84>
        } else if (timeout->time > msecs) {
 8008b76:	42aa      	cmp	r2, r5
 8008b78:	d902      	bls.n	8008b80 <sys_timeout+0x84>
          timeout->time = msecs + next_timeout->time;
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	441d      	add	r5, r3
 8008b7e:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8008b80:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8008b82:	6004      	str	r4, [r0, #0]
        break;
 8008b84:	e7dc      	b.n	8008b40 <sys_timeout+0x44>
 8008b86:	bf00      	nop
 8008b88:	0800edc8 	.word	0x0800edc8
 8008b8c:	0800edfc 	.word	0x0800edfc
 8008b90:	0800d7e1 	.word	0x0800d7e1
 8008b94:	20008270 	.word	0x20008270
 8008b98:	20008278 	.word	0x20008278

08008b9c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008b9c:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <tcp_timer_needed+0x24>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	b962      	cbnz	r2, 8008bbc <tcp_timer_needed+0x20>
 8008ba2:	4a08      	ldr	r2, [pc, #32]	; (8008bc4 <tcp_timer_needed+0x28>)
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	b912      	cbnz	r2, 8008bae <tcp_timer_needed+0x12>
 8008ba8:	4a07      	ldr	r2, [pc, #28]	; (8008bc8 <tcp_timer_needed+0x2c>)
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	b132      	cbz	r2, 8008bbc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008bb2:	4906      	ldr	r1, [pc, #24]	; (8008bcc <tcp_timer_needed+0x30>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	20fa      	movs	r0, #250	; 0xfa
 8008bb8:	f7ff bfa0 	b.w	8008afc <sys_timeout>
}
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20008274 	.word	0x20008274
 8008bc4:	2000bac8 	.word	0x2000bac8
 8008bc8:	2000bad8 	.word	0x2000bad8
 8008bcc:	08008bd1 	.word	0x08008bd1

08008bd0 <tcpip_tcp_timer>:
{
 8008bd0:	b508      	push	{r3, lr}
  tcp_tmr();
 8008bd2:	f7fd fbe7 	bl	80063a4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008bd6:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <tcpip_tcp_timer+0x28>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	b913      	cbnz	r3, 8008be2 <tcpip_tcp_timer+0x12>
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <tcpip_tcp_timer+0x2c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	b133      	cbz	r3, 8008bf0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008be2:	2200      	movs	r2, #0
 8008be4:	4906      	ldr	r1, [pc, #24]	; (8008c00 <tcpip_tcp_timer+0x30>)
 8008be6:	20fa      	movs	r0, #250	; 0xfa
}
 8008be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008bec:	f7ff bf86 	b.w	8008afc <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8008bf0:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <tcpip_tcp_timer+0x34>)
 8008bf2:	6013      	str	r3, [r2, #0]
}
 8008bf4:	bd08      	pop	{r3, pc}
 8008bf6:	bf00      	nop
 8008bf8:	2000bac8 	.word	0x2000bac8
 8008bfc:	2000bad8 	.word	0x2000bad8
 8008c00:	08008bd1 	.word	0x08008bd1
 8008c04:	20008274 	.word	0x20008274

08008c08 <sys_timeouts_init>:
{
 8008c08:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8008c0a:	4d11      	ldr	r5, [pc, #68]	; (8008c50 <sys_timeouts_init+0x48>)
 8008c0c:	4c11      	ldr	r4, [pc, #68]	; (8008c54 <sys_timeouts_init+0x4c>)
 8008c0e:	f105 0208 	add.w	r2, r5, #8
 8008c12:	4621      	mov	r1, r4
 8008c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c18:	f7ff ff70 	bl	8008afc <sys_timeout>
 8008c1c:	f105 0210 	add.w	r2, r5, #16
 8008c20:	4621      	mov	r1, r4
 8008c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c26:	f7ff ff69 	bl	8008afc <sys_timeout>
 8008c2a:	f105 0218 	add.w	r2, r5, #24
 8008c2e:	4621      	mov	r1, r4
 8008c30:	f64e 2060 	movw	r0, #60000	; 0xea60
 8008c34:	f7ff ff62 	bl	8008afc <sys_timeout>
 8008c38:	f105 0220 	add.w	r2, r5, #32
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c42:	f7ff ff5b 	bl	8008afc <sys_timeout>
  timeouts_last_time = sys_now();
 8008c46:	f002 ffed 	bl	800bc24 <sys_now>
 8008c4a:	4b03      	ldr	r3, [pc, #12]	; (8008c58 <sys_timeouts_init+0x50>)
 8008c4c:	6018      	str	r0, [r3, #0]
}
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	0800eda0 	.word	0x0800eda0
 8008c54:	08008c5d 	.word	0x08008c5d
 8008c58:	20008278 	.word	0x20008278

08008c5c <cyclic_timer>:
{
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	4604      	mov	r4, r0
  cyclic->handler();
 8008c60:	6843      	ldr	r3, [r0, #4]
 8008c62:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8008c64:	4622      	mov	r2, r4
 8008c66:	6820      	ldr	r0, [r4, #0]
 8008c68:	4902      	ldr	r1, [pc, #8]	; (8008c74 <cyclic_timer+0x18>)
}
 8008c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8008c6e:	f7ff bf45 	b.w	8008afc <sys_timeout>
 8008c72:	bf00      	nop
 8008c74:	08008c5d 	.word	0x08008c5d

08008c78 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8008c78:	b470      	push	{r4, r5, r6}
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 8008c7a:	4c10      	ldr	r4, [pc, #64]	; (8008cbc <sys_untimeout+0x44>)
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	b1db      	cbz	r3, 8008cb8 <sys_untimeout+0x40>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8008c80:	2500      	movs	r5, #0
    if ((t->h == handler) && (t->arg == arg)) {
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	4282      	cmp	r2, r0
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	d113      	bne.n	8008cb2 <sys_untimeout+0x3a>
 8008c8a:	68de      	ldr	r6, [r3, #12]
 8008c8c:	428e      	cmp	r6, r1
 8008c8e:	d110      	bne.n	8008cb2 <sys_untimeout+0x3a>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8008c90:	b96d      	cbnz	r5, 8008cae <sys_untimeout+0x36>
        next_timeout = t->next;
 8008c92:	6022      	str	r2, [r4, #0]
      } else {
        prev_t->next = t->next;
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	b11a      	cbz	r2, 8008ca0 <sys_untimeout+0x28>
        t->next->time += t->time;
 8008c98:	6851      	ldr	r1, [r2, #4]
 8008c9a:	6858      	ldr	r0, [r3, #4]
 8008c9c:	4401      	add	r1, r0
 8008c9e:	6051      	str	r1, [r2, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	200a      	movs	r0, #10
      return;
    }
  }
  return;
}
 8008ca4:	bc70      	pop	{r4, r5, r6}
      memp_free(MEMP_SYS_TIMEOUT, t);
 8008ca6:	f7fc b9c7 	b.w	8005038 <memp_free>
 8008caa:	4613      	mov	r3, r2
 8008cac:	e7e9      	b.n	8008c82 <sys_untimeout+0xa>
        prev_t->next = t->next;
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	e7f0      	b.n	8008c94 <sys_untimeout+0x1c>
 8008cb2:	461d      	mov	r5, r3
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d1f8      	bne.n	8008caa <sys_untimeout+0x32>
}
 8008cb8:	bc70      	pop	{r4, r5, r6}
 8008cba:	4770      	bx	lr
 8008cbc:	20008270 	.word	0x20008270

08008cc0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8008cc4:	4d24      	ldr	r5, [pc, #144]	; (8008d58 <sys_timeouts_mbox_fetch+0x98>)
  diff = sys_now() - timeouts_last_time;
 8008cc6:	4c25      	ldr	r4, [pc, #148]	; (8008d5c <sys_timeouts_mbox_fetch+0x9c>)
{
 8008cc8:	4681      	mov	r9, r0
 8008cca:	468a      	mov	sl, r1
 8008ccc:	462e      	mov	r6, r5
  if (!next_timeout) {
 8008cce:	682a      	ldr	r2, [r5, #0]
 8008cd0:	b932      	cbnz	r2, 8008ce0 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008cd2:	4651      	mov	r1, sl
 8008cd4:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 8008cd6:	b003      	add	sp, #12
 8008cd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008cdc:	f002 bd4a 	b.w	800b774 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 8008ce0:	f002 ffa0 	bl	800bc24 <sys_now>
 8008ce4:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 8008ce6:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 8008ce8:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4290      	cmp	r0, r2
 8008cee:	d927      	bls.n	8008d40 <sys_timeouts_mbox_fetch+0x80>
  if (next_timeout) {
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0eb      	beq.n	8008cce <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 8008cf6:	f002 ff95 	bl	800bc24 <sys_now>
    diff = now - timeouts_last_time;
 8008cfa:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 8008cfc:	4f18      	ldr	r7, [pc, #96]	; (8008d60 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 8008cfe:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 8008d02:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d0e2      	beq.n	8008cce <sys_timeouts_mbox_fetch+0xe>
 8008d08:	684a      	ldr	r2, [r1, #4]
 8008d0a:	455a      	cmp	r2, fp
 8008d0c:	d8df      	bhi.n	8008cce <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 8008d0e:	6820      	ldr	r0, [r4, #0]
        arg = tmptimeout->arg;
 8008d10:	e9d1 8302 	ldrd	r8, r3, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 8008d14:	4410      	add	r0, r2
 8008d16:	6020      	str	r0, [r4, #0]
        diff -= tmptimeout->time;
 8008d18:	ebab 0b02 	sub.w	fp, fp, r2
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008d1c:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 8008d1e:	680a      	ldr	r2, [r1, #0]
 8008d20:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 8008d22:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008d24:	f7fc f988 	bl	8005038 <memp_free>
        if (handler != NULL) {
 8008d28:	f1b8 0f00 	cmp.w	r8, #0
 8008d2c:	d0e9      	beq.n	8008d02 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f002 fd63 	bl	800b7fa <sys_mutex_lock>
          handler(arg);
 8008d34:	9801      	ldr	r0, [sp, #4]
 8008d36:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f002 fd63 	bl	800b804 <sys_mutex_unlock>
 8008d3e:	e7e0      	b.n	8008d02 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8008d40:	1a12      	subs	r2, r2, r0
 8008d42:	d0d5      	beq.n	8008cf0 <sys_timeouts_mbox_fetch+0x30>
 8008d44:	4651      	mov	r1, sl
 8008d46:	4648      	mov	r0, r9
 8008d48:	f002 fd14 	bl	800b774 <sys_arch_mbox_fetch>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0cf      	beq.n	8008cf0 <sys_timeouts_mbox_fetch+0x30>
}
 8008d50:	b003      	add	sp, #12
 8008d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	bf00      	nop
 8008d58:	20008270 	.word	0x20008270
 8008d5c:	20008278 	.word	0x20008278
 8008d60:	200083a0 	.word	0x200083a0

08008d64 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008d64:	4770      	bx	lr
	...

08008d68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008d6c:	8943      	ldrh	r3, [r0, #10]
 8008d6e:	2b07      	cmp	r3, #7
{
 8008d70:	b085      	sub	sp, #20
 8008d72:	4605      	mov	r5, r0
 8008d74:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8008d76:	d805      	bhi.n	8008d84 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8008d78:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8008d7a:	b005      	add	sp, #20
 8008d7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8008d80:	f7fc baec 	b.w	800535c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008d84:	4e3d      	ldr	r6, [pc, #244]	; (8008e7c <udp_input+0x114>)
  udphdr = (struct udp_hdr *)p->payload;
 8008d86:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008d88:	6831      	ldr	r1, [r6, #0]
 8008d8a:	6970      	ldr	r0, [r6, #20]
 8008d8c:	f002 f893 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 8008d90:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8008d92:	8820      	ldrh	r0, [r4, #0]
 8008d94:	f7fb fea8 	bl	8004ae8 <lwip_htons>
 8008d98:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8008d9a:	8860      	ldrh	r0, [r4, #2]
 8008d9c:	f7fb fea4 	bl	8004ae8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008da0:	4a37      	ldr	r2, [pc, #220]	; (8008e80 <udp_input+0x118>)
 8008da2:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8008da4:	4682      	mov	sl, r0
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008da6:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008daa:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 8008dac:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dae:	4603      	mov	r3, r0
  prev = NULL;
 8008db0:	46a6      	mov	lr, r4
 8008db2:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008db4:	b99b      	cbnz	r3, 8008dde <udp_input+0x76>
  if (pcb != NULL) {
 8008db6:	b91c      	cbnz	r4, 8008dc0 <udp_input+0x58>
  if (for_us) {
 8008db8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	d1db      	bne.n	8008d78 <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 8008dc0:	f06f 0107 	mvn.w	r1, #7
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f7fc fac3 	bl	8005350 <pbuf_header>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d034      	beq.n	8008e38 <udp_input+0xd0>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8008dce:	4b2d      	ldr	r3, [pc, #180]	; (8008e84 <udp_input+0x11c>)
 8008dd0:	492d      	ldr	r1, [pc, #180]	; (8008e88 <udp_input+0x120>)
 8008dd2:	482e      	ldr	r0, [pc, #184]	; (8008e8c <udp_input+0x124>)
 8008dd4:	f240 1255 	movw	r2, #341	; 0x155
 8008dd8:	f003 fd4a 	bl	800c870 <iprintf>
 8008ddc:	e7cc      	b.n	8008d78 <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 8008dde:	8a5a      	ldrh	r2, [r3, #18]
 8008de0:	4552      	cmp	r2, sl
 8008de2:	d126      	bne.n	8008e32 <udp_input+0xca>
 8008de4:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8008de6:	b307      	cbz	r7, 8008e2a <udp_input+0xc2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008de8:	b13a      	cbz	r2, 8008dfa <udp_input+0x92>
 8008dea:	1c4e      	adds	r6, r1, #1
 8008dec:	d005      	beq.n	8008dfa <udp_input+0x92>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008dee:	404a      	eors	r2, r1
 8008df0:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008df2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8008df6:	4216      	tst	r6, r2
 8008df8:	d11b      	bne.n	8008e32 <udp_input+0xca>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8008dfa:	7c1a      	ldrb	r2, [r3, #16]
 8008dfc:	0752      	lsls	r2, r2, #29
 8008dfe:	d402      	bmi.n	8008e06 <udp_input+0x9e>
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	bf08      	it	eq
 8008e04:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8008e06:	8a9a      	ldrh	r2, [r3, #20]
 8008e08:	4542      	cmp	r2, r8
 8008e0a:	d112      	bne.n	8008e32 <udp_input+0xca>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008e0c:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8008e0e:	b10a      	cbz	r2, 8008e14 <udp_input+0xac>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008e10:	4562      	cmp	r2, ip
 8008e12:	d10e      	bne.n	8008e32 <udp_input+0xca>
        if (prev != NULL) {
 8008e14:	f1be 0f00 	cmp.w	lr, #0
 8008e18:	d005      	beq.n	8008e26 <udp_input+0xbe>
          prev->next = pcb->next;
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	f8ce 200c 	str.w	r2, [lr, #12]
          udp_pcbs = pcb;
 8008e20:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8008e24:	60d8      	str	r0, [r3, #12]
 8008e26:	461c      	mov	r4, r3
 8008e28:	e7ca      	b.n	8008dc0 <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d0e5      	beq.n	8008dfa <udp_input+0x92>
 8008e2e:	428a      	cmp	r2, r1
 8008e30:	d0e3      	beq.n	8008dfa <udp_input+0x92>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e32:	469e      	mov	lr, r3
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	e7bd      	b.n	8008db4 <udp_input+0x4c>
    if (pcb != NULL) {
 8008e38:	b164      	cbz	r4, 8008e54 <udp_input+0xec>
      if (pcb->recv != NULL) {
 8008e3a:	69a6      	ldr	r6, [r4, #24]
 8008e3c:	2e00      	cmp	r6, #0
 8008e3e:	d09b      	beq.n	8008d78 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008e40:	f8cd 8000 	str.w	r8, [sp]
 8008e44:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <udp_input+0x128>)
 8008e46:	69e0      	ldr	r0, [r4, #28]
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	47b0      	blx	r6
}
 8008e4e:	b005      	add	sp, #20
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008e54:	2f00      	cmp	r7, #0
 8008e56:	d18f      	bne.n	8008d78 <udp_input+0x10>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e60:	2be0      	cmp	r3, #224	; 0xe0
 8008e62:	d089      	beq.n	8008d78 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	8999      	ldrh	r1, [r3, #12]
 8008e68:	3108      	adds	r1, #8
 8008e6a:	b209      	sxth	r1, r1
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f7fc fa72 	bl	8005356 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008e72:	2103      	movs	r1, #3
 8008e74:	4628      	mov	r0, r5
 8008e76:	f001 fe91 	bl	800ab9c <icmp_dest_unreach>
 8008e7a:	e77d      	b.n	8008d78 <udp_input+0x10>
 8008e7c:	200083a4 	.word	0x200083a4
 8008e80:	2000bae0 	.word	0x2000bae0
 8008e84:	0800ee39 	.word	0x0800ee39
 8008e88:	0800ee68 	.word	0x0800ee68
 8008e8c:	0800d7e1 	.word	0x0800d7e1
 8008e90:	200083b4 	.word	0x200083b4

08008e94 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8008e94:	4b26      	ldr	r3, [pc, #152]	; (8008f30 <udp_bind+0x9c>)
{
 8008e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	bf08      	it	eq
 8008e9e:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d042      	beq.n	8008f2a <udp_bind+0x96>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008ea4:	4e23      	ldr	r6, [pc, #140]	; (8008f34 <udp_bind+0xa0>)
 8008ea6:	f8d6 c000 	ldr.w	ip, [r6]
 8008eaa:	4665      	mov	r5, ip
 8008eac:	b9cd      	cbnz	r5, 8008ee2 <udp_bind+0x4e>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	d139      	bne.n	8008f26 <udp_bind+0x92>
 8008eb2:	4b21      	ldr	r3, [pc, #132]	; (8008f38 <udp_bind+0xa4>)
 8008eb4:	881a      	ldrh	r2, [r3, #0]
 8008eb6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008eba:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8008ebe:	4572      	cmp	r2, lr
 8008ec0:	bf1a      	itte	ne
 8008ec2:	3201      	addne	r2, #1
 8008ec4:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008ec6:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008eca:	4667      	mov	r7, ip
 8008ecc:	b97f      	cbnz	r7, 8008eee <udp_bind+0x5a>
 8008ece:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008ed0:	680b      	ldr	r3, [r1, #0]
 8008ed2:	6003      	str	r3, [r0, #0]

  pcb->local_port = port;
 8008ed4:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008ed6:	b915      	cbnz	r5, 8008ede <udp_bind+0x4a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008ed8:	f8c0 c00c 	str.w	ip, [r0, #12]
    udp_pcbs = pcb;
 8008edc:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e010      	b.n	8008f04 <udp_bind+0x70>
    if (pcb == ipcb) {
 8008ee2:	4285      	cmp	r5, r0
 8008ee4:	d001      	beq.n	8008eea <udp_bind+0x56>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008ee6:	68ed      	ldr	r5, [r5, #12]
 8008ee8:	e7e0      	b.n	8008eac <udp_bind+0x18>
      rebind = 1;
 8008eea:	2501      	movs	r5, #1
 8008eec:	e7df      	b.n	8008eae <udp_bind+0x1a>
    if (pcb->local_port == udp_port) {
 8008eee:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8008ef2:	4590      	cmp	r8, r2
 8008ef4:	d108      	bne.n	8008f08 <udp_bind+0x74>
 8008ef6:	3c01      	subs	r4, #1
 8008ef8:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	d1df      	bne.n	8008ebe <udp_bind+0x2a>
 8008efe:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8008f00:	f06f 0007 	mvn.w	r0, #7
}
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f08:	68ff      	ldr	r7, [r7, #12]
 8008f0a:	e7df      	b.n	8008ecc <udp_bind+0x38>
      if (pcb != ipcb) {
 8008f0c:	4283      	cmp	r3, r0
 8008f0e:	d006      	beq.n	8008f1e <udp_bind+0x8a>
          if ((ipcb->local_port == port) &&
 8008f10:	8a5c      	ldrh	r4, [r3, #18]
 8008f12:	4294      	cmp	r4, r2
 8008f14:	d103      	bne.n	8008f1e <udp_bind+0x8a>
 8008f16:	681f      	ldr	r7, [r3, #0]
 8008f18:	680c      	ldr	r4, [r1, #0]
 8008f1a:	42a7      	cmp	r7, r4
 8008f1c:	d0f0      	beq.n	8008f00 <udp_bind+0x6c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f3      	bne.n	8008f0c <udp_bind+0x78>
 8008f24:	e7d4      	b.n	8008ed0 <udp_bind+0x3c>
 8008f26:	4663      	mov	r3, ip
 8008f28:	e7fa      	b.n	8008f20 <udp_bind+0x8c>
    return ERR_VAL;
 8008f2a:	f06f 0005 	mvn.w	r0, #5
 8008f2e:	e7e9      	b.n	8008f04 <udp_bind+0x70>
 8008f30:	0800f5ec 	.word	0x0800f5ec
 8008f34:	2000bae0 	.word	0x2000bae0
 8008f38:	2000000e 	.word	0x2000000e

08008f3c <udp_sendto_if_src>:
{
 8008f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f40:	460e      	mov	r6, r1
 8008f42:	b085      	sub	sp, #20
 8008f44:	4690      	mov	r8, r2
 8008f46:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8008f48:	4607      	mov	r7, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d050      	beq.n	8008ff0 <udp_sendto_if_src+0xb4>
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d04e      	beq.n	8008ff0 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 8008f52:	8a42      	ldrh	r2, [r0, #18]
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d033      	beq.n	8008fc0 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 8008f58:	2108      	movs	r1, #8
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f7fc f9f8 	bl	8005350 <pbuf_header>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d137      	bne.n	8008fd4 <udp_sendto_if_src+0x98>
 8008f64:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008f66:	8963      	ldrh	r3, [r4, #10]
 8008f68:	2b07      	cmp	r3, #7
 8008f6a:	d806      	bhi.n	8008f7a <udp_sendto_if_src+0x3e>
 8008f6c:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <udp_sendto_if_src+0xc0>)
 8008f6e:	4924      	ldr	r1, [pc, #144]	; (8009000 <udp_sendto_if_src+0xc4>)
 8008f70:	4824      	ldr	r0, [pc, #144]	; (8009004 <udp_sendto_if_src+0xc8>)
 8008f72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008f76:	f003 fc7b 	bl	800c870 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 8008f7a:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 8008f7c:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8008f7e:	f7fb fdb3 	bl	8004ae8 <lwip_htons>
 8008f82:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 8008f84:	4648      	mov	r0, r9
 8008f86:	f7fb fdaf 	bl	8004ae8 <lwip_htons>
  udphdr->chksum = 0x0000;
 8008f8a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8008f8c:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 8008f8e:	71ab      	strb	r3, [r5, #6]
 8008f90:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8008f92:	8920      	ldrh	r0, [r4, #8]
 8008f94:	f7fb fda8 	bl	8004ae8 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8008f9a:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008f9c:	7abb      	ldrb	r3, [r7, #10]
 8008f9e:	9202      	str	r2, [sp, #8]
 8008fa0:	2211      	movs	r2, #17
 8008fa2:	9201      	str	r2, [sp, #4]
 8008fa4:	7a7a      	ldrb	r2, [r7, #9]
 8008fa6:	9200      	str	r2, [sp, #0]
 8008fa8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008faa:	4642      	mov	r2, r8
 8008fac:	4620      	mov	r0, r4
 8008fae:	f001 fef9 	bl	800ada4 <ip4_output_if_src>
  if (q != p) {
 8008fb2:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008fb4:	4605      	mov	r5, r0
  if (q != p) {
 8008fb6:	d009      	beq.n	8008fcc <udp_sendto_if_src+0x90>
    pbuf_free(q);
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f7fc f9cf 	bl	800535c <pbuf_free>
 8008fbe:	e005      	b.n	8008fcc <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	f7ff ff67 	bl	8008e94 <udp_bind>
    if (err != ERR_OK) {
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d0c5      	beq.n	8008f58 <udp_sendto_if_src+0x1c>
}
 8008fcc:	4628      	mov	r0, r5
 8008fce:	b005      	add	sp, #20
 8008fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2108      	movs	r1, #8
 8008fd8:	2001      	movs	r0, #1
 8008fda:	f7fc fa27 	bl	800542c <pbuf_alloc>
    if (q == NULL) {
 8008fde:	4604      	mov	r4, r0
 8008fe0:	b148      	cbz	r0, 8008ff6 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 8008fe2:	8933      	ldrh	r3, [r6, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0be      	beq.n	8008f66 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 8008fe8:	4631      	mov	r1, r6
 8008fea:	f7fc fbc9 	bl	8005780 <pbuf_chain>
 8008fee:	e7ba      	b.n	8008f66 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 8008ff0:	f06f 0505 	mvn.w	r5, #5
 8008ff4:	e7ea      	b.n	8008fcc <udp_sendto_if_src+0x90>
      return ERR_MEM;
 8008ff6:	f04f 35ff 	mov.w	r5, #4294967295
 8008ffa:	e7e7      	b.n	8008fcc <udp_sendto_if_src+0x90>
 8008ffc:	0800ee39 	.word	0x0800ee39
 8009000:	0800ee7c 	.word	0x0800ee7c
 8009004:	0800d7e1 	.word	0x0800d7e1

08009008 <udp_sendto_if>:
{
 8009008:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800900a:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800900c:	b190      	cbz	r0, 8009034 <udp_sendto_if+0x2c>
 800900e:	b18a      	cbz	r2, 8009034 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009010:	6805      	ldr	r5, [r0, #0]
 8009012:	b11d      	cbz	r5, 800901c <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8009014:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009018:	2ee0      	cmp	r6, #224	; 0xe0
 800901a:	d106      	bne.n	800902a <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800901c:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800901e:	e9cd 4500 	strd	r4, r5, [sp]
 8009022:	f7ff ff8b 	bl	8008f3c <udp_sendto_if_src>
}
 8009026:	b002      	add	sp, #8
 8009028:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800902a:	6866      	ldr	r6, [r4, #4]
 800902c:	42b5      	cmp	r5, r6
 800902e:	d104      	bne.n	800903a <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009030:	4605      	mov	r5, r0
 8009032:	e7f4      	b.n	800901e <udp_sendto_if+0x16>
    return ERR_VAL;
 8009034:	f06f 0005 	mvn.w	r0, #5
 8009038:	e7f5      	b.n	8009026 <udp_sendto_if+0x1e>
      return ERR_RTE;
 800903a:	f06f 0003 	mvn.w	r0, #3
 800903e:	e7f2      	b.n	8009026 <udp_sendto_if+0x1e>

08009040 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	460d      	mov	r5, r1
 8009044:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009046:	4604      	mov	r4, r0
 8009048:	b1d0      	cbz	r0, 8009080 <udp_connect+0x40>
 800904a:	b1c9      	cbz	r1, 8009080 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800904c:	8a42      	ldrh	r2, [r0, #18]
 800904e:	b16a      	cbz	r2, 800906c <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009054:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 8009056:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009058:	f043 0304 	orr.w	r3, r3, #4
 800905c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <udp_connect+0x4c>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	4610      	mov	r0, r2
 8009064:	b940      	cbnz	r0, 8009078 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8009066:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8009068:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800906a:	e004      	b.n	8009076 <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800906c:	4601      	mov	r1, r0
 800906e:	f7ff ff11 	bl	8008e94 <udp_bind>
    if (err != ERR_OK) {
 8009072:	2800      	cmp	r0, #0
 8009074:	d0ec      	beq.n	8009050 <udp_connect+0x10>
}
 8009076:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 8009078:	42a0      	cmp	r0, r4
 800907a:	d004      	beq.n	8009086 <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800907c:	68c0      	ldr	r0, [r0, #12]
 800907e:	e7f1      	b.n	8009064 <udp_connect+0x24>
    return ERR_VAL;
 8009080:	f06f 0005 	mvn.w	r0, #5
 8009084:	e7f7      	b.n	8009076 <udp_connect+0x36>
      return ERR_OK;
 8009086:	2000      	movs	r0, #0
 8009088:	e7f5      	b.n	8009076 <udp_connect+0x36>
 800908a:	bf00      	nop
 800908c:	2000bae0 	.word	0x2000bae0

08009090 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8009090:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 8009094:	4770      	bx	lr
	...

08009098 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8009098:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <udp_remove+0x2c>)
 800909a:	6813      	ldr	r3, [r2, #0]
 800909c:	4283      	cmp	r3, r0
{
 800909e:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 80090a0:	d105      	bne.n	80090ae <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80090a2:	68c3      	ldr	r3, [r0, #12]
 80090a4:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80090a6:	2000      	movs	r0, #0
 80090a8:	f7fb bfc6 	b.w	8005038 <memp_free>
 80090ac:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0f9      	beq.n	80090a6 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80090b2:	68da      	ldr	r2, [r3, #12]
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	d0f6      	beq.n	80090a6 <udp_remove+0xe>
 80090b8:	428a      	cmp	r2, r1
 80090ba:	d1f7      	bne.n	80090ac <udp_remove+0x14>
        pcb2->next = pcb->next;
 80090bc:	68ca      	ldr	r2, [r1, #12]
 80090be:	60da      	str	r2, [r3, #12]
        break;
 80090c0:	e7f1      	b.n	80090a6 <udp_remove+0xe>
 80090c2:	bf00      	nop
 80090c4:	2000bae0 	.word	0x2000bae0

080090c8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80090c8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80090ca:	2000      	movs	r0, #0
 80090cc:	f7fb ff98 	bl	8005000 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80090d0:	4604      	mov	r4, r0
 80090d2:	b128      	cbz	r0, 80090e0 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80090d4:	2220      	movs	r2, #32
 80090d6:	2100      	movs	r1, #0
 80090d8:	f003 fb1a 	bl	800c710 <memset>
    pcb->ttl = UDP_TTL;
 80090dc:	23ff      	movs	r3, #255	; 0xff
 80090de:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80090e0:	4620      	mov	r0, r4
 80090e2:	bd10      	pop	{r4, pc}

080090e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80090e4:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80090e6:	b138      	cbz	r0, 80090f8 <udp_netif_ip_addr_changed+0x14>
 80090e8:	6803      	ldr	r3, [r0, #0]
 80090ea:	b12b      	cbz	r3, 80090f8 <udp_netif_ip_addr_changed+0x14>
 80090ec:	b121      	cbz	r1, 80090f8 <udp_netif_ip_addr_changed+0x14>
 80090ee:	680b      	ldr	r3, [r1, #0]
 80090f0:	b113      	cbz	r3, 80090f8 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80090f2:	4b06      	ldr	r3, [pc, #24]	; (800910c <udp_netif_ip_addr_changed+0x28>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	b903      	cbnz	r3, 80090fa <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 80090f8:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80090fa:	681c      	ldr	r4, [r3, #0]
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009100:	bf04      	itt	eq
 8009102:	680a      	ldreq	r2, [r1, #0]
 8009104:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	e7f5      	b.n	80090f6 <udp_netif_ip_addr_changed+0x12>
 800910a:	bf00      	nop
 800910c:	2000bae0 	.word	0x2000bae0

08009110 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8009110:	7a43      	ldrb	r3, [r0, #9]
 8009112:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8009114:	bf1f      	itttt	ne
 8009116:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8009118:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 800911a:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 800911c:	82c3      	strhne	r3, [r0, #22]
  }
}
 800911e:	4770      	bx	lr

08009120 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8009120:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8009122:	8a83      	ldrh	r3, [r0, #20]
 8009124:	3302      	adds	r3, #2
 8009126:	2b44      	cmp	r3, #68	; 0x44
{
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800912c:	d906      	bls.n	800913c <dhcp_option_short+0x1c>
 800912e:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <dhcp_option_short+0x38>)
 8009130:	490a      	ldr	r1, [pc, #40]	; (800915c <dhcp_option_short+0x3c>)
 8009132:	480b      	ldr	r0, [pc, #44]	; (8009160 <dhcp_option_short+0x40>)
 8009134:	f240 5282 	movw	r2, #1410	; 0x582
 8009138:	f003 fb9a 	bl	800c870 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800913c:	8aa3      	ldrh	r3, [r4, #20]
 800913e:	6922      	ldr	r2, [r4, #16]
 8009140:	18d1      	adds	r1, r2, r3
 8009142:	0a28      	lsrs	r0, r5, #8
 8009144:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8009148:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800914a:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800914c:	fa12 f383 	uxtah	r3, r2, r3
 8009150:	82a1      	strh	r1, [r4, #20]
 8009152:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	0800f11a 	.word	0x0800f11a
 800915c:	0800f14f 	.word	0x0800f14f
 8009160:	0800d7e1 	.word	0x0800d7e1

08009164 <dhcp_option>:
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8009164:	8a83      	ldrh	r3, [r0, #20]
{
 8009166:	b570      	push	{r4, r5, r6, lr}
 8009168:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800916a:	3202      	adds	r2, #2
 800916c:	4413      	add	r3, r2
 800916e:	2b44      	cmp	r3, #68	; 0x44
{
 8009170:	4604      	mov	r4, r0
 8009172:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8009174:	d906      	bls.n	8009184 <dhcp_option+0x20>
 8009176:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <dhcp_option+0x3c>)
 8009178:	490a      	ldr	r1, [pc, #40]	; (80091a4 <dhcp_option+0x40>)
 800917a:	480b      	ldr	r0, [pc, #44]	; (80091a8 <dhcp_option+0x44>)
 800917c:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009180:	f003 fb76 	bl	800c870 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8009184:	8aa3      	ldrh	r3, [r4, #20]
 8009186:	6922      	ldr	r2, [r4, #16]
 8009188:	18d1      	adds	r1, r2, r3
 800918a:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800918e:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8009190:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8009192:	fa12 f383 	uxtah	r3, r2, r3
 8009196:	82a1      	strh	r1, [r4, #20]
 8009198:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800919c:	bd70      	pop	{r4, r5, r6, pc}
 800919e:	bf00      	nop
 80091a0:	0800f11a 	.word	0x0800f11a
 80091a4:	0800f057 	.word	0x0800f057
 80091a8:	0800d7e1 	.word	0x0800d7e1

080091ac <dhcp_option_byte>:
{
 80091ac:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80091ae:	8a83      	ldrh	r3, [r0, #20]
 80091b0:	2b43      	cmp	r3, #67	; 0x43
{
 80091b2:	4604      	mov	r4, r0
 80091b4:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80091b6:	d906      	bls.n	80091c6 <dhcp_option_byte+0x1a>
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <dhcp_option_byte+0x2c>)
 80091ba:	4908      	ldr	r1, [pc, #32]	; (80091dc <dhcp_option_byte+0x30>)
 80091bc:	4808      	ldr	r0, [pc, #32]	; (80091e0 <dhcp_option_byte+0x34>)
 80091be:	f240 527b 	movw	r2, #1403	; 0x57b
 80091c2:	f003 fb55 	bl	800c870 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80091c6:	8aa2      	ldrh	r2, [r4, #20]
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	4413      	add	r3, r2
 80091cc:	1c51      	adds	r1, r2, #1
 80091ce:	82a1      	strh	r1, [r4, #20]
 80091d0:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	bf00      	nop
 80091d8:	0800f11a 	.word	0x0800f11a
 80091dc:	0800f09f 	.word	0x0800f09f
 80091e0:	0800d7e1 	.word	0x0800d7e1

080091e4 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80091e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80091e6:	8a83      	ldrh	r3, [r0, #20]
 80091e8:	3304      	adds	r3, #4
 80091ea:	2b44      	cmp	r3, #68	; 0x44
{
 80091ec:	4605      	mov	r5, r0
 80091ee:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80091f0:	d906      	bls.n	8009200 <dhcp_option_long+0x1c>
 80091f2:	4b10      	ldr	r3, [pc, #64]	; (8009234 <dhcp_option_long+0x50>)
 80091f4:	4910      	ldr	r1, [pc, #64]	; (8009238 <dhcp_option_long+0x54>)
 80091f6:	4811      	ldr	r0, [pc, #68]	; (800923c <dhcp_option_long+0x58>)
 80091f8:	f240 528a 	movw	r2, #1418	; 0x58a
 80091fc:	f003 fb38 	bl	800c870 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8009200:	8aab      	ldrh	r3, [r5, #20]
 8009202:	692a      	ldr	r2, [r5, #16]
 8009204:	18d1      	adds	r1, r2, r3
 8009206:	0e20      	lsrs	r0, r4, #24
 8009208:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800920c:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800920e:	fa12 f181 	uxtah	r1, r2, r1
 8009212:	0c20      	lsrs	r0, r4, #16
 8009214:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8009218:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800921a:	fa12 f181 	uxtah	r1, r2, r1
 800921e:	0a20      	lsrs	r0, r4, #8
 8009220:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8009224:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8009226:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8009228:	fa12 f383 	uxtah	r3, r2, r3
 800922c:	82a9      	strh	r1, [r5, #20]
 800922e:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
}
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	0800f11a 	.word	0x0800f11a
 8009238:	0800f0da 	.word	0x0800f0da
 800923c:	0800d7e1 	.word	0x0800d7e1

08009240 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8009240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009244:	460c      	mov	r4, r1
 8009246:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009248:	4680      	mov	r8, r0
 800924a:	b950      	cbnz	r0, 8009262 <dhcp_create_msg+0x22>
 800924c:	4b61      	ldr	r3, [pc, #388]	; (80093d4 <dhcp_create_msg+0x194>)
 800924e:	4962      	ldr	r1, [pc, #392]	; (80093d8 <dhcp_create_msg+0x198>)
 8009250:	4862      	ldr	r0, [pc, #392]	; (80093dc <dhcp_create_msg+0x19c>)
 8009252:	f240 721d 	movw	r2, #1821	; 0x71d
 8009256:	f003 fb0b 	bl	800c870 <iprintf>
 800925a:	f06f 000f 	mvn.w	r0, #15
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 800925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8009262:	b949      	cbnz	r1, 8009278 <dhcp_create_msg+0x38>
 8009264:	4b5b      	ldr	r3, [pc, #364]	; (80093d4 <dhcp_create_msg+0x194>)
 8009266:	495e      	ldr	r1, [pc, #376]	; (80093e0 <dhcp_create_msg+0x1a0>)
 8009268:	485c      	ldr	r0, [pc, #368]	; (80093dc <dhcp_create_msg+0x19c>)
 800926a:	f240 721e 	movw	r2, #1822	; 0x71e
 800926e:	f003 faff 	bl	800c870 <iprintf>
 8009272:	f06f 0005 	mvn.w	r0, #5
 8009276:	e7f2      	b.n	800925e <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8009278:	68cb      	ldr	r3, [r1, #12]
 800927a:	b133      	cbz	r3, 800928a <dhcp_create_msg+0x4a>
 800927c:	4b55      	ldr	r3, [pc, #340]	; (80093d4 <dhcp_create_msg+0x194>)
 800927e:	4959      	ldr	r1, [pc, #356]	; (80093e4 <dhcp_create_msg+0x1a4>)
 8009280:	4856      	ldr	r0, [pc, #344]	; (80093dc <dhcp_create_msg+0x19c>)
 8009282:	f240 721f 	movw	r2, #1823	; 0x71f
 8009286:	f003 faf3 	bl	800c870 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	b133      	cbz	r3, 800929c <dhcp_create_msg+0x5c>
 800928e:	4b51      	ldr	r3, [pc, #324]	; (80093d4 <dhcp_create_msg+0x194>)
 8009290:	4955      	ldr	r1, [pc, #340]	; (80093e8 <dhcp_create_msg+0x1a8>)
 8009292:	4852      	ldr	r0, [pc, #328]	; (80093dc <dhcp_create_msg+0x19c>)
 8009294:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8009298:	f003 faea 	bl	800c870 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800929c:	2200      	movs	r2, #0
 800929e:	f44f 719a 	mov.w	r1, #308	; 0x134
 80092a2:	4610      	mov	r0, r2
 80092a4:	f7fc f8c2 	bl	800542c <pbuf_alloc>
 80092a8:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f000 808e 	beq.w	80093cc <dhcp_create_msg+0x18c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80092b0:	8943      	ldrh	r3, [r0, #10]
 80092b2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80092b6:	d206      	bcs.n	80092c6 <dhcp_create_msg+0x86>
 80092b8:	4b46      	ldr	r3, [pc, #280]	; (80093d4 <dhcp_create_msg+0x194>)
 80092ba:	494c      	ldr	r1, [pc, #304]	; (80093ec <dhcp_create_msg+0x1ac>)
 80092bc:	4847      	ldr	r0, [pc, #284]	; (80093dc <dhcp_create_msg+0x19c>)
 80092be:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80092c2:	f003 fad5 	bl	800c870 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80092c6:	2e03      	cmp	r6, #3
 80092c8:	d102      	bne.n	80092d0 <dhcp_create_msg+0x90>
 80092ca:	7a63      	ldrb	r3, [r4, #9]
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d107      	bne.n	80092e0 <dhcp_create_msg+0xa0>
    if (dhcp->tries == 0) {
 80092d0:	7aa3      	ldrb	r3, [r4, #10]
 80092d2:	4d47      	ldr	r5, [pc, #284]	; (80093f0 <dhcp_create_msg+0x1b0>)
 80092d4:	b913      	cbnz	r3, 80092dc <dhcp_create_msg+0x9c>
      xid = LWIP_RAND();
 80092d6:	f003 fb5b 	bl	800c990 <rand>
 80092da:	6028      	str	r0, [r5, #0]
    dhcp->xid = xid;
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	6023      	str	r3, [r4, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80092e0:	68e3      	ldr	r3, [r4, #12]
 80092e2:	685f      	ldr	r7, [r3, #4]
 80092e4:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80092e6:	2301      	movs	r3, #1
 80092e8:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 80092ea:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hops = 0;
 80092ec:	2500      	movs	r5, #0
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80092ee:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80092f2:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->hops = 0;
 80092f4:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80092f6:	6820      	ldr	r0, [r4, #0]
 80092f8:	f7fb fbf9 	bl	8004aee <lwip_htonl>
  dhcp->msg_out->secs = 0;
 80092fc:	6923      	ldr	r3, [r4, #16]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80092fe:	6078      	str	r0, [r7, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009300:	2e04      	cmp	r6, #4
  dhcp->msg_out->secs = 0;
 8009302:	721d      	strb	r5, [r3, #8]
 8009304:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 8009306:	729d      	strb	r5, [r3, #10]
 8009308:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800930a:	731d      	strb	r5, [r3, #12]
 800930c:	735d      	strb	r5, [r3, #13]
 800930e:	739d      	strb	r5, [r3, #14]
 8009310:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009312:	d008      	beq.n	8009326 <dhcp_create_msg+0xe6>
 8009314:	1ff2      	subs	r2, r6, #7
 8009316:	2a01      	cmp	r2, #1
 8009318:	d905      	bls.n	8009326 <dhcp_create_msg+0xe6>
 800931a:	2e03      	cmp	r6, #3
 800931c:	d106      	bne.n	800932c <dhcp_create_msg+0xec>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800931e:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8009320:	3a04      	subs	r2, #4
 8009322:	2a01      	cmp	r2, #1
 8009324:	d802      	bhi.n	800932c <dhcp_create_msg+0xec>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8009326:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800932a:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800932c:	2200      	movs	r2, #0
 800932e:	741a      	strb	r2, [r3, #16]
 8009330:	745a      	strb	r2, [r3, #17]
 8009332:	749a      	strb	r2, [r3, #18]
 8009334:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8009336:	751a      	strb	r2, [r3, #20]
 8009338:	755a      	strb	r2, [r3, #21]
 800933a:	759a      	strb	r2, [r3, #22]
 800933c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800933e:	761a      	strb	r2, [r3, #24]
 8009340:	765a      	strb	r2, [r3, #25]
 8009342:	769a      	strb	r2, [r3, #26]
 8009344:	76da      	strb	r2, [r3, #27]
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8009346:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 800934a:	f103 001c 	add.w	r0, r3, #28
 800934e:	b291      	uxth	r1, r2
 8009350:	428d      	cmp	r5, r1
 8009352:	d939      	bls.n	80093c8 <dhcp_create_msg+0x188>
 8009354:	2905      	cmp	r1, #5
 8009356:	d837      	bhi.n	80093c8 <dhcp_create_msg+0x188>
 8009358:	eb08 0102 	add.w	r1, r8, r2
 800935c:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8009360:	f800 1b01 	strb.w	r1, [r0], #1
 8009364:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009366:	2a10      	cmp	r2, #16
 8009368:	d1f1      	bne.n	800934e <dhcp_create_msg+0x10e>
 800936a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800936e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    dhcp->msg_out->sname[i] = 0;
 8009372:	2000      	movs	r0, #0
 8009374:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8009378:	428a      	cmp	r2, r1
 800937a:	d1fb      	bne.n	8009374 <dhcp_create_msg+0x134>
 800937c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
    dhcp->msg_out->file[i] = 0;
 8009380:	2100      	movs	r1, #0
 8009382:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8009386:	4290      	cmp	r0, r2
 8009388:	d1fb      	bne.n	8009382 <dhcp_create_msg+0x142>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800938a:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800938e:	2263      	movs	r2, #99	; 0x63
 8009390:	f883 00ed 	strb.w	r0, [r3, #237]	; 0xed
 8009394:	2053      	movs	r0, #83	; 0x53
 8009396:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800939a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 800939e:	f883 00ee 	strb.w	r0, [r3, #238]	; 0xee
  dhcp->options_out_len = 0;
 80093a2:	2200      	movs	r2, #0
 80093a4:	82a1      	strh	r1, [r4, #20]
 80093a6:	33f0      	adds	r3, #240	; 0xf0
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80093a8:	f803 2b01 	strb.w	r2, [r3], #1
 80093ac:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80093ae:	2a44      	cmp	r2, #68	; 0x44
 80093b0:	d1fa      	bne.n	80093a8 <dhcp_create_msg+0x168>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80093b2:	2201      	movs	r2, #1
 80093b4:	2135      	movs	r1, #53	; 0x35
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff fed4 	bl	8009164 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80093bc:	4620      	mov	r0, r4
 80093be:	4631      	mov	r1, r6
 80093c0:	f7ff fef4 	bl	80091ac <dhcp_option_byte>
  return ERR_OK;
 80093c4:	2000      	movs	r0, #0
 80093c6:	e74a      	b.n	800925e <dhcp_create_msg+0x1e>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80093c8:	2100      	movs	r1, #0
 80093ca:	e7c9      	b.n	8009360 <dhcp_create_msg+0x120>
    return ERR_MEM;
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	e745      	b.n	800925e <dhcp_create_msg+0x1e>
 80093d2:	bf00      	nop
 80093d4:	0800f11a 	.word	0x0800f11a
 80093d8:	0800eedb 	.word	0x0800eedb
 80093dc:	0800d7e1 	.word	0x0800d7e1
 80093e0:	0800eefa 	.word	0x0800eefa
 80093e4:	0800ef18 	.word	0x0800ef18
 80093e8:	0800ef3d 	.word	0x0800ef3d
 80093ec:	0800ef64 	.word	0x0800ef64
 80093f0:	20008284 	.word	0x20008284

080093f4 <dhcp_check>:
{
 80093f4:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80093f6:	6a04      	ldr	r4, [r0, #32]
{
 80093f8:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80093fa:	2108      	movs	r1, #8
 80093fc:	4620      	mov	r0, r4
 80093fe:	f7ff fe87 	bl	8009110 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009402:	2200      	movs	r2, #0
 8009404:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8009408:	4628      	mov	r0, r5
 800940a:	f001 f9af 	bl	800a76c <etharp_query>
  if (dhcp->tries < 255) {
 800940e:	7aa3      	ldrb	r3, [r4, #10]
 8009410:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009412:	bf1c      	itt	ne
 8009414:	3301      	addne	r3, #1
 8009416:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009418:	2301      	movs	r3, #1
 800941a:	82e3      	strh	r3, [r4, #22]
}
 800941c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009420 <dhcp_bind>:
{
 8009420:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009422:	4605      	mov	r5, r0
 8009424:	b940      	cbnz	r0, 8009438 <dhcp_bind+0x18>
 8009426:	4b3a      	ldr	r3, [pc, #232]	; (8009510 <dhcp_bind+0xf0>)
 8009428:	493a      	ldr	r1, [pc, #232]	; (8009514 <dhcp_bind+0xf4>)
 800942a:	f240 32fe 	movw	r2, #1022	; 0x3fe
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800942e:	483a      	ldr	r0, [pc, #232]	; (8009518 <dhcp_bind+0xf8>)
 8009430:	f003 fa1e 	bl	800c870 <iprintf>
}
 8009434:	b003      	add	sp, #12
 8009436:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8009438:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800943a:	b924      	cbnz	r4, 8009446 <dhcp_bind+0x26>
 800943c:	4b34      	ldr	r3, [pc, #208]	; (8009510 <dhcp_bind+0xf0>)
 800943e:	4937      	ldr	r1, [pc, #220]	; (800951c <dhcp_bind+0xfc>)
 8009440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009444:	e7f3      	b.n	800942e <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800944a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	d00b      	beq.n	8009468 <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009450:	331e      	adds	r3, #30
 8009452:	223c      	movs	r2, #60	; 0x3c
 8009454:	fbb3 f3f2 	udiv	r3, r3, r2
     if (dhcp->t0_timeout == 0) {
 8009458:	2b00      	cmp	r3, #0
 800945a:	d046      	beq.n	80094ea <dhcp_bind+0xca>
     dhcp->t0_timeout = (u16_t)timeout;
 800945c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009460:	4293      	cmp	r3, r2
 8009462:	bf28      	it	cs
 8009464:	4613      	movcs	r3, r2
       dhcp->t0_timeout = 1;
 8009466:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800946a:	1c58      	adds	r0, r3, #1
 800946c:	d00d      	beq.n	800948a <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800946e:	331e      	adds	r3, #30
 8009470:	223c      	movs	r2, #60	; 0x3c
 8009472:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t1_timeout == 0) {
 8009476:	2b00      	cmp	r3, #0
 8009478:	d039      	beq.n	80094ee <dhcp_bind+0xce>
    dhcp->t1_timeout = (u16_t)timeout;
 800947a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800947e:	4293      	cmp	r3, r2
 8009480:	bf28      	it	cs
 8009482:	4613      	movcs	r3, r2
      dhcp->t1_timeout = 1;
 8009484:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8009486:	8b23      	ldrh	r3, [r4, #24]
 8009488:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800948a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800948c:	1c59      	adds	r1, r3, #1
 800948e:	d00c      	beq.n	80094aa <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009490:	331e      	adds	r3, #30
 8009492:	223c      	movs	r2, #60	; 0x3c
 8009494:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t2_timeout == 0) {
 8009498:	b35b      	cbz	r3, 80094f2 <dhcp_bind+0xd2>
    dhcp->t2_timeout = (u16_t)timeout;
 800949a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800949e:	4293      	cmp	r3, r2
 80094a0:	bf28      	it	cs
 80094a2:	4613      	movcs	r3, r2
      dhcp->t2_timeout = 1;
 80094a4:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80094a6:	8b63      	ldrh	r3, [r4, #26]
 80094a8:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80094aa:	8b63      	ldrh	r3, [r4, #26]
 80094ac:	8b22      	ldrh	r2, [r4, #24]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d302      	bcc.n	80094b8 <dhcp_bind+0x98>
 80094b2:	b10b      	cbz	r3, 80094b8 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 80094b8:	7ae3      	ldrb	r3, [r4, #11]
 80094ba:	b1e3      	cbz	r3, 80094f6 <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80094bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80094be:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80094c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80094c2:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80094c4:	b92b      	cbnz	r3, 80094d2 <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80094c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094c8:	9a00      	ldr	r2, [sp, #0]
 80094ca:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80094cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094d0:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80094d2:	4620      	mov	r0, r4
 80094d4:	210a      	movs	r1, #10
 80094d6:	f7ff fe1b 	bl	8009110 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80094da:	ab01      	add	r3, sp, #4
 80094dc:	466a      	mov	r2, sp
 80094de:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80094e2:	4628      	mov	r0, r5
 80094e4:	f7fb fdf0 	bl	80050c8 <netif_set_addr>
 80094e8:	e7a4      	b.n	8009434 <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7bb      	b.n	8009466 <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e7c8      	b.n	8009484 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e7d6      	b.n	80094a4 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80094f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 80094fa:	061a      	lsls	r2, r3, #24
 80094fc:	d401      	bmi.n	8009502 <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80094fe:	23ff      	movs	r3, #255	; 0xff
 8009500:	e7dd      	b.n	80094be <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8009502:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009504:	bf8c      	ite	hi
 8009506:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800950a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800950e:	e7d6      	b.n	80094be <dhcp_bind+0x9e>
 8009510:	0800f11a 	.word	0x0800f11a
 8009514:	0800eeaa 	.word	0x0800eeaa
 8009518:	0800d7e1 	.word	0x0800d7e1
 800951c:	0800eec3 	.word	0x0800eec3

08009520 <dhcp_inc_pcb_refcount>:
{
 8009520:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8009522:	4d15      	ldr	r5, [pc, #84]	; (8009578 <dhcp_inc_pcb_refcount+0x58>)
 8009524:	782b      	ldrb	r3, [r5, #0]
 8009526:	b9f3      	cbnz	r3, 8009566 <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8009528:	4c14      	ldr	r4, [pc, #80]	; (800957c <dhcp_inc_pcb_refcount+0x5c>)
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	b12b      	cbz	r3, 800953a <dhcp_inc_pcb_refcount+0x1a>
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <dhcp_inc_pcb_refcount+0x60>)
 8009530:	4914      	ldr	r1, [pc, #80]	; (8009584 <dhcp_inc_pcb_refcount+0x64>)
 8009532:	4815      	ldr	r0, [pc, #84]	; (8009588 <dhcp_inc_pcb_refcount+0x68>)
 8009534:	22d9      	movs	r2, #217	; 0xd9
 8009536:	f003 f99b 	bl	800c870 <iprintf>
    dhcp_pcb = udp_new();
 800953a:	f7ff fdc5 	bl	80090c8 <udp_new>
 800953e:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 8009540:	b1b0      	cbz	r0, 8009570 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009542:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8009544:	4911      	ldr	r1, [pc, #68]	; (800958c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009546:	f042 0220 	orr.w	r2, r2, #32
 800954a:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800954c:	2244      	movs	r2, #68	; 0x44
 800954e:	f7ff fca1 	bl	8008e94 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8009552:	2243      	movs	r2, #67	; 0x43
 8009554:	490d      	ldr	r1, [pc, #52]	; (800958c <dhcp_inc_pcb_refcount+0x6c>)
 8009556:	6820      	ldr	r0, [r4, #0]
 8009558:	f7ff fd72 	bl	8009040 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800955c:	2200      	movs	r2, #0
 800955e:	490c      	ldr	r1, [pc, #48]	; (8009590 <dhcp_inc_pcb_refcount+0x70>)
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	f7ff fd95 	bl	8009090 <udp_recv>
  dhcp_pcb_refcount++;
 8009566:	782b      	ldrb	r3, [r5, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 800956c:	2000      	movs	r0, #0
}
 800956e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8009570:	f04f 30ff 	mov.w	r0, #4294967295
 8009574:	e7fb      	b.n	800956e <dhcp_inc_pcb_refcount+0x4e>
 8009576:	bf00      	nop
 8009578:	20008280 	.word	0x20008280
 800957c:	2000827c 	.word	0x2000827c
 8009580:	0800f11a 	.word	0x0800f11a
 8009584:	0800f032 	.word	0x0800f032
 8009588:	0800d7e1 	.word	0x0800d7e1
 800958c:	0800f5ec 	.word	0x0800f5ec
 8009590:	08009995 	.word	0x08009995

08009594 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8009594:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8009596:	4604      	mov	r4, r0
 8009598:	b940      	cbnz	r0, 80095ac <dhcp_option_trailer+0x18>
 800959a:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <dhcp_option_trailer+0x64>)
 800959c:	4917      	ldr	r1, [pc, #92]	; (80095fc <dhcp_option_trailer+0x68>)
 800959e:	4818      	ldr	r0, [pc, #96]	; (8009600 <dhcp_option_trailer+0x6c>)
 80095a0:	f240 7282 	movw	r2, #1922	; 0x782
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 80095a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80095a8:	f003 b962 	b.w	800c870 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80095ac:	6903      	ldr	r3, [r0, #16]
 80095ae:	b933      	cbnz	r3, 80095be <dhcp_option_trailer+0x2a>
 80095b0:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <dhcp_option_trailer+0x64>)
 80095b2:	4914      	ldr	r1, [pc, #80]	; (8009604 <dhcp_option_trailer+0x70>)
 80095b4:	4812      	ldr	r0, [pc, #72]	; (8009600 <dhcp_option_trailer+0x6c>)
 80095b6:	f240 7283 	movw	r2, #1923	; 0x783
 80095ba:	f003 f959 	bl	800c870 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80095be:	8aa3      	ldrh	r3, [r4, #20]
 80095c0:	2b43      	cmp	r3, #67	; 0x43
 80095c2:	d906      	bls.n	80095d2 <dhcp_option_trailer+0x3e>
 80095c4:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <dhcp_option_trailer+0x64>)
 80095c6:	4910      	ldr	r1, [pc, #64]	; (8009608 <dhcp_option_trailer+0x74>)
 80095c8:	480d      	ldr	r0, [pc, #52]	; (8009600 <dhcp_option_trailer+0x6c>)
 80095ca:	f240 7284 	movw	r2, #1924	; 0x784
 80095ce:	f003 f94f 	bl	800c870 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80095d2:	8aa3      	ldrh	r3, [r4, #20]
 80095d4:	6922      	ldr	r2, [r4, #16]
 80095d6:	1c59      	adds	r1, r3, #1
 80095d8:	4413      	add	r3, r2
 80095da:	82a1      	strh	r1, [r4, #20]
 80095dc:	21ff      	movs	r1, #255	; 0xff
 80095de:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80095e2:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80095e4:	8aa3      	ldrh	r3, [r4, #20]
 80095e6:	2b43      	cmp	r3, #67	; 0x43
 80095e8:	d900      	bls.n	80095ec <dhcp_option_trailer+0x58>
}
 80095ea:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80095ec:	1c58      	adds	r0, r3, #1
 80095ee:	4413      	add	r3, r2
 80095f0:	82a0      	strh	r0, [r4, #20]
 80095f2:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 80095f6:	e7f5      	b.n	80095e4 <dhcp_option_trailer+0x50>
 80095f8:	0800f11a 	.word	0x0800f11a
 80095fc:	0800f190 	.word	0x0800f190
 8009600:	0800d7e1 	.word	0x0800d7e1
 8009604:	0800f1b2 	.word	0x0800f1b2
 8009608:	0800f1de 	.word	0x0800f1de

0800960c <dhcp_handle_ack.isra.1>:
dhcp_handle_ack(struct netif *netif)
 800960c:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800960e:	4d18      	ldr	r5, [pc, #96]	; (8009670 <dhcp_handle_ack.isra.1+0x64>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009610:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009612:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009616:	78eb      	ldrb	r3, [r5, #3]
dhcp_handle_ack(struct netif *netif)
 8009618:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800961a:	b113      	cbz	r3, 8009622 <dhcp_handle_ack.isra.1+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800961c:	4b15      	ldr	r3, [pc, #84]	; (8009674 <dhcp_handle_ack.isra.1+0x68>)
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009622:	792b      	ldrb	r3, [r5, #4]
 8009624:	b1db      	cbz	r3, 800965e <dhcp_handle_ack.isra.1+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009626:	4b13      	ldr	r3, [pc, #76]	; (8009674 <dhcp_handle_ack.isra.1+0x68>)
 8009628:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800962a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800962c:	796b      	ldrb	r3, [r5, #5]
 800962e:	b1cb      	cbz	r3, 8009664 <dhcp_handle_ack.isra.1+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009630:	4b10      	ldr	r3, [pc, #64]	; (8009674 <dhcp_handle_ack.isra.1+0x68>)
 8009632:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009634:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009636:	6863      	ldr	r3, [r4, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800963c:	79ab      	ldrb	r3, [r5, #6]
 800963e:	b12b      	cbz	r3, 800964c <dhcp_handle_ack.isra.1+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <dhcp_handle_ack.isra.1+0x68>)
 8009642:	6998      	ldr	r0, [r3, #24]
 8009644:	f7fb fa53 	bl	8004aee <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8009648:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800964a:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 800964c:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800964e:	79eb      	ldrb	r3, [r5, #7]
 8009650:	b123      	cbz	r3, 800965c <dhcp_handle_ack.isra.1+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8009652:	4b08      	ldr	r3, [pc, #32]	; (8009674 <dhcp_handle_ack.isra.1+0x68>)
 8009654:	69d8      	ldr	r0, [r3, #28]
 8009656:	f7fb fa4a 	bl	8004aee <lwip_htonl>
 800965a:	6320      	str	r0, [r4, #48]	; 0x30
}
 800965c:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800965e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	e7e2      	b.n	800962a <dhcp_handle_ack.isra.1+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009666:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800966a:	08db      	lsrs	r3, r3, #3
 800966c:	e7e2      	b.n	8009634 <dhcp_handle_ack.isra.1+0x28>
 800966e:	bf00      	nop
 8009670:	2000bae4 	.word	0x2000bae4
 8009674:	2000baec 	.word	0x2000baec

08009678 <dhcp_delete_msg>:
{
 8009678:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800967a:	4604      	mov	r4, r0
 800967c:	b940      	cbnz	r0, 8009690 <dhcp_delete_msg+0x18>
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <dhcp_delete_msg+0x4c>)
 8009680:	4911      	ldr	r1, [pc, #68]	; (80096c8 <dhcp_delete_msg+0x50>)
 8009682:	4812      	ldr	r0, [pc, #72]	; (80096cc <dhcp_delete_msg+0x54>)
 8009684:	f240 726d 	movw	r2, #1901	; 0x76d
}
 8009688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800968c:	f003 b8f0 	b.w	800c870 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8009690:	68c3      	ldr	r3, [r0, #12]
 8009692:	b933      	cbnz	r3, 80096a2 <dhcp_delete_msg+0x2a>
 8009694:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <dhcp_delete_msg+0x4c>)
 8009696:	490e      	ldr	r1, [pc, #56]	; (80096d0 <dhcp_delete_msg+0x58>)
 8009698:	480c      	ldr	r0, [pc, #48]	; (80096cc <dhcp_delete_msg+0x54>)
 800969a:	f240 726e 	movw	r2, #1902	; 0x76e
 800969e:	f003 f8e7 	bl	800c870 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	b933      	cbnz	r3, 80096b4 <dhcp_delete_msg+0x3c>
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <dhcp_delete_msg+0x4c>)
 80096a8:	490a      	ldr	r1, [pc, #40]	; (80096d4 <dhcp_delete_msg+0x5c>)
 80096aa:	4808      	ldr	r0, [pc, #32]	; (80096cc <dhcp_delete_msg+0x54>)
 80096ac:	f240 726f 	movw	r2, #1903	; 0x76f
 80096b0:	f003 f8de 	bl	800c870 <iprintf>
  if (dhcp->p_out != NULL) {
 80096b4:	68e0      	ldr	r0, [r4, #12]
 80096b6:	b108      	cbz	r0, 80096bc <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 80096b8:	f7fb fe50 	bl	800535c <pbuf_free>
  dhcp->p_out = NULL;
 80096bc:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 80096be:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 80096c2:	bd10      	pop	{r4, pc}
 80096c4:	0800f11a 	.word	0x0800f11a
 80096c8:	0800efc8 	.word	0x0800efc8
 80096cc:	0800d7e1 	.word	0x0800d7e1
 80096d0:	0800efe6 	.word	0x0800efe6
 80096d4:	0800f00b 	.word	0x0800f00b

080096d8 <dhcp_discover>:
{
 80096d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80096da:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80096dc:	2300      	movs	r3, #0
{
 80096de:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80096e0:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80096e2:	2106      	movs	r1, #6
 80096e4:	4620      	mov	r0, r4
 80096e6:	f7ff fd13 	bl	8009110 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80096ea:	2201      	movs	r2, #1
 80096ec:	4621      	mov	r1, r4
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff fda6 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 80096f4:	4605      	mov	r5, r0
 80096f6:	bb78      	cbnz	r0, 8009758 <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80096f8:	2202      	movs	r2, #2
 80096fa:	2139      	movs	r1, #57	; 0x39
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7ff fd31 	bl	8009164 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009702:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8009704:	4620      	mov	r0, r4
 8009706:	f7ff fd0b 	bl	8009120 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800970a:	2203      	movs	r2, #3
 800970c:	2137      	movs	r1, #55	; 0x37
 800970e:	4620      	mov	r0, r4
 8009710:	f7ff fd28 	bl	8009164 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009714:	2101      	movs	r1, #1
 8009716:	4620      	mov	r0, r4
 8009718:	f7ff fd48 	bl	80091ac <dhcp_option_byte>
 800971c:	2103      	movs	r1, #3
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff fd44 	bl	80091ac <dhcp_option_byte>
 8009724:	211c      	movs	r1, #28
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff fd40 	bl	80091ac <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff ff31 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009732:	8aa1      	ldrh	r1, [r4, #20]
 8009734:	68e0      	ldr	r0, [r4, #12]
 8009736:	31f0      	adds	r1, #240	; 0xf0
 8009738:	b289      	uxth	r1, r1
 800973a:	f7fb ff53 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800973e:	4b12      	ldr	r3, [pc, #72]	; (8009788 <dhcp_discover+0xb0>)
 8009740:	4812      	ldr	r0, [pc, #72]	; (800978c <dhcp_discover+0xb4>)
 8009742:	4a13      	ldr	r2, [pc, #76]	; (8009790 <dhcp_discover+0xb8>)
 8009744:	e9cd 6300 	strd	r6, r3, [sp]
 8009748:	2343      	movs	r3, #67	; 0x43
 800974a:	68e1      	ldr	r1, [r4, #12]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f7ff fbf5 	bl	8008f3c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009752:	4620      	mov	r0, r4
 8009754:	f7ff ff90 	bl	8009678 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009758:	7aa3      	ldrb	r3, [r4, #10]
 800975a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800975c:	bf1c      	itt	ne
 800975e:	3301      	addne	r3, #1
 8009760:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009762:	7aa2      	ldrb	r2, [r4, #10]
 8009764:	2a05      	cmp	r2, #5
 8009766:	bf9d      	ittte	ls
 8009768:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 800976c:	4093      	lslls	r3, r2
 800976e:	b29b      	uxthls	r3, r3
 8009770:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009774:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8009778:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800977a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800977e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009782:	82e3      	strh	r3, [r4, #22]
}
 8009784:	b002      	add	sp, #8
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	0800f5ec 	.word	0x0800f5ec
 800978c:	2000827c 	.word	0x2000827c
 8009790:	0800f5f0 	.word	0x0800f5f0

08009794 <dhcp_select>:
{
 8009794:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009796:	6a04      	ldr	r4, [r0, #32]
{
 8009798:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800979a:	2101      	movs	r1, #1
 800979c:	4620      	mov	r0, r4
 800979e:	f7ff fcb7 	bl	8009110 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80097a2:	2203      	movs	r2, #3
 80097a4:	4621      	mov	r1, r4
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7ff fd4a 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 80097ac:	4605      	mov	r5, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d147      	bne.n	8009842 <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80097b2:	2202      	movs	r2, #2
 80097b4:	2139      	movs	r1, #57	; 0x39
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7ff fcd4 	bl	8009164 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80097bc:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff fcae 	bl	8009120 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80097c4:	2204      	movs	r2, #4
 80097c6:	2132      	movs	r1, #50	; 0x32
 80097c8:	4620      	mov	r0, r4
 80097ca:	f7ff fccb 	bl	8009164 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80097ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80097d0:	f7fb f98d 	bl	8004aee <lwip_htonl>
 80097d4:	4601      	mov	r1, r0
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7ff fd04 	bl	80091e4 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80097dc:	2204      	movs	r2, #4
 80097de:	2136      	movs	r1, #54	; 0x36
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7ff fcbf 	bl	8009164 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80097e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097e8:	f7fb f981 	bl	8004aee <lwip_htonl>
 80097ec:	4601      	mov	r1, r0
 80097ee:	4620      	mov	r0, r4
 80097f0:	f7ff fcf8 	bl	80091e4 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80097f4:	2203      	movs	r2, #3
 80097f6:	2137      	movs	r1, #55	; 0x37
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff fcb3 	bl	8009164 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80097fe:	2101      	movs	r1, #1
 8009800:	4620      	mov	r0, r4
 8009802:	f7ff fcd3 	bl	80091ac <dhcp_option_byte>
 8009806:	2103      	movs	r1, #3
 8009808:	4620      	mov	r0, r4
 800980a:	f7ff fccf 	bl	80091ac <dhcp_option_byte>
 800980e:	211c      	movs	r1, #28
 8009810:	4620      	mov	r0, r4
 8009812:	f7ff fccb 	bl	80091ac <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8009816:	4620      	mov	r0, r4
 8009818:	f7ff febc 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800981c:	8aa1      	ldrh	r1, [r4, #20]
 800981e:	68e0      	ldr	r0, [r4, #12]
 8009820:	31f0      	adds	r1, #240	; 0xf0
 8009822:	b289      	uxth	r1, r1
 8009824:	f7fb fede 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009828:	4b12      	ldr	r3, [pc, #72]	; (8009874 <dhcp_select+0xe0>)
 800982a:	4813      	ldr	r0, [pc, #76]	; (8009878 <dhcp_select+0xe4>)
 800982c:	4a13      	ldr	r2, [pc, #76]	; (800987c <dhcp_select+0xe8>)
 800982e:	e9cd 6300 	strd	r6, r3, [sp]
 8009832:	2343      	movs	r3, #67	; 0x43
 8009834:	68e1      	ldr	r1, [r4, #12]
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	f7ff fb80 	bl	8008f3c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800983c:	4620      	mov	r0, r4
 800983e:	f7ff ff1b 	bl	8009678 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009842:	7aa3      	ldrb	r3, [r4, #10]
 8009844:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009846:	bf1c      	itt	ne
 8009848:	3301      	addne	r3, #1
 800984a:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800984c:	7aa2      	ldrb	r2, [r4, #10]
 800984e:	2a05      	cmp	r2, #5
 8009850:	bf9d      	ittte	ls
 8009852:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8009856:	4093      	lslls	r3, r2
 8009858:	b29b      	uxthls	r3, r3
 800985a:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800985e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8009862:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009864:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009868:	fb93 f3f2 	sdiv	r3, r3, r2
 800986c:	82e3      	strh	r3, [r4, #22]
}
 800986e:	b002      	add	sp, #8
 8009870:	bd70      	pop	{r4, r5, r6, pc}
 8009872:	bf00      	nop
 8009874:	0800f5ec 	.word	0x0800f5ec
 8009878:	2000827c 	.word	0x2000827c
 800987c:	0800f5f0 	.word	0x0800f5f0

08009880 <dhcp_reboot>:
{
 8009880:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009882:	6a04      	ldr	r4, [r0, #32]
{
 8009884:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8009886:	2103      	movs	r1, #3
 8009888:	4620      	mov	r0, r4
 800988a:	f7ff fc41 	bl	8009110 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800988e:	2203      	movs	r2, #3
 8009890:	4621      	mov	r1, r4
 8009892:	4630      	mov	r0, r6
 8009894:	f7ff fcd4 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009898:	4605      	mov	r5, r0
 800989a:	2800      	cmp	r0, #0
 800989c:	d13a      	bne.n	8009914 <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800989e:	2202      	movs	r2, #2
 80098a0:	2139      	movs	r1, #57	; 0x39
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7ff fc5e 	bl	8009164 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80098a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7ff fc37 	bl	8009120 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80098b2:	2204      	movs	r2, #4
 80098b4:	2132      	movs	r1, #50	; 0x32
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff fc54 	bl	8009164 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80098bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80098be:	f7fb f916 	bl	8004aee <lwip_htonl>
 80098c2:	4601      	mov	r1, r0
 80098c4:	4620      	mov	r0, r4
 80098c6:	f7ff fc8d 	bl	80091e4 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80098ca:	2203      	movs	r2, #3
 80098cc:	2137      	movs	r1, #55	; 0x37
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7ff fc48 	bl	8009164 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80098d4:	2101      	movs	r1, #1
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff fc68 	bl	80091ac <dhcp_option_byte>
 80098dc:	2103      	movs	r1, #3
 80098de:	4620      	mov	r0, r4
 80098e0:	f7ff fc64 	bl	80091ac <dhcp_option_byte>
 80098e4:	211c      	movs	r1, #28
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7ff fc60 	bl	80091ac <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80098ec:	4620      	mov	r0, r4
 80098ee:	f7ff fe51 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80098f2:	8aa1      	ldrh	r1, [r4, #20]
 80098f4:	68e0      	ldr	r0, [r4, #12]
 80098f6:	31f0      	adds	r1, #240	; 0xf0
 80098f8:	b289      	uxth	r1, r1
 80098fa:	f7fb fe73 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80098fe:	4813      	ldr	r0, [pc, #76]	; (800994c <dhcp_reboot+0xcc>)
 8009900:	9600      	str	r6, [sp, #0]
 8009902:	2343      	movs	r3, #67	; 0x43
 8009904:	4a12      	ldr	r2, [pc, #72]	; (8009950 <dhcp_reboot+0xd0>)
 8009906:	68e1      	ldr	r1, [r4, #12]
 8009908:	6800      	ldr	r0, [r0, #0]
 800990a:	f7ff fb7d 	bl	8009008 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800990e:	4620      	mov	r0, r4
 8009910:	f7ff feb2 	bl	8009678 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009914:	7aa3      	ldrb	r3, [r4, #10]
 8009916:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009918:	bf1c      	itt	ne
 800991a:	3301      	addne	r3, #1
 800991c:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800991e:	7aa3      	ldrb	r3, [r4, #10]
 8009920:	2b09      	cmp	r3, #9
 8009922:	bf9f      	itttt	ls
 8009924:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009928:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 800992c:	00db      	lslls	r3, r3, #3
 800992e:	b29b      	uxthls	r3, r3
 8009930:	bf88      	it	hi
 8009932:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009936:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 800993a:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800993c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009940:	fb93 f3f2 	sdiv	r3, r3, r2
 8009944:	82e3      	strh	r3, [r4, #22]
}
 8009946:	b002      	add	sp, #8
 8009948:	bd70      	pop	{r4, r5, r6, pc}
 800994a:	bf00      	nop
 800994c:	2000827c 	.word	0x2000827c
 8009950:	0800f5f0 	.word	0x0800f5f0

08009954 <dhcp_dec_pcb_refcount>:
{
 8009954:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8009956:	4d0a      	ldr	r5, [pc, #40]	; (8009980 <dhcp_dec_pcb_refcount+0x2c>)
 8009958:	782b      	ldrb	r3, [r5, #0]
 800995a:	b92b      	cbnz	r3, 8009968 <dhcp_dec_pcb_refcount+0x14>
 800995c:	4b09      	ldr	r3, [pc, #36]	; (8009984 <dhcp_dec_pcb_refcount+0x30>)
 800995e:	490a      	ldr	r1, [pc, #40]	; (8009988 <dhcp_dec_pcb_refcount+0x34>)
 8009960:	480a      	ldr	r0, [pc, #40]	; (800998c <dhcp_dec_pcb_refcount+0x38>)
 8009962:	22f3      	movs	r2, #243	; 0xf3
 8009964:	f002 ff84 	bl	800c870 <iprintf>
  dhcp_pcb_refcount--;
 8009968:	782c      	ldrb	r4, [r5, #0]
 800996a:	3c01      	subs	r4, #1
 800996c:	b2e4      	uxtb	r4, r4
 800996e:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8009970:	b924      	cbnz	r4, 800997c <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 8009972:	4d07      	ldr	r5, [pc, #28]	; (8009990 <dhcp_dec_pcb_refcount+0x3c>)
 8009974:	6828      	ldr	r0, [r5, #0]
 8009976:	f7ff fb8f 	bl	8009098 <udp_remove>
    dhcp_pcb = NULL;
 800997a:	602c      	str	r4, [r5, #0]
}
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	20008280 	.word	0x20008280
 8009984:	0800f11a 	.word	0x0800f11a
 8009988:	0800efa4 	.word	0x0800efa4
 800998c:	0800d7e1 	.word	0x0800d7e1
 8009990:	2000827c 	.word	0x2000827c

08009994 <dhcp_recv>:
{
 8009994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8009998:	4bab      	ldr	r3, [pc, #684]	; (8009c48 <dhcp_recv+0x2b4>)
 800999a:	685d      	ldr	r5, [r3, #4]
{
 800999c:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800999e:	f8d5 9020 	ldr.w	r9, [r5, #32]
{
 80099a2:	9201      	str	r2, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80099a4:	f1b9 0f00 	cmp.w	r9, #0
 80099a8:	d04a      	beq.n	8009a40 <dhcp_recv+0xac>
 80099aa:	f899 3008 	ldrb.w	r3, [r9, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d043      	beq.n	8009a3a <dhcp_recv+0xa6>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80099b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80099b6:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80099b8:	b133      	cbz	r3, 80099c8 <dhcp_recv+0x34>
 80099ba:	4ba4      	ldr	r3, [pc, #656]	; (8009c4c <dhcp_recv+0x2b8>)
 80099bc:	49a4      	ldr	r1, [pc, #656]	; (8009c50 <dhcp_recv+0x2bc>)
 80099be:	48a5      	ldr	r0, [pc, #660]	; (8009c54 <dhcp_recv+0x2c0>)
 80099c0:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 80099c4:	f002 ff54 	bl	800c870 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80099c8:	9b01      	ldr	r3, [sp, #4]
 80099ca:	895b      	ldrh	r3, [r3, #10]
 80099cc:	2b2b      	cmp	r3, #43	; 0x2b
 80099ce:	d934      	bls.n	8009a3a <dhcp_recv+0xa6>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80099d0:	7823      	ldrb	r3, [r4, #0]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d131      	bne.n	8009a3a <dhcp_recv+0xa6>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80099d6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80099da:	2300      	movs	r3, #0
 80099dc:	b2d9      	uxtb	r1, r3
 80099de:	428a      	cmp	r2, r1
 80099e0:	d901      	bls.n	80099e6 <dhcp_recv+0x52>
 80099e2:	2b06      	cmp	r3, #6
 80099e4:	d121      	bne.n	8009a2a <dhcp_recv+0x96>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80099e6:	6860      	ldr	r0, [r4, #4]
 80099e8:	f7fb f881 	bl	8004aee <lwip_htonl>
 80099ec:	f8d9 3000 	ldr.w	r3, [r9]
 80099f0:	4298      	cmp	r0, r3
 80099f2:	d122      	bne.n	8009a3a <dhcp_recv+0xa6>
  dhcp_clear_all_options(dhcp);
 80099f4:	4b98      	ldr	r3, [pc, #608]	; (8009c58 <dhcp_recv+0x2c4>)
  if (p->len < DHCP_SNAME_OFS) {
 80099f6:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 80099f8:	2200      	movs	r2, #0
 80099fa:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 80099fc:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 80099fe:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8009a00:	292b      	cmp	r1, #43	; 0x2b
 8009a02:	d91a      	bls.n	8009a3a <dhcp_recv+0xa6>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009a04:	9901      	ldr	r1, [sp, #4]
  int parse_sname_as_options = 0;
 8009a06:	9203      	str	r2, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009a08:	6849      	ldr	r1, [r1, #4]
 8009a0a:	f8c9 1004 	str.w	r1, [r9, #4]
  options_idx_max = p->tot_len;
 8009a0e:	9901      	ldr	r1, [sp, #4]
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8009a10:	9302      	str	r3, [sp, #8]
  options_idx_max = p->tot_len;
 8009a12:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8009a16:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
 8009a1a:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8009a1c:	8973      	ldrh	r3, [r6, #10]
 8009a1e:	455b      	cmp	r3, fp
 8009a20:	d914      	bls.n	8009a4c <dhcp_recv+0xb8>
  options = (u8_t*)q->payload;
 8009a22:	6873      	ldr	r3, [r6, #4]
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	465c      	mov	r4, fp
 8009a28:	e0e7      	b.n	8009bfa <dhcp_recv+0x266>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009a2a:	18e9      	adds	r1, r5, r3
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	18e0      	adds	r0, r4, r3
 8009a30:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8009a34:	7ec0      	ldrb	r0, [r0, #27]
 8009a36:	4288      	cmp	r0, r1
 8009a38:	d0d0      	beq.n	80099dc <dhcp_recv+0x48>
    dhcp->msg_in = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 8009a40:	9801      	ldr	r0, [sp, #4]
 8009a42:	f7fb fc8b 	bl	800535c <pbuf_free>
}
 8009a46:	b009      	add	sp, #36	; 0x24
 8009a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = q->next;
 8009a4c:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 8009a4e:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max -= q->len;
 8009a52:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx -= q->len;
 8009a56:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max -= q->len;
 8009a5a:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	d1dc      	bne.n	8009a1c <dhcp_recv+0x88>
 8009a62:	e7ea      	b.n	8009a3a <dhcp_recv+0xa6>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 8172 	beq.w	8009d50 <dhcp_recv+0x3bc>
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	e0d6      	b.n	8009c20 <dhcp_recv+0x28c>
        offset--;
 8009a72:	3c01      	subs	r4, #1
        decode_len = len = 0;
 8009a74:	2700      	movs	r7, #0
        offset--;
 8009a76:	b2a4      	uxth	r4, r4
    int decode_idx = -1;
 8009a78:	f04f 38ff 	mov.w	r8, #4294967295
        decode_len = len = 0;
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	3402      	adds	r4, #2
    offset += len + 2;
 8009a80:	fa13 f484 	uxtah	r4, r3, r4
 8009a84:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 8009a86:	b347      	cbz	r7, 8009ada <dhcp_recv+0x146>
      u32_t value = 0;
 8009a88:	2300      	movs	r3, #0
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009a8a:	f1b8 0f07 	cmp.w	r8, #7
      u32_t value = 0;
 8009a8e:	9307      	str	r3, [sp, #28]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009a90:	d906      	bls.n	8009aa0 <dhcp_recv+0x10c>
 8009a92:	4b6e      	ldr	r3, [pc, #440]	; (8009c4c <dhcp_recv+0x2b8>)
 8009a94:	4971      	ldr	r1, [pc, #452]	; (8009c5c <dhcp_recv+0x2c8>)
 8009a96:	486f      	ldr	r0, [pc, #444]	; (8009c54 <dhcp_recv+0x2c0>)
 8009a98:	f240 6236 	movw	r2, #1590	; 0x636
 8009a9c:	f002 fee8 	bl	800c870 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8009aa0:	9b02      	ldr	r3, [sp, #8]
 8009aa2:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009aa6:	b9c3      	cbnz	r3, 8009ada <dhcp_recv+0x146>
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009aa8:	9b05      	ldr	r3, [sp, #20]
        copy_len = LWIP_MIN(decode_len, 4);
 8009aaa:	b2ba      	uxth	r2, r7
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009aac:	a907      	add	r1, sp, #28
 8009aae:	4630      	mov	r0, r6
 8009ab0:	9205      	str	r2, [sp, #20]
 8009ab2:	f7fb fef5 	bl	80058a0 <pbuf_copy_partial>
 8009ab6:	9b05      	ldr	r3, [sp, #20]
 8009ab8:	4283      	cmp	r3, r0
 8009aba:	d1be      	bne.n	8009a3a <dhcp_recv+0xa6>
        } else if (decode_len == 4) {
 8009abc:	2f04      	cmp	r7, #4
 8009abe:	f040 8088 	bne.w	8009bd2 <dhcp_recv+0x23e>
          value = lwip_ntohl(value);
 8009ac2:	9807      	ldr	r0, [sp, #28]
 8009ac4:	f7fb f813 	bl	8004aee <lwip_htonl>
 8009ac8:	9007      	str	r0, [sp, #28]
        dhcp_got_option(dhcp, decode_idx);
 8009aca:	9a02      	ldr	r2, [sp, #8]
 8009acc:	2301      	movs	r3, #1
 8009ace:	f802 3008 	strb.w	r3, [r2, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8009ad2:	4a63      	ldr	r2, [pc, #396]	; (8009c60 <dhcp_recv+0x2cc>)
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
    if (offset >= q->len) {
 8009ada:	8973      	ldrh	r3, [r6, #10]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	f200 808c 	bhi.w	8009bfa <dhcp_recv+0x266>
      offset -= q->len;
 8009ae2:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8009ae4:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 8009ae8:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8009aea:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 8009aee:	4554      	cmp	r4, sl
 8009af0:	d37a      	bcc.n	8009be8 <dhcp_recv+0x254>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 80c0 	bne.w	8009c7c <dhcp_recv+0x2e8>
  } else if (parse_sname_as_options) {
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f040 80c5 	bne.w	8009c8e <dhcp_recv+0x2fa>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d096      	beq.n	8009a3a <dhcp_recv+0xa6>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009b0c:	4a54      	ldr	r2, [pc, #336]	; (8009c60 <dhcp_recv+0x2cc>)
 8009b0e:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8009b10:	2b05      	cmp	r3, #5
 8009b12:	f040 80d8 	bne.w	8009cc6 <dhcp_recv+0x332>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009b16:	f899 3009 	ldrb.w	r3, [r9, #9]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	f040 80c8 	bne.w	8009cb0 <dhcp_recv+0x31c>
      dhcp_handle_ack(netif);
 8009b20:	6a28      	ldr	r0, [r5, #32]
 8009b22:	f7ff fd73 	bl	800960c <dhcp_handle_ack.isra.1>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009b26:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009b2a:	071b      	lsls	r3, r3, #28
        dhcp_check(netif);
 8009b2c:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009b2e:	f140 80c7 	bpl.w	8009cc0 <dhcp_recv+0x32c>
        dhcp_check(netif);
 8009b32:	f7ff fc5f 	bl	80093f4 <dhcp_check>
 8009b36:	e780      	b.n	8009a3a <dhcp_recv+0xa6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d02f      	beq.n	8009b9c <dhcp_recv+0x208>
 8009b3c:	4b43      	ldr	r3, [pc, #268]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b3e:	f240 52f6 	movw	r2, #1526	; 0x5f6
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b42:	4948      	ldr	r1, [pc, #288]	; (8009c64 <dhcp_recv+0x2d0>)
 8009b44:	e005      	b.n	8009b52 <dhcp_recv+0x1be>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d82c      	bhi.n	8009ba4 <dhcp_recv+0x210>
 8009b4a:	4b40      	ldr	r3, [pc, #256]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b4c:	4946      	ldr	r1, [pc, #280]	; (8009c68 <dhcp_recv+0x2d4>)
 8009b4e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8009b52:	4840      	ldr	r0, [pc, #256]	; (8009c54 <dhcp_recv+0x2c0>)
 8009b54:	f002 fe8c 	bl	800c870 <iprintf>
 8009b58:	e76f      	b.n	8009a3a <dhcp_recv+0xa6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d004      	beq.n	8009b68 <dhcp_recv+0x1d4>
 8009b5e:	4b3b      	ldr	r3, [pc, #236]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b60:	f240 6217 	movw	r2, #1559	; 0x617
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009b64:	4941      	ldr	r1, [pc, #260]	; (8009c6c <dhcp_recv+0x2d8>)
 8009b66:	e7f4      	b.n	8009b52 <dhcp_recv+0x1be>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009b68:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8009b6c:	d022      	beq.n	8009bb4 <dhcp_recv+0x220>
 8009b6e:	4b37      	ldr	r3, [pc, #220]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b70:	493f      	ldr	r1, [pc, #252]	; (8009c70 <dhcp_recv+0x2dc>)
 8009b72:	f240 6219 	movw	r2, #1561	; 0x619
 8009b76:	e7ec      	b.n	8009b52 <dhcp_recv+0x1be>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d023      	beq.n	8009bc4 <dhcp_recv+0x230>
 8009b7c:	4b33      	ldr	r3, [pc, #204]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b7e:	f240 621d 	movw	r2, #1565	; 0x61d
 8009b82:	e7ef      	b.n	8009b64 <dhcp_recv+0x1d0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d019      	beq.n	8009bbc <dhcp_recv+0x228>
 8009b88:	4b30      	ldr	r3, [pc, #192]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b8a:	f240 6221 	movw	r2, #1569	; 0x621
 8009b8e:	e7d8      	b.n	8009b42 <dhcp_recv+0x1ae>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d017      	beq.n	8009bc4 <dhcp_recv+0x230>
 8009b94:	4b2d      	ldr	r3, [pc, #180]	; (8009c4c <dhcp_recv+0x2b8>)
 8009b96:	f240 6225 	movw	r2, #1573	; 0x625
 8009b9a:	e7d2      	b.n	8009b42 <dhcp_recv+0x1ae>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b9c:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009b9e:	f04f 0806 	mov.w	r8, #6
 8009ba2:	e76c      	b.n	8009a7e <dhcp_recv+0xea>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8009ba4:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 8009ba8:	2704      	movs	r7, #4
 8009baa:	e768      	b.n	8009a7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009bac:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8009bae:	f04f 0803 	mov.w	r8, #3
 8009bb2:	e764      	b.n	8009a7e <dhcp_recv+0xea>
    decode_len = len;
 8009bb4:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8009bb6:	f04f 0800 	mov.w	r8, #0
 8009bba:	e760      	b.n	8009a7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009bbc:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8009bbe:	f04f 0802 	mov.w	r8, #2
 8009bc2:	e75c      	b.n	8009a7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009bc4:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8009bc6:	4698      	mov	r8, r3
 8009bc8:	e759      	b.n	8009a7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009bca:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8009bcc:	f04f 0805 	mov.w	r8, #5
 8009bd0:	e755      	b.n	8009a7e <dhcp_recv+0xea>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8009bd2:	2f01      	cmp	r7, #1
 8009bd4:	d004      	beq.n	8009be0 <dhcp_recv+0x24c>
 8009bd6:	4b1d      	ldr	r3, [pc, #116]	; (8009c4c <dhcp_recv+0x2b8>)
 8009bd8:	4926      	ldr	r1, [pc, #152]	; (8009c74 <dhcp_recv+0x2e0>)
 8009bda:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8009bde:	e7b8      	b.n	8009b52 <dhcp_recv+0x1be>
          value = ((u8_t*)&value)[0];
 8009be0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8009be4:	9307      	str	r3, [sp, #28]
 8009be6:	e770      	b.n	8009aca <dhcp_recv+0x136>
        q = q->next;
 8009be8:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009bea:	b926      	cbnz	r6, 8009bf6 <dhcp_recv+0x262>
 8009bec:	4b17      	ldr	r3, [pc, #92]	; (8009c4c <dhcp_recv+0x2b8>)
 8009bee:	4922      	ldr	r1, [pc, #136]	; (8009c78 <dhcp_recv+0x2e4>)
 8009bf0:	f240 6254 	movw	r2, #1620	; 0x654
 8009bf4:	e7ad      	b.n	8009b52 <dhcp_recv+0x1be>
        options = (u8_t*)q->payload;
 8009bf6:	6873      	ldr	r3, [r6, #4]
 8009bf8:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009bfa:	4554      	cmp	r4, sl
 8009bfc:	f4bf af79 	bcs.w	8009af2 <dhcp_recv+0x15e>
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	5d1a      	ldrb	r2, [r3, r4]
 8009c04:	2aff      	cmp	r2, #255	; 0xff
 8009c06:	f43f af74 	beq.w	8009af2 <dhcp_recv+0x15e>
    u16_t val_offset = offset + 2;
 8009c0a:	1ca3      	adds	r3, r4, #2
 8009c0c:	b29b      	uxth	r3, r3
    if ((offset + 1) < q->len) {
 8009c0e:	8971      	ldrh	r1, [r6, #10]
    u16_t val_offset = offset + 2;
 8009c10:	9305      	str	r3, [sp, #20]
    if ((offset + 1) < q->len) {
 8009c12:	1c63      	adds	r3, r4, #1
 8009c14:	428b      	cmp	r3, r1
 8009c16:	f6bf af25 	bge.w	8009a64 <dhcp_recv+0xd0>
      len = options[offset + 1];
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	4423      	add	r3, r4
 8009c1e:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 8009c20:	2a34      	cmp	r2, #52	; 0x34
 8009c22:	d09a      	beq.n	8009b5a <dhcp_recv+0x1c6>
 8009c24:	f200 8083 	bhi.w	8009d2e <dhcp_recv+0x39a>
 8009c28:	2a01      	cmp	r2, #1
 8009c2a:	d085      	beq.n	8009b38 <dhcp_recv+0x1a4>
 8009c2c:	f4ff af21 	bcc.w	8009a72 <dhcp_recv+0xde>
 8009c30:	2a03      	cmp	r2, #3
 8009c32:	d088      	beq.n	8009b46 <dhcp_recv+0x1b2>
 8009c34:	2a33      	cmp	r2, #51	; 0x33
 8009c36:	f040 809b 	bne.w	8009d70 <dhcp_recv+0x3dc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d0b6      	beq.n	8009bac <dhcp_recv+0x218>
 8009c3e:	4b03      	ldr	r3, [pc, #12]	; (8009c4c <dhcp_recv+0x2b8>)
 8009c40:	f240 6209 	movw	r2, #1545	; 0x609
 8009c44:	e77d      	b.n	8009b42 <dhcp_recv+0x1ae>
 8009c46:	bf00      	nop
 8009c48:	200083a4 	.word	0x200083a4
 8009c4c:	0800f11a 	.word	0x0800f11a
 8009c50:	0800f21d 	.word	0x0800f21d
 8009c54:	0800d7e1 	.word	0x0800d7e1
 8009c58:	2000bae4 	.word	0x2000bae4
 8009c5c:	0800f26b 	.word	0x0800f26b
 8009c60:	2000baec 	.word	0x2000baec
 8009c64:	0800f230 	.word	0x0800f230
 8009c68:	0800f239 	.word	0x0800f239
 8009c6c:	0800f24b 	.word	0x0800f24b
 8009c70:	0800f254 	.word	0x0800f254
 8009c74:	0800f27c 	.word	0x0800f27c
 8009c78:	0800f28f 	.word	0x0800f28f
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c7c:	4b44      	ldr	r3, [pc, #272]	; (8009d90 <dhcp_recv+0x3fc>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c7e:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c80:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c82:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 8009c84:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c86:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009c88:	d00d      	beq.n	8009ca6 <dhcp_recv+0x312>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d106      	bne.n	8009c9c <dhcp_recv+0x308>
    parse_sname_as_options = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009c92:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8009c96:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8009c9a:	e6be      	b.n	8009a1a <dhcp_recv+0x86>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	f47f af2d 	bne.w	8009afc <dhcp_recv+0x168>
      parse_sname_as_options = 1;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8009ca6:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8009caa:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8009cae:	e6b4      	b.n	8009a1a <dhcp_recv+0x86>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009cb0:	3b03      	subs	r3, #3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	f63f aec1 	bhi.w	8009a3a <dhcp_recv+0xa6>
      dhcp_handle_ack(netif);
 8009cb8:	6a28      	ldr	r0, [r5, #32]
 8009cba:	f7ff fca7 	bl	800960c <dhcp_handle_ack.isra.1>
      dhcp_bind(netif);
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f7ff fbae 	bl	8009420 <dhcp_bind>
 8009cc4:	e6b9      	b.n	8009a3a <dhcp_recv+0xa6>
  else if ((msg_type == DHCP_NAK) &&
 8009cc6:	2b06      	cmp	r3, #6
 8009cc8:	d115      	bne.n	8009cf6 <dhcp_recv+0x362>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009cca:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 8009cce:	1eda      	subs	r2, r3, #3
 8009cd0:	2a02      	cmp	r2, #2
 8009cd2:	d902      	bls.n	8009cda <dhcp_recv+0x346>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	f47f aeb0 	bne.w	8009a3a <dhcp_recv+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009cda:	6a28      	ldr	r0, [r5, #32]
 8009cdc:	210c      	movs	r1, #12
 8009cde:	f7ff fa17 	bl	8009110 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8009ce2:	4b2c      	ldr	r3, [pc, #176]	; (8009d94 <dhcp_recv+0x400>)
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f7fb f9ed 	bl	80050c8 <netif_set_addr>
  dhcp_discover(netif);
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f7ff fcf2 	bl	80096d8 <dhcp_discover>
 8009cf4:	e6a1      	b.n	8009a3a <dhcp_recv+0xa6>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	f47f ae9f 	bne.w	8009a3a <dhcp_recv+0xa6>
 8009cfc:	f899 3009 	ldrb.w	r3, [r9, #9]
 8009d00:	2b06      	cmp	r3, #6
 8009d02:	f47f ae9a 	bne.w	8009a3a <dhcp_recv+0xa6>
    dhcp->request_timeout = 0;
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8009d0c:	9b02      	ldr	r3, [sp, #8]
 8009d0e:	789b      	ldrb	r3, [r3, #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f43f ae92 	beq.w	8009a3a <dhcp_recv+0xa6>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009d16:	6890      	ldr	r0, [r2, #8]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009d18:	6a2c      	ldr	r4, [r5, #32]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009d1a:	f7fa fee8 	bl	8004aee <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009d1e:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009d20:	6260      	str	r0, [r4, #36]	; 0x24
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 8009d26:	4628      	mov	r0, r5
 8009d28:	f7ff fd34 	bl	8009794 <dhcp_select>
 8009d2c:	e685      	b.n	8009a3a <dhcp_recv+0xa6>
    switch(op) {
 8009d2e:	2a36      	cmp	r2, #54	; 0x36
 8009d30:	f43f af28 	beq.w	8009b84 <dhcp_recv+0x1f0>
 8009d34:	f4ff af20 	bcc.w	8009b78 <dhcp_recv+0x1e4>
 8009d38:	2a3a      	cmp	r2, #58	; 0x3a
 8009d3a:	f43f af29 	beq.w	8009b90 <dhcp_recv+0x1fc>
 8009d3e:	2a3b      	cmp	r2, #59	; 0x3b
 8009d40:	d116      	bne.n	8009d70 <dhcp_recv+0x3dc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	f43f af41 	beq.w	8009bca <dhcp_recv+0x236>
 8009d48:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <dhcp_recv+0x404>)
 8009d4a:	f240 6229 	movw	r2, #1577	; 0x629
 8009d4e:	e6f8      	b.n	8009b42 <dhcp_recv+0x1ae>
    switch(op) {
 8009d50:	2a34      	cmp	r2, #52	; 0x34
 8009d52:	f43f af04 	beq.w	8009b5e <dhcp_recv+0x1ca>
 8009d56:	d80f      	bhi.n	8009d78 <dhcp_recv+0x3e4>
 8009d58:	2a01      	cmp	r2, #1
 8009d5a:	f43f aeef 	beq.w	8009b3c <dhcp_recv+0x1a8>
 8009d5e:	f4ff ae88 	bcc.w	8009a72 <dhcp_recv+0xde>
 8009d62:	2a03      	cmp	r2, #3
 8009d64:	f43f aef1 	beq.w	8009b4a <dhcp_recv+0x1b6>
 8009d68:	2a33      	cmp	r2, #51	; 0x33
 8009d6a:	f43f af68 	beq.w	8009c3e <dhcp_recv+0x2aa>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009d6e:	2300      	movs	r3, #0
    offset += len + 2;
 8009d70:	9a05      	ldr	r2, [sp, #20]
 8009d72:	441a      	add	r2, r3
 8009d74:	b294      	uxth	r4, r2
 8009d76:	e6b0      	b.n	8009ada <dhcp_recv+0x146>
    switch(op) {
 8009d78:	2a36      	cmp	r2, #54	; 0x36
 8009d7a:	f43f af05 	beq.w	8009b88 <dhcp_recv+0x1f4>
 8009d7e:	f4ff aefd 	bcc.w	8009b7c <dhcp_recv+0x1e8>
 8009d82:	2a3a      	cmp	r2, #58	; 0x3a
 8009d84:	f43f af06 	beq.w	8009b94 <dhcp_recv+0x200>
 8009d88:	2a3b      	cmp	r2, #59	; 0x3b
 8009d8a:	d0dd      	beq.n	8009d48 <dhcp_recv+0x3b4>
 8009d8c:	e7ef      	b.n	8009d6e <dhcp_recv+0x3da>
 8009d8e:	bf00      	nop
 8009d90:	2000baec 	.word	0x2000baec
 8009d94:	0800f5ec 	.word	0x0800f5ec
 8009d98:	0800f11a 	.word	0x0800f11a

08009d9c <dhcp_arp_reply>:
{
 8009d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009d9e:	4605      	mov	r5, r0
 8009da0:	b948      	cbnz	r0, 8009db6 <dhcp_arp_reply+0x1a>
 8009da2:	4b24      	ldr	r3, [pc, #144]	; (8009e34 <dhcp_arp_reply+0x98>)
 8009da4:	4924      	ldr	r1, [pc, #144]	; (8009e38 <dhcp_arp_reply+0x9c>)
 8009da6:	4825      	ldr	r0, [pc, #148]	; (8009e3c <dhcp_arp_reply+0xa0>)
 8009da8:	f240 327b 	movw	r2, #891	; 0x37b
}
 8009dac:	b003      	add	sp, #12
 8009dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009db2:	f002 bd5d 	b.w	800c870 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8009db6:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8009db8:	2c00      	cmp	r4, #0
 8009dba:	d039      	beq.n	8009e30 <dhcp_arp_reply+0x94>
 8009dbc:	7a63      	ldrb	r3, [r4, #9]
 8009dbe:	2b08      	cmp	r3, #8
 8009dc0:	d136      	bne.n	8009e30 <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8009dc2:	680a      	ldr	r2, [r1, #0]
 8009dc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d132      	bne.n	8009e30 <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009dca:	210c      	movs	r1, #12
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7ff f99f 	bl	8009110 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7ff fa32 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009ddc:	bb08      	cbnz	r0, 8009e22 <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009dde:	2204      	movs	r2, #4
 8009de0:	2132      	movs	r1, #50	; 0x32
 8009de2:	4620      	mov	r0, r4
 8009de4:	f7ff f9be 	bl	8009164 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009de8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009dea:	f7fa fe80 	bl	8004aee <lwip_htonl>
 8009dee:	4601      	mov	r1, r0
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff f9f7 	bl	80091e4 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8009df6:	4620      	mov	r0, r4
 8009df8:	f7ff fbcc 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009dfc:	8aa1      	ldrh	r1, [r4, #20]
 8009dfe:	68e0      	ldr	r0, [r4, #12]
 8009e00:	31f0      	adds	r1, #240	; 0xf0
 8009e02:	b289      	uxth	r1, r1
 8009e04:	f7fb fbee 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009e08:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <dhcp_arp_reply+0xa4>)
 8009e0a:	480e      	ldr	r0, [pc, #56]	; (8009e44 <dhcp_arp_reply+0xa8>)
 8009e0c:	4a0e      	ldr	r2, [pc, #56]	; (8009e48 <dhcp_arp_reply+0xac>)
 8009e0e:	e9cd 5300 	strd	r5, r3, [sp]
 8009e12:	2343      	movs	r3, #67	; 0x43
 8009e14:	68e1      	ldr	r1, [r4, #12]
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	f7ff f890 	bl	8008f3c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7ff fc2b 	bl	8009678 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009e22:	7aa3      	ldrb	r3, [r4, #10]
 8009e24:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009e26:	bf1c      	itt	ne
 8009e28:	3301      	addne	r3, #1
 8009e2a:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009e2c:	2314      	movs	r3, #20
 8009e2e:	82e3      	strh	r3, [r4, #22]
}
 8009e30:	b003      	add	sp, #12
 8009e32:	bd30      	pop	{r4, r5, pc}
 8009e34:	0800f11a 	.word	0x0800f11a
 8009e38:	0800eeb5 	.word	0x0800eeb5
 8009e3c:	0800d7e1 	.word	0x0800d7e1
 8009e40:	0800f5ec 	.word	0x0800f5ec
 8009e44:	2000827c 	.word	0x2000827c
 8009e48:	0800f5f0 	.word	0x0800f5f0

08009e4c <dhcp_renew>:
{
 8009e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009e4e:	6a04      	ldr	r4, [r0, #32]
{
 8009e50:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8009e52:	2105      	movs	r1, #5
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7ff f95b 	bl	8009110 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff f9ee 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009e64:	4605      	mov	r5, r0
 8009e66:	bb70      	cbnz	r0, 8009ec6 <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009e68:	2202      	movs	r2, #2
 8009e6a:	2139      	movs	r1, #57	; 0x39
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7ff f979 	bl	8009164 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009e72:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7ff f953 	bl	8009120 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009e7a:	2203      	movs	r2, #3
 8009e7c:	2137      	movs	r1, #55	; 0x37
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff f970 	bl	8009164 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009e84:	2101      	movs	r1, #1
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7ff f990 	bl	80091ac <dhcp_option_byte>
 8009e8c:	2103      	movs	r1, #3
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff f98c 	bl	80091ac <dhcp_option_byte>
 8009e94:	211c      	movs	r1, #28
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7ff f988 	bl	80091ac <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7ff fb79 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009ea2:	8aa1      	ldrh	r1, [r4, #20]
 8009ea4:	68e0      	ldr	r0, [r4, #12]
 8009ea6:	31f0      	adds	r1, #240	; 0xf0
 8009ea8:	b289      	uxth	r1, r1
 8009eaa:	f7fb fb9b 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8009eae:	4813      	ldr	r0, [pc, #76]	; (8009efc <dhcp_renew+0xb0>)
 8009eb0:	9600      	str	r6, [sp, #0]
 8009eb2:	2343      	movs	r3, #67	; 0x43
 8009eb4:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8009eb8:	68e1      	ldr	r1, [r4, #12]
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	f7ff f8a4 	bl	8009008 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7ff fbd9 	bl	8009678 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009ec6:	7aa3      	ldrb	r3, [r4, #10]
 8009ec8:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009eca:	bf1c      	itt	ne
 8009ecc:	3301      	addne	r3, #1
 8009ece:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8009ed0:	7aa3      	ldrb	r3, [r4, #10]
 8009ed2:	2b09      	cmp	r3, #9
 8009ed4:	bf9f      	itttt	ls
 8009ed6:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009eda:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8009ede:	011b      	lslls	r3, r3, #4
 8009ee0:	b29b      	uxthls	r3, r3
 8009ee2:	bf88      	it	hi
 8009ee4:	f644 6320 	movwhi	r3, #20000	; 0x4e20
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009ee8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8009eec:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009eee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009ef2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ef6:	82e3      	strh	r3, [r4, #22]
}
 8009ef8:	b002      	add	sp, #8
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	2000827c 	.word	0x2000827c

08009f00 <dhcp_stop>:
{
 8009f00:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8009f02:	b940      	cbnz	r0, 8009f16 <dhcp_stop+0x16>
 8009f04:	4b0f      	ldr	r3, [pc, #60]	; (8009f44 <dhcp_stop+0x44>)
 8009f06:	4910      	ldr	r1, [pc, #64]	; (8009f48 <dhcp_stop+0x48>)
 8009f08:	4810      	ldr	r0, [pc, #64]	; (8009f4c <dhcp_stop+0x4c>)
 8009f0a:	f240 5242 	movw	r2, #1346	; 0x542
}
 8009f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8009f12:	f002 bcad 	b.w	800c870 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8009f16:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 8009f18:	b194      	cbz	r4, 8009f40 <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	b133      	cbz	r3, 8009f2c <dhcp_stop+0x2c>
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <dhcp_stop+0x44>)
 8009f20:	490b      	ldr	r1, [pc, #44]	; (8009f50 <dhcp_stop+0x50>)
 8009f22:	480a      	ldr	r0, [pc, #40]	; (8009f4c <dhcp_stop+0x4c>)
 8009f24:	f240 524f 	movw	r2, #1359	; 0x54f
 8009f28:	f002 fca2 	bl	800c870 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f7ff f8ee 	bl	8009110 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 8009f34:	7a23      	ldrb	r3, [r4, #8]
 8009f36:	b11b      	cbz	r3, 8009f40 <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009f38:	f7ff fd0c 	bl	8009954 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	7223      	strb	r3, [r4, #8]
}
 8009f40:	bd10      	pop	{r4, pc}
 8009f42:	bf00      	nop
 8009f44:	0800f11a 	.word	0x0800f11a
 8009f48:	0800f2ff 	.word	0x0800f2ff
 8009f4c:	0800d7e1 	.word	0x0800d7e1
 8009f50:	0800f21d 	.word	0x0800f21d

08009f54 <dhcp_start>:
{
 8009f54:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8009f56:	4605      	mov	r5, r0
 8009f58:	b948      	cbnz	r0, 8009f6e <dhcp_start+0x1a>
 8009f5a:	4b27      	ldr	r3, [pc, #156]	; (8009ff8 <dhcp_start+0xa4>)
 8009f5c:	4927      	ldr	r1, [pc, #156]	; (8009ffc <dhcp_start+0xa8>)
 8009f5e:	f240 22d6 	movw	r2, #726	; 0x2d6
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8009f62:	4827      	ldr	r0, [pc, #156]	; (800a000 <dhcp_start+0xac>)
 8009f64:	f002 fc84 	bl	800c870 <iprintf>
 8009f68:	f06f 000f 	mvn.w	r0, #15
}
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8009f6e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009f72:	07db      	lsls	r3, r3, #31
 8009f74:	d404      	bmi.n	8009f80 <dhcp_start+0x2c>
 8009f76:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <dhcp_start+0xa4>)
 8009f78:	4922      	ldr	r1, [pc, #136]	; (800a004 <dhcp_start+0xb0>)
 8009f7a:	f240 22d7 	movw	r2, #727	; 0x2d7
 8009f7e:	e7f0      	b.n	8009f62 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009f80:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 8009f82:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009f84:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8009f88:	d202      	bcs.n	8009f90 <dhcp_start+0x3c>
    return ERR_MEM;
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	e7ed      	b.n	8009f6c <dhcp_start+0x18>
  if (dhcp == NULL) {
 8009f90:	b9d4      	cbnz	r4, 8009fc8 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8009f92:	2040      	movs	r0, #64	; 0x40
 8009f94:	f7fa ff3a 	bl	8004e0c <mem_malloc>
    if (dhcp == NULL) {
 8009f98:	4604      	mov	r4, r0
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d0f5      	beq.n	8009f8a <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8009f9e:	6228      	str	r0, [r5, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 8009fa0:	2240      	movs	r2, #64	; 0x40
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f002 fbb3 	bl	800c710 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8009faa:	f7ff fab9 	bl	8009520 <dhcp_inc_pcb_refcount>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d1eb      	bne.n	8009f8a <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7ff fb8e 	bl	80096d8 <dhcp_discover>
  if (result != ERR_OK) {
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d0d5      	beq.n	8009f6c <dhcp_start+0x18>
    dhcp_stop(netif);
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f7ff ff9d 	bl	8009f00 <dhcp_stop>
 8009fc6:	e7e0      	b.n	8009f8a <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8009fc8:	68e3      	ldr	r3, [r4, #12]
 8009fca:	b133      	cbz	r3, 8009fda <dhcp_start+0x86>
 8009fcc:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <dhcp_start+0xa4>)
 8009fce:	490e      	ldr	r1, [pc, #56]	; (800a008 <dhcp_start+0xb4>)
 8009fd0:	480b      	ldr	r0, [pc, #44]	; (800a000 <dhcp_start+0xac>)
 8009fd2:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8009fd6:	f002 fc4b 	bl	800c870 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8009fda:	6863      	ldr	r3, [r4, #4]
 8009fdc:	b133      	cbz	r3, 8009fec <dhcp_start+0x98>
 8009fde:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <dhcp_start+0xa4>)
 8009fe0:	490a      	ldr	r1, [pc, #40]	; (800a00c <dhcp_start+0xb8>)
 8009fe2:	4807      	ldr	r0, [pc, #28]	; (800a000 <dhcp_start+0xac>)
 8009fe4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009fe8:	f002 fc42 	bl	800c870 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 8009fec:	7a23      	ldrb	r3, [r4, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0d6      	beq.n	8009fa0 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009ff2:	f7ff fcaf 	bl	8009954 <dhcp_dec_pcb_refcount>
 8009ff6:	e7d3      	b.n	8009fa0 <dhcp_start+0x4c>
 8009ff8:	0800f11a 	.word	0x0800f11a
 8009ffc:	0800eeb5 	.word	0x0800eeb5
 800a000:	0800d7e1 	.word	0x0800d7e1
 800a004:	0800f2c6 	.word	0x0800f2c6
 800a008:	0800f2e7 	.word	0x0800f2e7
 800a00c:	0800f21d 	.word	0x0800f21d

0800a010 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800a010:	b150      	cbz	r0, 800a028 <dhcp_supplied_address+0x18>
 800a012:	6a00      	ldr	r0, [r0, #32]
 800a014:	b140      	cbz	r0, 800a028 <dhcp_supplied_address+0x18>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a016:	7a40      	ldrb	r0, [r0, #9]
 800a018:	280a      	cmp	r0, #10
 800a01a:	d006      	beq.n	800a02a <dhcp_supplied_address+0x1a>
 800a01c:	3804      	subs	r0, #4
 800a01e:	2801      	cmp	r0, #1
 800a020:	bf8c      	ite	hi
 800a022:	2000      	movhi	r0, #0
 800a024:	2001      	movls	r0, #1
 800a026:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800a028:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a02a:	2001      	movs	r0, #1
 800a02c:	e7fb      	b.n	800a026 <dhcp_supplied_address+0x16>
	...

0800a030 <dhcp_release>:
{
 800a030:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a032:	6a04      	ldr	r4, [r0, #32]
{
 800a034:	b085      	sub	sp, #20
 800a036:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800a038:	2c00      	cmp	r4, #0
 800a03a:	d045      	beq.n	800a0c8 <dhcp_release+0x98>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03e:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a040:	f7ff ffe6 	bl	800a010 <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a044:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a046:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff f861 	bl	8009110 <dhcp_set_state>
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a054:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a058:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a05c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800a060:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!is_dhcp_supplied_address) {
 800a062:	b375      	cbz	r5, 800a0c2 <dhcp_release+0x92>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a064:	2207      	movs	r2, #7
 800a066:	4621      	mov	r1, r4
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff f8e9 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 800a06e:	4605      	mov	r5, r0
 800a070:	bb08      	cbnz	r0, 800a0b6 <dhcp_release+0x86>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a072:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a074:	2204      	movs	r2, #4
 800a076:	2136      	movs	r1, #54	; 0x36
 800a078:	4620      	mov	r0, r4
 800a07a:	f7ff f873 	bl	8009164 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a07e:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800a082:	f7fa fd34 	bl	8004aee <lwip_htonl>
 800a086:	4601      	mov	r1, r0
 800a088:	4620      	mov	r0, r4
 800a08a:	f7ff f8ab 	bl	80091e4 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800a08e:	4620      	mov	r0, r4
 800a090:	f7ff fa80 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a094:	8aa1      	ldrh	r1, [r4, #20]
 800a096:	68e0      	ldr	r0, [r4, #12]
 800a098:	31f0      	adds	r1, #240	; 0xf0
 800a09a:	b289      	uxth	r1, r1
 800a09c:	f7fb faa2 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a0a0:	480b      	ldr	r0, [pc, #44]	; (800a0d0 <dhcp_release+0xa0>)
 800a0a2:	9600      	str	r6, [sp, #0]
 800a0a4:	2343      	movs	r3, #67	; 0x43
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	68e1      	ldr	r1, [r4, #12]
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	f7fe ffac 	bl	8009008 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff fae1 	bl	8009678 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a0b6:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <dhcp_release+0xa4>)
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4619      	mov	r1, r3
 800a0be:	f7fb f803 	bl	80050c8 <netif_set_addr>
}
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	b005      	add	sp, #20
 800a0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800a0c8:	f06f 050f 	mvn.w	r5, #15
 800a0cc:	e7f9      	b.n	800a0c2 <dhcp_release+0x92>
 800a0ce:	bf00      	nop
 800a0d0:	2000827c 	.word	0x2000827c
 800a0d4:	0800f5ec 	.word	0x0800f5ec

0800a0d8 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 800a0d8:	4b51      	ldr	r3, [pc, #324]	; (800a220 <dhcp_coarse_tmr+0x148>)
{
 800a0da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 800a0de:	681d      	ldr	r5, [r3, #0]
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a0e0:	4f50      	ldr	r7, [pc, #320]	; (800a224 <dhcp_coarse_tmr+0x14c>)
 800a0e2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800a228 <dhcp_coarse_tmr+0x150>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a0e6:	f240 2619 	movw	r6, #537	; 0x219
  while (netif != NULL) {
 800a0ea:	b915      	cbnz	r5, 800a0f2 <dhcp_coarse_tmr+0x1a>
}
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a0f2:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a0f4:	b17c      	cbz	r4, 800a116 <dhcp_coarse_tmr+0x3e>
 800a0f6:	7a63      	ldrb	r3, [r4, #9]
 800a0f8:	b16b      	cbz	r3, 800a116 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a0fa:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800a0fc:	b169      	cbz	r1, 800a11a <dhcp_coarse_tmr+0x42>
 800a0fe:	8c22      	ldrh	r2, [r4, #32]
 800a100:	3201      	adds	r2, #1
 800a102:	b292      	uxth	r2, r2
 800a104:	4291      	cmp	r1, r2
 800a106:	8422      	strh	r2, [r4, #32]
 800a108:	d107      	bne.n	800a11a <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 800a10a:	4628      	mov	r0, r5
 800a10c:	f7ff ff90 	bl	800a030 <dhcp_release>
        dhcp_discover(netif);
 800a110:	4628      	mov	r0, r5
 800a112:	f7ff fae1 	bl	80096d8 <dhcp_discover>
    netif = netif->next;
 800a116:	682d      	ldr	r5, [r5, #0]
 800a118:	e7e7      	b.n	800a0ea <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a11a:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 800a11e:	f1b9 0f00 	cmp.w	r9, #0
 800a122:	d064      	beq.n	800a1ee <dhcp_coarse_tmr+0x116>
 800a124:	f109 32ff 	add.w	r2, r9, #4294967295
 800a128:	f1b9 0f01 	cmp.w	r9, #1
 800a12c:	83e2      	strh	r2, [r4, #30]
 800a12e:	d15e      	bne.n	800a1ee <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a130:	3b01      	subs	r3, #1
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b09      	cmp	r3, #9
 800a136:	d8ee      	bhi.n	800a116 <dhcp_coarse_tmr+0x3e>
 800a138:	fa26 f303 	lsr.w	r3, r6, r3
 800a13c:	07db      	lsls	r3, r3, #31
 800a13e:	d5ea      	bpl.n	800a116 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800a140:	2104      	movs	r1, #4
 800a142:	4620      	mov	r0, r4
 800a144:	f7fe ffe4 	bl	8009110 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a148:	2203      	movs	r2, #3
 800a14a:	4621      	mov	r1, r4
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7ff f877 	bl	8009240 <dhcp_create_msg>
  if (result == ERR_OK) {
 800a152:	bb60      	cbnz	r0, 800a1ae <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a154:	2202      	movs	r2, #2
 800a156:	2139      	movs	r1, #57	; 0x39
 800a158:	4620      	mov	r0, r4
 800a15a:	f7ff f803 	bl	8009164 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a15e:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800a160:	4620      	mov	r0, r4
 800a162:	f7fe ffdd 	bl	8009120 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a166:	2203      	movs	r2, #3
 800a168:	2137      	movs	r1, #55	; 0x37
 800a16a:	4620      	mov	r0, r4
 800a16c:	f7fe fffa 	bl	8009164 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a170:	4649      	mov	r1, r9
 800a172:	4620      	mov	r0, r4
 800a174:	f7ff f81a 	bl	80091ac <dhcp_option_byte>
 800a178:	2103      	movs	r1, #3
 800a17a:	4620      	mov	r0, r4
 800a17c:	f7ff f816 	bl	80091ac <dhcp_option_byte>
 800a180:	211c      	movs	r1, #28
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff f812 	bl	80091ac <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800a188:	4620      	mov	r0, r4
 800a18a:	f7ff fa03 	bl	8009594 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a18e:	8aa1      	ldrh	r1, [r4, #20]
 800a190:	68e0      	ldr	r0, [r4, #12]
 800a192:	31f0      	adds	r1, #240	; 0xf0
 800a194:	b289      	uxth	r1, r1
 800a196:	f7fb fa25 	bl	80055e4 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a19a:	9500      	str	r5, [sp, #0]
 800a19c:	2343      	movs	r3, #67	; 0x43
 800a19e:	4642      	mov	r2, r8
 800a1a0:	68e1      	ldr	r1, [r4, #12]
 800a1a2:	6838      	ldr	r0, [r7, #0]
 800a1a4:	f7fe ff30 	bl	8009008 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff fa65 	bl	8009678 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800a1ae:	7aa3      	ldrb	r3, [r4, #10]
 800a1b0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a1b2:	bf1c      	itt	ne
 800a1b4:	3301      	addne	r3, #1
 800a1b6:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a1b8:	7aa3      	ldrb	r3, [r4, #10]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	bf9f      	itttt	ls
 800a1be:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800a1c2:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 800a1c6:	00db      	lslls	r3, r3, #3
 800a1c8:	b29b      	uxthls	r3, r3
 800a1ca:	bf88      	it	hi
 800a1cc:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a1d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a1d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a1d8:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a1dc:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a1de:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a1e0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	dd96      	ble.n	800a116 <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800a1e8:	105b      	asrs	r3, r3, #1
 800a1ea:	83e3      	strh	r3, [r4, #30]
 800a1ec:	e793      	b.n	800a116 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a1ee:	8ba2      	ldrh	r2, [r4, #28]
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d090      	beq.n	800a116 <dhcp_coarse_tmr+0x3e>
 800a1f4:	1e51      	subs	r1, r2, #1
 800a1f6:	2a01      	cmp	r2, #1
 800a1f8:	83a1      	strh	r1, [r4, #28]
 800a1fa:	d18c      	bne.n	800a116 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a1fc:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800a200:	2a01      	cmp	r2, #1
 800a202:	d001      	beq.n	800a208 <dhcp_coarse_tmr+0x130>
 800a204:	2b0a      	cmp	r3, #10
 800a206:	d186      	bne.n	800a116 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 800a208:	4628      	mov	r0, r5
 800a20a:	f7ff fe1f 	bl	8009e4c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a20e:	8b63      	ldrh	r3, [r4, #26]
 800a210:	8c22      	ldrh	r2, [r4, #32]
 800a212:	1a9b      	subs	r3, r3, r2
 800a214:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a216:	bfc4      	itt	gt
 800a218:	105b      	asrgt	r3, r3, #1
 800a21a:	83a3      	strhgt	r3, [r4, #28]
 800a21c:	e77b      	b.n	800a116 <dhcp_coarse_tmr+0x3e>
 800a21e:	bf00      	nop
 800a220:	2000bab8 	.word	0x2000bab8
 800a224:	2000827c 	.word	0x2000827c
 800a228:	0800f5f0 	.word	0x0800f5f0

0800a22c <dhcp_fine_tmr>:
{
 800a22c:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <dhcp_fine_tmr+0x78>)
 800a230:	681c      	ldr	r4, [r3, #0]
        dhcp->request_timeout--;
 800a232:	2500      	movs	r5, #0
  while (netif != NULL) {
 800a234:	b904      	cbnz	r4, 800a238 <dhcp_fine_tmr+0xc>
}
 800a236:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a238:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 800a23a:	b123      	cbz	r3, 800a246 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 800a23c:	8ada      	ldrh	r2, [r3, #22]
 800a23e:	2a01      	cmp	r2, #1
 800a240:	d903      	bls.n	800a24a <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800a242:	3a01      	subs	r2, #1
 800a244:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 800a246:	6824      	ldr	r4, [r4, #0]
 800a248:	e7f4      	b.n	800a234 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 800a24a:	d1fc      	bne.n	800a246 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a24c:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 800a24e:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a250:	2a0c      	cmp	r2, #12
 800a252:	d001      	beq.n	800a258 <dhcp_fine_tmr+0x2c>
 800a254:	2a06      	cmp	r2, #6
 800a256:	d103      	bne.n	800a260 <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 800a258:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800a25a:	f7ff fa3d 	bl	80096d8 <dhcp_discover>
 800a25e:	e7f2      	b.n	800a246 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a260:	2a01      	cmp	r2, #1
 800a262:	d109      	bne.n	800a278 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 800a264:	7a9b      	ldrb	r3, [r3, #10]
 800a266:	2b05      	cmp	r3, #5
      dhcp_select(netif);
 800a268:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 800a26a:	d802      	bhi.n	800a272 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 800a26c:	f7ff fa92 	bl	8009794 <dhcp_select>
 800a270:	e7e9      	b.n	800a246 <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 800a272:	f7ff fedd 	bl	800a030 <dhcp_release>
 800a276:	e7ef      	b.n	800a258 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a278:	2a08      	cmp	r2, #8
 800a27a:	d109      	bne.n	800a290 <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 800a27c:	7a9b      	ldrb	r3, [r3, #10]
 800a27e:	2b01      	cmp	r3, #1
      dhcp_check(netif);
 800a280:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800a282:	d802      	bhi.n	800a28a <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 800a284:	f7ff f8b6 	bl	80093f4 <dhcp_check>
 800a288:	e7dd      	b.n	800a246 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 800a28a:	f7ff f8c9 	bl	8009420 <dhcp_bind>
 800a28e:	e7da      	b.n	800a246 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a290:	2a03      	cmp	r2, #3
 800a292:	d1d8      	bne.n	800a246 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 800a294:	7a9b      	ldrb	r3, [r3, #10]
 800a296:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
 800a298:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 800a29a:	d8de      	bhi.n	800a25a <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 800a29c:	f7ff faf0 	bl	8009880 <dhcp_reboot>
 800a2a0:	e7d1      	b.n	800a246 <dhcp_fine_tmr+0x1a>
 800a2a2:	bf00      	nop
 800a2a4:	2000bab8 	.word	0x2000bab8

0800a2a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a2a8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a2aa:	2618      	movs	r6, #24
 800a2ac:	4c07      	ldr	r4, [pc, #28]	; (800a2cc <etharp_free_entry+0x24>)
 800a2ae:	4346      	muls	r6, r0
{
 800a2b0:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800a2b2:	59a0      	ldr	r0, [r4, r6]
 800a2b4:	b118      	cbz	r0, 800a2be <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a2b6:	f7fb f851 	bl	800535c <pbuf_free>
    arp_table[i].q = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a2be:	2318      	movs	r3, #24
 800a2c0:	fb03 4405 	mla	r4, r3, r5, r4
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a2c8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20008288 	.word	0x20008288

0800a2d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a2d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	4692      	mov	sl, r2
 800a2da:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a2dc:	4607      	mov	r7, r0
 800a2de:	b930      	cbnz	r0, 800a2ee <etharp_raw+0x1e>
 800a2e0:	4b2c      	ldr	r3, [pc, #176]	; (800a394 <etharp_raw+0xc4>)
 800a2e2:	492d      	ldr	r1, [pc, #180]	; (800a398 <etharp_raw+0xc8>)
 800a2e4:	482d      	ldr	r0, [pc, #180]	; (800a39c <etharp_raw+0xcc>)
 800a2e6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800a2ea:	f002 fac1 	bl	800c870 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	211c      	movs	r1, #28
 800a2f2:	2002      	movs	r0, #2
 800a2f4:	f7fb f89a 	bl	800542c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d047      	beq.n	800a38e <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a2fe:	8943      	ldrh	r3, [r0, #10]
 800a300:	2b1b      	cmp	r3, #27
 800a302:	d806      	bhi.n	800a312 <etharp_raw+0x42>
 800a304:	4b23      	ldr	r3, [pc, #140]	; (800a394 <etharp_raw+0xc4>)
 800a306:	4926      	ldr	r1, [pc, #152]	; (800a3a0 <etharp_raw+0xd0>)
 800a308:	4824      	ldr	r0, [pc, #144]	; (800a39c <etharp_raw+0xcc>)
 800a30a:	f240 4264 	movw	r2, #1124	; 0x464
 800a30e:	f002 faaf 	bl	800c870 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a312:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 800a316:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 800a318:	f7fa fbe6 	bl	8004ae8 <lwip_htons>
 800a31c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a31e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a322:	2b06      	cmp	r3, #6
 800a324:	d006      	beq.n	800a334 <etharp_raw+0x64>
 800a326:	4b1b      	ldr	r3, [pc, #108]	; (800a394 <etharp_raw+0xc4>)
 800a328:	491e      	ldr	r1, [pc, #120]	; (800a3a4 <etharp_raw+0xd4>)
 800a32a:	481c      	ldr	r0, [pc, #112]	; (800a39c <etharp_raw+0xcc>)
 800a32c:	f240 426b 	movw	r2, #1131	; 0x46b
 800a330:	f002 fa9e 	bl	800c870 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a334:	f8d8 3000 	ldr.w	r3, [r8]
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a33e:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	f8c4 3012 	str.w	r3, [r4, #18]
 800a346:	88ab      	ldrh	r3, [r5, #4]
 800a348:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a358:	2301      	movs	r3, #1
 800a35a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a35c:	2308      	movs	r3, #8
 800a35e:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a360:	2306      	movs	r3, #6
 800a362:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a364:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a366:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 800a368:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a36a:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a36e:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a370:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a372:	464a      	mov	r2, r9
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	4631      	mov	r1, r6
 800a378:	4653      	mov	r3, sl
 800a37a:	4638      	mov	r0, r7
 800a37c:	f001 f99c 	bl	800b6b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a380:	4630      	mov	r0, r6
 800a382:	f7fa ffeb 	bl	800535c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800a386:	4628      	mov	r0, r5
}
 800a388:	b002      	add	sp, #8
 800a38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	e7f9      	b.n	800a388 <etharp_raw+0xb8>
 800a394:	0800f40d 	.word	0x0800f40d
 800a398:	0800eeb5 	.word	0x0800eeb5
 800a39c:	0800d7e1 	.word	0x0800d7e1
 800a3a0:	0800f444 	.word	0x0800f444
 800a3a4:	0800f475 	.word	0x0800f475

0800a3a8 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800a3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	4b3e      	ldr	r3, [pc, #248]	; (800a4a8 <etharp_find_entry.isra.0+0x100>)
 800a3ae:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 800a3b0:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	4696      	mov	lr, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a3ba:	4682      	mov	sl, r0
 800a3bc:	4681      	mov	r9, r0
 800a3be:	4680      	mov	r8, r0
  s8_t empty = ARP_TABLE_SIZE;
 800a3c0:	4694      	mov	ip, r2
 800a3c2:	461d      	mov	r5, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a3c4:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 800a3c8:	f893 b014 	ldrb.w	fp, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a3cc:	d12a      	bne.n	800a424 <etharp_find_entry.isra.0+0x7c>
 800a3ce:	f1bb 0f00 	cmp.w	fp, #0
 800a3d2:	d12a      	bne.n	800a42a <etharp_find_entry.isra.0+0x82>
      empty = i;
 800a3d4:	fa4f fc80 	sxtb.w	ip, r0
 800a3d8:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3da:	280a      	cmp	r0, #10
 800a3dc:	f103 0318 	add.w	r3, r3, #24
 800a3e0:	d1f0      	bne.n	800a3c4 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d15b      	bne.n	800a4a0 <etharp_find_entry.isra.0+0xf8>
 800a3e8:	f1bc 0f0a 	cmp.w	ip, #10
 800a3ec:	d03c      	beq.n	800a468 <etharp_find_entry.isra.0+0xc0>
    i = empty;
 800a3ee:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a3f2:	2318      	movs	r3, #24
 800a3f4:	fb03 5306 	mla	r3, r3, r6, r5
 800a3f8:	7d1b      	ldrb	r3, [r3, #20]
 800a3fa:	b133      	cbz	r3, 800a40a <etharp_find_entry.isra.0+0x62>
 800a3fc:	4b2b      	ldr	r3, [pc, #172]	; (800a4ac <etharp_find_entry.isra.0+0x104>)
 800a3fe:	492c      	ldr	r1, [pc, #176]	; (800a4b0 <etharp_find_entry.isra.0+0x108>)
 800a400:	482c      	ldr	r0, [pc, #176]	; (800a4b4 <etharp_find_entry.isra.0+0x10c>)
 800a402:	f240 1287 	movw	r2, #391	; 0x187
 800a406:	f002 fa33 	bl	800c870 <iprintf>
  if (ipaddr != NULL) {
 800a40a:	b124      	cbz	r4, 800a416 <etharp_find_entry.isra.0+0x6e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a40c:	2318      	movs	r3, #24
 800a40e:	fb03 5306 	mla	r3, r3, r6, r5
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800a416:	2318      	movs	r3, #24
 800a418:	fb03 5506 	mla	r5, r3, r6, r5
 800a41c:	2300      	movs	r3, #0
 800a41e:	826b      	strh	r3, [r5, #18]
  return (err_t)i;
 800a420:	b270      	sxtb	r0, r6
 800a422:	e008      	b.n	800a436 <etharp_find_entry.isra.0+0x8e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a424:	f1bb 0f00 	cmp.w	fp, #0
 800a428:	d0d6      	beq.n	800a3d8 <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a42a:	b13c      	cbz	r4, 800a43c <etharp_find_entry.isra.0+0x94>
 800a42c:	6827      	ldr	r7, [r4, #0]
 800a42e:	685e      	ldr	r6, [r3, #4]
 800a430:	42b7      	cmp	r7, r6
 800a432:	d103      	bne.n	800a43c <etharp_find_entry.isra.0+0x94>
        return i;
 800a434:	b240      	sxtb	r0, r0
}
 800a436:	b003      	add	sp, #12
 800a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 800a43c:	f1bb 0f01 	cmp.w	fp, #1
 800a440:	8a5f      	ldrh	r7, [r3, #18]
 800a442:	d10c      	bne.n	800a45e <etharp_find_entry.isra.0+0xb6>
        if (arp_table[i].q != NULL) {
 800a444:	681e      	ldr	r6, [r3, #0]
 800a446:	b126      	cbz	r6, 800a452 <etharp_find_entry.isra.0+0xaa>
          if (arp_table[i].ctime >= age_queue) {
 800a448:	4547      	cmp	r7, r8
 800a44a:	d3c5      	bcc.n	800a3d8 <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 800a44c:	b242      	sxtb	r2, r0
 800a44e:	46b8      	mov	r8, r7
 800a450:	e7c2      	b.n	800a3d8 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 800a452:	454f      	cmp	r7, r9
 800a454:	d3c0      	bcc.n	800a3d8 <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 800a456:	fa4f fe80 	sxtb.w	lr, r0
 800a45a:	46b9      	mov	r9, r7
 800a45c:	e7bc      	b.n	800a3d8 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 800a45e:	4557      	cmp	r7, sl
            old_stable = i;
 800a460:	bf24      	itt	cs
 800a462:	b241      	sxtbcs	r1, r0
 800a464:	46ba      	movcs	sl, r7
 800a466:	e7b7      	b.n	800a3d8 <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 800a468:	290a      	cmp	r1, #10
 800a46a:	d00f      	beq.n	800a48c <etharp_find_entry.isra.0+0xe4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a46c:	2318      	movs	r3, #24
      i = old_stable;
 800a46e:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a470:	4359      	muls	r1, r3
 800a472:	586b      	ldr	r3, [r5, r1]
 800a474:	b133      	cbz	r3, 800a484 <etharp_find_entry.isra.0+0xdc>
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <etharp_find_entry.isra.0+0x104>)
 800a478:	490f      	ldr	r1, [pc, #60]	; (800a4b8 <etharp_find_entry.isra.0+0x110>)
 800a47a:	480e      	ldr	r0, [pc, #56]	; (800a4b4 <etharp_find_entry.isra.0+0x10c>)
 800a47c:	f240 126f 	movw	r2, #367	; 0x16f
 800a480:	f002 f9f6 	bl	800c870 <iprintf>
    etharp_free_entry(i);
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff ff0f 	bl	800a2a8 <etharp_free_entry>
 800a48a:	e7b2      	b.n	800a3f2 <etharp_find_entry.isra.0+0x4a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a48c:	f1be 0f0a 	cmp.w	lr, #10
 800a490:	d002      	beq.n	800a498 <etharp_find_entry.isra.0+0xf0>
      i = old_pending;
 800a492:	fa5f f68e 	uxtb.w	r6, lr
 800a496:	e7f5      	b.n	800a484 <etharp_find_entry.isra.0+0xdc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a498:	2a0a      	cmp	r2, #10
 800a49a:	d001      	beq.n	800a4a0 <etharp_find_entry.isra.0+0xf8>
      i = old_queue;
 800a49c:	b2d6      	uxtb	r6, r2
 800a49e:	e7f1      	b.n	800a484 <etharp_find_entry.isra.0+0xdc>
    return (s8_t)ERR_MEM;
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e7c7      	b.n	800a436 <etharp_find_entry.isra.0+0x8e>
 800a4a6:	bf00      	nop
 800a4a8:	20008288 	.word	0x20008288
 800a4ac:	0800f40d 	.word	0x0800f40d
 800a4b0:	0800f32f 	.word	0x0800f32f
 800a4b4:	0800d7e1 	.word	0x0800d7e1
 800a4b8:	0800f318 	.word	0x0800f318

0800a4bc <etharp_cleanup_netif>:
{
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	4e09      	ldr	r6, [pc, #36]	; (800a4e4 <etharp_cleanup_netif+0x28>)
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	2718      	movs	r7, #24
 800a4c6:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a4ca:	7d1a      	ldrb	r2, [r3, #20]
 800a4cc:	b12a      	cbz	r2, 800a4da <etharp_cleanup_netif+0x1e>
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	d102      	bne.n	800a4da <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f7ff fee7 	bl	800a2a8 <etharp_free_entry>
 800a4da:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a4dc:	2c0a      	cmp	r4, #10
 800a4de:	d1f2      	bne.n	800a4c6 <etharp_cleanup_netif+0xa>
}
 800a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20008288 	.word	0x20008288

0800a4e8 <etharp_input>:
{
 800a4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	b949      	cbnz	r1, 800a508 <etharp_input+0x20>
 800a4f4:	4b49      	ldr	r3, [pc, #292]	; (800a61c <etharp_input+0x134>)
 800a4f6:	494a      	ldr	r1, [pc, #296]	; (800a620 <etharp_input+0x138>)
 800a4f8:	484a      	ldr	r0, [pc, #296]	; (800a624 <etharp_input+0x13c>)
 800a4fa:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a4fe:	f002 f9b7 	bl	800c870 <iprintf>
}
 800a502:	b006      	add	sp, #24
 800a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800a508:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a50a:	8833      	ldrh	r3, [r6, #0]
 800a50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a510:	d108      	bne.n	800a524 <etharp_input+0x3c>
 800a512:	7933      	ldrb	r3, [r6, #4]
 800a514:	2b06      	cmp	r3, #6
 800a516:	d105      	bne.n	800a524 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a518:	7973      	ldrb	r3, [r6, #5]
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	d102      	bne.n	800a524 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a51e:	8873      	ldrh	r3, [r6, #2]
 800a520:	2b08      	cmp	r3, #8
 800a522:	d003      	beq.n	800a52c <etharp_input+0x44>
  pbuf_free(p);
 800a524:	4640      	mov	r0, r8
 800a526:	f7fa ff19 	bl	800535c <pbuf_free>
 800a52a:	e7ea      	b.n	800a502 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a52c:	684d      	ldr	r5, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a52e:	f8d6 300e 	ldr.w	r3, [r6, #14]
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	f106 0708 	add.w	r7, r6, #8
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a538:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a53a:	b115      	cbz	r5, 800a542 <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a53c:	429d      	cmp	r5, r3
 800a53e:	d059      	beq.n	800a5f4 <etharp_input+0x10c>
    for_us = 0;
 800a540:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a542:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a546:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d006      	beq.n	800a55c <etharp_input+0x74>
 800a54e:	4b33      	ldr	r3, [pc, #204]	; (800a61c <etharp_input+0x134>)
 800a550:	4935      	ldr	r1, [pc, #212]	; (800a628 <etharp_input+0x140>)
 800a552:	4834      	ldr	r0, [pc, #208]	; (800a624 <etharp_input+0x13c>)
 800a554:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a558:	f002 f98a 	bl	800c870 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800a55c:	9805      	ldr	r0, [sp, #20]
 800a55e:	2800      	cmp	r0, #0
 800a560:	d03c      	beq.n	800a5dc <etharp_input+0xf4>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a562:	4621      	mov	r1, r4
 800a564:	f000 fca7 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800a568:	4682      	mov	sl, r0
 800a56a:	bbb8      	cbnz	r0, 800a5dc <etharp_input+0xf4>
      ip4_addr_ismulticast(ipaddr)) {
 800a56c:	9b05      	ldr	r3, [sp, #20]
 800a56e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a572:	2be0      	cmp	r3, #224	; 0xe0
 800a574:	d032      	beq.n	800a5dc <etharp_input+0xf4>
  i = etharp_find_entry(ipaddr, flags, netif);
 800a576:	4649      	mov	r1, r9
 800a578:	a805      	add	r0, sp, #20
 800a57a:	f7ff ff15 	bl	800a3a8 <etharp_find_entry.isra.0>
  if (i < 0) {
 800a57e:	2800      	cmp	r0, #0
 800a580:	db2c      	blt.n	800a5dc <etharp_input+0xf4>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a582:	4b2a      	ldr	r3, [pc, #168]	; (800a62c <etharp_input+0x144>)
 800a584:	2218      	movs	r2, #24
 800a586:	fb02 f100 	mul.w	r1, r2, r0
 800a58a:	eb03 0c01 	add.w	ip, r3, r1
 800a58e:	f04f 0e02 	mov.w	lr, #2
 800a592:	f88c e014 	strb.w	lr, [ip, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a596:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 800a59a:	f8cc 4008 	str.w	r4, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a59e:	fb12 e200 	smlabb	r2, r2, r0, lr
 800a5a2:	6838      	ldr	r0, [r7, #0]
 800a5a4:	5098      	str	r0, [r3, r2]
 800a5a6:	eb03 0e02 	add.w	lr, r3, r2
 800a5aa:	88ba      	ldrh	r2, [r7, #4]
 800a5ac:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 800a5b0:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 800a5b4:	f8ac a012 	strh.w	sl, [ip, #18]
  if (arp_table[i].q != NULL) {
 800a5b8:	f1b9 0f00 	cmp.w	r9, #0
 800a5bc:	d00e      	beq.n	800a5dc <etharp_input+0xf4>
    arp_table[i].q = NULL;
 800a5be:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a5c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800a5cc:	463b      	mov	r3, r7
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 f871 	bl	800b6b8 <ethernet_output>
    pbuf_free(p);
 800a5d6:	4648      	mov	r0, r9
 800a5d8:	f7fa fec0 	bl	800535c <pbuf_free>
  switch (hdr->opcode) {
 800a5dc:	88f3      	ldrh	r3, [r6, #6]
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e2:	d00a      	beq.n	800a5fa <etharp_input+0x112>
 800a5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e8:	d19c      	bne.n	800a524 <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 800a5ea:	a905      	add	r1, sp, #20
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f7ff fbd5 	bl	8009d9c <dhcp_arp_reply>
    break;
 800a5f2:	e797      	b.n	800a524 <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a5f4:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a5f6:	46a9      	mov	r9, r5
 800a5f8:	e7a5      	b.n	800a546 <etharp_input+0x5e>
    if (for_us) {
 800a5fa:	2d00      	cmp	r5, #0
 800a5fc:	d092      	beq.n	800a524 <etharp_input+0x3c>
      etharp_raw(netif,
 800a5fe:	2202      	movs	r2, #2
 800a600:	9203      	str	r2, [sp, #12]
 800a602:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a604:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 800a608:	e9cd 7201 	strd	r7, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a60c:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800a60e:	9200      	str	r2, [sp, #0]
 800a610:	4619      	mov	r1, r3
 800a612:	463a      	mov	r2, r7
 800a614:	4620      	mov	r0, r4
 800a616:	f7ff fe5b 	bl	800a2d0 <etharp_raw>
 800a61a:	e783      	b.n	800a524 <etharp_input+0x3c>
 800a61c:	0800f40d 	.word	0x0800f40d
 800a620:	0800eeb5 	.word	0x0800eeb5
 800a624:	0800d7e1 	.word	0x0800d7e1
 800a628:	0800f377 	.word	0x0800f377
 800a62c:	20008288 	.word	0x20008288

0800a630 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a632:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a634:	2401      	movs	r4, #1
 800a636:	f100 0329 	add.w	r3, r0, #41	; 0x29
 800a63a:	e9cd 1402 	strd	r1, r4, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a63e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a640:	4904      	ldr	r1, [pc, #16]	; (800a654 <etharp_request+0x24>)
 800a642:	9101      	str	r1, [sp, #4]
 800a644:	9200      	str	r2, [sp, #0]
 800a646:	4619      	mov	r1, r3
 800a648:	4a03      	ldr	r2, [pc, #12]	; (800a658 <etharp_request+0x28>)
 800a64a:	f7ff fe41 	bl	800a2d0 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800a64e:	b004      	add	sp, #16
 800a650:	bd10      	pop	{r4, pc}
 800a652:	bf00      	nop
 800a654:	0800f7f9 	.word	0x0800f7f9
 800a658:	0800f78d 	.word	0x0800f78d

0800a65c <etharp_tmr>:
{
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4c15      	ldr	r4, [pc, #84]	; (800a6b8 <etharp_tmr+0x5c>)
 800a662:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a664:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a666:	2704      	movs	r7, #4
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a668:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 800a66c:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 800a66e:	b16a      	cbz	r2, 800a68c <etharp_tmr+0x30>
      arp_table[i].ctime++;
 800a670:	8963      	ldrh	r3, [r4, #10]
 800a672:	3301      	adds	r3, #1
 800a674:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a676:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800a67a:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a67c:	d203      	bcs.n	800a686 <etharp_tmr+0x2a>
 800a67e:	2a01      	cmp	r2, #1
 800a680:	d10b      	bne.n	800a69a <etharp_tmr+0x3e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a682:	2b04      	cmp	r3, #4
 800a684:	d90d      	bls.n	800a6a2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 800a686:	4628      	mov	r0, r5
 800a688:	f7ff fe0e 	bl	800a2a8 <etharp_free_entry>
 800a68c:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a68e:	2d0a      	cmp	r5, #10
 800a690:	f104 0418 	add.w	r4, r4, #24
 800a694:	d1ea      	bne.n	800a66c <etharp_tmr+0x10>
}
 800a696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a69a:	2a03      	cmp	r2, #3
 800a69c:	d108      	bne.n	800a6b0 <etharp_tmr+0x54>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a69e:	7327      	strb	r7, [r4, #12]
 800a6a0:	e7f4      	b.n	800a68c <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a6a2:	2118      	movs	r1, #24
 800a6a4:	fb01 8105 	mla	r1, r1, r5, r8
 800a6a8:	6820      	ldr	r0, [r4, #0]
 800a6aa:	f7ff ffc1 	bl	800a630 <etharp_request>
 800a6ae:	e7ed      	b.n	800a68c <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a6b0:	2a04      	cmp	r2, #4
 800a6b2:	d1eb      	bne.n	800a68c <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a6b4:	7326      	strb	r6, [r4, #12]
 800a6b6:	e7e9      	b.n	800a68c <etharp_tmr+0x30>
 800a6b8:	20008290 	.word	0x20008290

0800a6bc <etharp_output_to_arp_index>:
{
 800a6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a6c0:	4d25      	ldr	r5, [pc, #148]	; (800a758 <etharp_output_to_arp_index+0x9c>)
 800a6c2:	2318      	movs	r3, #24
 800a6c4:	fb03 5302 	mla	r3, r3, r2, r5
{
 800a6c8:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a6ca:	7d1b      	ldrb	r3, [r3, #20]
 800a6cc:	2b01      	cmp	r3, #1
{
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	4689      	mov	r9, r1
 800a6d2:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a6d4:	d806      	bhi.n	800a6e4 <etharp_output_to_arp_index+0x28>
 800a6d6:	4b21      	ldr	r3, [pc, #132]	; (800a75c <etharp_output_to_arp_index+0xa0>)
 800a6d8:	4921      	ldr	r1, [pc, #132]	; (800a760 <etharp_output_to_arp_index+0xa4>)
 800a6da:	4822      	ldr	r0, [pc, #136]	; (800a764 <etharp_output_to_arp_index+0xa8>)
 800a6dc:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a6e0:	f002 f8c6 	bl	800c870 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a6e4:	2318      	movs	r3, #24
 800a6e6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a6ea:	fb03 5404 	mla	r4, r3, r4, r5
 800a6ee:	00c9      	lsls	r1, r1, #3
 800a6f0:	7d23      	ldrb	r3, [r4, #20]
 800a6f2:	f101 070c 	add.w	r7, r1, #12
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	442f      	add	r7, r5
 800a6fa:	f106 0829 	add.w	r8, r6, #41	; 0x29
 800a6fe:	d10b      	bne.n	800a718 <etharp_output_to_arp_index+0x5c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a700:	8a63      	ldrh	r3, [r4, #18]
 800a702:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a706:	d913      	bls.n	800a730 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a708:	3104      	adds	r1, #4
 800a70a:	4429      	add	r1, r5
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ff8f 	bl	800a630 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a712:	b908      	cbnz	r0, 800a718 <etharp_output_to_arp_index+0x5c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a714:	2303      	movs	r3, #3
 800a716:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4642      	mov	r2, r8
 800a720:	463b      	mov	r3, r7
 800a722:	4649      	mov	r1, r9
 800a724:	4630      	mov	r0, r6
 800a726:	f000 ffc7 	bl	800b6b8 <ethernet_output>
}
 800a72a:	b005      	add	sp, #20
 800a72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a730:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a734:	d3f0      	bcc.n	800a718 <etharp_output_to_arp_index+0x5c>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a736:	2301      	movs	r3, #1
 800a738:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a73a:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <etharp_output_to_arp_index+0xac>)
 800a73e:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a740:	4429      	add	r1, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a742:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a744:	9102      	str	r1, [sp, #8]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	463a      	mov	r2, r7
 800a74a:	4643      	mov	r3, r8
 800a74c:	4641      	mov	r1, r8
 800a74e:	4630      	mov	r0, r6
 800a750:	f7ff fdbe 	bl	800a2d0 <etharp_raw>
 800a754:	e7dd      	b.n	800a712 <etharp_output_to_arp_index+0x56>
 800a756:	bf00      	nop
 800a758:	20008288 	.word	0x20008288
 800a75c:	0800f40d 	.word	0x0800f40d
 800a760:	0800f39b 	.word	0x0800f39b
 800a764:	0800d7e1 	.word	0x0800d7e1
 800a768:	0800f7f9 	.word	0x0800f7f9

0800a76c <etharp_query>:
{
 800a76c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a770:	4689      	mov	r9, r1
 800a772:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a774:	4601      	mov	r1, r0
 800a776:	f8d9 0000 	ldr.w	r0, [r9]
{
 800a77a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a77c:	f000 fb9b 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 800a780:	4606      	mov	r6, r0
 800a782:	2800      	cmp	r0, #0
 800a784:	d15b      	bne.n	800a83e <etharp_query+0xd2>
      ip4_addr_ismulticast(ipaddr) ||
 800a786:	f8d9 3000 	ldr.w	r3, [r9]
 800a78a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a78e:	2ae0      	cmp	r2, #224	; 0xe0
 800a790:	d055      	beq.n	800a83e <etharp_query+0xd2>
      ip4_addr_isany(ipaddr)) {
 800a792:	2b00      	cmp	r3, #0
 800a794:	d053      	beq.n	800a83e <etharp_query+0xd2>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a796:	2101      	movs	r1, #1
 800a798:	4648      	mov	r0, r9
 800a79a:	f7ff fe05 	bl	800a3a8 <etharp_find_entry.isra.0>
  if (i < 0) {
 800a79e:	1e04      	subs	r4, r0, #0
 800a7a0:	db50      	blt.n	800a844 <etharp_query+0xd8>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a7a2:	4d3e      	ldr	r5, [pc, #248]	; (800a89c <etharp_query+0x130>)
 800a7a4:	2318      	movs	r3, #24
 800a7a6:	fb03 5304 	mla	r3, r3, r4, r5
 800a7aa:	7d1a      	ldrb	r2, [r3, #20]
 800a7ac:	b91a      	cbnz	r2, 800a7b6 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a7ae:	2601      	movs	r6, #1
 800a7b0:	751e      	strb	r6, [r3, #20]
    arp_table[i].netif = netif;
 800a7b2:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a7b6:	2318      	movs	r3, #24
 800a7b8:	fb03 5304 	mla	r3, r3, r4, r5
 800a7bc:	7d1b      	ldrb	r3, [r3, #20]
 800a7be:	b933      	cbnz	r3, 800a7ce <etharp_query+0x62>
 800a7c0:	4b37      	ldr	r3, [pc, #220]	; (800a8a0 <etharp_query+0x134>)
 800a7c2:	4938      	ldr	r1, [pc, #224]	; (800a8a4 <etharp_query+0x138>)
 800a7c4:	4838      	ldr	r0, [pc, #224]	; (800a8a8 <etharp_query+0x13c>)
 800a7c6:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a7ca:	f002 f851 	bl	800c870 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800a7ce:	b90e      	cbnz	r6, 800a7d4 <etharp_query+0x68>
 800a7d0:	2f00      	cmp	r7, #0
 800a7d2:	d139      	bne.n	800a848 <etharp_query+0xdc>
    result = etharp_request(netif, ipaddr);
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f7ff ff2a 	bl	800a630 <etharp_request>
    if (q == NULL) {
 800a7dc:	bbb7      	cbnz	r7, 800a84c <etharp_query+0xe0>
}
 800a7de:	b002      	add	sp, #8
 800a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a7e4:	d1fb      	bne.n	800a7de <etharp_query+0x72>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a7e6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800a8a0 <etharp_query+0x134>
 800a7ea:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a8b0 <etharp_query+0x144>
 800a7ee:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a8a8 <etharp_query+0x13c>
 800a7f2:	463e      	mov	r6, r7
 800a7f4:	8972      	ldrh	r2, [r6, #10]
 800a7f6:	8933      	ldrh	r3, [r6, #8]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d108      	bne.n	800a80e <etharp_query+0xa2>
 800a7fc:	6833      	ldr	r3, [r6, #0]
 800a7fe:	b133      	cbz	r3, 800a80e <etharp_query+0xa2>
 800a800:	4643      	mov	r3, r8
 800a802:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a806:	4649      	mov	r1, r9
 800a808:	4650      	mov	r0, sl
 800a80a:	f002 f831 	bl	800c870 <iprintf>
      if (p->type != PBUF_ROM) {
 800a80e:	7b33      	ldrb	r3, [r6, #12]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d131      	bne.n	800a878 <etharp_query+0x10c>
      p = p->next;
 800a814:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800a816:	2e00      	cmp	r6, #0
 800a818:	d1ec      	bne.n	800a7f4 <etharp_query+0x88>
      pbuf_ref(p);
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7fa ff5a 	bl	80056d4 <pbuf_ref>
 800a820:	46b8      	mov	r8, r7
      if (arp_table[i].q != NULL) {
 800a822:	2318      	movs	r3, #24
 800a824:	fb03 f204 	mul.w	r2, r3, r4
 800a828:	461e      	mov	r6, r3
 800a82a:	58a8      	ldr	r0, [r5, r2]
 800a82c:	b108      	cbz	r0, 800a832 <etharp_query+0xc6>
        pbuf_free(arp_table[i].q);
 800a82e:	f7fa fd95 	bl	800535c <pbuf_free>
      arp_table[i].q = p;
 800a832:	fb06 f304 	mul.w	r3, r6, r4
      result = ERR_OK;
 800a836:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800a838:	f845 8003 	str.w	r8, [r5, r3]
 800a83c:	e7cf      	b.n	800a7de <etharp_query+0x72>
    return ERR_ARG;
 800a83e:	f06f 000f 	mvn.w	r0, #15
 800a842:	e7cc      	b.n	800a7de <etharp_query+0x72>
 800a844:	4620      	mov	r0, r4
 800a846:	e7ca      	b.n	800a7de <etharp_query+0x72>
  err_t result = ERR_MEM;
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a84c:	2318      	movs	r3, #24
 800a84e:	fb03 5204 	mla	r2, r3, r4, r5
 800a852:	7d12      	ldrb	r2, [r2, #20]
 800a854:	2a01      	cmp	r2, #1
 800a856:	d9c5      	bls.n	800a7e4 <etharp_query+0x78>
    ETHARP_SET_HINT(netif, i);
 800a858:	4a14      	ldr	r2, [pc, #80]	; (800a8ac <etharp_query+0x140>)
 800a85a:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a85c:	220c      	movs	r2, #12
 800a85e:	fb13 2304 	smlabb	r3, r3, r4, r2
 800a862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a866:	9200      	str	r2, [sp, #0]
 800a868:	442b      	add	r3, r5
 800a86a:	f108 0229 	add.w	r2, r8, #41	; 0x29
 800a86e:	4639      	mov	r1, r7
 800a870:	4640      	mov	r0, r8
 800a872:	f000 ff21 	bl	800b6b8 <ethernet_output>
 800a876:	e7b2      	b.n	800a7de <etharp_query+0x72>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a878:	2200      	movs	r2, #0
 800a87a:	8931      	ldrh	r1, [r6, #8]
 800a87c:	2002      	movs	r0, #2
 800a87e:	f7fa fdd5 	bl	800542c <pbuf_alloc>
      if (p != NULL) {
 800a882:	4680      	mov	r8, r0
 800a884:	b138      	cbz	r0, 800a896 <etharp_query+0x12a>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a886:	4639      	mov	r1, r7
 800a888:	f7fa ff84 	bl	8005794 <pbuf_copy>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d0c8      	beq.n	800a822 <etharp_query+0xb6>
          pbuf_free(p);
 800a890:	4640      	mov	r0, r8
 800a892:	f7fa fd63 	bl	800535c <pbuf_free>
      result = ERR_MEM;
 800a896:	f04f 30ff 	mov.w	r0, #4294967295
 800a89a:	e7a0      	b.n	800a7de <etharp_query+0x72>
 800a89c:	20008288 	.word	0x20008288
 800a8a0:	0800f40d 	.word	0x0800f40d
 800a8a4:	0800f3cb 	.word	0x0800f3cb
 800a8a8:	0800d7e1 	.word	0x0800d7e1
 800a8ac:	20008378 	.word	0x20008378
 800a8b0:	0800f3f3 	.word	0x0800f3f3

0800a8b4 <etharp_output>:
{
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	460e      	mov	r6, r1
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a8bc:	4604      	mov	r4, r0
 800a8be:	b930      	cbnz	r0, 800a8ce <etharp_output+0x1a>
 800a8c0:	4b3d      	ldr	r3, [pc, #244]	; (800a9b8 <etharp_output+0x104>)
 800a8c2:	493e      	ldr	r1, [pc, #248]	; (800a9bc <etharp_output+0x108>)
 800a8c4:	483e      	ldr	r0, [pc, #248]	; (800a9c0 <etharp_output+0x10c>)
 800a8c6:	f240 321b 	movw	r2, #795	; 0x31b
 800a8ca:	f001 ffd1 	bl	800c870 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a8ce:	b936      	cbnz	r6, 800a8de <etharp_output+0x2a>
 800a8d0:	4b39      	ldr	r3, [pc, #228]	; (800a9b8 <etharp_output+0x104>)
 800a8d2:	493c      	ldr	r1, [pc, #240]	; (800a9c4 <etharp_output+0x110>)
 800a8d4:	483a      	ldr	r0, [pc, #232]	; (800a9c0 <etharp_output+0x10c>)
 800a8d6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a8da:	f001 ffc9 	bl	800c870 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a8de:	b935      	cbnz	r5, 800a8ee <etharp_output+0x3a>
 800a8e0:	4b35      	ldr	r3, [pc, #212]	; (800a9b8 <etharp_output+0x104>)
 800a8e2:	4939      	ldr	r1, [pc, #228]	; (800a9c8 <etharp_output+0x114>)
 800a8e4:	4836      	ldr	r0, [pc, #216]	; (800a9c0 <etharp_output+0x10c>)
 800a8e6:	f240 321d 	movw	r2, #797	; 0x31d
 800a8ea:	f001 ffc1 	bl	800c870 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	6828      	ldr	r0, [r5, #0]
 800a8f2:	f000 fae0 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d159      	bne.n	800a9ae <etharp_output+0xfa>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a900:	2ae0      	cmp	r2, #224	; 0xe0
 800a902:	d11b      	bne.n	800a93c <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a904:	2301      	movs	r3, #1
 800a906:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a90a:	235e      	movs	r3, #94	; 0x5e
 800a90c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a910:	786b      	ldrb	r3, [r5, #1]
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a91a:	78ab      	ldrb	r3, [r5, #2]
 800a91c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a920:	78eb      	ldrb	r3, [r5, #3]
 800a922:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800a926:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a92c:	9200      	str	r2, [sp, #0]
 800a92e:	4631      	mov	r1, r6
 800a930:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800a934:	4620      	mov	r0, r4
 800a936:	f000 febf 	bl	800b6b8 <ethernet_output>
 800a93a:	e01f      	b.n	800a97c <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a93c:	6862      	ldr	r2, [r4, #4]
 800a93e:	68a1      	ldr	r1, [r4, #8]
 800a940:	405a      	eors	r2, r3
 800a942:	420a      	tst	r2, r1
 800a944:	d008      	beq.n	800a958 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 800a946:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a948:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d003      	beq.n	800a958 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a950:	68e3      	ldr	r3, [r4, #12]
 800a952:	b373      	cbz	r3, 800a9b2 <etharp_output+0xfe>
            dst_addr = netif_ip4_gw(netif);
 800a954:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a958:	4b1c      	ldr	r3, [pc, #112]	; (800a9cc <etharp_output+0x118>)
 800a95a:	491d      	ldr	r1, [pc, #116]	; (800a9d0 <etharp_output+0x11c>)
 800a95c:	781a      	ldrb	r2, [r3, #0]
 800a95e:	2018      	movs	r0, #24
 800a960:	fb00 1002 	mla	r0, r0, r2, r1
 800a964:	7d01      	ldrb	r1, [r0, #20]
 800a966:	2901      	cmp	r1, #1
 800a968:	4619      	mov	r1, r3
 800a96a:	d909      	bls.n	800a980 <etharp_output+0xcc>
 800a96c:	682f      	ldr	r7, [r5, #0]
 800a96e:	6843      	ldr	r3, [r0, #4]
 800a970:	429f      	cmp	r7, r3
 800a972:	d105      	bne.n	800a980 <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 800a974:	4631      	mov	r1, r6
 800a976:	4620      	mov	r0, r4
 800a978:	f7ff fea0 	bl	800a6bc <etharp_output_to_arp_index>
}
 800a97c:	b005      	add	sp, #20
 800a97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <etharp_output+0x11c>)
{
 800a982:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a984:	7d18      	ldrb	r0, [r3, #20]
 800a986:	2801      	cmp	r0, #1
 800a988:	d906      	bls.n	800a998 <etharp_output+0xe4>
 800a98a:	682f      	ldr	r7, [r5, #0]
 800a98c:	6858      	ldr	r0, [r3, #4]
 800a98e:	4287      	cmp	r7, r0
 800a990:	d102      	bne.n	800a998 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 800a992:	b2d2      	uxtb	r2, r2
 800a994:	700a      	strb	r2, [r1, #0]
 800a996:	e7ed      	b.n	800a974 <etharp_output+0xc0>
 800a998:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a99a:	2a0a      	cmp	r2, #10
 800a99c:	f103 0318 	add.w	r3, r3, #24
 800a9a0:	d1f0      	bne.n	800a984 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff fee0 	bl	800a76c <etharp_query>
 800a9ac:	e7e6      	b.n	800a97c <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 800a9ae:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <etharp_output+0x120>)
 800a9b0:	e7ba      	b.n	800a928 <etharp_output+0x74>
            return ERR_RTE;
 800a9b2:	f06f 0003 	mvn.w	r0, #3
 800a9b6:	e7e1      	b.n	800a97c <etharp_output+0xc8>
 800a9b8:	0800f40d 	.word	0x0800f40d
 800a9bc:	0800eeb5 	.word	0x0800eeb5
 800a9c0:	0800d7e1 	.word	0x0800d7e1
 800a9c4:	0800e2a7 	.word	0x0800e2a7
 800a9c8:	0800f358 	.word	0x0800f358
 800a9cc:	20008378 	.word	0x20008378
 800a9d0:	20008288 	.word	0x20008288
 800a9d4:	0800f78d 	.word	0x0800f78d

0800a9d8 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800a9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	b087      	sub	sp, #28
 800a9de:	460f      	mov	r7, r1
 800a9e0:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a9e2:	2124      	movs	r1, #36	; 0x24
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	f7fa fd20 	bl	800542c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	b3a0      	cbz	r0, 800aa5a <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a9f0:	8943      	ldrh	r3, [r0, #10]
 800a9f2:	2b23      	cmp	r3, #35	; 0x23
 800a9f4:	d806      	bhi.n	800aa04 <icmp_send_response.isra.0+0x2c>
 800a9f6:	4b1a      	ldr	r3, [pc, #104]	; (800aa60 <icmp_send_response.isra.0+0x88>)
 800a9f8:	491a      	ldr	r1, [pc, #104]	; (800aa64 <icmp_send_response.isra.0+0x8c>)
 800a9fa:	481b      	ldr	r0, [pc, #108]	; (800aa68 <icmp_send_response.isra.0+0x90>)
 800a9fc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800aa00:	f001 ff36 	bl	800c870 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800aa04:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800aa06:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	7123      	strb	r3, [r4, #4]
 800aa0c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800aa0e:	71a3      	strb	r3, [r4, #6]
 800aa10:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800aa12:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800aa14:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800aa16:	4613      	mov	r3, r2
 800aa18:	f104 0108 	add.w	r1, r4, #8
 800aa1c:	f102 001c 	add.w	r0, r2, #28
 800aa20:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa24:	f841 6b04 	str.w	r6, [r1], #4
 800aa28:	4283      	cmp	r3, r0
 800aa2a:	d1f9      	bne.n	800aa20 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800aa2c:	ae06      	add	r6, sp, #24
 800aa2e:	68d3      	ldr	r3, [r2, #12]
 800aa30:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 f8bb 	bl	800abb0 <ip4_route>
#endif
  if (netif != NULL) {
 800aa3a:	b158      	cbz	r0, 800aa54 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800aa3c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800aa3e:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800aa40:	70a1      	strb	r1, [r4, #2]
 800aa42:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800aa44:	4632      	mov	r2, r6
 800aa46:	9002      	str	r0, [sp, #8]
 800aa48:	e9cd 1300 	strd	r1, r3, [sp]
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	23ff      	movs	r3, #255	; 0xff
 800aa50:	f000 fa20 	bl	800ae94 <ip4_output_if>
  }
  pbuf_free(q);
 800aa54:	4628      	mov	r0, r5
 800aa56:	f7fa fc81 	bl	800535c <pbuf_free>
}
 800aa5a:	b007      	add	sp, #28
 800aa5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800f51d 	.word	0x0800f51d
 800aa64:	0800f552 	.word	0x0800f552
 800aa68:	0800d7e1 	.word	0x0800d7e1

0800aa6c <icmp_input>:
{
 800aa6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800aa70:	4b44      	ldr	r3, [pc, #272]	; (800ab84 <icmp_input+0x118>)
 800aa72:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800aa76:	f899 5000 	ldrb.w	r5, [r9]
 800aa7a:	f005 050f 	and.w	r5, r5, #15
 800aa7e:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800aa80:	2d13      	cmp	r5, #19
{
 800aa82:	b085      	sub	sp, #20
 800aa84:	4604      	mov	r4, r0
 800aa86:	4688      	mov	r8, r1
 800aa88:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 800aa8a:	d92a      	bls.n	800aae2 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 800aa8c:	8942      	ldrh	r2, [r0, #10]
 800aa8e:	2a03      	cmp	r2, #3
 800aa90:	d927      	bls.n	800aae2 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800aa92:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 800aa94:	7812      	ldrb	r2, [r2, #0]
 800aa96:	2a08      	cmp	r2, #8
 800aa98:	d123      	bne.n	800aae2 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aa9a:	6958      	ldr	r0, [r3, #20]
 800aa9c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800aaa0:	2ae0      	cmp	r2, #224	; 0xe0
 800aaa2:	d01e      	beq.n	800aae2 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800aaa4:	6819      	ldr	r1, [r3, #0]
 800aaa6:	f000 fa06 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 800aaaa:	4606      	mov	r6, r0
 800aaac:	b9c8      	cbnz	r0, 800aae2 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800aaae:	8923      	ldrh	r3, [r4, #8]
 800aab0:	2b07      	cmp	r3, #7
 800aab2:	d916      	bls.n	800aae2 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800aab4:	f105 010e 	add.w	r1, r5, #14
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7fa fc49 	bl	8005350 <pbuf_header>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d04f      	beq.n	800ab62 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800aac2:	8921      	ldrh	r1, [r4, #8]
 800aac4:	4429      	add	r1, r5
 800aac6:	4632      	mov	r2, r6
 800aac8:	b289      	uxth	r1, r1
 800aaca:	2002      	movs	r0, #2
 800aacc:	f7fa fcae 	bl	800542c <pbuf_alloc>
      if (r == NULL) {
 800aad0:	4606      	mov	r6, r0
 800aad2:	b130      	cbz	r0, 800aae2 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800aad4:	8942      	ldrh	r2, [r0, #10]
 800aad6:	f105 0308 	add.w	r3, r5, #8
 800aada:	429a      	cmp	r2, r3
 800aadc:	d207      	bcs.n	800aaee <icmp_input+0x82>
        pbuf_free(r);
 800aade:	f7fa fc3d 	bl	800535c <pbuf_free>
  pbuf_free(p);
 800aae2:	4620      	mov	r0, r4
}
 800aae4:	b005      	add	sp, #20
 800aae6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800aaea:	f7fa bc37 	b.w	800535c <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800aaee:	4649      	mov	r1, r9
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	6840      	ldr	r0, [r0, #4]
 800aaf4:	f001 fe01 	bl	800c6fa <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800aaf8:	4269      	negs	r1, r5
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7fa fc28 	bl	8005350 <pbuf_header>
 800ab00:	b138      	cbz	r0, 800ab12 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ab02:	4b21      	ldr	r3, [pc, #132]	; (800ab88 <icmp_input+0x11c>)
 800ab04:	4921      	ldr	r1, [pc, #132]	; (800ab8c <icmp_input+0x120>)
 800ab06:	4822      	ldr	r0, [pc, #136]	; (800ab90 <icmp_input+0x124>)
 800ab08:	22af      	movs	r2, #175	; 0xaf
 800ab0a:	f001 feb1 	bl	800c870 <iprintf>
        pbuf_free(r);
 800ab0e:	4630      	mov	r0, r6
 800ab10:	e7e5      	b.n	800aade <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800ab12:	4621      	mov	r1, r4
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7fa fe3d 	bl	8005794 <pbuf_copy>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1f7      	bne.n	800ab0e <icmp_input+0xa2>
      pbuf_free(p);
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7fa fc1c 	bl	800535c <pbuf_free>
 800ab24:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 800ab26:	4629      	mov	r1, r5
 800ab28:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ab2a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ab2c:	f7fa fc10 	bl	8005350 <pbuf_header>
 800ab30:	4602      	mov	r2, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1d5      	bne.n	800aae2 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ab36:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ab40:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ab42:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 800ab44:	70b0      	strb	r0, [r6, #2]
 800ab46:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ab48:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800ab4a:	7288      	strb	r0, [r1, #10]
 800ab4c:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ab4e:	2101      	movs	r1, #1
 800ab50:	e9cd 0100 	strd	r0, r1, [sp]
 800ab54:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab58:	490e      	ldr	r1, [pc, #56]	; (800ab94 <icmp_input+0x128>)
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f99a 	bl	800ae94 <ip4_output_if>
 800ab60:	e7bf      	b.n	800aae2 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ab62:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 800ab66:	31f2      	adds	r1, #242	; 0xf2
 800ab68:	b209      	sxth	r1, r1
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7fa fbf0 	bl	8005350 <pbuf_header>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d0d8      	beq.n	800ab26 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ab74:	4b04      	ldr	r3, [pc, #16]	; (800ab88 <icmp_input+0x11c>)
 800ab76:	4908      	ldr	r1, [pc, #32]	; (800ab98 <icmp_input+0x12c>)
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <icmp_input+0x124>)
 800ab7a:	22c0      	movs	r2, #192	; 0xc0
 800ab7c:	f001 fe78 	bl	800c870 <iprintf>
        goto icmperr;
 800ab80:	e7af      	b.n	800aae2 <icmp_input+0x76>
 800ab82:	bf00      	nop
 800ab84:	200083a4 	.word	0x200083a4
 800ab88:	0800f51d 	.word	0x0800f51d
 800ab8c:	0800f4b6 	.word	0x0800f4b6
 800ab90:	0800d7e1 	.word	0x0800d7e1
 800ab94:	200083b8 	.word	0x200083b8
 800ab98:	0800f4eb 	.word	0x0800f4eb

0800ab9c <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 800ab9c:	460a      	mov	r2, r1
 800ab9e:	3004      	adds	r0, #4
 800aba0:	2103      	movs	r1, #3
 800aba2:	f7ff bf19 	b.w	800a9d8 <icmp_send_response.isra.0>

0800aba6 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 800aba6:	460a      	mov	r2, r1
 800aba8:	3004      	adds	r0, #4
 800abaa:	210b      	movs	r1, #11
 800abac:	f7ff bf14 	b.w	800a9d8 <icmp_send_response.isra.0>

0800abb0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800abb0:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800abb2:	4b13      	ldr	r3, [pc, #76]	; (800ac00 <ip4_route+0x50>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	b96b      	cbnz	r3, 800abd4 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800abb8:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <ip4_route+0x54>)
 800abba:	6812      	ldr	r2, [r2, #0]
 800abbc:	b1ea      	cbz	r2, 800abfa <ip4_route+0x4a>
 800abbe:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 800abc2:	f001 0105 	and.w	r1, r1, #5
 800abc6:	2905      	cmp	r1, #5
 800abc8:	d117      	bne.n	800abfa <ip4_route+0x4a>
 800abca:	6851      	ldr	r1, [r2, #4]
 800abcc:	2900      	cmp	r1, #0
 800abce:	bf18      	it	ne
 800abd0:	4613      	movne	r3, r2
 800abd2:	e012      	b.n	800abfa <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800abd4:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800abd8:	07cd      	lsls	r5, r1, #31
 800abda:	d5eb      	bpl.n	800abb4 <ip4_route+0x4>
 800abdc:	074c      	lsls	r4, r1, #29
 800abde:	d5e9      	bpl.n	800abb4 <ip4_route+0x4>
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	2a00      	cmp	r2, #0
 800abe4:	d0e6      	beq.n	800abb4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800abe6:	6804      	ldr	r4, [r0, #0]
 800abe8:	689d      	ldr	r5, [r3, #8]
 800abea:	4062      	eors	r2, r4
 800abec:	422a      	tst	r2, r5
 800abee:	d004      	beq.n	800abfa <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800abf0:	078a      	lsls	r2, r1, #30
 800abf2:	d4df      	bmi.n	800abb4 <ip4_route+0x4>
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	4294      	cmp	r4, r2
 800abf8:	d1dc      	bne.n	800abb4 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	bd30      	pop	{r4, r5, pc}
 800abfe:	bf00      	nop
 800ac00:	2000bab8 	.word	0x2000bab8
 800ac04:	2000babc 	.word	0x2000babc

0800ac08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ac08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ac0c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800ac0e:	f897 9000 	ldrb.w	r9, [r7]
 800ac12:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800ac16:	2b04      	cmp	r3, #4
{
 800ac18:	4605      	mov	r5, r0
 800ac1a:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800ac1c:	d005      	beq.n	800ac2a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f7fa fb9c 	bl	800535c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800ac24:	2000      	movs	r0, #0
 800ac26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ac2a:	8878      	ldrh	r0, [r7, #2]
 800ac2c:	f7f9 ff5c 	bl	8004ae8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800ac30:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 800ac32:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 800ac36:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 800ac38:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ac3c:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800ac3e:	d903      	bls.n	800ac48 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 800ac40:	4601      	mov	r1, r0
 800ac42:	4628      	mov	r0, r5
 800ac44:	f7fa fcce 	bl	80055e4 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ac48:	896b      	ldrh	r3, [r5, #10]
 800ac4a:	454b      	cmp	r3, r9
 800ac4c:	d3e7      	bcc.n	800ac1e <ip4_input+0x16>
 800ac4e:	892b      	ldrh	r3, [r5, #8]
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d3e4      	bcc.n	800ac1e <ip4_input+0x16>
 800ac54:	f1b9 0f13 	cmp.w	r9, #19
 800ac58:	d9e1      	bls.n	800ac1e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	4c4f      	ldr	r4, [pc, #316]	; (800ad9c <ip4_input+0x194>)
 800ac5e:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ac60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ac68:	2be0      	cmp	r3, #224	; 0xe0
 800ac6a:	d112      	bne.n	800ac92 <ip4_input+0x8a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ac6c:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 800ac70:	07da      	lsls	r2, r3, #31
 800ac72:	d503      	bpl.n	800ac7c <ip4_input+0x74>
 800ac74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d162      	bne.n	800ad42 <ip4_input+0x13a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ac7c:	7a7b      	ldrb	r3, [r7, #9]
 800ac7e:	2b11      	cmp	r3, #17
 800ac80:	d105      	bne.n	800ac8e <ip4_input+0x86>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ac82:	eb07 0309 	add.w	r3, r7, r9
 800ac86:	885b      	ldrh	r3, [r3, #2]
 800ac88:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800ac8c:	d05b      	beq.n	800ad46 <ip4_input+0x13e>
 800ac8e:	2600      	movs	r6, #0
 800ac90:	e018      	b.n	800acc4 <ip4_input+0xbc>
        netif = netif_list;
 800ac92:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800ada0 <ip4_input+0x198>
 800ac96:	4646      	mov	r6, r8
    int first = 1;
 800ac98:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ac9c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800aca0:	07db      	lsls	r3, r3, #31
 800aca2:	d404      	bmi.n	800acae <ip4_input+0xa6>
      if (first) {
 800aca4:	f1ba 0f00 	cmp.w	sl, #0
 800aca8:	d13e      	bne.n	800ad28 <ip4_input+0x120>
        netif = netif->next;
 800acaa:	6836      	ldr	r6, [r6, #0]
 800acac:	e041      	b.n	800ad32 <ip4_input+0x12a>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800acae:	6873      	ldr	r3, [r6, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0f7      	beq.n	800aca4 <ip4_input+0x9c>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800acb4:	6960      	ldr	r0, [r4, #20]
 800acb6:	4283      	cmp	r3, r0
 800acb8:	d004      	beq.n	800acc4 <ip4_input+0xbc>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800acba:	4631      	mov	r1, r6
 800acbc:	f000 f8fb 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d0ef      	beq.n	800aca4 <ip4_input+0x9c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800acc4:	6920      	ldr	r0, [r4, #16]
 800acc6:	b148      	cbz	r0, 800acdc <ip4_input+0xd4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800acc8:	4641      	mov	r1, r8
 800acca:	f000 f8f4 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d1a5      	bne.n	800ac1e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800acd8:	2be0      	cmp	r3, #224	; 0xe0
 800acda:	d0a0      	beq.n	800ac1e <ip4_input+0x16>
  if (netif == NULL) {
 800acdc:	2e00      	cmp	r6, #0
 800acde:	d09e      	beq.n	800ac1e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ace6:	b133      	cbz	r3, 800acf6 <ip4_input+0xee>
    p = ip4_reass(p);
 800ace8:	4628      	mov	r0, r5
 800acea:	f000 fa15 	bl	800b118 <ip4_reass>
    if (p == NULL) {
 800acee:	4605      	mov	r5, r0
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d097      	beq.n	800ac24 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800acf4:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800acf6:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 800acf8:	e9c4 6800 	strd	r6, r8, [r4]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800acfc:	783b      	ldrb	r3, [r7, #0]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ad04:	f1c9 0100 	rsb	r1, r9, #0
 800ad08:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ad0a:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ad0c:	f7fa fb20 	bl	8005350 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800ad10:	7a7b      	ldrb	r3, [r7, #9]
 800ad12:	2b06      	cmp	r3, #6
 800ad14:	d025      	beq.n	800ad62 <ip4_input+0x15a>
 800ad16:	2b11      	cmp	r3, #17
 800ad18:	d017      	beq.n	800ad4a <ip4_input+0x142>
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d126      	bne.n	800ad6c <ip4_input+0x164>
      icmp_input(p, inp);
 800ad1e:	4641      	mov	r1, r8
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7ff fea3 	bl	800aa6c <icmp_input>
      break;
 800ad26:	e014      	b.n	800ad52 <ip4_input+0x14a>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ad28:	7d23      	ldrb	r3, [r4, #20]
 800ad2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ad2c:	d0a6      	beq.n	800ac7c <ip4_input+0x74>
        netif = netif_list;
 800ad2e:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800ad32:	4546      	cmp	r6, r8
        netif = netif->next;
 800ad34:	bf08      	it	eq
 800ad36:	6836      	ldreq	r6, [r6, #0]
 800ad38:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 800ad3c:	2e00      	cmp	r6, #0
 800ad3e:	d1ad      	bne.n	800ac9c <ip4_input+0x94>
 800ad40:	e79c      	b.n	800ac7c <ip4_input+0x74>
 800ad42:	4646      	mov	r6, r8
 800ad44:	e7be      	b.n	800acc4 <ip4_input+0xbc>
 800ad46:	4646      	mov	r6, r8
 800ad48:	e7c8      	b.n	800acdc <ip4_input+0xd4>
      udp_input(p, inp);
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f7fe f80b 	bl	8008d68 <udp_input>
  ip_data.current_netif = NULL;
 800ad52:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800ad54:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 800ad58:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ad5a:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ad5c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 800ad60:	e760      	b.n	800ac24 <ip4_input+0x1c>
      tcp_input(p, inp);
 800ad62:	4641      	mov	r1, r8
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7fc fa99 	bl	800729c <tcp_input>
      break;
 800ad6a:	e7f2      	b.n	800ad52 <ip4_input+0x14a>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	6960      	ldr	r0, [r4, #20]
 800ad70:	f000 f8a1 	bl	800aeb6 <ip4_addr_isbroadcast_u32>
 800ad74:	b968      	cbnz	r0, 800ad92 <ip4_input+0x18a>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ad76:	6963      	ldr	r3, [r4, #20]
 800ad78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ad7c:	2be0      	cmp	r3, #224	; 0xe0
 800ad7e:	d008      	beq.n	800ad92 <ip4_input+0x18a>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ad80:	4649      	mov	r1, r9
 800ad82:	4628      	mov	r0, r5
 800ad84:	f7fa fae7 	bl	8005356 <pbuf_header_force>
        p->payload = iphdr;
 800ad88:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ad8a:	2102      	movs	r1, #2
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f7ff ff05 	bl	800ab9c <icmp_dest_unreach>
      pbuf_free(p);
 800ad92:	4628      	mov	r0, r5
 800ad94:	f7fa fae2 	bl	800535c <pbuf_free>
 800ad98:	e7db      	b.n	800ad52 <ip4_input+0x14a>
 800ad9a:	bf00      	nop
 800ad9c:	200083a4 	.word	0x200083a4
 800ada0:	2000bab8 	.word	0x2000bab8

0800ada4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ada4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ada8:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800adaa:	89c3      	ldrh	r3, [r0, #14]
{
 800adac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800adb0:	2b01      	cmp	r3, #1
{
 800adb2:	4605      	mov	r5, r0
 800adb4:	468a      	mov	sl, r1
 800adb6:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800adb8:	d006      	beq.n	800adc8 <ip4_output_if_src+0x24>
 800adba:	4b30      	ldr	r3, [pc, #192]	; (800ae7c <ip4_output_if_src+0xd8>)
 800adbc:	4930      	ldr	r1, [pc, #192]	; (800ae80 <ip4_output_if_src+0xdc>)
 800adbe:	4831      	ldr	r0, [pc, #196]	; (800ae84 <ip4_output_if_src+0xe0>)
 800adc0:	f240 3233 	movw	r2, #819	; 0x333
 800adc4:	f001 fd54 	bl	800c870 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800adc8:	2e00      	cmp	r6, #0
 800adca:	d047      	beq.n	800ae5c <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800adcc:	2114      	movs	r1, #20
 800adce:	4628      	mov	r0, r5
 800add0:	f7fa fabe 	bl	8005350 <pbuf_header>
 800add4:	2800      	cmp	r0, #0
 800add6:	d14e      	bne.n	800ae76 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800add8:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800adda:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800addc:	2b13      	cmp	r3, #19
 800adde:	d806      	bhi.n	800adee <ip4_output_if_src+0x4a>
 800ade0:	4b26      	ldr	r3, [pc, #152]	; (800ae7c <ip4_output_if_src+0xd8>)
 800ade2:	4929      	ldr	r1, [pc, #164]	; (800ae88 <ip4_output_if_src+0xe4>)
 800ade4:	4827      	ldr	r0, [pc, #156]	; (800ae84 <ip4_output_if_src+0xe0>)
 800ade6:	f240 3261 	movw	r2, #865	; 0x361
 800adea:	f001 fd41 	bl	800c870 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800adee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800adf2:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800adf4:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800adf6:	6833      	ldr	r3, [r6, #0]
 800adf8:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800adfa:	2345      	movs	r3, #69	; 0x45
 800adfc:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800adfe:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800ae02:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ae04:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ae06:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800ae90 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ae0a:	f7f9 fe6d 	bl	8004ae8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800ae0e:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ae10:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800ae12:	71a7      	strb	r7, [r4, #6]
 800ae14:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ae16:	f8b9 0000 	ldrh.w	r0, [r9]
 800ae1a:	f7f9 fe65 	bl	8004ae8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ae1e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ae22:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800ae24:	3301      	adds	r3, #1
 800ae26:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800ae2a:	f1ba 0f00 	cmp.w	sl, #0
 800ae2e:	d112      	bne.n	800ae56 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ae30:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <ip4_output_if_src+0xe8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ae34:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ae36:	72a7      	strb	r7, [r4, #10]
 800ae38:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ae3a:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 800ae3e:	b19b      	cbz	r3, 800ae68 <ip4_output_if_src+0xc4>
 800ae40:	892a      	ldrh	r2, [r5, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d910      	bls.n	800ae68 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800ae46:	4632      	mov	r2, r6
 800ae48:	4641      	mov	r1, r8
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f000 fb0e 	bl	800b46c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800ae50:	b002      	add	sp, #8
 800ae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800ae56:	f8da 3000 	ldr.w	r3, [sl]
 800ae5a:	e7eb      	b.n	800ae34 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ae5c:	686b      	ldr	r3, [r5, #4]
 800ae5e:	ae02      	add	r6, sp, #8
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	f846 3d04 	str.w	r3, [r6, #-4]!
 800ae66:	e7e8      	b.n	800ae3a <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800ae68:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4640      	mov	r0, r8
 800ae72:	4798      	blx	r3
 800ae74:	e7ec      	b.n	800ae50 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800ae76:	f06f 0001 	mvn.w	r0, #1
 800ae7a:	e7e9      	b.n	800ae50 <ip4_output_if_src+0xac>
 800ae7c:	0800f57e 	.word	0x0800f57e
 800ae80:	0800f5b2 	.word	0x0800f5b2
 800ae84:	0800d7e1 	.word	0x0800d7e1
 800ae88:	0800f5be 	.word	0x0800f5be
 800ae8c:	0800f5ec 	.word	0x0800f5ec
 800ae90:	2000837a 	.word	0x2000837a

0800ae94 <ip4_output_if>:
{
 800ae94:	b4f0      	push	{r4, r5, r6, r7}
 800ae96:	9c06      	ldr	r4, [sp, #24]
 800ae98:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ae9c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800aea0:	b11a      	cbz	r2, 800aeaa <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800aea2:	b109      	cbz	r1, 800aea8 <ip4_output_if+0x14>
 800aea4:	680f      	ldr	r7, [r1, #0]
 800aea6:	b907      	cbnz	r7, 800aeaa <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800aea8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800aeaa:	e9cd 6405 	strd	r6, r4, [sp, #20]
 800aeae:	9504      	str	r5, [sp, #16]
}
 800aeb0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800aeb2:	f7ff bf77 	b.w	800ada4 <ip4_output_if_src>

0800aeb6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800aeb6:	1e43      	subs	r3, r0, #1
 800aeb8:	3303      	adds	r3, #3
 800aeba:	d811      	bhi.n	800aee0 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800aebc:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800aec0:	f013 0302 	ands.w	r3, r3, #2
 800aec4:	d00e      	beq.n	800aee4 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800aec6:	684a      	ldr	r2, [r1, #4]
 800aec8:	4282      	cmp	r2, r0
 800aeca:	d00b      	beq.n	800aee4 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800aecc:	688b      	ldr	r3, [r1, #8]
 800aece:	4042      	eors	r2, r0
 800aed0:	421a      	tst	r2, r3
 800aed2:	d107      	bne.n	800aee4 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800aed4:	43db      	mvns	r3, r3
 800aed6:	4383      	bics	r3, r0
    return 1;
 800aed8:	bf0c      	ite	eq
 800aeda:	2001      	moveq	r0, #1
 800aedc:	2000      	movne	r0, #0
 800aede:	4770      	bx	lr
 800aee0:	2001      	movs	r0, #1
 800aee2:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800aee4:	2000      	movs	r0, #0
  }
}
 800aee6:	4770      	bx	lr

0800aee8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800aee8:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <ip_reass_dequeue_datagram+0x34>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4282      	cmp	r2, r0
{
 800aef0:	4604      	mov	r4, r0
 800aef2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800aef4:	d107      	bne.n	800af06 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800aef6:	6802      	ldr	r2, [r0, #0]
 800aef8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800aefa:	4621      	mov	r1, r4
 800aefc:	2004      	movs	r0, #4
}
 800aefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800af02:	f7fa b899 	b.w	8005038 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800af06:	b931      	cbnz	r1, 800af16 <ip_reass_dequeue_datagram+0x2e>
 800af08:	4b05      	ldr	r3, [pc, #20]	; (800af20 <ip_reass_dequeue_datagram+0x38>)
 800af0a:	4906      	ldr	r1, [pc, #24]	; (800af24 <ip_reass_dequeue_datagram+0x3c>)
 800af0c:	4806      	ldr	r0, [pc, #24]	; (800af28 <ip_reass_dequeue_datagram+0x40>)
 800af0e:	f240 1245 	movw	r2, #325	; 0x145
 800af12:	f001 fcad 	bl	800c870 <iprintf>
    prev->next = ipr->next;
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	e7ee      	b.n	800aefa <ip_reass_dequeue_datagram+0x12>
 800af1c:	20008380 	.word	0x20008380
 800af20:	0800f6d9 	.word	0x0800f6d9
 800af24:	0800f712 	.word	0x0800f712
 800af28:	0800d7e1 	.word	0x0800d7e1

0800af2c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800af2c:	4281      	cmp	r1, r0
{
 800af2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af32:	4605      	mov	r5, r0
 800af34:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800af36:	d105      	bne.n	800af44 <ip_reass_free_complete_datagram+0x18>
 800af38:	4b2f      	ldr	r3, [pc, #188]	; (800aff8 <ip_reass_free_complete_datagram+0xcc>)
 800af3a:	4930      	ldr	r1, [pc, #192]	; (800affc <ip_reass_free_complete_datagram+0xd0>)
 800af3c:	4830      	ldr	r0, [pc, #192]	; (800b000 <ip_reass_free_complete_datagram+0xd4>)
 800af3e:	22ab      	movs	r2, #171	; 0xab
 800af40:	f001 fc96 	bl	800c870 <iprintf>
  if (prev != NULL) {
 800af44:	b147      	cbz	r7, 800af58 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	42ab      	cmp	r3, r5
 800af4a:	d005      	beq.n	800af58 <ip_reass_free_complete_datagram+0x2c>
 800af4c:	4b2a      	ldr	r3, [pc, #168]	; (800aff8 <ip_reass_free_complete_datagram+0xcc>)
 800af4e:	492d      	ldr	r1, [pc, #180]	; (800b004 <ip_reass_free_complete_datagram+0xd8>)
 800af50:	482b      	ldr	r0, [pc, #172]	; (800b000 <ip_reass_free_complete_datagram+0xd4>)
 800af52:	22ad      	movs	r2, #173	; 0xad
 800af54:	f001 fc8c 	bl	800c870 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800af58:	686e      	ldr	r6, [r5, #4]
 800af5a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800af5c:	889a      	ldrh	r2, [r3, #4]
 800af5e:	bb92      	cbnz	r2, 800afc6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800af64:	f105 011c 	add.w	r1, r5, #28
 800af68:	f105 0208 	add.w	r2, r5, #8
 800af6c:	f852 0b04 	ldr.w	r0, [r2], #4
 800af70:	f843 0b04 	str.w	r0, [r3], #4
 800af74:	428a      	cmp	r2, r1
 800af76:	d1f9      	bne.n	800af6c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800af78:	2101      	movs	r1, #1
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff fe13 	bl	800aba6 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800af80:	4630      	mov	r0, r6
 800af82:	f7fa fb9f 	bl	80056c4 <pbuf_clen>
 800af86:	4604      	mov	r4, r0
    pbuf_free(p);
 800af88:	4630      	mov	r0, r6
 800af8a:	f7fa f9e7 	bl	800535c <pbuf_free>
  p = ipr->p;
 800af8e:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800af90:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800aff8 <ip_reass_free_complete_datagram+0xcc>
 800af94:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800b010 <ip_reass_free_complete_datagram+0xe4>
 800af98:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b000 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800af9c:	b9ae      	cbnz	r6, 800afca <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800af9e:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800afa0:	4d19      	ldr	r5, [pc, #100]	; (800b008 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7ff ffa0 	bl	800aee8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800afa8:	882b      	ldrh	r3, [r5, #0]
 800afaa:	42a3      	cmp	r3, r4
 800afac:	d205      	bcs.n	800afba <ip_reass_free_complete_datagram+0x8e>
 800afae:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <ip_reass_free_complete_datagram+0xcc>)
 800afb0:	4916      	ldr	r1, [pc, #88]	; (800b00c <ip_reass_free_complete_datagram+0xe0>)
 800afb2:	4813      	ldr	r0, [pc, #76]	; (800b000 <ip_reass_free_complete_datagram+0xd4>)
 800afb4:	22d2      	movs	r2, #210	; 0xd2
 800afb6:	f001 fc5b 	bl	800c870 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800afba:	882b      	ldrh	r3, [r5, #0]
 800afbc:	1b1b      	subs	r3, r3, r4
 800afbe:	802b      	strh	r3, [r5, #0]
}
 800afc0:	4620      	mov	r0, r4
 800afc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800afc6:	2400      	movs	r4, #0
 800afc8:	e7e1      	b.n	800af8e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800afca:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 800afcc:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800afce:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800afd2:	f7fa fb77 	bl	80056c4 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800afd6:	4404      	add	r4, r0
 800afd8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800afdc:	db05      	blt.n	800afea <ip_reass_free_complete_datagram+0xbe>
 800afde:	4643      	mov	r3, r8
 800afe0:	22cc      	movs	r2, #204	; 0xcc
 800afe2:	4649      	mov	r1, r9
 800afe4:	4650      	mov	r0, sl
 800afe6:	f001 fc43 	bl	800c870 <iprintf>
    pbuf_free(pcur);
 800afea:	4630      	mov	r0, r6
    pbufs_freed += clen;
 800afec:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800afee:	f7fa f9b5 	bl	800535c <pbuf_free>
    p = iprh->next_pbuf;
 800aff2:	465e      	mov	r6, fp
 800aff4:	e7d2      	b.n	800af9c <ip_reass_free_complete_datagram+0x70>
 800aff6:	bf00      	nop
 800aff8:	0800f6d9 	.word	0x0800f6d9
 800affc:	0800f72b 	.word	0x0800f72b
 800b000:	0800d7e1 	.word	0x0800d7e1
 800b004:	0800f737 	.word	0x0800f737
 800b008:	2000837c 	.word	0x2000837c
 800b00c:	0800f766 	.word	0x0800f766
 800b010:	0800f749 	.word	0x0800f749

0800b014 <ip_reass_remove_oldest_datagram>:
{
 800b014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800b018:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800b088 <ip_reass_remove_oldest_datagram+0x74>
{
 800b01c:	4606      	mov	r6, r0
 800b01e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800b020:	2500      	movs	r5, #0
    other_datagrams = 0;
 800b022:	2400      	movs	r4, #0
    r = reassdatagrams;
 800b024:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800b028:	4621      	mov	r1, r4
    prev = NULL;
 800b02a:	46a4      	mov	ip, r4
    oldest = NULL;
 800b02c:	4620      	mov	r0, r4
    while (r != NULL) {
 800b02e:	b953      	cbnz	r3, 800b046 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800b030:	b110      	cbz	r0, 800b038 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b032:	f7ff ff7b 	bl	800af2c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800b036:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b038:	42bd      	cmp	r5, r7
 800b03a:	da01      	bge.n	800b040 <ip_reass_remove_oldest_datagram+0x2c>
 800b03c:	2c01      	cmp	r4, #1
 800b03e:	dcf0      	bgt.n	800b022 <ip_reass_remove_oldest_datagram+0xe>
}
 800b040:	4628      	mov	r0, r5
 800b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b046:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800b04a:	695a      	ldr	r2, [r3, #20]
 800b04c:	4572      	cmp	r2, lr
 800b04e:	d109      	bne.n	800b064 <ip_reass_remove_oldest_datagram+0x50>
 800b050:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800b054:	699a      	ldr	r2, [r3, #24]
 800b056:	4572      	cmp	r2, lr
 800b058:	d104      	bne.n	800b064 <ip_reass_remove_oldest_datagram+0x50>
 800b05a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800b05e:	88b2      	ldrh	r2, [r6, #4]
 800b060:	4596      	cmp	lr, r2
 800b062:	d008      	beq.n	800b076 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800b064:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800b066:	b160      	cbz	r0, 800b082 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800b068:	7fc2      	ldrb	r2, [r0, #31]
 800b06a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800b06e:	4596      	cmp	lr, r2
 800b070:	bf9c      	itt	ls
 800b072:	4661      	movls	r1, ip
 800b074:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	2a00      	cmp	r2, #0
 800b07a:	bf18      	it	ne
 800b07c:	469c      	movne	ip, r3
 800b07e:	4613      	mov	r3, r2
 800b080:	e7d5      	b.n	800b02e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800b082:	4661      	mov	r1, ip
 800b084:	4618      	mov	r0, r3
 800b086:	e7f6      	b.n	800b076 <ip_reass_remove_oldest_datagram+0x62>
 800b088:	20008380 	.word	0x20008380

0800b08c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b08c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800b08e:	4604      	mov	r4, r0
 800b090:	b930      	cbnz	r0, 800b0a0 <ip_frag_free_pbuf_custom_ref+0x14>
 800b092:	4b06      	ldr	r3, [pc, #24]	; (800b0ac <ip_frag_free_pbuf_custom_ref+0x20>)
 800b094:	4906      	ldr	r1, [pc, #24]	; (800b0b0 <ip_frag_free_pbuf_custom_ref+0x24>)
 800b096:	4807      	ldr	r0, [pc, #28]	; (800b0b4 <ip_frag_free_pbuf_custom_ref+0x28>)
 800b098:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b09c:	f001 fbe8 	bl	800c870 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	2005      	movs	r0, #5
}
 800b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800b0a8:	f7f9 bfc6 	b.w	8005038 <memp_free>
 800b0ac:	0800f6d9 	.word	0x0800f6d9
 800b0b0:	0800e263 	.word	0x0800e263
 800b0b4:	0800d7e1 	.word	0x0800d7e1

0800b0b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b0b8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	b930      	cbnz	r0, 800b0cc <ipfrag_free_pbuf_custom+0x14>
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <ipfrag_free_pbuf_custom+0x28>)
 800b0c0:	4908      	ldr	r1, [pc, #32]	; (800b0e4 <ipfrag_free_pbuf_custom+0x2c>)
 800b0c2:	4809      	ldr	r0, [pc, #36]	; (800b0e8 <ipfrag_free_pbuf_custom+0x30>)
 800b0c4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b0c8:	f001 fbd2 	bl	800c870 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800b0cc:	6960      	ldr	r0, [r4, #20]
 800b0ce:	b108      	cbz	r0, 800b0d4 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800b0d0:	f7fa f944 	bl	800535c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b0d4:	4620      	mov	r0, r4
}
 800b0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800b0da:	f7ff bfd7 	b.w	800b08c <ip_frag_free_pbuf_custom_ref>
 800b0de:	bf00      	nop
 800b0e0:	0800f6d9 	.word	0x0800f6d9
 800b0e4:	0800f781 	.word	0x0800f781
 800b0e8:	0800d7e1 	.word	0x0800d7e1

0800b0ec <ip_reass_tmr>:
{
 800b0ec:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <ip_reass_tmr+0x28>)
 800b0f0:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800b0f2:	2400      	movs	r4, #0
  while (r != NULL) {
 800b0f4:	b900      	cbnz	r0, 800b0f8 <ip_reass_tmr+0xc>
}
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800b0f8:	7fc3      	ldrb	r3, [r0, #31]
 800b0fa:	6805      	ldr	r5, [r0, #0]
 800b0fc:	b123      	cbz	r3, 800b108 <ip_reass_tmr+0x1c>
      r->timer--;
 800b0fe:	3b01      	subs	r3, #1
 800b100:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800b102:	4604      	mov	r4, r0
 800b104:	4628      	mov	r0, r5
 800b106:	e7f5      	b.n	800b0f4 <ip_reass_tmr+0x8>
 800b108:	4621      	mov	r1, r4
 800b10a:	f7ff ff0f 	bl	800af2c <ip_reass_free_complete_datagram>
 800b10e:	4620      	mov	r0, r4
 800b110:	e7f7      	b.n	800b102 <ip_reass_tmr+0x16>
 800b112:	bf00      	nop
 800b114:	20008380 	.word	0x20008380

0800b118 <ip4_reass>:
{
 800b118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800b11c:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b11e:	782b      	ldrb	r3, [r5, #0]
 800b120:	f003 030f 	and.w	r3, r3, #15
 800b124:	2b05      	cmp	r3, #5
{
 800b126:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b128:	f040 808c 	bne.w	800b244 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b12c:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b12e:	4cb5      	ldr	r4, [pc, #724]	; (800b404 <ip4_reass+0x2ec>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b130:	f7f9 fcda 	bl	8004ae8 <lwip_htons>
 800b134:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b138:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b13c:	8868      	ldrh	r0, [r5, #2]
 800b13e:	f7f9 fcd3 	bl	8004ae8 <lwip_htons>
 800b142:	782b      	ldrb	r3, [r5, #0]
 800b144:	f003 030f 	and.w	r3, r3, #15
 800b148:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800b14c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800b14e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b150:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800b152:	f7fa fab7 	bl	80056c4 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b156:	8823      	ldrh	r3, [r4, #0]
 800b158:	4403      	add	r3, r0
 800b15a:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800b15c:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b15e:	dc68      	bgt.n	800b232 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b160:	4ea9      	ldr	r6, [pc, #676]	; (800b408 <ip4_reass+0x2f0>)
 800b162:	6834      	ldr	r4, [r6, #0]
 800b164:	2c00      	cmp	r4, #0
 800b166:	d172      	bne.n	800b24e <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b168:	2004      	movs	r0, #4
 800b16a:	f7f9 ff49 	bl	8005000 <memp_malloc>
  if (ipr == NULL) {
 800b16e:	4604      	mov	r4, r0
 800b170:	b958      	cbnz	r0, 800b18a <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b172:	4651      	mov	r1, sl
 800b174:	4628      	mov	r0, r5
 800b176:	f7ff ff4d 	bl	800b014 <ip_reass_remove_oldest_datagram>
 800b17a:	4582      	cmp	sl, r0
 800b17c:	dc62      	bgt.n	800b244 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b17e:	2004      	movs	r0, #4
 800b180:	f7f9 ff3e 	bl	8005000 <memp_malloc>
    if (ipr == NULL)
 800b184:	4604      	mov	r4, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	d05c      	beq.n	800b244 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b18a:	221c      	movs	r2, #28
 800b18c:	2100      	movs	r1, #0
 800b18e:	1d20      	adds	r0, r4, #4
 800b190:	f001 fabe 	bl	800c710 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b194:	2303      	movs	r3, #3
 800b196:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800b198:	6833      	ldr	r3, [r6, #0]
 800b19a:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 800b19c:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b19e:	462b      	mov	r3, r5
 800b1a0:	f104 0208 	add.w	r2, r4, #8
 800b1a4:	f105 0114 	add.w	r1, r5, #20
 800b1a8:	f853 0b04 	ldr.w	r0, [r3], #4
 800b1ac:	f842 0b04 	str.w	r0, [r2], #4
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	d1f9      	bne.n	800b1a8 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b1b4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 800b1b8:	f01b 0b20 	ands.w	fp, fp, #32
 800b1bc:	d108      	bne.n	800b1d0 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	444b      	add	r3, r9
 800b1c2:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b1c4:	4599      	cmp	r9, r3
 800b1c6:	d83d      	bhi.n	800b244 <ip4_reass+0x12c>
 800b1c8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d839      	bhi.n	800b244 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 800b1d0:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b1d2:	8868      	ldrh	r0, [r5, #2]
 800b1d4:	f7f9 fc88 	bl	8004ae8 <lwip_htons>
 800b1d8:	f895 8000 	ldrb.w	r8, [r5]
 800b1dc:	f008 080f 	and.w	r8, r8, #15
 800b1e0:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b1e4:	88e8      	ldrh	r0, [r5, #6]
 800b1e6:	f7f9 fc7f 	bl	8004ae8 <lwip_htons>
 800b1ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b1ee:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b1f2:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800b1f4:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 800b1f6:	f8d4 c004 	ldr.w	ip, [r4, #4]
  iprh->start = offset;
 800b1fa:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800b1fc:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 800b200:	2500      	movs	r5, #0
  iprh->end = offset + len;
 800b202:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800b204:	7035      	strb	r5, [r6, #0]
 800b206:	7075      	strb	r5, [r6, #1]
 800b208:	70b5      	strb	r5, [r6, #2]
 800b20a:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 800b20c:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800b20e:	4662      	mov	r2, ip
  int valid = 1;
 800b210:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 800b214:	bb52      	cbnz	r2, 800b26c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800b216:	2d00      	cmp	r5, #0
 800b218:	f040 8092 	bne.w	800b340 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b21c:	f1bc 0f00 	cmp.w	ip, #0
 800b220:	d07d      	beq.n	800b31e <ip4_reass+0x206>
 800b222:	4b7a      	ldr	r3, [pc, #488]	; (800b40c <ip4_reass+0x2f4>)
 800b224:	497a      	ldr	r1, [pc, #488]	; (800b410 <ip4_reass+0x2f8>)
 800b226:	487b      	ldr	r0, [pc, #492]	; (800b414 <ip4_reass+0x2fc>)
 800b228:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800b22c:	f001 fb20 	bl	800c870 <iprintf>
 800b230:	e075      	b.n	800b31e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b232:	4601      	mov	r1, r0
 800b234:	4628      	mov	r0, r5
 800b236:	f7ff feed 	bl	800b014 <ip_reass_remove_oldest_datagram>
 800b23a:	b118      	cbz	r0, 800b244 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b23c:	8823      	ldrh	r3, [r4, #0]
 800b23e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b240:	2b0a      	cmp	r3, #10
 800b242:	dd8d      	ble.n	800b160 <ip4_reass+0x48>
  pbuf_free(p);
 800b244:	4638      	mov	r0, r7
 800b246:	f7fa f889 	bl	800535c <pbuf_free>
  return NULL;
 800b24a:	2500      	movs	r5, #0
 800b24c:	e0d6      	b.n	800b3fc <ip4_reass+0x2e4>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b24e:	68eb      	ldr	r3, [r5, #12]
 800b250:	6962      	ldr	r2, [r4, #20]
 800b252:	429a      	cmp	r2, r3
 800b254:	d108      	bne.n	800b268 <ip4_reass+0x150>
 800b256:	692b      	ldr	r3, [r5, #16]
 800b258:	69a2      	ldr	r2, [r4, #24]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d104      	bne.n	800b268 <ip4_reass+0x150>
 800b25e:	89a2      	ldrh	r2, [r4, #12]
 800b260:	88ab      	ldrh	r3, [r5, #4]
 800b262:	429a      	cmp	r2, r3
 800b264:	f000 80de 	beq.w	800b424 <ip4_reass+0x30c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b268:	6824      	ldr	r4, [r4, #0]
 800b26a:	e77b      	b.n	800b164 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800b26c:	f8d2 e004 	ldr.w	lr, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800b270:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800b274:	4288      	cmp	r0, r1
 800b276:	d254      	bcs.n	800b322 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800b278:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	d04d      	beq.n	800b31a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b27e:	88ea      	ldrh	r2, [r5, #6]
 800b280:	4290      	cmp	r0, r2
 800b282:	f0c0 8091 	bcc.w	800b3a8 <ip4_reass+0x290>
 800b286:	428b      	cmp	r3, r1
 800b288:	f200 808e 	bhi.w	800b3a8 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 800b28c:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 800b28e:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 800b290:	f040 80e4 	bne.w	800b45c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b294:	f1bb 0f00 	cmp.w	fp, #0
 800b298:	d004      	beq.n	800b2a4 <ip4_reass+0x18c>
 800b29a:	7fa3      	ldrb	r3, [r4, #30]
 800b29c:	f013 0301 	ands.w	r3, r3, #1
 800b2a0:	f000 808d 	beq.w	800b3be <ip4_reass+0x2a6>
    if (valid) {
 800b2a4:	f1b8 0f00 	cmp.w	r8, #0
 800b2a8:	d159      	bne.n	800b35e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800b2aa:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b2ae:	4e55      	ldr	r6, [pc, #340]	; (800b404 <ip4_reass+0x2ec>)
 800b2b0:	8833      	ldrh	r3, [r6, #0]
 800b2b2:	449a      	add	sl, r3
 800b2b4:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 800b2b8:	f1bb 0f00 	cmp.w	fp, #0
 800b2bc:	d107      	bne.n	800b2ce <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b2c2:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800b2c4:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b2c8:	f043 0301 	orr.w	r3, r3, #1
 800b2cc:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b2ce:	f1b8 0f01 	cmp.w	r8, #1
 800b2d2:	d1ba      	bne.n	800b24a <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 800b2d4:	8ba3      	ldrh	r3, [r4, #28]
 800b2d6:	3314      	adds	r3, #20
 800b2d8:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800b2da:	6863      	ldr	r3, [r4, #4]
 800b2dc:	685d      	ldr	r5, [r3, #4]
 800b2de:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b2e0:	f104 0308 	add.w	r3, r4, #8
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	f104 011c 	add.w	r1, r4, #28
 800b2ea:	f853 0b04 	ldr.w	r0, [r3], #4
 800b2ee:	f842 0b04 	str.w	r0, [r2], #4
 800b2f2:	428b      	cmp	r3, r1
 800b2f4:	d1f9      	bne.n	800b2ea <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b2f6:	8ba0      	ldrh	r0, [r4, #28]
 800b2f8:	f7f9 fbf6 	bl	8004ae8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800b2fc:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b2fe:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b300:	71ab      	strb	r3, [r5, #6]
 800b302:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b304:	72ab      	strb	r3, [r5, #10]
 800b306:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800b308:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800b30a:	2f00      	cmp	r7, #0
 800b30c:	d159      	bne.n	800b3c2 <ip4_reass+0x2aa>
    if (ipr == reassdatagrams) {
 800b30e:	4b3e      	ldr	r3, [pc, #248]	; (800b408 <ip4_reass+0x2f0>)
 800b310:	6819      	ldr	r1, [r3, #0]
 800b312:	42a1      	cmp	r1, r4
 800b314:	d167      	bne.n	800b3e6 <ip4_reass+0x2ce>
      ipr_prev = NULL;
 800b316:	4639      	mov	r1, r7
 800b318:	e067      	b.n	800b3ea <ip4_reass+0x2d2>
        if (iprh->end > iprh_tmp->start) {
 800b31a:	428b      	cmp	r3, r1
 800b31c:	d844      	bhi.n	800b3a8 <ip4_reass+0x290>
      ipr->p = new_p;
 800b31e:	6067      	str	r7, [r4, #4]
 800b320:	e7b8      	b.n	800b294 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800b322:	d041      	beq.n	800b3a8 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 800b324:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800b328:	4282      	cmp	r2, r0
 800b32a:	d83d      	bhi.n	800b3a8 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800b32c:	b125      	cbz	r5, 800b338 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800b32e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800b330:	428a      	cmp	r2, r1
 800b332:	bf18      	it	ne
 800b334:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800b338:	f8de 2000 	ldr.w	r2, [lr]
 800b33c:	4675      	mov	r5, lr
 800b33e:	e769      	b.n	800b214 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b340:	88eb      	ldrh	r3, [r5, #6]
 800b342:	4283      	cmp	r3, r0
 800b344:	d906      	bls.n	800b354 <ip4_reass+0x23c>
 800b346:	4b31      	ldr	r3, [pc, #196]	; (800b40c <ip4_reass+0x2f4>)
 800b348:	4933      	ldr	r1, [pc, #204]	; (800b418 <ip4_reass+0x300>)
 800b34a:	4832      	ldr	r0, [pc, #200]	; (800b414 <ip4_reass+0x2fc>)
 800b34c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b350:	f001 fa8e 	bl	800c870 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800b354:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800b356:	88ea      	ldrh	r2, [r5, #6]
 800b358:	88b3      	ldrh	r3, [r6, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	e798      	b.n	800b290 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800b35e:	6863      	ldr	r3, [r4, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d0a2      	beq.n	800b2aa <ip4_reass+0x192>
 800b364:	6859      	ldr	r1, [r3, #4]
 800b366:	888b      	ldrh	r3, [r1, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d19e      	bne.n	800b2aa <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800b36c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800b36e:	b99b      	cbnz	r3, 800b398 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 800b370:	42b1      	cmp	r1, r6
 800b372:	d106      	bne.n	800b382 <ip4_reass+0x26a>
 800b374:	4b25      	ldr	r3, [pc, #148]	; (800b40c <ip4_reass+0x2f4>)
 800b376:	4929      	ldr	r1, [pc, #164]	; (800b41c <ip4_reass+0x304>)
 800b378:	4826      	ldr	r0, [pc, #152]	; (800b414 <ip4_reass+0x2fc>)
 800b37a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b37e:	f001 fa77 	bl	800c870 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b382:	6833      	ldr	r3, [r6, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d092      	beq.n	800b2ae <ip4_reass+0x196>
 800b388:	4b20      	ldr	r3, [pc, #128]	; (800b40c <ip4_reass+0x2f4>)
 800b38a:	4925      	ldr	r1, [pc, #148]	; (800b420 <ip4_reass+0x308>)
 800b38c:	4821      	ldr	r0, [pc, #132]	; (800b414 <ip4_reass+0x2fc>)
 800b38e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b392:	f001 fa6d 	bl	800c870 <iprintf>
 800b396:	e78a      	b.n	800b2ae <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 800b398:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800b39a:	88f0      	ldrh	r0, [r6, #6]
 800b39c:	8893      	ldrh	r3, [r2, #4]
 800b39e:	4298      	cmp	r0, r3
 800b3a0:	d183      	bne.n	800b2aa <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	e7e2      	b.n	800b36e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7fa f98b 	bl	80056c4 <pbuf_clen>
 800b3ae:	4a15      	ldr	r2, [pc, #84]	; (800b404 <ip4_reass+0x2ec>)
 800b3b0:	8813      	ldrh	r3, [r2, #0]
 800b3b2:	1a18      	subs	r0, r3, r0
 800b3b4:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	f7f9 ffd0 	bl	800535c <pbuf_free>
 800b3bc:	e742      	b.n	800b244 <ip4_reass+0x12c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b3be:	4698      	mov	r8, r3
 800b3c0:	e775      	b.n	800b2ae <ip4_reass+0x196>
      iprh = (struct ip_reass_helper*)r->payload;
 800b3c2:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800b3c6:	f06f 0113 	mvn.w	r1, #19
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	f7f9 ffc0 	bl	8005350 <pbuf_header>
      pbuf_cat(p, r);
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f7fa f99a 	bl	800570c <pbuf_cat>
      r = iprh->next_pbuf;
 800b3d8:	f8d8 7000 	ldr.w	r7, [r8]
 800b3dc:	e795      	b.n	800b30a <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800b3de:	680b      	ldr	r3, [r1, #0]
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	d002      	beq.n	800b3ea <ip4_reass+0x2d2>
 800b3e4:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b3e6:	2900      	cmp	r1, #0
 800b3e8:	d1f9      	bne.n	800b3de <ip4_reass+0x2c6>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff fd7c 	bl	800aee8 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7fa f967 	bl	80056c4 <pbuf_clen>
 800b3f6:	8833      	ldrh	r3, [r6, #0]
 800b3f8:	1a18      	subs	r0, r3, r0
 800b3fa:	8030      	strh	r0, [r6, #0]
}
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	b003      	add	sp, #12
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b404:	2000837c 	.word	0x2000837c
 800b408:	20008380 	.word	0x20008380
 800b40c:	0800f6d9 	.word	0x0800f6d9
 800b410:	0800f673 	.word	0x0800f673
 800b414:	0800d7e1 	.word	0x0800d7e1
 800b418:	0800f655 	.word	0x0800f655
 800b41c:	0800f6aa 	.word	0x0800f6aa
 800b420:	0800f6b7 	.word	0x0800f6b7
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b424:	88e8      	ldrh	r0, [r5, #6]
 800b426:	f7f9 fb5f 	bl	8004ae8 <lwip_htons>
 800b42a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b42e:	2800      	cmp	r0, #0
 800b430:	f47f aec0 	bne.w	800b1b4 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b434:	89e0      	ldrh	r0, [r4, #14]
 800b436:	f7f9 fb57 	bl	8004ae8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b43a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b43e:	2800      	cmp	r0, #0
 800b440:	f43f aeb8 	beq.w	800b1b4 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b444:	462b      	mov	r3, r5
 800b446:	f104 0208 	add.w	r2, r4, #8
 800b44a:	f105 0114 	add.w	r1, r5, #20
 800b44e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b452:	f842 0b04 	str.w	r0, [r2], #4
 800b456:	428b      	cmp	r3, r1
 800b458:	d1f9      	bne.n	800b44e <ip4_reass+0x336>
 800b45a:	e6ab      	b.n	800b1b4 <ip4_reass+0x9c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b45c:	f1bb 0f00 	cmp.w	fp, #0
 800b460:	f43f af23 	beq.w	800b2aa <ip4_reass+0x192>
 800b464:	f04f 0800 	mov.w	r8, #0
 800b468:	e717      	b.n	800b29a <ip4_reass+0x182>
 800b46a:	bf00      	nop

0800b46c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b470:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
{
 800b474:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b476:	2308      	movs	r3, #8
 800b478:	f1a8 0814 	sub.w	r8, r8, #20
 800b47c:	fb98 f8f3 	sdiv	r8, r8, r3
 800b480:	fa1f f388 	uxth.w	r3, r8
 800b484:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b486:	6843      	ldr	r3, [r0, #4]
{
 800b488:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b48a:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800b48c:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b48e:	f006 060f 	and.w	r6, r6, #15
 800b492:	00b6      	lsls	r6, r6, #2
 800b494:	2e14      	cmp	r6, #20
{
 800b496:	4607      	mov	r7, r0
 800b498:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b49a:	d00b      	beq.n	800b4b4 <ip4_frag+0x48>
 800b49c:	4b5a      	ldr	r3, [pc, #360]	; (800b608 <ip4_frag+0x19c>)
 800b49e:	495b      	ldr	r1, [pc, #364]	; (800b60c <ip4_frag+0x1a0>)
 800b4a0:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b4a4:	485a      	ldr	r0, [pc, #360]	; (800b610 <ip4_frag+0x1a4>)
 800b4a6:	f001 f9e3 	bl	800c870 <iprintf>
 800b4aa:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800b4ae:	b00b      	add	sp, #44	; 0x2c
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	88d8      	ldrh	r0, [r3, #6]
 800b4b8:	f7f9 fb16 	bl	8004ae8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800b4bc:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b4c0:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800b4c4:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b4c6:	d004      	beq.n	800b4d2 <ip4_frag+0x66>
 800b4c8:	4b4f      	ldr	r3, [pc, #316]	; (800b608 <ip4_frag+0x19c>)
 800b4ca:	4952      	ldr	r1, [pc, #328]	; (800b614 <ip4_frag+0x1a8>)
 800b4cc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b4d0:	e7e8      	b.n	800b4a4 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800b4d2:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800b4d4:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 800b4d8:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800b4da:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800b4de:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800b4e0:	9306      	str	r3, [sp, #24]
  while (left) {
 800b4e2:	b90d      	cbnz	r5, 800b4e8 <ip4_frag+0x7c>
  return ERR_OK;
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	e7e2      	b.n	800b4ae <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 800b4e8:	9b06      	ldr	r3, [sp, #24]
 800b4ea:	42ab      	cmp	r3, r5
 800b4ec:	bfa8      	it	ge
 800b4ee:	462b      	movge	r3, r5
 800b4f0:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2114      	movs	r1, #20
 800b4f6:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800b4f8:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b4fa:	f7f9 ff97 	bl	800542c <pbuf_alloc>
    if (rambuf == NULL) {
 800b4fe:	4680      	mov	r8, r0
 800b500:	b370      	cbz	r0, 800b560 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b502:	897b      	ldrh	r3, [r7, #10]
 800b504:	2b13      	cmp	r3, #19
 800b506:	d806      	bhi.n	800b516 <ip4_frag+0xaa>
 800b508:	4b3f      	ldr	r3, [pc, #252]	; (800b608 <ip4_frag+0x19c>)
 800b50a:	4943      	ldr	r1, [pc, #268]	; (800b618 <ip4_frag+0x1ac>)
 800b50c:	4840      	ldr	r0, [pc, #256]	; (800b610 <ip4_frag+0x1a4>)
 800b50e:	f240 3209 	movw	r2, #777	; 0x309
 800b512:	f001 f9ad 	bl	800c870 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b516:	9b02      	ldr	r3, [sp, #8]
 800b518:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b51c:	4619      	mov	r1, r3
 800b51e:	3114      	adds	r1, #20
 800b520:	f853 0b04 	ldr.w	r0, [r3], #4
 800b524:	f842 0b04 	str.w	r0, [r2], #4
 800b528:	428b      	cmp	r3, r1
 800b52a:	d1f9      	bne.n	800b520 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b52c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800b530:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b534:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800b536:	f1b9 0f00 	cmp.w	r9, #0
 800b53a:	d037      	beq.n	800b5ac <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800b53c:	897c      	ldrh	r4, [r7, #10]
 800b53e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b540:	b2a4      	uxth	r4, r4
 800b542:	454c      	cmp	r4, r9
 800b544:	bf28      	it	cs
 800b546:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800b548:	b914      	cbnz	r4, 800b550 <ip4_frag+0xe4>
        p = p->next;
 800b54a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800b54c:	2600      	movs	r6, #0
 800b54e:	e7f2      	b.n	800b536 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b550:	2005      	movs	r0, #5
 800b552:	f7f9 fd55 	bl	8005000 <memp_malloc>
      if (pcr == NULL) {
 800b556:	4682      	mov	sl, r0
 800b558:	b928      	cbnz	r0, 800b566 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800b55a:	4640      	mov	r0, r8
 800b55c:	f7f9 fefe 	bl	800535c <pbuf_free>
  return ERR_MEM;
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	e7a3      	b.n	800b4ae <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b566:	9401      	str	r4, [sp, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4433      	add	r3, r6
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	2202      	movs	r2, #2
 800b570:	4603      	mov	r3, r0
 800b572:	4621      	mov	r1, r4
 800b574:	2004      	movs	r0, #4
 800b576:	f7f9 feb3 	bl	80052e0 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800b57a:	b918      	cbnz	r0, 800b584 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b57c:	4650      	mov	r0, sl
 800b57e:	f7ff fd85 	bl	800b08c <ip_frag_free_pbuf_custom_ref>
 800b582:	e7ea      	b.n	800b55a <ip4_frag+0xee>
 800b584:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 800b586:	4638      	mov	r0, r7
 800b588:	f7fa f8a4 	bl	80056d4 <pbuf_ref>
      left_to_copy -= newpbuflen;
 800b58c:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b590:	4b22      	ldr	r3, [pc, #136]	; (800b61c <ip4_frag+0x1b0>)
      pcr->original = p;
 800b592:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b596:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800b59a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b59c:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 800b59e:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800b5a2:	f7fa f8b3 	bl	800570c <pbuf_cat>
      if (left_to_copy) {
 800b5a6:	f1b9 0f00 	cmp.w	r9, #0
 800b5aa:	d1ce      	bne.n	800b54a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800b5b2:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
 800b5b6:	3b13      	subs	r3, #19
    if (!last) {
 800b5b8:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800b5ba:	bfa8      	it	ge
 800b5bc:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b5c0:	f7f9 fa92 	bl	8004ae8 <lwip_htons>
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b5c8:	9b05      	ldr	r3, [sp, #20]
 800b5ca:	f103 0014 	add.w	r0, r3, #20
 800b5ce:	b280      	uxth	r0, r0
 800b5d0:	f7f9 fa8a 	bl	8004ae8 <lwip_htons>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800b5d6:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b5d8:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b5da:	2300      	movs	r3, #0
 800b5dc:	7293      	strb	r3, [r2, #10]
 800b5de:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b5e6:	9a08      	ldr	r2, [sp, #32]
 800b5e8:	4658      	mov	r0, fp
 800b5ea:	4798      	blx	r3
    pbuf_free(rambuf);
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	f7f9 feb5 	bl	800535c <pbuf_free>
    left -= fragsize;
 800b5f2:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800b5f4:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 800b5f6:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800b5f8:	9b04      	ldr	r3, [sp, #16]
 800b5fa:	4413      	add	r3, r2
    poff += newpbuflen;
 800b5fc:	4426      	add	r6, r4
    ofo += nfb;
 800b5fe:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 800b600:	b2b6      	uxth	r6, r6
    left -= fragsize;
 800b602:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800b604:	9304      	str	r3, [sp, #16]
 800b606:	e76c      	b.n	800b4e2 <ip4_frag+0x76>
 800b608:	0800f6d9 	.word	0x0800f6d9
 800b60c:	0800f5f4 	.word	0x0800f5f4
 800b610:	0800d7e1 	.word	0x0800d7e1
 800b614:	0800f61b 	.word	0x0800f61b
 800b618:	0800f635 	.word	0x0800f635
 800b61c:	0800b0b9 	.word	0x0800b0b9

0800b620 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800b620:	8943      	ldrh	r3, [r0, #10]
 800b622:	2b0e      	cmp	r3, #14
{
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4604      	mov	r4, r0
 800b628:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800b62a:	d914      	bls.n	800b656 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b62c:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b62e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800b630:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800b632:	07d9      	lsls	r1, r3, #31
 800b634:	d50a      	bpl.n	800b64c <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b636:	2b01      	cmp	r3, #1
 800b638:	d111      	bne.n	800b65e <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b63a:	7843      	ldrb	r3, [r0, #1]
 800b63c:	b933      	cbnz	r3, 800b64c <ethernet_input+0x2c>
 800b63e:	7883      	ldrb	r3, [r0, #2]
 800b640:	2b5e      	cmp	r3, #94	; 0x5e
 800b642:	d103      	bne.n	800b64c <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b644:	7b63      	ldrb	r3, [r4, #13]
 800b646:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b64a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b64c:	2e08      	cmp	r6, #8
 800b64e:	d010      	beq.n	800b672 <ethernet_input+0x52>
 800b650:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b654:	d01e      	beq.n	800b694 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b656:	4620      	mov	r0, r4
 800b658:	f7f9 fe80 	bl	800535c <pbuf_free>
  return ERR_OK;
 800b65c:	e018      	b.n	800b690 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b65e:	2206      	movs	r2, #6
 800b660:	4914      	ldr	r1, [pc, #80]	; (800b6b4 <ethernet_input+0x94>)
 800b662:	f001 f83b 	bl	800c6dc <memcmp>
 800b666:	2800      	cmp	r0, #0
 800b668:	d1f0      	bne.n	800b64c <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800b66a:	7b63      	ldrb	r3, [r4, #13]
 800b66c:	f043 0308 	orr.w	r3, r3, #8
 800b670:	e7eb      	b.n	800b64a <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b672:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b676:	071a      	lsls	r2, r3, #28
 800b678:	d5ed      	bpl.n	800b656 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b67a:	f06f 010d 	mvn.w	r1, #13
 800b67e:	4620      	mov	r0, r4
 800b680:	f7f9 fe66 	bl	8005350 <pbuf_header>
 800b684:	2800      	cmp	r0, #0
 800b686:	d1e6      	bne.n	800b656 <ethernet_input+0x36>
        ip4_input(p, netif);
 800b688:	4629      	mov	r1, r5
 800b68a:	4620      	mov	r0, r4
 800b68c:	f7ff fabc 	bl	800ac08 <ip4_input>
}
 800b690:	2000      	movs	r0, #0
 800b692:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b694:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b698:	071b      	lsls	r3, r3, #28
 800b69a:	d5dc      	bpl.n	800b656 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b69c:	f06f 010d 	mvn.w	r1, #13
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7f9 fe55 	bl	8005350 <pbuf_header>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1d5      	bne.n	800b656 <ethernet_input+0x36>
        etharp_input(p, netif);
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7fe ff1b 	bl	800a4e8 <etharp_input>
      break;
 800b6b2:	e7ed      	b.n	800b690 <ethernet_input+0x70>
 800b6b4:	0800f78d 	.word	0x0800f78d

0800b6b8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6bc:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b6be:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800b6c8:	f7f9 fa0e 	bl	8004ae8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b6cc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800b6ce:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f7f9 fe3d 	bl	8005350 <pbuf_header>
 800b6d6:	b9e0      	cbnz	r0, 800b712 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b6d8:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800b6da:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	600b      	str	r3, [r1, #0]
 800b6e2:	88bb      	ldrh	r3, [r7, #4]
 800b6e4:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b6e6:	6833      	ldr	r3, [r6, #0]
 800b6e8:	f8c1 3006 	str.w	r3, [r1, #6]
 800b6ec:	88b3      	ldrh	r3, [r6, #4]
 800b6ee:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b6f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b6f4:	2b06      	cmp	r3, #6
 800b6f6:	d006      	beq.n	800b706 <ethernet_output+0x4e>
 800b6f8:	4b08      	ldr	r3, [pc, #32]	; (800b71c <ethernet_output+0x64>)
 800b6fa:	4909      	ldr	r1, [pc, #36]	; (800b720 <ethernet_output+0x68>)
 800b6fc:	4809      	ldr	r0, [pc, #36]	; (800b724 <ethernet_output+0x6c>)
 800b6fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b702:	f001 f8b5 	bl	800c870 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b706:	69a3      	ldr	r3, [r4, #24]
 800b708:	4629      	mov	r1, r5
 800b70a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b70c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b710:	4718      	bx	r3
}
 800b712:	f06f 0001 	mvn.w	r0, #1
 800b716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71a:	bf00      	nop
 800b71c:	0800f793 	.word	0x0800f793
 800b720:	0800f7c8 	.word	0x0800f7c8
 800b724:	0800d7e1 	.word	0x0800d7e1

0800b728 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800b728:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800b72a:	2304      	movs	r3, #4
{
 800b72c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800b72e:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b730:	4668      	mov	r0, sp
 800b732:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800b734:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b736:	f7f6 ffdf 	bl	80026f8 <osMessageCreate>
 800b73a:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800b73c:	fab0 f080 	clz	r0, r0
 800b740:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800b742:	4240      	negs	r0, r0
 800b744:	b002      	add	sp, #8
 800b746:	bd10      	pop	{r4, pc}

0800b748 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4604      	mov	r4, r0
 800b74c:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	4629      	mov	r1, r5
 800b754:	6820      	ldr	r0, [r4, #0]
 800b756:	f7f6 ffd5 	bl	8002704 <osMessagePut>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d1f7      	bne.n	800b74e <sys_mbox_post+0x6>
}
 800b75e:	bd38      	pop	{r3, r4, r5, pc}

0800b760 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800b760:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800b762:	2200      	movs	r2, #0
 800b764:	6800      	ldr	r0, [r0, #0]
 800b766:	f7f6 ffcd 	bl	8002704 <osMessagePut>
 800b76a:	3000      	adds	r0, #0
 800b76c:	bf18      	it	ne
 800b76e:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800b770:	4240      	negs	r0, r0
 800b772:	bd08      	pop	{r3, pc}

0800b774 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800b774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b776:	b085      	sub	sp, #20
 800b778:	4606      	mov	r6, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4617      	mov	r7, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800b77e:	f7f6 ff07 	bl	8002590 <osKernelSysTick>
 800b782:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800b784:	b177      	cbz	r7, 800b7a4 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800b786:	463a      	mov	r2, r7
 800b788:	6831      	ldr	r1, [r6, #0]
 800b78a:	a801      	add	r0, sp, #4
 800b78c:	f7f6 ffe2 	bl	8002754 <osMessageGet>
    
    if(event.status == osEventMessage)
 800b790:	9b01      	ldr	r3, [sp, #4]
 800b792:	2b10      	cmp	r3, #16
 800b794:	d10d      	bne.n	800b7b2 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800b796:	9b02      	ldr	r3, [sp, #8]
 800b798:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800b79a:	f7f6 fef9 	bl	8002590 <osKernelSysTick>
 800b79e:	1b00      	subs	r0, r0, r4
  }
}
 800b7a0:	b005      	add	sp, #20
 800b7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a8:	6831      	ldr	r1, [r6, #0]
 800b7aa:	a801      	add	r0, sp, #4
 800b7ac:	f7f6 ffd2 	bl	8002754 <osMessageGet>
 800b7b0:	e7f1      	b.n	800b796 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800b7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b6:	e7f3      	b.n	800b7a0 <sys_arch_mbox_fetch+0x2c>

0800b7b8 <sys_mbox_valid>:
 800b7b8:	6800      	ldr	r0, [r0, #0]
 800b7ba:	3000      	adds	r0, #0
 800b7bc:	bf18      	it	ne
 800b7be:	2001      	movne	r0, #1
 800b7c0:	4770      	bx	lr
	...

0800b7c4 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800b7c4:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800b7c6:	4803      	ldr	r0, [pc, #12]	; (800b7d4 <sys_init+0x10>)
 800b7c8:	f7f6 ff09 	bl	80025de <osMutexCreate>
 800b7cc:	4b02      	ldr	r3, [pc, #8]	; (800b7d8 <sys_init+0x14>)
 800b7ce:	6018      	str	r0, [r3, #0]
}
 800b7d0:	bd08      	pop	{r3, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800f800 	.word	0x0800f800
 800b7d8:	2000bb10 	.word	0x2000bb10

0800b7dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800b7dc:	b513      	push	{r0, r1, r4, lr}
 800b7de:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 800b7e0:	a802      	add	r0, sp, #8
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800b7e8:	f7f6 fef9 	bl	80025de <osMutexCreate>
 800b7ec:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800b7ee:	fab0 f080 	clz	r0, r0
 800b7f2:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800b7f4:	4240      	negs	r0, r0
 800b7f6:	b002      	add	sp, #8
 800b7f8:	bd10      	pop	{r4, pc}

0800b7fa <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800b7fa:	f04f 31ff 	mov.w	r1, #4294967295
 800b7fe:	6800      	ldr	r0, [r0, #0]
 800b800:	f7f6 bef0 	b.w	80025e4 <osMutexWait>

0800b804 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800b804:	6800      	ldr	r0, [r0, #0]
 800b806:	f7f6 bf15 	b.w	8002634 <osMutexRelease>

0800b80a <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800b80a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800b80c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b810:	9908      	ldr	r1, [sp, #32]
 800b812:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b816:	2100      	movs	r1, #0
 800b818:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800b81c:	a801      	add	r0, sp, #4
 800b81e:	4611      	mov	r1, r2
 800b820:	f7f6 febd 	bl	800259e <osThreadCreate>
}
 800b824:	b007      	add	sp, #28
 800b826:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b82c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800b82c:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800b82e:	4b04      	ldr	r3, [pc, #16]	; (800b840 <sys_arch_protect+0x14>)
 800b830:	f04f 31ff 	mov.w	r1, #4294967295
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	f7f6 fed5 	bl	80025e4 <osMutexWait>
  return (sys_prot_t)1;
}
 800b83a:	2001      	movs	r0, #1
 800b83c:	bd08      	pop	{r3, pc}
 800b83e:	bf00      	nop
 800b840:	2000bb10 	.word	0x2000bb10

0800b844 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800b844:	4b01      	ldr	r3, [pc, #4]	; (800b84c <sys_arch_unprotect+0x8>)
 800b846:	6818      	ldr	r0, [r3, #0]
 800b848:	f7f6 bef4 	b.w	8002634 <osMutexRelease>
 800b84c:	2000bb10 	.word	0x2000bb10

0800b850 <__io_putchar>:

#ifdef STM32F429xx
	int __io_putchar(int ch)

	{
		while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 800b850:	4b04      	ldr	r3, [pc, #16]	; (800b864 <__io_putchar+0x14>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	0612      	lsls	r2, r2, #24
 800b85a:	d5fc      	bpl.n	800b856 <__io_putchar+0x6>
		pUart->Instance->DR = (uint16_t)ch;
 800b85c:	b280      	uxth	r0, r0
 800b85e:	6058      	str	r0, [r3, #4]
		return 0;
	}
 800b860:	2000      	movs	r0, #0
 800b862:	4770      	bx	lr
 800b864:	20008384 	.word	0x20008384

0800b868 <debug_init>:
#endif


void debug_init(UART_HandleTypeDef* handler)
{
	pUart = handler;
 800b868:	4b01      	ldr	r3, [pc, #4]	; (800b870 <debug_init+0x8>)
 800b86a:	6018      	str	r0, [r3, #0]
}
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20008384 	.word	0x20008384

0800b874 <debug_chr>:
extern char inkey(void);

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
	__io_putchar(chr);
 800b874:	f7ff bfec 	b.w	800b850 <__io_putchar>

0800b878 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b87c:	4a25      	ldr	r2, [pc, #148]	; (800b914 <low_level_output+0x9c>)
 800b87e:	9200      	str	r2, [sp, #0]
 800b880:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800b882:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b886:	68b3      	ldr	r3, [r6, #8]
{
 800b888:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800b88a:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b88c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800b890:	b92c      	cbnz	r4, 800b89e <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b892:	4639      	mov	r1, r7
 800b894:	481f      	ldr	r0, [pc, #124]	; (800b914 <low_level_output+0x9c>)
 800b896:	f7f5 f85f 	bl	8000958 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800b89a:	4620      	mov	r0, r4
 800b89c:	e004      	b.n	800b8a8 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b89e:	6832      	ldr	r2, [r6, #0]
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	da11      	bge.n	800b8c8 <low_level_output+0x50>
        errval = ERR_USE;
 800b8a4:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b8a8:	9b00      	ldr	r3, [sp, #0]
 800b8aa:	f241 0214 	movw	r2, #4116	; 0x1014
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	5899      	ldr	r1, [r3, r2]
 800b8b2:	0689      	lsls	r1, r1, #26
 800b8b4:	d505      	bpl.n	800b8c2 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b8b6:	2120      	movs	r1, #32
 800b8b8:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b8ba:	f241 0204 	movw	r2, #4100	; 0x1004
 800b8be:	2100      	movs	r1, #0
 800b8c0:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800b8c2:	b003      	add	sp, #12
 800b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800b8c8:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b8cc:	4645      	mov	r5, r8
      payloadoffset = 0;
 800b8ce:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b8d2:	eb05 0809 	add.w	r8, r5, r9
 800b8d6:	6861      	ldr	r1, [r4, #4]
 800b8d8:	45d8      	cmp	r8, fp
 800b8da:	eb03 0005 	add.w	r0, r3, r5
 800b8de:	4451      	add	r1, sl
 800b8e0:	d807      	bhi.n	800b8f2 <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b8e2:	464a      	mov	r2, r9
 800b8e4:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800b8e6:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b8e8:	f000 ff07 	bl	800c6fa <memcpy>
  for(q = p; q != NULL; q = q->next)
 800b8ec:	6824      	ldr	r4, [r4, #0]
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	e7ce      	b.n	800b890 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b8f2:	ebab 0505 	sub.w	r5, fp, r5
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	f000 feff 	bl	800c6fa <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b8fc:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b8fe:	6833      	ldr	r3, [r6, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dbcf      	blt.n	800b8a4 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b904:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b906:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b908:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b90a:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800b90e:	2500      	movs	r5, #0
 800b910:	e7df      	b.n	800b8d2 <low_level_output+0x5a>
 800b912:	bf00      	nop
 800b914:	2000d3e4 	.word	0x2000d3e4

0800b918 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800b918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	4683      	mov	fp, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800b91e:	4c36      	ldr	r4, [pc, #216]	; (800b9f8 <ethernetif_input+0xe0>)
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	f04f 31ff 	mov.w	r1, #4294967295
 800b926:	f7f6 febd 	bl	80026a4 <osSemaphoreWait>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d1f8      	bne.n	800b920 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b92e:	4c33      	ldr	r4, [pc, #204]	; (800b9fc <ethernetif_input+0xe4>)
 800b930:	4620      	mov	r0, r4
 800b932:	f7f5 f885 	bl	8000a40 <HAL_ETH_GetReceivedFrame_IT>
 800b936:	4605      	mov	r5, r0
 800b938:	2800      	cmp	r0, #0
 800b93a:	d1f0      	bne.n	800b91e <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 800b93c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 800b93e:	2900      	cmp	r1, #0
 800b940:	d051      	beq.n	800b9e6 <ethernetif_input+0xce>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b942:	2203      	movs	r2, #3
 800b944:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b946:	6c26      	ldr	r6, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b948:	f7f9 fd70 	bl	800542c <pbuf_alloc>
  if (p != NULL)
 800b94c:	4607      	mov	r7, r0
 800b94e:	2800      	cmp	r0, #0
 800b950:	d049      	beq.n	800b9e6 <ethernetif_input+0xce>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b952:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b956:	9600      	str	r6, [sp, #0]
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b958:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b95a:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800b95e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800b962:	462e      	mov	r6, r5
      payloadoffset = 0;
 800b964:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b966:	18b5      	adds	r5, r6, r2
 800b968:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b96c:	9900      	ldr	r1, [sp, #0]
 800b96e:	454d      	cmp	r5, r9
 800b970:	4418      	add	r0, r3
 800b972:	4431      	add	r1, r6
 800b974:	d826      	bhi.n	800b9c4 <ethernetif_input+0xac>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b976:	f000 fec0 	bl	800c6fa <memcpy>
    for(q = p; q != NULL; q = q->next)
 800b97a:	f8d8 8000 	ldr.w	r8, [r8]
 800b97e:	f1b8 0f00 	cmp.w	r8, #0
 800b982:	d1ec      	bne.n	800b95e <ethernetif_input+0x46>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b984:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b986:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b988:	2200      	movs	r2, #0
 800b98a:	4282      	cmp	r2, r0
 800b98c:	d12d      	bne.n	800b9ea <ethernetif_input+0xd2>
    heth.RxFrameInfos.SegCount =0;  
 800b98e:	2300      	movs	r3, #0
 800b990:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800b992:	f241 0214 	movw	r2, #4116	; 0x1014
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	5899      	ldr	r1, [r3, r2]
 800b99a:	0609      	lsls	r1, r1, #24
 800b99c:	d505      	bpl.n	800b9aa <ethernetif_input+0x92>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b99e:	2180      	movs	r1, #128	; 0x80
 800b9a0:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800b9a2:	f241 0208 	movw	r2, #4104	; 0x1008
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	d0b7      	beq.n	800b91e <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b9ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b9b2:	4659      	mov	r1, fp
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	4798      	blx	r3
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d0b8      	beq.n	800b92e <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7f9 fccd 	bl	800535c <pbuf_free>
 800b9c2:	e7b4      	b.n	800b92e <ethernetif_input+0x16>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b9c4:	eba9 0606 	sub.w	r6, r9, r6
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	f000 fe95 	bl	800c6fa <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b9d0:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b9d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b9d8:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b9da:	9b01      	ldr	r3, [sp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b9dc:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b9e0:	4433      	add	r3, r6
        bufferoffset = 0;
 800b9e2:	2600      	movs	r6, #0
 800b9e4:	e7bf      	b.n	800b966 <ethernetif_input+0x4e>
  struct pbuf *p = NULL;
 800b9e6:	2700      	movs	r7, #0
 800b9e8:	e7cc      	b.n	800b984 <ethernetif_input+0x6c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b9ea:	6819      	ldr	r1, [r3, #0]
 800b9ec:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b9f0:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b9f2:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b9f4:	3201      	adds	r2, #1
 800b9f6:	e7c8      	b.n	800b98a <ethernetif_input+0x72>
 800b9f8:	20008388 	.word	0x20008388
 800b9fc:	2000d3e4 	.word	0x2000d3e4

0800ba00 <HAL_ETH_MspInit>:
{
 800ba00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800ba02:	6802      	ldr	r2, [r0, #0]
 800ba04:	4b2d      	ldr	r3, [pc, #180]	; (800babc <HAL_ETH_MspInit+0xbc>)
 800ba06:	429a      	cmp	r2, r3
{
 800ba08:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 800ba0a:	d155      	bne.n	800bab8 <HAL_ETH_MspInit+0xb8>
    __HAL_RCC_ETH_CLK_ENABLE();
 800ba0c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800ba10:	2400      	movs	r4, #0
 800ba12:	9400      	str	r4, [sp, #0]
 800ba14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba16:	482a      	ldr	r0, [pc, #168]	; (800bac0 <HAL_ETH_MspInit+0xc0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800ba18:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800ba1c:	631a      	str	r2, [r3, #48]	; 0x30
 800ba1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba20:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800ba24:	9200      	str	r2, [sp, #0]
 800ba26:	9a00      	ldr	r2, [sp, #0]
 800ba28:	9401      	str	r4, [sp, #4]
 800ba2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba2c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ba30:	631a      	str	r2, [r3, #48]	; 0x30
 800ba32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba34:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800ba38:	9201      	str	r2, [sp, #4]
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	9402      	str	r4, [sp, #8]
 800ba3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba40:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ba44:	631a      	str	r2, [r3, #48]	; 0x30
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba48:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ETH_CLK_ENABLE();
 800ba4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba4e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba50:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba52:	2603      	movs	r6, #3
 800ba54:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800ba56:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba5a:	2332      	movs	r3, #50	; 0x32
 800ba5c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba60:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba64:	f7f5 fa14 	bl	8000e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ba68:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba6a:	a903      	add	r1, sp, #12
 800ba6c:	4815      	ldr	r0, [pc, #84]	; (800bac4 <HAL_ETH_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba6e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba70:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba74:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba78:	f7f5 fa0a 	bl	8000e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ba7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ba80:	a903      	add	r1, sp, #12
 800ba82:	4811      	ldr	r0, [pc, #68]	; (800bac8 <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba84:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba86:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba8a:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ba8e:	f7f5 f9ff 	bl	8000e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ba92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ba96:	a903      	add	r1, sp, #12
 800ba98:	480c      	ldr	r0, [pc, #48]	; (800bacc <HAL_ETH_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba9a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba9c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baa0:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800baa4:	f7f5 f9f4 	bl	8000e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800baa8:	203d      	movs	r0, #61	; 0x3d
 800baaa:	4622      	mov	r2, r4
 800baac:	2105      	movs	r1, #5
 800baae:	f7f4 fdd9 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bab2:	203d      	movs	r0, #61	; 0x3d
 800bab4:	f7f4 fe0a 	bl	80006cc <HAL_NVIC_EnableIRQ>
}
 800bab8:	b009      	add	sp, #36	; 0x24
 800baba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800babc:	40028000 	.word	0x40028000
 800bac0:	40020800 	.word	0x40020800
 800bac4:	40020000 	.word	0x40020000
 800bac8:	40020400 	.word	0x40020400
 800bacc:	40021800 	.word	0x40021800

0800bad0 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800bad0:	4b01      	ldr	r3, [pc, #4]	; (800bad8 <HAL_ETH_RxCpltCallback+0x8>)
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	f7f6 be0e 	b.w	80026f4 <osSemaphoreRelease>
 800bad8:	20008388 	.word	0x20008388

0800badc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bade:	4604      	mov	r4, r0
{
 800bae0:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bae2:	b930      	cbnz	r0, 800baf2 <ethernetif_init+0x16>
 800bae4:	4b41      	ldr	r3, [pc, #260]	; (800bbec <ethernetif_init+0x110>)
 800bae6:	4942      	ldr	r1, [pc, #264]	; (800bbf0 <ethernetif_init+0x114>)
 800bae8:	4842      	ldr	r0, [pc, #264]	; (800bbf4 <ethernetif_init+0x118>)
 800baea:	f240 2247 	movw	r2, #583	; 0x247
 800baee:	f000 febf 	bl	800c870 <iprintf>
  heth.Instance = ETH;
 800baf2:	4d41      	ldr	r5, [pc, #260]	; (800bbf8 <ethernetif_init+0x11c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800baf4:	4941      	ldr	r1, [pc, #260]	; (800bbfc <ethernetif_init+0x120>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800baf6:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bafa:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 800bafc:	8623      	strh	r3, [r4, #48]	; 0x30
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bafe:	4b40      	ldr	r3, [pc, #256]	; (800bc00 <ethernetif_init+0x124>)
 800bb00:	6163      	str	r3, [r4, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bb02:	e9c5 1200 	strd	r1, r2, [r5]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bb06:	4b3f      	ldr	r3, [pc, #252]	; (800bc04 <ethernetif_init+0x128>)
  MACAddr[0] = 0x00;
 800bb08:	493f      	ldr	r1, [pc, #252]	; (800bc08 <ethernetif_init+0x12c>)
  netif->linkoutput = low_level_output;
 800bb0a:	61a3      	str	r3, [r4, #24]
  MACAddr[0] = 0x00;
 800bb0c:	9103      	str	r1, [sp, #12]
  uint32_t regvalue = 0;
 800bb0e:	2300      	movs	r3, #0
  MACAddr[3] = 0x0F;
 800bb10:	f44f 616a 	mov.w	r1, #3744	; 0xea0
  uint32_t regvalue = 0;
 800bb14:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bb16:	822b      	strh	r3, [r5, #16]
  MACAddr[3] = 0x0F;
 800bb18:	f8ad 1010 	strh.w	r1, [sp, #16]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bb1c:	61eb      	str	r3, [r5, #28]
  heth.Init.MACAddr = &MACAddr[0];
 800bb1e:	a903      	add	r1, sp, #12
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bb20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bb24:	4628      	mov	r0, r5
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bb26:	e9c5 1205 	strd	r1, r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bb2a:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bb2c:	f7f5 f878 	bl	8000c20 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800bb30:	b928      	cbnz	r0, 800bb3e <ethernetif_init+0x62>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bb32:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800bb36:	f043 0304 	orr.w	r3, r3, #4
 800bb3a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bb3e:	2304      	movs	r3, #4
 800bb40:	4a32      	ldr	r2, [pc, #200]	; (800bc0c <ethernetif_init+0x130>)
 800bb42:	4933      	ldr	r1, [pc, #204]	; (800bc10 <ethernetif_init+0x134>)
 800bb44:	482c      	ldr	r0, [pc, #176]	; (800bbf8 <ethernetif_init+0x11c>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800bb46:	4e33      	ldr	r6, [pc, #204]	; (800bc14 <ethernetif_init+0x138>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bb48:	f7f4 fe90 	bl	800086c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	4a32      	ldr	r2, [pc, #200]	; (800bc18 <ethernetif_init+0x13c>)
 800bb50:	4932      	ldr	r1, [pc, #200]	; (800bc1c <ethernetif_init+0x140>)
 800bb52:	4829      	ldr	r0, [pc, #164]	; (800bbf8 <ethernetif_init+0x11c>)
 800bb54:	f7f4 fec6 	bl	80008e4 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bb58:	2306      	movs	r3, #6
 800bb5a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bb5e:	696b      	ldr	r3, [r5, #20]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bb66:	785a      	ldrb	r2, [r3, #1]
 800bb68:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bb6c:	789a      	ldrb	r2, [r3, #2]
 800bb6e:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bb72:	78da      	ldrb	r2, [r3, #3]
 800bb74:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bb78:	791a      	ldrb	r2, [r3, #4]
 800bb7a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bb7e:	795b      	ldrb	r3, [r3, #5]
 800bb80:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800bb84:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bb88:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bb8a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800bb8e:	a80a      	add	r0, sp, #40	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bb90:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 800bb94:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bb96:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800bb9a:	f840 7d20 	str.w	r7, [r0, #-32]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800bb9e:	2101      	movs	r1, #1
 800bba0:	f7f6 fd6c 	bl	800267c <osSemaphoreCreate>
 800bba4:	4b1e      	ldr	r3, [pc, #120]	; (800bc20 <ethernetif_init+0x144>)
 800bba6:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800bba8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bbaa:	ad05      	add	r5, sp, #20
 800bbac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bbae:	6833      	ldr	r3, [r6, #0]
 800bbb0:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	a805      	add	r0, sp, #20
 800bbb6:	f7f6 fcf2 	bl	800259e <osThreadCreate>
  HAL_ETH_Start(&heth);
 800bbba:	480f      	ldr	r0, [pc, #60]	; (800bbf8 <ethernetif_init+0x11c>)
 800bbbc:	f7f5 f92c 	bl	8000e18 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bbc0:	aa01      	add	r2, sp, #4
 800bbc2:	210b      	movs	r1, #11
 800bbc4:	480c      	ldr	r0, [pc, #48]	; (800bbf8 <ethernetif_init+0x11c>)
 800bbc6:	f7f4 ffba 	bl	8000b3e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bbca:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bbcc:	480a      	ldr	r0, [pc, #40]	; (800bbf8 <ethernetif_init+0x11c>)
  regvalue |= (PHY_ISFR_INT4);
 800bbce:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bbd2:	210b      	movs	r1, #11
  regvalue |= (PHY_ISFR_INT4);
 800bbd4:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bbd6:	f7f4 ffec 	bl	8000bb2 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bbda:	aa01      	add	r2, sp, #4
 800bbdc:	210b      	movs	r1, #11
 800bbde:	4806      	ldr	r0, [pc, #24]	; (800bbf8 <ethernetif_init+0x11c>)
 800bbe0:	f7f4 ffad 	bl	8000b3e <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	b00b      	add	sp, #44	; 0x2c
 800bbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	0800f804 	.word	0x0800f804
 800bbf0:	0800eeb5 	.word	0x0800eeb5
 800bbf4:	0800d7e1 	.word	0x0800d7e1
 800bbf8:	2000d3e4 	.word	0x2000d3e4
 800bbfc:	40028000 	.word	0x40028000
 800bc00:	0800a8b5 	.word	0x0800a8b5
 800bc04:	0800b879 	.word	0x0800b879
 800bc08:	0fe18e00 	.word	0x0fe18e00
 800bc0c:	2000d42c 	.word	0x2000d42c
 800bc10:	2000bb14 	.word	0x2000bb14
 800bc14:	0800d6f0 	.word	0x0800d6f0
 800bc18:	2000bb94 	.word	0x2000bb94
 800bc1c:	2000d364 	.word	0x2000d364
 800bc20:	20008388 	.word	0x20008388

0800bc24 <sys_now>:
 800bc24:	f7f4 bcf2 	b.w	800060c <HAL_GetTick>

0800bc28 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bc28:	b530      	push	{r4, r5, lr}
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bc2a:	2100      	movs	r1, #0
{
 800bc2c:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
 800bc2e:	4608      	mov	r0, r1
 800bc30:	f7f8 f936 	bl	8003ea0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;
 800bc34:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 800bc36:	4912      	ldr	r1, [pc, #72]	; (800bc80 <MX_LWIP_Init+0x58>)
  netmask.addr = 0;
 800bc38:	4a12      	ldr	r2, [pc, #72]	; (800bc84 <MX_LWIP_Init+0x5c>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bc3a:	4d13      	ldr	r5, [pc, #76]	; (800bc88 <MX_LWIP_Init+0x60>)
 800bc3c:	4c13      	ldr	r4, [pc, #76]	; (800bc8c <MX_LWIP_Init+0x64>)
  ipaddr.addr = 0;
 800bc3e:	2000      	movs	r0, #0
  gw.addr = 0;
 800bc40:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800bc42:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800bc44:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bc46:	9502      	str	r5, [sp, #8]
 800bc48:	4d11      	ldr	r5, [pc, #68]	; (800bc90 <MX_LWIP_Init+0x68>)
 800bc4a:	e9cd 0500 	strd	r0, r5, [sp]
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f7f9 fa56 	bl	8005100 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7f9 fa91 	bl	800517c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bc5a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800bc5e:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bc60:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800bc62:	d507      	bpl.n	800bc74 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
 800bc64:	f7f9 fa90 	bl	8005188 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800bc68:	4808      	ldr	r0, [pc, #32]	; (800bc8c <MX_LWIP_Init+0x64>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bc6a:	b005      	add	sp, #20
 800bc6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 800bc70:	f7fe b970 	b.w	8009f54 <dhcp_start>
    netif_set_down(&gnetif);
 800bc74:	f7f9 fa97 	bl	80051a6 <netif_set_down>
 800bc78:	e7f6      	b.n	800bc68 <MX_LWIP_Init+0x40>
 800bc7a:	bf00      	nop
 800bc7c:	2000ec38 	.word	0x2000ec38
 800bc80:	2000ec30 	.word	0x2000ec30
 800bc84:	2000ec34 	.word	0x2000ec34
 800bc88:	08003e21 	.word	0x08003e21
 800bc8c:	2000ebfc 	.word	0x2000ebfc
 800bc90:	0800badd 	.word	0x0800badd

0800bc94 <mqtt_sub_request_cb>:
static void mqtt_sub_request_cb(void *arg, err_t result)
{
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 800bc94:	4801      	ldr	r0, [pc, #4]	; (800bc9c <mqtt_sub_request_cb+0x8>)
 800bc96:	f000 bdeb 	b.w	800c870 <iprintf>
 800bc9a:	bf00      	nop
 800bc9c:	0800fa0e 	.word	0x0800fa0e

0800bca0 <mqtt_incoming_publish_cb>:
{
 800bca0:	b538      	push	{r3, r4, r5, lr}
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 800bca2:	480b      	ldr	r0, [pc, #44]	; (800bcd0 <mqtt_incoming_publish_cb+0x30>)
 800bca4:	4c0b      	ldr	r4, [pc, #44]	; (800bcd4 <mqtt_incoming_publish_cb+0x34>)
{
 800bca6:	460d      	mov	r5, r1
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 800bca8:	f000 fde2 	bl	800c870 <iprintf>
  if(strcmp(topic, "print_payload") == 0) {
 800bcac:	490a      	ldr	r1, [pc, #40]	; (800bcd8 <mqtt_incoming_publish_cb+0x38>)
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f7f4 fa9e 	bl	80001f0 <strcmp>
 800bcb4:	b908      	cbnz	r0, 800bcba <mqtt_incoming_publish_cb+0x1a>
    inpub_id = 0;
 800bcb6:	6020      	str	r0, [r4, #0]
}
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
  } else if (strcmp(topic, "diode") == 0) {
 800bcba:	4908      	ldr	r1, [pc, #32]	; (800bcdc <mqtt_incoming_publish_cb+0x3c>)
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f7f4 fa97 	bl	80001f0 <strcmp>
 800bcc2:	b910      	cbnz	r0, 800bcca <mqtt_incoming_publish_cb+0x2a>
	 inpub_id = 1;
 800bcc4:	2301      	movs	r3, #1
	  inpub_id = 2;
 800bcc6:	6023      	str	r3, [r4, #0]
}
 800bcc8:	e7f6      	b.n	800bcb8 <mqtt_incoming_publish_cb+0x18>
	  inpub_id = 2;
 800bcca:	2302      	movs	r3, #2
 800bccc:	e7fb      	b.n	800bcc6 <mqtt_incoming_publish_cb+0x26>
 800bcce:	bf00      	nop
 800bcd0:	0800f9c7 	.word	0x0800f9c7
 800bcd4:	2000838c 	.word	0x2000838c
 800bcd8:	0800f9fa 	.word	0x0800f9fa
 800bcdc:	0800fa08 	.word	0x0800fa08

0800bce0 <SystemClock_Config>:
{
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 800bce4:	2100      	movs	r1, #0
 800bce6:	4b28      	ldr	r3, [pc, #160]	; (800bd88 <SystemClock_Config+0xa8>)
 800bce8:	9101      	str	r1, [sp, #4]
 800bcea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bcf0:	641a      	str	r2, [r3, #64]	; 0x40
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bcfc:	4b23      	ldr	r3, [pc, #140]	; (800bd8c <SystemClock_Config+0xac>)
 800bcfe:	9102      	str	r1, [sp, #8]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bd0e:	9302      	str	r3, [sp, #8]
 800bd10:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800bd12:	2101      	movs	r1, #1
 800bd14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bd18:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800bd1a:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bd1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd22:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 800bd26:	2604      	movs	r6, #4
 800bd28:	23a8      	movs	r3, #168	; 0xa8
 800bd2a:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800bd30:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bd32:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800bd34:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd36:	f7f5 fcc7 	bl	80016c8 <HAL_RCC_OscConfig>
 800bd3a:	b100      	cbz	r0, 800bd3e <SystemClock_Config+0x5e>
 800bd3c:	e7fe      	b.n	800bd3c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bd3e:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bd40:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800bd44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bd48:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800bd4a:	2105      	movs	r1, #5
 800bd4c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bd4e:	e9cd 5403 	strd	r5, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bd52:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800bd56:	f7f5 fe67 	bl	8001a28 <HAL_RCC_ClockConfig>
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	b100      	cbz	r0, 800bd60 <SystemClock_Config+0x80>
 800bd5e:	e7fe      	b.n	800bd5e <SystemClock_Config+0x7e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800bd60:	f7f5 fefa 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 800bd64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd68:	fbb0 f0f3 	udiv	r0, r0, r3
 800bd6c:	f7f4 fcba 	bl	80006e4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7f4 fccd 	bl	8000710 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800bd76:	4622      	mov	r2, r4
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7e:	f7f4 fc71 	bl	8000664 <HAL_NVIC_SetPriority>
}
 800bd82:	b014      	add	sp, #80	; 0x50
 800bd84:	bd70      	pop	{r4, r5, r6, pc}
 800bd86:	bf00      	nop
 800bd88:	40023800 	.word	0x40023800
 800bd8c:	40007000 	.word	0x40007000

0800bd90 <main>:
{
 800bd90:	b500      	push	{lr}
 800bd92:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd94:	2400      	movs	r4, #0
  HAL_Init();
 800bd96:	f7f4 fc13 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 800bd9a:	f7ff ffa1 	bl	800bce0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd9e:	4b4b      	ldr	r3, [pc, #300]	; (800becc <main+0x13c>)
 800bda0:	9401      	str	r4, [sp, #4]
 800bda2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800bda4:	484a      	ldr	r0, [pc, #296]	; (800bed0 <main+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bda6:	f042 0204 	orr.w	r2, r2, #4
 800bdaa:	631a      	str	r2, [r3, #48]	; 0x30
 800bdac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdae:	f002 0204 	and.w	r2, r2, #4
 800bdb2:	9201      	str	r2, [sp, #4]
 800bdb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bdb6:	9402      	str	r4, [sp, #8]
 800bdb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdbe:	631a      	str	r2, [r3, #48]	; 0x30
 800bdc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdc2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bdc6:	9202      	str	r2, [sp, #8]
 800bdc8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdca:	9403      	str	r4, [sp, #12]
 800bdcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdce:	f042 0201 	orr.w	r2, r2, #1
 800bdd2:	631a      	str	r2, [r3, #48]	; 0x30
 800bdd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdd6:	f002 0201 	and.w	r2, r2, #1
 800bdda:	9203      	str	r2, [sp, #12]
 800bddc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bdde:	9404      	str	r4, [sp, #16]
 800bde0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bde2:	f042 0202 	orr.w	r2, r2, #2
 800bde6:	631a      	str	r2, [r3, #48]	; 0x30
 800bde8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdea:	f002 0202 	and.w	r2, r2, #2
 800bdee:	9204      	str	r2, [sp, #16]
 800bdf0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bdf2:	9405      	str	r4, [sp, #20]
 800bdf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdf6:	f042 0208 	orr.w	r2, r2, #8
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
 800bdfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdfe:	f002 0208 	and.w	r2, r2, #8
 800be02:	9205      	str	r2, [sp, #20]
 800be04:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800be06:	9406      	str	r4, [sp, #24]
 800be08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be0e:	631a      	str	r2, [r3, #48]	; 0x30
 800be10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be16:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800be18:	4622      	mov	r2, r4
 800be1a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800be1e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800be20:	f7f5 f922 	bl	8001068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800be24:	4622      	mov	r2, r4
 800be26:	2140      	movs	r1, #64	; 0x40
 800be28:	482a      	ldr	r0, [pc, #168]	; (800bed4 <main+0x144>)
 800be2a:	f7f5 f91d 	bl	8001068 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800be2e:	4b2a      	ldr	r3, [pc, #168]	; (800bed8 <main+0x148>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800be30:	482a      	ldr	r0, [pc, #168]	; (800bedc <main+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be32:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800be34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800be38:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800be3a:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800be3e:	2501      	movs	r5, #1
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800be40:	f7f5 f826 	bl	8000e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800be44:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be48:	a907      	add	r1, sp, #28
 800be4a:	4821      	ldr	r0, [pc, #132]	; (800bed0 <main+0x140>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800be4c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be50:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be54:	f7f5 f81c 	bl	8000e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800be58:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800be5a:	a907      	add	r1, sp, #28
 800be5c:	481d      	ldr	r0, [pc, #116]	; (800bed4 <main+0x144>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800be5e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be62:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800be66:	f7f5 f813 	bl	8000e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800be6a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800be6c:	a907      	add	r1, sp, #28
 800be6e:	4819      	ldr	r0, [pc, #100]	; (800bed4 <main+0x144>)
  huart3.Instance = USART3;
 800be70:	4d1b      	ldr	r5, [pc, #108]	; (800bee0 <main+0x150>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be72:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be74:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800be78:	f7f5 f80a 	bl	8000e90 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800be7c:	4919      	ldr	r1, [pc, #100]	; (800bee4 <main+0x154>)
  huart3.Init.Parity = UART_PARITY_NONE;
 800be7e:	612c      	str	r4, [r5, #16]
  huart3.Init.BaudRate = 115200;
 800be80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800be84:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800be88:	4628      	mov	r0, r5
  huart3.Init.Mode = UART_MODE_TX_RX;
 800be8a:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800be8c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be90:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800be94:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800be96:	f7f6 f8ed 	bl	8002074 <HAL_UART_Init>
 800be9a:	4606      	mov	r6, r0
 800be9c:	b100      	cbz	r0, 800bea0 <main+0x110>
 800be9e:	e7fe      	b.n	800be9e <main+0x10e>
  debug_init(&huart3);
 800bea0:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800bea2:	4d11      	ldr	r5, [pc, #68]	; (800bee8 <main+0x158>)
  debug_init(&huart3);
 800bea4:	f7ff fce0 	bl	800b868 <debug_init>
  xprintf(ANSI_BG_BLUE "MQTT project" ANSI_BG_DEFAULT "\n");
 800bea8:	4810      	ldr	r0, [pc, #64]	; (800beec <main+0x15c>)
 800beaa:	f000 fb31 	bl	800c510 <xprintf>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800beae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800beb0:	ac07      	add	r4, sp, #28
 800beb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800beb8:	4631      	mov	r1, r6
 800beba:	a807      	add	r0, sp, #28
 800bebc:	f7f6 fb6f 	bl	800259e <osThreadCreate>
 800bec0:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <main+0x160>)
 800bec2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800bec4:	f7f6 fb5f 	bl	8002586 <osKernelStart>
 800bec8:	e7fe      	b.n	800bec8 <main+0x138>
 800beca:	bf00      	nop
 800becc:	40023800 	.word	0x40023800
 800bed0:	40020400 	.word	0x40020400
 800bed4:	40021800 	.word	0x40021800
 800bed8:	10110000 	.word	0x10110000
 800bedc:	40020800 	.word	0x40020800
 800bee0:	2000ec40 	.word	0x2000ec40
 800bee4:	40004800 	.word	0x40004800
 800bee8:	0800d704 	.word	0x0800d704
 800beec:	0800f8b3 	.word	0x0800f8b3
 800bef0:	2000ec3c 	.word	0x2000ec3c

0800bef4 <displayOwnIp>:
{
 800bef4:	b507      	push	{r0, r1, r2, lr}
		ip4_addr3_16(netif_ip4_addr(&gnetif)),
 800bef6:	4806      	ldr	r0, [pc, #24]	; (800bf10 <displayOwnIp+0x1c>)
	xprintf(
 800bef8:	7983      	ldrb	r3, [r0, #6]
 800befa:	7942      	ldrb	r2, [r0, #5]
 800befc:	7901      	ldrb	r1, [r0, #4]
 800befe:	79c0      	ldrb	r0, [r0, #7]
 800bf00:	9000      	str	r0, [sp, #0]
 800bf02:	4804      	ldr	r0, [pc, #16]	; (800bf14 <displayOwnIp+0x20>)
 800bf04:	f000 fb04 	bl	800c510 <xprintf>
}
 800bf08:	b003      	add	sp, #12
 800bf0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf0e:	bf00      	nop
 800bf10:	2000ebfc 	.word	0x2000ebfc
 800bf14:	0800f81e 	.word	0x0800f81e

0800bf18 <example_do_connect>:
}


void example_do_connect(mqtt_client_t *client)
{
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	b08a      	sub	sp, #40	; 0x28
 800bf1c:	4604      	mov	r4, r0

  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 800bf1e:	2218      	movs	r2, #24
 800bf20:	2100      	movs	r1, #0
 800bf22:	a804      	add	r0, sp, #16
 800bf24:	f000 fbf4 	bl	800c710 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
   ci.client_id = "lwip_test";
   ip_addr_t ip;
   IP4_ADDR(&ip, BROKER_IP1, BROKER_IP2, BROKER_IP3, BROKER_IP4);
 800bf28:	a90a      	add	r1, sp, #40	; 0x28
   ci.client_id = "lwip_test";
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <example_do_connect+0x40>)
 800bf2c:	9303      	str	r3, [sp, #12]
   IP4_ADDR(&ip, BROKER_IP1, BROKER_IP2, BROKER_IP3, BROKER_IP4);
 800bf2e:	4b0b      	ldr	r3, [pc, #44]	; (800bf5c <example_do_connect+0x44>)
 800bf30:	f841 3d20 	str.w	r3, [r1, #-32]!
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client, &ip, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 800bf34:	ab03      	add	r3, sp, #12
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	f240 725b 	movw	r2, #1883	; 0x75b
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <example_do_connect+0x48>)
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7f8 fcb2 	bl	80048ac <mqtt_client_connect>

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 800bf48:	4601      	mov	r1, r0
 800bf4a:	b110      	cbz	r0, 800bf52 <example_do_connect+0x3a>
    printf("mqtt_connect return %d\n", err);
 800bf4c:	4805      	ldr	r0, [pc, #20]	; (800bf64 <example_do_connect+0x4c>)
 800bf4e:	f000 fc8f 	bl	800c870 <iprintf>
  }
}
 800bf52:	b00a      	add	sp, #40	; 0x28
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	bf00      	nop
 800bf58:	0800f832 	.word	0x0800f832
 800bf5c:	f301a8c0 	.word	0xf301a8c0
 800bf60:	0800bf69 	.word	0x0800bf69
 800bf64:	0800f83c 	.word	0x0800f83c

0800bf68 <mqtt_connection_cb>:


static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 800bf68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 800bf6e:	b9c2      	cbnz	r2, 800bfa2 <mqtt_connection_cb+0x3a>
    printf("mqtt_connection_cb: Successfully connected\n");
 800bf70:	4812      	ldr	r0, [pc, #72]	; (800bfbc <mqtt_connection_cb+0x54>)
 800bf72:	f000 fd05 	bl	800c980 <puts>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 800bf76:	462b      	mov	r3, r5
 800bf78:	4a11      	ldr	r2, [pc, #68]	; (800bfc0 <mqtt_connection_cb+0x58>)
 800bf7a:	4912      	ldr	r1, [pc, #72]	; (800bfc4 <mqtt_connection_cb+0x5c>)
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7f8 fc6f 	bl	8004860 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "diode", 1, mqtt_sub_request_cb, arg);
 800bf82:	2201      	movs	r2, #1
 800bf84:	4910      	ldr	r1, [pc, #64]	; (800bfc8 <mqtt_connection_cb+0x60>)
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <mqtt_connection_cb+0x64>)
 800bf88:	e9cd 5200 	strd	r5, r2, [sp]
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f7f8 fbbf 	bl	8004710 <mqtt_sub_unsub>

    if(err != ERR_OK) {
 800bf92:	4601      	mov	r1, r0
 800bf94:	b178      	cbz	r0, 800bfb6 <mqtt_connection_cb+0x4e>
      printf("mqtt_subscribe return: %d\n", err);
 800bf96:	480e      	ldr	r0, [pc, #56]	; (800bfd0 <mqtt_connection_cb+0x68>)
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 800bf98:	b003      	add	sp, #12
 800bf9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      printf("mqtt_subscribe return: %d\n", err);
 800bf9e:	f000 bc67 	b.w	800c870 <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	480b      	ldr	r0, [pc, #44]	; (800bfd4 <mqtt_connection_cb+0x6c>)
 800bfa6:	f000 fc63 	bl	800c870 <iprintf>
    example_do_connect(client);
 800bfaa:	4620      	mov	r0, r4
}
 800bfac:	b003      	add	sp, #12
 800bfae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    example_do_connect(client);
 800bfb2:	f7ff bfb1 	b.w	800bf18 <example_do_connect>
}
 800bfb6:	b003      	add	sp, #12
 800bfb8:	bd30      	pop	{r4, r5, pc}
 800bfba:	bf00      	nop
 800bfbc:	0800f8cf 	.word	0x0800f8cf
 800bfc0:	0800c175 	.word	0x0800c175
 800bfc4:	0800bca1 	.word	0x0800bca1
 800bfc8:	0800fa08 	.word	0x0800fa08
 800bfcc:	0800bc95 	.word	0x0800bc95
 800bfd0:	0800f8fa 	.word	0x0800f8fa
 800bfd4:	0800f915 	.word	0x0800f915

0800bfd8 <handle_dhcp>:


void handle_dhcp() {
 800bfd8:	b510      	push	{r4, lr}
	  xprintf("Obtaining address with DHCP...\n");
 800bfda:	4807      	ldr	r0, [pc, #28]	; (800bff8 <handle_dhcp+0x20>)
 800bfdc:	f000 fa98 	bl	800c510 <xprintf>

	  struct dhcp *dhcp = netif_dhcp_data(&gnetif);
 800bfe0:	4b06      	ldr	r3, [pc, #24]	; (800bffc <handle_dhcp+0x24>)
 800bfe2:	6a1c      	ldr	r4, [r3, #32]
	  do
	  {
	    //xprintf("dhcp->state = %02X\n",dhcp->state);
	    vTaskDelay(250);
 800bfe4:	20fa      	movs	r0, #250	; 0xfa
 800bfe6:	f7f7 fa31 	bl	800344c <vTaskDelay>
	  }while(dhcp->state != 0x0A);
 800bfea:	7a63      	ldrb	r3, [r4, #9]
 800bfec:	2b0a      	cmp	r3, #10
 800bfee:	d1f9      	bne.n	800bfe4 <handle_dhcp+0xc>

	  //xprintf("DHCP bound\n");
	  displayOwnIp();
}
 800bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  displayOwnIp();
 800bff4:	f7ff bf7e 	b.w	800bef4 <displayOwnIp>
 800bff8:	0800f854 	.word	0x0800f854
 800bffc:	2000ebfc 	.word	0x2000ebfc

0800c000 <StartDefaultTask>:
	}
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800c000:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 800c002:	f7ff fe11 	bl	800bc28 <MX_LWIP_Init>
  handle_dhcp();
 800c006:	f7ff ffe7 	bl	800bfd8 <handle_dhcp>

  mqtt_client_t *client = mqtt_client_new();
 800c00a:	f7f8 fc41 	bl	8004890 <mqtt_client_new>
    if(client != NULL) {
 800c00e:	b108      	cbz	r0, 800c014 <StartDefaultTask+0x14>
      example_do_connect(client);
 800c010:	f7ff ff82 	bl	800bf18 <example_do_connect>
    }
    osDelay(5000);
 800c014:	f241 3088 	movw	r0, #5000	; 0x1388
 800c018:	f7f6 fad9 	bl	80025ce <osDelay>
 800c01c:	e7fe      	b.n	800c01c <StartDefaultTask+0x1c>
	...

0800c020 <turn_led_on>:
	if (i == 2)
 800c020:	2802      	cmp	r0, #2
 800c022:	d104      	bne.n	800c02e <turn_led_on+0xe>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800c024:	2201      	movs	r2, #1
 800c026:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800c028:	4804      	ldr	r0, [pc, #16]	; (800c03c <turn_led_on+0x1c>)
 800c02a:	f7f5 b81d 	b.w	8001068 <HAL_GPIO_WritePin>
	else if (i == 3)
 800c02e:	2803      	cmp	r0, #3
 800c030:	d103      	bne.n	800c03a <turn_led_on+0x1a>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800c032:	2201      	movs	r2, #1
 800c034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c038:	e7f6      	b.n	800c028 <turn_led_on+0x8>
}
 800c03a:	4770      	bx	lr
 800c03c:	40020400 	.word	0x40020400

0800c040 <turn_led_off>:
	if (i == 2)
 800c040:	2802      	cmp	r0, #2
 800c042:	d104      	bne.n	800c04e <turn_led_off+0xe>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800c044:	2200      	movs	r2, #0
 800c046:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800c048:	4804      	ldr	r0, [pc, #16]	; (800c05c <turn_led_off+0x1c>)
 800c04a:	f7f5 b80d 	b.w	8001068 <HAL_GPIO_WritePin>
	else if (i == 3)
 800c04e:	2803      	cmp	r0, #3
 800c050:	d103      	bne.n	800c05a <turn_led_off+0x1a>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800c052:	2200      	movs	r2, #0
 800c054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c058:	e7f6      	b.n	800c048 <turn_led_off+0x8>
}
 800c05a:	4770      	bx	lr
 800c05c:	40020400 	.word	0x40020400

0800c060 <toggle_led>:
void toggle_led(int i, int time){
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	4605      	mov	r5, r0
 800c064:	460e      	mov	r6, r1
	for (int j=0; j<time; j++) {
 800c066:	2400      	movs	r4, #0
 800c068:	42b4      	cmp	r4, r6
 800c06a:	db00      	blt.n	800c06e <toggle_led+0xe>
}
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
		turn_led_on(i);
 800c06e:	4628      	mov	r0, r5
 800c070:	f7ff ffd6 	bl	800c020 <turn_led_on>
		osDelay(250);
 800c074:	20fa      	movs	r0, #250	; 0xfa
 800c076:	f7f6 faaa 	bl	80025ce <osDelay>
		turn_led_off(i);
 800c07a:	4628      	mov	r0, r5
 800c07c:	f7ff ffe0 	bl	800c040 <turn_led_off>
		osDelay(250);
 800c080:	20fa      	movs	r0, #250	; 0xfa
 800c082:	f7f6 faa4 	bl	80025ce <osDelay>
	for (int j=0; j<time; j++) {
 800c086:	3401      	adds	r4, #1
 800c088:	e7ee      	b.n	800c068 <toggle_led+0x8>

0800c08a <toggle_all>:
void toggle_all(int time){
 800c08a:	b570      	push	{r4, r5, r6, lr}
 800c08c:	4606      	mov	r6, r0
	for (int j=0; j<time; j++) {
 800c08e:	2500      	movs	r5, #0
	int i=2;
 800c090:	2402      	movs	r4, #2
	for (int j=0; j<time; j++) {
 800c092:	42b5      	cmp	r5, r6
 800c094:	db00      	blt.n	800c098 <toggle_all+0xe>
}
 800c096:	bd70      	pop	{r4, r5, r6, pc}
			turn_led_on(i);
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff ffc1 	bl	800c020 <turn_led_on>
			osDelay(250);
 800c09e:	20fa      	movs	r0, #250	; 0xfa
 800c0a0:	f7f6 fa95 	bl	80025ce <osDelay>
			turn_led_off(i);
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7ff ffcb 	bl	800c040 <turn_led_off>
			osDelay(250);
 800c0aa:	20fa      	movs	r0, #250	; 0xfa
 800c0ac:	f7f6 fa8f 	bl	80025ce <osDelay>
				i = 2;
 800c0b0:	2c02      	cmp	r4, #2
 800c0b2:	bf0c      	ite	eq
 800c0b4:	2403      	moveq	r4, #3
 800c0b6:	2402      	movne	r4, #2
	for (int j=0; j<time; j++) {
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	e7ea      	b.n	800c092 <toggle_all+0x8>

0800c0bc <handle_diode>:
void handle_diode(char * data){
 800c0bc:	b510      	push	{r4, lr}
	if (strcmp(data, "LD2 on") == 0){
 800c0be:	4925      	ldr	r1, [pc, #148]	; (800c154 <handle_diode+0x98>)
void handle_diode(char * data){
 800c0c0:	4604      	mov	r4, r0
	if (strcmp(data, "LD2 on") == 0){
 800c0c2:	f7f4 f895 	bl	80001f0 <strcmp>
 800c0c6:	b948      	cbnz	r0, 800c0dc <handle_diode+0x20>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800c0c8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	2180      	movs	r1, #128	; 0x80
 800c0d0:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
}
 800c0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800c0d8:	f7f4 bfc6 	b.w	8001068 <HAL_GPIO_WritePin>
	} else if (strcmp(data, "LD2 off") == 0){
 800c0dc:	491e      	ldr	r1, [pc, #120]	; (800c158 <handle_diode+0x9c>)
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f7f4 f886 	bl	80001f0 <strcmp>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	b910      	cbnz	r0, 800c0ee <handle_diode+0x32>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800c0e8:	2180      	movs	r1, #128	; 0x80
 800c0ea:	481c      	ldr	r0, [pc, #112]	; (800c15c <handle_diode+0xa0>)
 800c0ec:	e7f2      	b.n	800c0d4 <handle_diode+0x18>
	} else if (strcmp(data, "LD2 toggle") == 0){
 800c0ee:	491c      	ldr	r1, [pc, #112]	; (800c160 <handle_diode+0xa4>)
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7f4 f87d 	bl	80001f0 <strcmp>
 800c0f6:	b928      	cbnz	r0, 800c104 <handle_diode+0x48>
		toggle_led(2, 50);
 800c0f8:	2132      	movs	r1, #50	; 0x32
 800c0fa:	2002      	movs	r0, #2
}
 800c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		toggle_led(3, 50);
 800c100:	f7ff bfae 	b.w	800c060 <toggle_led>
	} else if (strcmp(data, "LD3 on") == 0){
 800c104:	4917      	ldr	r1, [pc, #92]	; (800c164 <handle_diode+0xa8>)
 800c106:	4620      	mov	r0, r4
 800c108:	f7f4 f872 	bl	80001f0 <strcmp>
 800c10c:	b920      	cbnz	r0, 800c118 <handle_diode+0x5c>
		turn_led_on(3);
 800c10e:	2003      	movs	r0, #3
}
 800c110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		turn_led_on(3);
 800c114:	f7ff bf84 	b.w	800c020 <turn_led_on>
	} else if (strcmp(data, "LD3 off") == 0){
 800c118:	4913      	ldr	r1, [pc, #76]	; (800c168 <handle_diode+0xac>)
 800c11a:	4620      	mov	r0, r4
 800c11c:	f7f4 f868 	bl	80001f0 <strcmp>
 800c120:	b920      	cbnz	r0, 800c12c <handle_diode+0x70>
		turn_led_off(3);
 800c122:	2003      	movs	r0, #3
}
 800c124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		turn_led_off(3);
 800c128:	f7ff bf8a 	b.w	800c040 <turn_led_off>
	} else if (strcmp(data, "LD3 toggle") == 0){
 800c12c:	490f      	ldr	r1, [pc, #60]	; (800c16c <handle_diode+0xb0>)
 800c12e:	4620      	mov	r0, r4
 800c130:	f7f4 f85e 	bl	80001f0 <strcmp>
 800c134:	b910      	cbnz	r0, 800c13c <handle_diode+0x80>
		toggle_led(3, 50);
 800c136:	2132      	movs	r1, #50	; 0x32
 800c138:	2003      	movs	r0, #3
 800c13a:	e7df      	b.n	800c0fc <handle_diode+0x40>
	} else if (strcmp(data, "toggle all") == 0){
 800c13c:	490c      	ldr	r1, [pc, #48]	; (800c170 <handle_diode+0xb4>)
 800c13e:	4620      	mov	r0, r4
 800c140:	f7f4 f856 	bl	80001f0 <strcmp>
 800c144:	b920      	cbnz	r0, 800c150 <handle_diode+0x94>
		toggle_all(50);
 800c146:	2032      	movs	r0, #50	; 0x32
}
 800c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		toggle_all(50);
 800c14c:	f7ff bf9d 	b.w	800c08a <toggle_all>
}
 800c150:	bd10      	pop	{r4, pc}
 800c152:	bf00      	nop
 800c154:	0800f874 	.word	0x0800f874
 800c158:	0800f87b 	.word	0x0800f87b
 800c15c:	40020400 	.word	0x40020400
 800c160:	0800f883 	.word	0x0800f883
 800c164:	0800f88e 	.word	0x0800f88e
 800c168:	0800f895 	.word	0x0800f895
 800c16c:	0800f89d 	.word	0x0800f89d
 800c170:	0800f8a8 	.word	0x0800f8a8

0800c174 <mqtt_incoming_data_cb>:
{
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	4614      	mov	r4, r2
 800c178:	461d      	mov	r5, r3
  printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 800c17a:	461a      	mov	r2, r3
{
 800c17c:	460e      	mov	r6, r1
  printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 800c17e:	4817      	ldr	r0, [pc, #92]	; (800c1dc <mqtt_incoming_data_cb+0x68>)
 800c180:	4621      	mov	r1, r4
 800c182:	f000 fb75 	bl	800c870 <iprintf>
  if(flags & MQTT_DATA_FLAG_LAST) {
 800c186:	07eb      	lsls	r3, r5, #31
 800c188:	d526      	bpl.n	800c1d8 <mqtt_incoming_data_cb+0x64>
    if(inpub_id == 0) {
 800c18a:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <mqtt_incoming_data_cb+0x6c>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	b94b      	cbnz	r3, 800c1a4 <mqtt_incoming_data_cb+0x30>
      if(data[len-1] == 0) {
 800c190:	4434      	add	r4, r6
 800c192:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800c196:	b9fb      	cbnz	r3, 800c1d8 <mqtt_incoming_data_cb+0x64>
        printf("mqtt_incoming_data_cb: %s\n", (const char *)data);
 800c198:	4631      	mov	r1, r6
 800c19a:	4812      	ldr	r0, [pc, #72]	; (800c1e4 <mqtt_incoming_data_cb+0x70>)
}
 800c19c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printf("mqtt_incoming_data_cb: %s\n", (const char *)data);
 800c1a0:	f000 bb66 	b.w	800c870 <iprintf>
    } else if(inpub_id == 1) {
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d112      	bne.n	800c1ce <mqtt_incoming_data_cb+0x5a>
    	char * new_data = (char*)malloc(len+1 * sizeof(char));
 800c1a8:	1c60      	adds	r0, r4, #1
 800c1aa:	f000 fa8f 	bl	800c6cc <malloc>
    	strncpy(new_data, (const char*)data, len);
 800c1ae:	4622      	mov	r2, r4
    	char * new_data = (char*)malloc(len+1 * sizeof(char));
 800c1b0:	4605      	mov	r5, r0
    	strncpy(new_data, (const char*)data, len);
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	f000 fc30 	bl	800ca18 <strncpy>
    	new_data[len] = '\0';
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	552b      	strb	r3, [r5, r4]
    	printf("Diode: %s\n", new_data);
 800c1bc:	4629      	mov	r1, r5
 800c1be:	480a      	ldr	r0, [pc, #40]	; (800c1e8 <mqtt_incoming_data_cb+0x74>)
 800c1c0:	f000 fb56 	bl	800c870 <iprintf>
    	handle_diode(new_data);
 800c1c4:	4628      	mov	r0, r5
}
 800c1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	handle_diode(new_data);
 800c1ca:	f7ff bf77 	b.w	800c0bc <handle_diode>
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
 800c1ce:	4807      	ldr	r0, [pc, #28]	; (800c1ec <mqtt_incoming_data_cb+0x78>)
}
 800c1d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
 800c1d4:	f000 bbd4 	b.w	800c980 <puts>
}
 800c1d8:	bd70      	pop	{r4, r5, r6, pc}
 800c1da:	bf00      	nop
 800c1dc:	0800f943 	.word	0x0800f943
 800c1e0:	2000838c 	.word	0x2000838c
 800c1e4:	0800f976 	.word	0x0800f976
 800c1e8:	0800f991 	.word	0x0800f991
 800c1ec:	0800f99c 	.word	0x0800f99c

0800c1f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800c1f0:	6802      	ldr	r2, [r0, #0]
 800c1f2:	4b03      	ldr	r3, [pc, #12]	; (800c200 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d101      	bne.n	800c1fc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800c1f8:	f7f4 b9fc 	b.w	80005f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	40001000 	.word	0x40001000

0800c204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c204:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c206:	4b23      	ldr	r3, [pc, #140]	; (800c294 <HAL_MspInit+0x90>)
 800c208:	2400      	movs	r4, #0
 800c20a:	9400      	str	r4, [sp, #0]
 800c20c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c20e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c212:	645a      	str	r2, [r3, #68]	; 0x44
 800c214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c216:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c21a:	9200      	str	r2, [sp, #0]
 800c21c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c21e:	9401      	str	r4, [sp, #4]
 800c220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c222:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c226:	641a      	str	r2, [r3, #64]	; 0x40
 800c228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c22e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c230:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800c232:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c234:	f7f4 fa04 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800c238:	4622      	mov	r2, r4
 800c23a:	4621      	mov	r1, r4
 800c23c:	f06f 000b 	mvn.w	r0, #11
 800c240:	f7f4 fa10 	bl	8000664 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800c244:	4622      	mov	r2, r4
 800c246:	4621      	mov	r1, r4
 800c248:	f06f 000a 	mvn.w	r0, #10
 800c24c:	f7f4 fa0a 	bl	8000664 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800c250:	4622      	mov	r2, r4
 800c252:	4621      	mov	r1, r4
 800c254:	f06f 0009 	mvn.w	r0, #9
 800c258:	f7f4 fa04 	bl	8000664 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800c25c:	4622      	mov	r2, r4
 800c25e:	4621      	mov	r1, r4
 800c260:	f06f 0004 	mvn.w	r0, #4
 800c264:	f7f4 f9fe 	bl	8000664 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800c268:	4622      	mov	r2, r4
 800c26a:	4621      	mov	r1, r4
 800c26c:	f06f 0003 	mvn.w	r0, #3
 800c270:	f7f4 f9f8 	bl	8000664 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c274:	4622      	mov	r2, r4
 800c276:	210f      	movs	r1, #15
 800c278:	f06f 0001 	mvn.w	r0, #1
 800c27c:	f7f4 f9f2 	bl	8000664 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800c280:	4622      	mov	r2, r4
 800c282:	210f      	movs	r1, #15
 800c284:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c288:	b002      	add	sp, #8
 800c28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800c28e:	f7f4 b9e9 	b.w	8000664 <HAL_NVIC_SetPriority>
 800c292:	bf00      	nop
 800c294:	40023800 	.word	0x40023800

0800c298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800c29a:	6802      	ldr	r2, [r0, #0]
 800c29c:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <HAL_UART_MspInit+0x48>)
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d11a      	bne.n	800c2d8 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2a8:	480f      	ldr	r0, [pc, #60]	; (800c2e8 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800c2aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c2b0:	641a      	str	r2, [r3, #64]	; 0x40
 800c2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c2c0:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2c2:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c2ce:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2d0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c2d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2d4:	f7f4 fddc 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c2d8:	b007      	add	sp, #28
 800c2da:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2de:	bf00      	nop
 800c2e0:	40004800 	.word	0x40004800
 800c2e4:	40023800 	.word	0x40023800
 800c2e8:	40020c00 	.word	0x40020c00

0800c2ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c2ec:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c2ee:	4601      	mov	r1, r0
{
 800c2f0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2036      	movs	r0, #54	; 0x36
 800c2f6:	f7f4 f9b5 	bl	8000664 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c2fa:	2036      	movs	r0, #54	; 0x36
 800c2fc:	f7f4 f9e6 	bl	80006cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c300:	2500      	movs	r5, #0
 800c302:	4b15      	ldr	r3, [pc, #84]	; (800c358 <HAL_InitTick+0x6c>)
 800c304:	9502      	str	r5, [sp, #8]
 800c306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c308:	4c14      	ldr	r4, [pc, #80]	; (800c35c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c30a:	f042 0210 	orr.w	r2, r2, #16
 800c30e:	641a      	str	r2, [r3, #64]	; 0x40
 800c310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c312:	f003 0310 	and.w	r3, r3, #16
 800c316:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c318:	a901      	add	r1, sp, #4
 800c31a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c31c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c31e:	f7f5 fc41 	bl	8001ba4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c322:	f7f5 fc1f 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800c326:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <HAL_InitTick+0x74>)
 800c328:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c32a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800c32e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c330:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c332:	4b0c      	ldr	r3, [pc, #48]	; (800c364 <HAL_InitTick+0x78>)
 800c334:	fbb0 f0f3 	udiv	r0, r0, r3
 800c338:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800c33a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c33c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800c33e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c340:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c342:	f7f5 fd61 	bl	8001e08 <HAL_TIM_Base_Init>
 800c346:	b920      	cbnz	r0, 800c352 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c348:	4620      	mov	r0, r4
 800c34a:	f7f5 fc4a 	bl	8001be2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800c34e:	b009      	add	sp, #36	; 0x24
 800c350:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800c352:	2001      	movs	r0, #1
 800c354:	e7fb      	b.n	800c34e <HAL_InitTick+0x62>
 800c356:	bf00      	nop
 800c358:	40023800 	.word	0x40023800
 800c35c:	2000ec80 	.word	0x2000ec80
 800c360:	40001000 	.word	0x40001000
 800c364:	000f4240 	.word	0x000f4240

0800c368 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800c368:	f7f6 ba2e 	b.w	80027c8 <osSystickHandler>

0800c36c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c36c:	4801      	ldr	r0, [pc, #4]	; (800c374 <TIM6_DAC_IRQHandler+0x8>)
 800c36e:	f7f5 bc47 	b.w	8001c00 <HAL_TIM_IRQHandler>
 800c372:	bf00      	nop
 800c374:	2000ec80 	.word	0x2000ec80

0800c378 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800c378:	4801      	ldr	r0, [pc, #4]	; (800c380 <ETH_IRQHandler+0x8>)
 800c37a:	f7f4 bba8 	b.w	8000ace <HAL_ETH_IRQHandler>
 800c37e:	bf00      	nop
 800c380:	2000d3e4 	.word	0x2000d3e4

0800c384 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800c384:	4801      	ldr	r0, [pc, #4]	; (800c38c <OTG_FS_IRQHandler+0x8>)
 800c386:	f7f4 be75 	b.w	8001074 <HAL_HCD_IRQHandler>
 800c38a:	bf00      	nop
 800c38c:	2000ecbc 	.word	0x2000ecbc

0800c390 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <_sbrk+0x30>)
 800c392:	6819      	ldr	r1, [r3, #0]
{
 800c394:	4602      	mov	r2, r0
	if (heap_end == 0)
 800c396:	b909      	cbnz	r1, 800c39c <_sbrk+0xc>
		heap_end = &end;
 800c398:	490a      	ldr	r1, [pc, #40]	; (800c3c4 <_sbrk+0x34>)
 800c39a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c39c:	490a      	ldr	r1, [pc, #40]	; (800c3c8 <_sbrk+0x38>)
	prev_heap_end = heap_end;
 800c39e:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c3a0:	6809      	ldr	r1, [r1, #0]
 800c3a2:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800c3a4:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 800c3a6:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 800c3aa:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 800c3ac:	bf89      	itett	hi
 800c3ae:	4b07      	ldrhi	r3, [pc, #28]	; (800c3cc <_sbrk+0x3c>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800c3b0:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800c3b2:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800c3b4:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800c3b8:	bf88      	it	hi
 800c3ba:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	20008390 	.word	0x20008390
 800c3c4:	2000ef54 	.word	0x2000ef54
 800c3c8:	e000ed08 	.word	0xe000ed08
 800c3cc:	2000bb0c 	.word	0x2000bb0c

0800c3d0 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	460e      	mov	r6, r1
 800c3d4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	1ba3      	subs	r3, r4, r6
 800c3da:	429d      	cmp	r5, r3
 800c3dc:	dc01      	bgt.n	800c3e2 <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 800c3de:	4628      	mov	r0, r5
 800c3e0:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 800c3e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3e6:	f7ff fa33 	bl	800b850 <__io_putchar>
 800c3ea:	e7f5      	b.n	800c3d8 <_write+0x8>

0800c3ec <_close>:

int _close(int file)
{
	return -1;
}
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	4770      	bx	lr

0800c3f2 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800c3f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3f6:	604b      	str	r3, [r1, #4]
	return 0;
}
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	4770      	bx	lr

0800c3fc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	4770      	bx	lr

0800c400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800c400:	2000      	movs	r0, #0
 800c402:	4770      	bx	lr

0800c404 <_read>:

int _read(int file, char *ptr, int len)
{
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	460e      	mov	r6, r1
 800c408:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c40a:	460c      	mov	r4, r1
 800c40c:	1ba3      	subs	r3, r4, r6
 800c40e:	429d      	cmp	r5, r3
 800c410:	dc01      	bgt.n	800c416 <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800c412:	4628      	mov	r0, r5
 800c414:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800c416:	f3af 8000 	nop.w
 800c41a:	f804 0b01 	strb.w	r0, [r4], #1
 800c41e:	e7f5      	b.n	800c40c <_read+0x8>

0800c420 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c420:	490f      	ldr	r1, [pc, #60]	; (800c460 <SystemInit+0x40>)
 800c422:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c42a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c42e:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <SystemInit+0x44>)
 800c430:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c432:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800c434:	f042 0201 	orr.w	r2, r2, #1
 800c438:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800c43a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c442:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c446:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c448:	4a07      	ldr	r2, [pc, #28]	; (800c468 <SystemInit+0x48>)
 800c44a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c452:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c454:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c456:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c45a:	608b      	str	r3, [r1, #8]
#endif
}
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	e000ed00 	.word	0xe000ed00
 800c464:	40023800 	.word	0x40023800
 800c468:	24003010 	.word	0x24003010

0800c46c <xputs>:




void xputs (const char* str)
{
 800c46c:	b510      	push	{r4, lr}
 800c46e:	1e44      	subs	r4, r0, #1
	while (*str)
 800c470:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800c474:	b900      	cbnz	r0, 800c478 <xputs+0xc>
		xputc(*str++);
}
 800c476:	bd10      	pop	{r4, pc}
	debug_chr(c);
 800c478:	f7ff f9fc 	bl	800b874 <debug_chr>
 800c47c:	e7f8      	b.n	800c470 <xputs+0x4>

0800c47e <xitoa>:




void xitoa (long val, int radix, int len)
{
 800c47e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 800c480:	2900      	cmp	r1, #0
{
 800c482:	b087      	sub	sp, #28
	if (radix < 0) {
 800c484:	da39      	bge.n	800c4fa <xitoa+0x7c>
		radix = -radix;
		if (val < 0) {
 800c486:	2800      	cmp	r0, #0
		radix = -radix;
 800c488:	f1c1 0100 	rsb	r1, r1, #0
		if (val < 0) {
 800c48c:	da35      	bge.n	800c4fa <xitoa+0x7c>
			val = -val;
 800c48e:	4240      	negs	r0, r0
			sgn = '-';
 800c490:	272d      	movs	r7, #45	; 0x2d
		}
	}
	v = val;
	r = radix;
	if (len < 0) {
 800c492:	2a00      	cmp	r2, #0
		len = -len;
 800c494:	bfba      	itte	lt
 800c496:	4252      	neglt	r2, r2
		pad = '0';
 800c498:	2630      	movlt	r6, #48	; 0x30
	uint8_t c, r, sgn = 0, pad = ' ';
 800c49a:	2620      	movge	r6, #32
	}
	if (len > 20) return;
 800c49c:	2a14      	cmp	r2, #20
 800c49e:	dc2a      	bgt.n	800c4f6 <xitoa+0x78>
	uint8_t s[20], i = 0;
 800c4a0:	2500      	movs	r5, #0
	do {
		c = (uint8_t)(v % r);
 800c4a2:	b2c9      	uxtb	r1, r1
 800c4a4:	fbb0 fcf1 	udiv	ip, r0, r1
 800c4a8:	fb01 001c 	mls	r0, r1, ip, r0
 800c4ac:	b2c4      	uxtb	r4, r0
		if (c >= 10) c += 7;
 800c4ae:	2809      	cmp	r0, #9
 800c4b0:	bf88      	it	hi
 800c4b2:	3407      	addhi	r4, #7
		c += '0';
		s[i++] = c;
 800c4b4:	a806      	add	r0, sp, #24
 800c4b6:	4428      	add	r0, r5
		if (c >= 10) c += 7;
 800c4b8:	bf88      	it	hi
 800c4ba:	b2e4      	uxtbhi	r4, r4
		c += '0';
 800c4bc:	3430      	adds	r4, #48	; 0x30
		s[i++] = c;
 800c4be:	1c6b      	adds	r3, r5, #1
 800c4c0:	f800 4c14 	strb.w	r4, [r0, #-20]
		v /= r;
 800c4c4:	4660      	mov	r0, ip
		s[i++] = c;
 800c4c6:	b2db      	uxtb	r3, r3
	} while (v);
 800c4c8:	b9c8      	cbnz	r0, 800c4fe <xitoa+0x80>
	if (sgn) s[i++] = sgn;
 800c4ca:	b12f      	cbz	r7, 800c4d8 <xitoa+0x5a>
 800c4cc:	a906      	add	r1, sp, #24
 800c4ce:	440b      	add	r3, r1
 800c4d0:	3502      	adds	r5, #2
 800c4d2:	f803 7c14 	strb.w	r7, [r3, #-20]
 800c4d6:	b2eb      	uxtb	r3, r5
	while (i < len)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	4619      	mov	r1, r3
 800c4dc:	db11      	blt.n	800c502 <xitoa+0x84>
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	aa01      	add	r2, sp, #4
 800c4e2:	fa52 f483 	uxtab	r4, r2, r3
 800c4e6:	f10d 0503 	add.w	r5, sp, #3
	debug_chr(c);
 800c4ea:	f814 0901 	ldrb.w	r0, [r4], #-1
 800c4ee:	f7ff f9c1 	bl	800b874 <debug_chr>
		s[i++] = pad;
	do
		xputc(s[--i]);
	while (i);
 800c4f2:	42a5      	cmp	r5, r4
 800c4f4:	d1f9      	bne.n	800c4ea <xitoa+0x6c>
}
 800c4f6:	b007      	add	sp, #28
 800c4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t c, r, sgn = 0, pad = ' ';
 800c4fa:	2700      	movs	r7, #0
 800c4fc:	e7c9      	b.n	800c492 <xitoa+0x14>
		s[i++] = c;
 800c4fe:	461d      	mov	r5, r3
 800c500:	e7d0      	b.n	800c4a4 <xitoa+0x26>
		s[i++] = pad;
 800c502:	a806      	add	r0, sp, #24
 800c504:	4401      	add	r1, r0
 800c506:	3301      	adds	r3, #1
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	f801 6c14 	strb.w	r6, [r1, #-20]
 800c50e:	e7e3      	b.n	800c4d8 <xitoa+0x5a>

0800c510 <xprintf>:

void xprintf (const char* str, ...)
{
 800c510:	b40f      	push	{r0, r1, r2, r3}
 800c512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c514:	ab08      	add	r3, sp, #32
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
			w += w * 10 + (d - '0');
 800c516:	260a      	movs	r6, #10
{
 800c518:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(arp, str);
 800c51c:	9301      	str	r3, [sp, #4]
	while ((d = *str++) != 0) {
 800c51e:	7820      	ldrb	r0, [r4, #0]
 800c520:	2800      	cmp	r0, #0
 800c522:	d03c      	beq.n	800c59e <xprintf+0x8e>
		if (d != '%') {
 800c524:	2825      	cmp	r0, #37	; 0x25
 800c526:	d003      	beq.n	800c530 <xprintf+0x20>
	while ((d = *str++) != 0) {
 800c528:	3401      	adds	r4, #1
	debug_chr(c);
 800c52a:	f7ff f9a3 	bl	800b874 <debug_chr>
			xputs(va_arg(arp, char*));
			continue;
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
 800c52e:	e7f6      	b.n	800c51e <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 800c530:	7863      	ldrb	r3, [r4, #1]
		if (d == '0') {
 800c532:	2b30      	cmp	r3, #48	; 0x30
 800c534:	d11f      	bne.n	800c576 <xprintf+0x66>
			d = *str++; s = 1;
 800c536:	78a3      	ldrb	r3, [r4, #2]
 800c538:	2001      	movs	r0, #1
 800c53a:	3403      	adds	r4, #3
		d = *str++; w = r = s = l = 0;
 800c53c:	2200      	movs	r2, #0
 800c53e:	e004      	b.n	800c54a <xprintf+0x3a>
			w += w * 10 + (d - '0');
 800c540:	fb06 1102 	mla	r1, r6, r2, r1
			d = *str++;
 800c544:	f814 3b01 	ldrb.w	r3, [r4], #1
			w += w * 10 + (d - '0');
 800c548:	440a      	add	r2, r1
		while ((d >= '0')&&(d <= '9')) {
 800c54a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c54e:	2909      	cmp	r1, #9
 800c550:	d9f6      	bls.n	800c540 <xprintf+0x30>
		if (s) w = -w;
 800c552:	b100      	cbz	r0, 800c556 <xprintf+0x46>
 800c554:	4252      	negs	r2, r2
		if (d == 'l') {
 800c556:	2b6c      	cmp	r3, #108	; 0x6c
			d = *str++;
 800c558:	bf03      	ittte	eq
 800c55a:	7823      	ldrbeq	r3, [r4, #0]
			l = 1;
 800c55c:	2501      	moveq	r5, #1
			d = *str++;
 800c55e:	3401      	addeq	r4, #1
		d = *str++; w = r = s = l = 0;
 800c560:	2500      	movne	r5, #0
		if (!d) break;
 800c562:	b1e3      	cbz	r3, 800c59e <xprintf+0x8e>
		if (d == 's') {
 800c564:	2b73      	cmp	r3, #115	; 0x73
 800c566:	d109      	bne.n	800c57c <xprintf+0x6c>
			xputs(va_arg(arp, char*));
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	1d1a      	adds	r2, r3, #4
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	9201      	str	r2, [sp, #4]
 800c570:	f7ff ff7c 	bl	800c46c <xputs>
			continue;
 800c574:	e7d3      	b.n	800c51e <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 800c576:	3402      	adds	r4, #2
 800c578:	2000      	movs	r0, #0
 800c57a:	e7df      	b.n	800c53c <xprintf+0x2c>
		if (d == 'c') {
 800c57c:	2b63      	cmp	r3, #99	; 0x63
 800c57e:	d104      	bne.n	800c58a <xprintf+0x7a>
			xputc((char)va_arg(arp, int));
 800c580:	9b01      	ldr	r3, [sp, #4]
 800c582:	1d1a      	adds	r2, r3, #4
 800c584:	9201      	str	r2, [sp, #4]
	debug_chr(c);
 800c586:	7818      	ldrb	r0, [r3, #0]
 800c588:	e7cf      	b.n	800c52a <xprintf+0x1a>
		}
		if (d == 'u') r = 10;
 800c58a:	2b75      	cmp	r3, #117	; 0x75
 800c58c:	d00c      	beq.n	800c5a8 <xprintf+0x98>
		if (d == 'd') r = -10;
 800c58e:	2b64      	cmp	r3, #100	; 0x64
 800c590:	d016      	beq.n	800c5c0 <xprintf+0xb0>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 800c592:	2b58      	cmp	r3, #88	; 0x58
 800c594:	d01d      	beq.n	800c5d2 <xprintf+0xc2>
 800c596:	2b78      	cmp	r3, #120	; 0x78
 800c598:	d01b      	beq.n	800c5d2 <xprintf+0xc2>
		if (d == 'b') r = 2;
 800c59a:	2b62      	cmp	r3, #98	; 0x62
 800c59c:	d017      	beq.n	800c5ce <xprintf+0xbe>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 800c59e:	b003      	add	sp, #12
 800c5a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c5a4:	b004      	add	sp, #16
 800c5a6:	4770      	bx	lr
		if (d == 'u') r = 10;
 800c5a8:	210a      	movs	r1, #10
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	1d1f      	adds	r7, r3, #4
 800c5ae:	6818      	ldr	r0, [r3, #0]
		if (l) {
 800c5b0:	b14d      	cbz	r5, 800c5c6 <xprintf+0xb6>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 800c5b2:	9b01      	ldr	r3, [sp, #4]
 800c5b4:	1d18      	adds	r0, r3, #4
 800c5b6:	9001      	str	r0, [sp, #4]
 800c5b8:	6818      	ldr	r0, [r3, #0]
				xitoa((long)va_arg(arp, int), r, w);
 800c5ba:	f7ff ff60 	bl	800c47e <xitoa>
 800c5be:	e7ae      	b.n	800c51e <xprintf+0xe>
		if (d == 'd') r = -10;
 800c5c0:	f06f 0109 	mvn.w	r1, #9
 800c5c4:	e7f1      	b.n	800c5aa <xprintf+0x9a>
			if (r > 0)
 800c5c6:	2900      	cmp	r1, #0
 800c5c8:	dcf3      	bgt.n	800c5b2 <xprintf+0xa2>
				xitoa((long)va_arg(arp, int), r, w);
 800c5ca:	9701      	str	r7, [sp, #4]
 800c5cc:	e7f5      	b.n	800c5ba <xprintf+0xaa>
		if (d == 'b') r = 2;
 800c5ce:	2102      	movs	r1, #2
 800c5d0:	e7ef      	b.n	800c5b2 <xprintf+0xa2>
		if (l) {
 800c5d2:	2110      	movs	r1, #16
 800c5d4:	e7ed      	b.n	800c5b2 <xprintf+0xa2>

0800c5d6 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800c5d6:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800c5da:	f7f5 bf6c 	b.w	80024b6 <USBH_LL_IncTimer>

0800c5de <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800c5de:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800c5e2:	f7f5 bf76 	b.w	80024d2 <USBH_LL_Connect>

0800c5e6 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800c5e6:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800c5ea:	f7f5 bf8d 	b.w	8002508 <USBH_LL_Disconnect>

0800c5ee <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c5ee:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800c5f2:	f7f5 bfb3 	b.w	800255c <USBH_LL_NotifyURBChange>
	...

0800c5f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c5f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800c5fa:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800c5fe:	f7f5 f83b 	bl	8001678 <HAL_HCD_Start>
 800c602:	2803      	cmp	r0, #3
 800c604:	bf96      	itet	ls
 800c606:	4b02      	ldrls	r3, [pc, #8]	; (800c610 <USBH_LL_Start+0x18>)
 800c608:	2002      	movhi	r0, #2
 800c60a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c60c:	bd08      	pop	{r3, pc}
 800c60e:	bf00      	nop
 800c610:	0800fa48 	.word	0x0800fa48

0800c614 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c614:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800c616:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800c61a:	f7f5 f843 	bl	80016a4 <HAL_HCD_Stop>
 800c61e:	2803      	cmp	r0, #3
 800c620:	bf96      	itet	ls
 800c622:	4b02      	ldrls	r3, [pc, #8]	; (800c62c <USBH_LL_Stop+0x18>)
 800c624:	2002      	movhi	r0, #2
 800c626:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c628:	bd08      	pop	{r3, pc}
 800c62a:	bf00      	nop
 800c62c:	0800fa48 	.word	0x0800fa48

0800c630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800c630:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c668 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c636:	e003      	b.n	800c640 <LoopCopyDataInit>

0800c638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c63a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c63c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c63e:	3104      	adds	r1, #4

0800c640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c640:	480b      	ldr	r0, [pc, #44]	; (800c670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c642:	4b0c      	ldr	r3, [pc, #48]	; (800c674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c648:	d3f6      	bcc.n	800c638 <CopyDataInit>
  ldr  r2, =_sbss
 800c64a:	4a0b      	ldr	r2, [pc, #44]	; (800c678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c64c:	e002      	b.n	800c654 <LoopFillZerobss>

0800c64e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c64e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c650:	f842 3b04 	str.w	r3, [r2], #4

0800c654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c658:	d3f9      	bcc.n	800c64e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c65a:	f7ff fee1 	bl	800c420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c65e:	f000 f811 	bl	800c684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c662:	f7ff fb95 	bl	800bd90 <main>
  bx  lr    
 800c666:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800c668:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800c66c:	0800faf4 	.word	0x0800faf4
  ldr  r0, =_sdata
 800c670:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c674:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800c678:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800c67c:	2000ef54 	.word	0x2000ef54

0800c680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c680:	e7fe      	b.n	800c680 <ADC_IRQHandler>
	...

0800c684 <__libc_init_array>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	4e0d      	ldr	r6, [pc, #52]	; (800c6bc <__libc_init_array+0x38>)
 800c688:	4c0d      	ldr	r4, [pc, #52]	; (800c6c0 <__libc_init_array+0x3c>)
 800c68a:	1ba4      	subs	r4, r4, r6
 800c68c:	10a4      	asrs	r4, r4, #2
 800c68e:	2500      	movs	r5, #0
 800c690:	42a5      	cmp	r5, r4
 800c692:	d109      	bne.n	800c6a8 <__libc_init_array+0x24>
 800c694:	4e0b      	ldr	r6, [pc, #44]	; (800c6c4 <__libc_init_array+0x40>)
 800c696:	4c0c      	ldr	r4, [pc, #48]	; (800c6c8 <__libc_init_array+0x44>)
 800c698:	f001 f81e 	bl	800d6d8 <_init>
 800c69c:	1ba4      	subs	r4, r4, r6
 800c69e:	10a4      	asrs	r4, r4, #2
 800c6a0:	2500      	movs	r5, #0
 800c6a2:	42a5      	cmp	r5, r4
 800c6a4:	d105      	bne.n	800c6b2 <__libc_init_array+0x2e>
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6ac:	4798      	blx	r3
 800c6ae:	3501      	adds	r5, #1
 800c6b0:	e7ee      	b.n	800c690 <__libc_init_array+0xc>
 800c6b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6b6:	4798      	blx	r3
 800c6b8:	3501      	adds	r5, #1
 800c6ba:	e7f2      	b.n	800c6a2 <__libc_init_array+0x1e>
 800c6bc:	0800faec 	.word	0x0800faec
 800c6c0:	0800faec 	.word	0x0800faec
 800c6c4:	0800faec 	.word	0x0800faec
 800c6c8:	0800faf0 	.word	0x0800faf0

0800c6cc <malloc>:
 800c6cc:	4b02      	ldr	r3, [pc, #8]	; (800c6d8 <malloc+0xc>)
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f000 b873 	b.w	800c7bc <_malloc_r>
 800c6d6:	bf00      	nop
 800c6d8:	20000014 	.word	0x20000014

0800c6dc <memcmp>:
 800c6dc:	b530      	push	{r4, r5, lr}
 800c6de:	2400      	movs	r4, #0
 800c6e0:	42a2      	cmp	r2, r4
 800c6e2:	d101      	bne.n	800c6e8 <memcmp+0xc>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e007      	b.n	800c6f8 <memcmp+0x1c>
 800c6e8:	5d03      	ldrb	r3, [r0, r4]
 800c6ea:	3401      	adds	r4, #1
 800c6ec:	190d      	adds	r5, r1, r4
 800c6ee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c6f2:	42ab      	cmp	r3, r5
 800c6f4:	d0f4      	beq.n	800c6e0 <memcmp+0x4>
 800c6f6:	1b58      	subs	r0, r3, r5
 800c6f8:	bd30      	pop	{r4, r5, pc}

0800c6fa <memcpy>:
 800c6fa:	b510      	push	{r4, lr}
 800c6fc:	1e43      	subs	r3, r0, #1
 800c6fe:	440a      	add	r2, r1
 800c700:	4291      	cmp	r1, r2
 800c702:	d100      	bne.n	800c706 <memcpy+0xc>
 800c704:	bd10      	pop	{r4, pc}
 800c706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c70e:	e7f7      	b.n	800c700 <memcpy+0x6>

0800c710 <memset>:
 800c710:	4402      	add	r2, r0
 800c712:	4603      	mov	r3, r0
 800c714:	4293      	cmp	r3, r2
 800c716:	d100      	bne.n	800c71a <memset+0xa>
 800c718:	4770      	bx	lr
 800c71a:	f803 1b01 	strb.w	r1, [r3], #1
 800c71e:	e7f9      	b.n	800c714 <memset+0x4>

0800c720 <_free_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4605      	mov	r5, r0
 800c724:	2900      	cmp	r1, #0
 800c726:	d045      	beq.n	800c7b4 <_free_r+0x94>
 800c728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c72c:	1f0c      	subs	r4, r1, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bfb8      	it	lt
 800c732:	18e4      	addlt	r4, r4, r3
 800c734:	f000 fc24 	bl	800cf80 <__malloc_lock>
 800c738:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <_free_r+0x98>)
 800c73a:	6813      	ldr	r3, [r2, #0]
 800c73c:	4610      	mov	r0, r2
 800c73e:	b933      	cbnz	r3, 800c74e <_free_r+0x2e>
 800c740:	6063      	str	r3, [r4, #4]
 800c742:	6014      	str	r4, [r2, #0]
 800c744:	4628      	mov	r0, r5
 800c746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74a:	f000 bc1a 	b.w	800cf82 <__malloc_unlock>
 800c74e:	42a3      	cmp	r3, r4
 800c750:	d90c      	bls.n	800c76c <_free_r+0x4c>
 800c752:	6821      	ldr	r1, [r4, #0]
 800c754:	1862      	adds	r2, r4, r1
 800c756:	4293      	cmp	r3, r2
 800c758:	bf04      	itt	eq
 800c75a:	681a      	ldreq	r2, [r3, #0]
 800c75c:	685b      	ldreq	r3, [r3, #4]
 800c75e:	6063      	str	r3, [r4, #4]
 800c760:	bf04      	itt	eq
 800c762:	1852      	addeq	r2, r2, r1
 800c764:	6022      	streq	r2, [r4, #0]
 800c766:	6004      	str	r4, [r0, #0]
 800c768:	e7ec      	b.n	800c744 <_free_r+0x24>
 800c76a:	4613      	mov	r3, r2
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	b10a      	cbz	r2, 800c774 <_free_r+0x54>
 800c770:	42a2      	cmp	r2, r4
 800c772:	d9fa      	bls.n	800c76a <_free_r+0x4a>
 800c774:	6819      	ldr	r1, [r3, #0]
 800c776:	1858      	adds	r0, r3, r1
 800c778:	42a0      	cmp	r0, r4
 800c77a:	d10b      	bne.n	800c794 <_free_r+0x74>
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	4401      	add	r1, r0
 800c780:	1858      	adds	r0, r3, r1
 800c782:	4282      	cmp	r2, r0
 800c784:	6019      	str	r1, [r3, #0]
 800c786:	d1dd      	bne.n	800c744 <_free_r+0x24>
 800c788:	6810      	ldr	r0, [r2, #0]
 800c78a:	6852      	ldr	r2, [r2, #4]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	4401      	add	r1, r0
 800c790:	6019      	str	r1, [r3, #0]
 800c792:	e7d7      	b.n	800c744 <_free_r+0x24>
 800c794:	d902      	bls.n	800c79c <_free_r+0x7c>
 800c796:	230c      	movs	r3, #12
 800c798:	602b      	str	r3, [r5, #0]
 800c79a:	e7d3      	b.n	800c744 <_free_r+0x24>
 800c79c:	6820      	ldr	r0, [r4, #0]
 800c79e:	1821      	adds	r1, r4, r0
 800c7a0:	428a      	cmp	r2, r1
 800c7a2:	bf04      	itt	eq
 800c7a4:	6811      	ldreq	r1, [r2, #0]
 800c7a6:	6852      	ldreq	r2, [r2, #4]
 800c7a8:	6062      	str	r2, [r4, #4]
 800c7aa:	bf04      	itt	eq
 800c7ac:	1809      	addeq	r1, r1, r0
 800c7ae:	6021      	streq	r1, [r4, #0]
 800c7b0:	605c      	str	r4, [r3, #4]
 800c7b2:	e7c7      	b.n	800c744 <_free_r+0x24>
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20008394 	.word	0x20008394

0800c7bc <_malloc_r>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	1ccd      	adds	r5, r1, #3
 800c7c0:	f025 0503 	bic.w	r5, r5, #3
 800c7c4:	3508      	adds	r5, #8
 800c7c6:	2d0c      	cmp	r5, #12
 800c7c8:	bf38      	it	cc
 800c7ca:	250c      	movcc	r5, #12
 800c7cc:	2d00      	cmp	r5, #0
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	db01      	blt.n	800c7d6 <_malloc_r+0x1a>
 800c7d2:	42a9      	cmp	r1, r5
 800c7d4:	d903      	bls.n	800c7de <_malloc_r+0x22>
 800c7d6:	230c      	movs	r3, #12
 800c7d8:	6033      	str	r3, [r6, #0]
 800c7da:	2000      	movs	r0, #0
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
 800c7de:	f000 fbcf 	bl	800cf80 <__malloc_lock>
 800c7e2:	4a21      	ldr	r2, [pc, #132]	; (800c868 <_malloc_r+0xac>)
 800c7e4:	6814      	ldr	r4, [r2, #0]
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	b991      	cbnz	r1, 800c810 <_malloc_r+0x54>
 800c7ea:	4c20      	ldr	r4, [pc, #128]	; (800c86c <_malloc_r+0xb0>)
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	b91b      	cbnz	r3, 800c7f8 <_malloc_r+0x3c>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f901 	bl	800c9f8 <_sbrk_r>
 800c7f6:	6020      	str	r0, [r4, #0]
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 f8fc 	bl	800c9f8 <_sbrk_r>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d124      	bne.n	800c84e <_malloc_r+0x92>
 800c804:	230c      	movs	r3, #12
 800c806:	6033      	str	r3, [r6, #0]
 800c808:	4630      	mov	r0, r6
 800c80a:	f000 fbba 	bl	800cf82 <__malloc_unlock>
 800c80e:	e7e4      	b.n	800c7da <_malloc_r+0x1e>
 800c810:	680b      	ldr	r3, [r1, #0]
 800c812:	1b5b      	subs	r3, r3, r5
 800c814:	d418      	bmi.n	800c848 <_malloc_r+0x8c>
 800c816:	2b0b      	cmp	r3, #11
 800c818:	d90f      	bls.n	800c83a <_malloc_r+0x7e>
 800c81a:	600b      	str	r3, [r1, #0]
 800c81c:	50cd      	str	r5, [r1, r3]
 800c81e:	18cc      	adds	r4, r1, r3
 800c820:	4630      	mov	r0, r6
 800c822:	f000 fbae 	bl	800cf82 <__malloc_unlock>
 800c826:	f104 000b 	add.w	r0, r4, #11
 800c82a:	1d23      	adds	r3, r4, #4
 800c82c:	f020 0007 	bic.w	r0, r0, #7
 800c830:	1ac3      	subs	r3, r0, r3
 800c832:	d0d3      	beq.n	800c7dc <_malloc_r+0x20>
 800c834:	425a      	negs	r2, r3
 800c836:	50e2      	str	r2, [r4, r3]
 800c838:	e7d0      	b.n	800c7dc <_malloc_r+0x20>
 800c83a:	428c      	cmp	r4, r1
 800c83c:	684b      	ldr	r3, [r1, #4]
 800c83e:	bf16      	itet	ne
 800c840:	6063      	strne	r3, [r4, #4]
 800c842:	6013      	streq	r3, [r2, #0]
 800c844:	460c      	movne	r4, r1
 800c846:	e7eb      	b.n	800c820 <_malloc_r+0x64>
 800c848:	460c      	mov	r4, r1
 800c84a:	6849      	ldr	r1, [r1, #4]
 800c84c:	e7cc      	b.n	800c7e8 <_malloc_r+0x2c>
 800c84e:	1cc4      	adds	r4, r0, #3
 800c850:	f024 0403 	bic.w	r4, r4, #3
 800c854:	42a0      	cmp	r0, r4
 800c856:	d005      	beq.n	800c864 <_malloc_r+0xa8>
 800c858:	1a21      	subs	r1, r4, r0
 800c85a:	4630      	mov	r0, r6
 800c85c:	f000 f8cc 	bl	800c9f8 <_sbrk_r>
 800c860:	3001      	adds	r0, #1
 800c862:	d0cf      	beq.n	800c804 <_malloc_r+0x48>
 800c864:	6025      	str	r5, [r4, #0]
 800c866:	e7db      	b.n	800c820 <_malloc_r+0x64>
 800c868:	20008394 	.word	0x20008394
 800c86c:	20008398 	.word	0x20008398

0800c870 <iprintf>:
 800c870:	b40f      	push	{r0, r1, r2, r3}
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <iprintf+0x2c>)
 800c874:	b513      	push	{r0, r1, r4, lr}
 800c876:	681c      	ldr	r4, [r3, #0]
 800c878:	b124      	cbz	r4, 800c884 <iprintf+0x14>
 800c87a:	69a3      	ldr	r3, [r4, #24]
 800c87c:	b913      	cbnz	r3, 800c884 <iprintf+0x14>
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 fa90 	bl	800cda4 <__sinit>
 800c884:	ab05      	add	r3, sp, #20
 800c886:	9a04      	ldr	r2, [sp, #16]
 800c888:	68a1      	ldr	r1, [r4, #8]
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 fba3 	bl	800cfd8 <_vfiprintf_r>
 800c892:	b002      	add	sp, #8
 800c894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c898:	b004      	add	sp, #16
 800c89a:	4770      	bx	lr
 800c89c:	20000014 	.word	0x20000014

0800c8a0 <putchar>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4b08      	ldr	r3, [pc, #32]	; (800c8c4 <putchar+0x24>)
 800c8a4:	681c      	ldr	r4, [r3, #0]
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	b124      	cbz	r4, 800c8b4 <putchar+0x14>
 800c8aa:	69a3      	ldr	r3, [r4, #24]
 800c8ac:	b913      	cbnz	r3, 800c8b4 <putchar+0x14>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 fa78 	bl	800cda4 <__sinit>
 800c8b4:	68a2      	ldr	r2, [r4, #8]
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8be:	f000 be29 	b.w	800d514 <_putc_r>
 800c8c2:	bf00      	nop
 800c8c4:	20000014 	.word	0x20000014

0800c8c8 <_puts_r>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	460e      	mov	r6, r1
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	b118      	cbz	r0, 800c8d8 <_puts_r+0x10>
 800c8d0:	6983      	ldr	r3, [r0, #24]
 800c8d2:	b90b      	cbnz	r3, 800c8d8 <_puts_r+0x10>
 800c8d4:	f000 fa66 	bl	800cda4 <__sinit>
 800c8d8:	69ab      	ldr	r3, [r5, #24]
 800c8da:	68ac      	ldr	r4, [r5, #8]
 800c8dc:	b913      	cbnz	r3, 800c8e4 <_puts_r+0x1c>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 fa60 	bl	800cda4 <__sinit>
 800c8e4:	4b23      	ldr	r3, [pc, #140]	; (800c974 <_puts_r+0xac>)
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	d117      	bne.n	800c91a <_puts_r+0x52>
 800c8ea:	686c      	ldr	r4, [r5, #4]
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	071b      	lsls	r3, r3, #28
 800c8f0:	d51d      	bpl.n	800c92e <_puts_r+0x66>
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	b1db      	cbz	r3, 800c92e <_puts_r+0x66>
 800c8f6:	3e01      	subs	r6, #1
 800c8f8:	68a3      	ldr	r3, [r4, #8]
 800c8fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8fe:	3b01      	subs	r3, #1
 800c900:	60a3      	str	r3, [r4, #8]
 800c902:	b9e9      	cbnz	r1, 800c940 <_puts_r+0x78>
 800c904:	2b00      	cmp	r3, #0
 800c906:	da2e      	bge.n	800c966 <_puts_r+0x9e>
 800c908:	4622      	mov	r2, r4
 800c90a:	210a      	movs	r1, #10
 800c90c:	4628      	mov	r0, r5
 800c90e:	f000 f899 	bl	800ca44 <__swbuf_r>
 800c912:	3001      	adds	r0, #1
 800c914:	d011      	beq.n	800c93a <_puts_r+0x72>
 800c916:	200a      	movs	r0, #10
 800c918:	e011      	b.n	800c93e <_puts_r+0x76>
 800c91a:	4b17      	ldr	r3, [pc, #92]	; (800c978 <_puts_r+0xb0>)
 800c91c:	429c      	cmp	r4, r3
 800c91e:	d101      	bne.n	800c924 <_puts_r+0x5c>
 800c920:	68ac      	ldr	r4, [r5, #8]
 800c922:	e7e3      	b.n	800c8ec <_puts_r+0x24>
 800c924:	4b15      	ldr	r3, [pc, #84]	; (800c97c <_puts_r+0xb4>)
 800c926:	429c      	cmp	r4, r3
 800c928:	bf08      	it	eq
 800c92a:	68ec      	ldreq	r4, [r5, #12]
 800c92c:	e7de      	b.n	800c8ec <_puts_r+0x24>
 800c92e:	4621      	mov	r1, r4
 800c930:	4628      	mov	r0, r5
 800c932:	f000 f8d9 	bl	800cae8 <__swsetup_r>
 800c936:	2800      	cmp	r0, #0
 800c938:	d0dd      	beq.n	800c8f6 <_puts_r+0x2e>
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295
 800c93e:	bd70      	pop	{r4, r5, r6, pc}
 800c940:	2b00      	cmp	r3, #0
 800c942:	da04      	bge.n	800c94e <_puts_r+0x86>
 800c944:	69a2      	ldr	r2, [r4, #24]
 800c946:	429a      	cmp	r2, r3
 800c948:	dc06      	bgt.n	800c958 <_puts_r+0x90>
 800c94a:	290a      	cmp	r1, #10
 800c94c:	d004      	beq.n	800c958 <_puts_r+0x90>
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	6022      	str	r2, [r4, #0]
 800c954:	7019      	strb	r1, [r3, #0]
 800c956:	e7cf      	b.n	800c8f8 <_puts_r+0x30>
 800c958:	4622      	mov	r2, r4
 800c95a:	4628      	mov	r0, r5
 800c95c:	f000 f872 	bl	800ca44 <__swbuf_r>
 800c960:	3001      	adds	r0, #1
 800c962:	d1c9      	bne.n	800c8f8 <_puts_r+0x30>
 800c964:	e7e9      	b.n	800c93a <_puts_r+0x72>
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	200a      	movs	r0, #10
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	6022      	str	r2, [r4, #0]
 800c96e:	7018      	strb	r0, [r3, #0]
 800c970:	e7e5      	b.n	800c93e <_puts_r+0x76>
 800c972:	bf00      	nop
 800c974:	0800fa70 	.word	0x0800fa70
 800c978:	0800fa90 	.word	0x0800fa90
 800c97c:	0800fa50 	.word	0x0800fa50

0800c980 <puts>:
 800c980:	4b02      	ldr	r3, [pc, #8]	; (800c98c <puts+0xc>)
 800c982:	4601      	mov	r1, r0
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	f7ff bf9f 	b.w	800c8c8 <_puts_r>
 800c98a:	bf00      	nop
 800c98c:	20000014 	.word	0x20000014

0800c990 <rand>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4b13      	ldr	r3, [pc, #76]	; (800c9e0 <rand+0x50>)
 800c994:	681c      	ldr	r4, [r3, #0]
 800c996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c998:	b97b      	cbnz	r3, 800c9ba <rand+0x2a>
 800c99a:	2018      	movs	r0, #24
 800c99c:	f7ff fe96 	bl	800c6cc <malloc>
 800c9a0:	4a10      	ldr	r2, [pc, #64]	; (800c9e4 <rand+0x54>)
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <rand+0x58>)
 800c9a4:	63a0      	str	r0, [r4, #56]	; 0x38
 800c9a6:	e9c0 2300 	strd	r2, r3, [r0]
 800c9aa:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <rand+0x5c>)
 800c9ac:	6083      	str	r3, [r0, #8]
 800c9ae:	230b      	movs	r3, #11
 800c9b0:	8183      	strh	r3, [r0, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c9ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c9bc:	480c      	ldr	r0, [pc, #48]	; (800c9f0 <rand+0x60>)
 800c9be:	690a      	ldr	r2, [r1, #16]
 800c9c0:	694b      	ldr	r3, [r1, #20]
 800c9c2:	4c0c      	ldr	r4, [pc, #48]	; (800c9f4 <rand+0x64>)
 800c9c4:	4350      	muls	r0, r2
 800c9c6:	fb04 0003 	mla	r0, r4, r3, r0
 800c9ca:	fba2 2304 	umull	r2, r3, r2, r4
 800c9ce:	4403      	add	r3, r0
 800c9d0:	1c54      	adds	r4, r2, #1
 800c9d2:	f143 0500 	adc.w	r5, r3, #0
 800c9d6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c9da:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	20000014 	.word	0x20000014
 800c9e4:	abcd330e 	.word	0xabcd330e
 800c9e8:	e66d1234 	.word	0xe66d1234
 800c9ec:	0005deec 	.word	0x0005deec
 800c9f0:	5851f42d 	.word	0x5851f42d
 800c9f4:	4c957f2d 	.word	0x4c957f2d

0800c9f8 <_sbrk_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4c06      	ldr	r4, [pc, #24]	; (800ca14 <_sbrk_r+0x1c>)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4605      	mov	r5, r0
 800ca00:	4608      	mov	r0, r1
 800ca02:	6023      	str	r3, [r4, #0]
 800ca04:	f7ff fcc4 	bl	800c390 <_sbrk>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_sbrk_r+0x1a>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_sbrk_r+0x1a>
 800ca10:	602b      	str	r3, [r5, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	2000bb0c 	.word	0x2000bb0c

0800ca18 <strncpy>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	3901      	subs	r1, #1
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	b902      	cbnz	r2, 800ca22 <strncpy+0xa>
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	4623      	mov	r3, r4
 800ca24:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ca28:	f803 5b01 	strb.w	r5, [r3], #1
 800ca2c:	1e56      	subs	r6, r2, #1
 800ca2e:	b92d      	cbnz	r5, 800ca3c <strncpy+0x24>
 800ca30:	4414      	add	r4, r2
 800ca32:	42a3      	cmp	r3, r4
 800ca34:	d0f4      	beq.n	800ca20 <strncpy+0x8>
 800ca36:	f803 5b01 	strb.w	r5, [r3], #1
 800ca3a:	e7fa      	b.n	800ca32 <strncpy+0x1a>
 800ca3c:	461c      	mov	r4, r3
 800ca3e:	4632      	mov	r2, r6
 800ca40:	e7ed      	b.n	800ca1e <strncpy+0x6>
	...

0800ca44 <__swbuf_r>:
 800ca44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca46:	460e      	mov	r6, r1
 800ca48:	4614      	mov	r4, r2
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	b118      	cbz	r0, 800ca56 <__swbuf_r+0x12>
 800ca4e:	6983      	ldr	r3, [r0, #24]
 800ca50:	b90b      	cbnz	r3, 800ca56 <__swbuf_r+0x12>
 800ca52:	f000 f9a7 	bl	800cda4 <__sinit>
 800ca56:	4b21      	ldr	r3, [pc, #132]	; (800cadc <__swbuf_r+0x98>)
 800ca58:	429c      	cmp	r4, r3
 800ca5a:	d12a      	bne.n	800cab2 <__swbuf_r+0x6e>
 800ca5c:	686c      	ldr	r4, [r5, #4]
 800ca5e:	69a3      	ldr	r3, [r4, #24]
 800ca60:	60a3      	str	r3, [r4, #8]
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	071a      	lsls	r2, r3, #28
 800ca66:	d52e      	bpl.n	800cac6 <__swbuf_r+0x82>
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	b363      	cbz	r3, 800cac6 <__swbuf_r+0x82>
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	6820      	ldr	r0, [r4, #0]
 800ca70:	1ac0      	subs	r0, r0, r3
 800ca72:	6963      	ldr	r3, [r4, #20]
 800ca74:	b2f6      	uxtb	r6, r6
 800ca76:	4283      	cmp	r3, r0
 800ca78:	4637      	mov	r7, r6
 800ca7a:	dc04      	bgt.n	800ca86 <__swbuf_r+0x42>
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f000 f926 	bl	800ccd0 <_fflush_r>
 800ca84:	bb28      	cbnz	r0, 800cad2 <__swbuf_r+0x8e>
 800ca86:	68a3      	ldr	r3, [r4, #8]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	60a3      	str	r3, [r4, #8]
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	6022      	str	r2, [r4, #0]
 800ca92:	701e      	strb	r6, [r3, #0]
 800ca94:	6963      	ldr	r3, [r4, #20]
 800ca96:	3001      	adds	r0, #1
 800ca98:	4283      	cmp	r3, r0
 800ca9a:	d004      	beq.n	800caa6 <__swbuf_r+0x62>
 800ca9c:	89a3      	ldrh	r3, [r4, #12]
 800ca9e:	07db      	lsls	r3, r3, #31
 800caa0:	d519      	bpl.n	800cad6 <__swbuf_r+0x92>
 800caa2:	2e0a      	cmp	r6, #10
 800caa4:	d117      	bne.n	800cad6 <__swbuf_r+0x92>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f000 f911 	bl	800ccd0 <_fflush_r>
 800caae:	b190      	cbz	r0, 800cad6 <__swbuf_r+0x92>
 800cab0:	e00f      	b.n	800cad2 <__swbuf_r+0x8e>
 800cab2:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <__swbuf_r+0x9c>)
 800cab4:	429c      	cmp	r4, r3
 800cab6:	d101      	bne.n	800cabc <__swbuf_r+0x78>
 800cab8:	68ac      	ldr	r4, [r5, #8]
 800caba:	e7d0      	b.n	800ca5e <__swbuf_r+0x1a>
 800cabc:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <__swbuf_r+0xa0>)
 800cabe:	429c      	cmp	r4, r3
 800cac0:	bf08      	it	eq
 800cac2:	68ec      	ldreq	r4, [r5, #12]
 800cac4:	e7cb      	b.n	800ca5e <__swbuf_r+0x1a>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4628      	mov	r0, r5
 800caca:	f000 f80d 	bl	800cae8 <__swsetup_r>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0cc      	beq.n	800ca6c <__swbuf_r+0x28>
 800cad2:	f04f 37ff 	mov.w	r7, #4294967295
 800cad6:	4638      	mov	r0, r7
 800cad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cada:	bf00      	nop
 800cadc:	0800fa70 	.word	0x0800fa70
 800cae0:	0800fa90 	.word	0x0800fa90
 800cae4:	0800fa50 	.word	0x0800fa50

0800cae8 <__swsetup_r>:
 800cae8:	4b32      	ldr	r3, [pc, #200]	; (800cbb4 <__swsetup_r+0xcc>)
 800caea:	b570      	push	{r4, r5, r6, lr}
 800caec:	681d      	ldr	r5, [r3, #0]
 800caee:	4606      	mov	r6, r0
 800caf0:	460c      	mov	r4, r1
 800caf2:	b125      	cbz	r5, 800cafe <__swsetup_r+0x16>
 800caf4:	69ab      	ldr	r3, [r5, #24]
 800caf6:	b913      	cbnz	r3, 800cafe <__swsetup_r+0x16>
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 f953 	bl	800cda4 <__sinit>
 800cafe:	4b2e      	ldr	r3, [pc, #184]	; (800cbb8 <__swsetup_r+0xd0>)
 800cb00:	429c      	cmp	r4, r3
 800cb02:	d10f      	bne.n	800cb24 <__swsetup_r+0x3c>
 800cb04:	686c      	ldr	r4, [r5, #4]
 800cb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	0715      	lsls	r5, r2, #28
 800cb0e:	d42c      	bmi.n	800cb6a <__swsetup_r+0x82>
 800cb10:	06d0      	lsls	r0, r2, #27
 800cb12:	d411      	bmi.n	800cb38 <__swsetup_r+0x50>
 800cb14:	2209      	movs	r2, #9
 800cb16:	6032      	str	r2, [r6, #0]
 800cb18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb22:	e03e      	b.n	800cba2 <__swsetup_r+0xba>
 800cb24:	4b25      	ldr	r3, [pc, #148]	; (800cbbc <__swsetup_r+0xd4>)
 800cb26:	429c      	cmp	r4, r3
 800cb28:	d101      	bne.n	800cb2e <__swsetup_r+0x46>
 800cb2a:	68ac      	ldr	r4, [r5, #8]
 800cb2c:	e7eb      	b.n	800cb06 <__swsetup_r+0x1e>
 800cb2e:	4b24      	ldr	r3, [pc, #144]	; (800cbc0 <__swsetup_r+0xd8>)
 800cb30:	429c      	cmp	r4, r3
 800cb32:	bf08      	it	eq
 800cb34:	68ec      	ldreq	r4, [r5, #12]
 800cb36:	e7e6      	b.n	800cb06 <__swsetup_r+0x1e>
 800cb38:	0751      	lsls	r1, r2, #29
 800cb3a:	d512      	bpl.n	800cb62 <__swsetup_r+0x7a>
 800cb3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb3e:	b141      	cbz	r1, 800cb52 <__swsetup_r+0x6a>
 800cb40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb44:	4299      	cmp	r1, r3
 800cb46:	d002      	beq.n	800cb4e <__swsetup_r+0x66>
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f7ff fde9 	bl	800c720 <_free_r>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	6363      	str	r3, [r4, #52]	; 0x34
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	6063      	str	r3, [r4, #4]
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	f043 0308 	orr.w	r3, r3, #8
 800cb68:	81a3      	strh	r3, [r4, #12]
 800cb6a:	6923      	ldr	r3, [r4, #16]
 800cb6c:	b94b      	cbnz	r3, 800cb82 <__swsetup_r+0x9a>
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb78:	d003      	beq.n	800cb82 <__swsetup_r+0x9a>
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f000 f9bf 	bl	800cf00 <__smakebuf_r>
 800cb82:	89a2      	ldrh	r2, [r4, #12]
 800cb84:	f012 0301 	ands.w	r3, r2, #1
 800cb88:	d00c      	beq.n	800cba4 <__swsetup_r+0xbc>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60a3      	str	r3, [r4, #8]
 800cb8e:	6963      	ldr	r3, [r4, #20]
 800cb90:	425b      	negs	r3, r3
 800cb92:	61a3      	str	r3, [r4, #24]
 800cb94:	6923      	ldr	r3, [r4, #16]
 800cb96:	b953      	cbnz	r3, 800cbae <__swsetup_r+0xc6>
 800cb98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cba0:	d1ba      	bne.n	800cb18 <__swsetup_r+0x30>
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	0792      	lsls	r2, r2, #30
 800cba6:	bf58      	it	pl
 800cba8:	6963      	ldrpl	r3, [r4, #20]
 800cbaa:	60a3      	str	r3, [r4, #8]
 800cbac:	e7f2      	b.n	800cb94 <__swsetup_r+0xac>
 800cbae:	2000      	movs	r0, #0
 800cbb0:	e7f7      	b.n	800cba2 <__swsetup_r+0xba>
 800cbb2:	bf00      	nop
 800cbb4:	20000014 	.word	0x20000014
 800cbb8:	0800fa70 	.word	0x0800fa70
 800cbbc:	0800fa90 	.word	0x0800fa90
 800cbc0:	0800fa50 	.word	0x0800fa50

0800cbc4 <__sflush_r>:
 800cbc4:	898a      	ldrh	r2, [r1, #12]
 800cbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbca:	4605      	mov	r5, r0
 800cbcc:	0710      	lsls	r0, r2, #28
 800cbce:	460c      	mov	r4, r1
 800cbd0:	d458      	bmi.n	800cc84 <__sflush_r+0xc0>
 800cbd2:	684b      	ldr	r3, [r1, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dc05      	bgt.n	800cbe4 <__sflush_r+0x20>
 800cbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dc02      	bgt.n	800cbe4 <__sflush_r+0x20>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	d0f9      	beq.n	800cbde <__sflush_r+0x1a>
 800cbea:	2300      	movs	r3, #0
 800cbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbf0:	682f      	ldr	r7, [r5, #0]
 800cbf2:	6a21      	ldr	r1, [r4, #32]
 800cbf4:	602b      	str	r3, [r5, #0]
 800cbf6:	d032      	beq.n	800cc5e <__sflush_r+0x9a>
 800cbf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	075a      	lsls	r2, r3, #29
 800cbfe:	d505      	bpl.n	800cc0c <__sflush_r+0x48>
 800cc00:	6863      	ldr	r3, [r4, #4]
 800cc02:	1ac0      	subs	r0, r0, r3
 800cc04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc06:	b10b      	cbz	r3, 800cc0c <__sflush_r+0x48>
 800cc08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc0a:	1ac0      	subs	r0, r0, r3
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4602      	mov	r2, r0
 800cc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc12:	6a21      	ldr	r1, [r4, #32]
 800cc14:	4628      	mov	r0, r5
 800cc16:	47b0      	blx	r6
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	d106      	bne.n	800cc2c <__sflush_r+0x68>
 800cc1e:	6829      	ldr	r1, [r5, #0]
 800cc20:	291d      	cmp	r1, #29
 800cc22:	d848      	bhi.n	800ccb6 <__sflush_r+0xf2>
 800cc24:	4a29      	ldr	r2, [pc, #164]	; (800cccc <__sflush_r+0x108>)
 800cc26:	40ca      	lsrs	r2, r1
 800cc28:	07d6      	lsls	r6, r2, #31
 800cc2a:	d544      	bpl.n	800ccb6 <__sflush_r+0xf2>
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	6062      	str	r2, [r4, #4]
 800cc30:	04d9      	lsls	r1, r3, #19
 800cc32:	6922      	ldr	r2, [r4, #16]
 800cc34:	6022      	str	r2, [r4, #0]
 800cc36:	d504      	bpl.n	800cc42 <__sflush_r+0x7e>
 800cc38:	1c42      	adds	r2, r0, #1
 800cc3a:	d101      	bne.n	800cc40 <__sflush_r+0x7c>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b903      	cbnz	r3, 800cc42 <__sflush_r+0x7e>
 800cc40:	6560      	str	r0, [r4, #84]	; 0x54
 800cc42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc44:	602f      	str	r7, [r5, #0]
 800cc46:	2900      	cmp	r1, #0
 800cc48:	d0c9      	beq.n	800cbde <__sflush_r+0x1a>
 800cc4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc4e:	4299      	cmp	r1, r3
 800cc50:	d002      	beq.n	800cc58 <__sflush_r+0x94>
 800cc52:	4628      	mov	r0, r5
 800cc54:	f7ff fd64 	bl	800c720 <_free_r>
 800cc58:	2000      	movs	r0, #0
 800cc5a:	6360      	str	r0, [r4, #52]	; 0x34
 800cc5c:	e7c0      	b.n	800cbe0 <__sflush_r+0x1c>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4628      	mov	r0, r5
 800cc62:	47b0      	blx	r6
 800cc64:	1c41      	adds	r1, r0, #1
 800cc66:	d1c8      	bne.n	800cbfa <__sflush_r+0x36>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0c5      	beq.n	800cbfa <__sflush_r+0x36>
 800cc6e:	2b1d      	cmp	r3, #29
 800cc70:	d001      	beq.n	800cc76 <__sflush_r+0xb2>
 800cc72:	2b16      	cmp	r3, #22
 800cc74:	d101      	bne.n	800cc7a <__sflush_r+0xb6>
 800cc76:	602f      	str	r7, [r5, #0]
 800cc78:	e7b1      	b.n	800cbde <__sflush_r+0x1a>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	e7ad      	b.n	800cbe0 <__sflush_r+0x1c>
 800cc84:	690f      	ldr	r7, [r1, #16]
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	d0a9      	beq.n	800cbde <__sflush_r+0x1a>
 800cc8a:	0793      	lsls	r3, r2, #30
 800cc8c:	680e      	ldr	r6, [r1, #0]
 800cc8e:	bf08      	it	eq
 800cc90:	694b      	ldreq	r3, [r1, #20]
 800cc92:	600f      	str	r7, [r1, #0]
 800cc94:	bf18      	it	ne
 800cc96:	2300      	movne	r3, #0
 800cc98:	eba6 0807 	sub.w	r8, r6, r7
 800cc9c:	608b      	str	r3, [r1, #8]
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	dd9c      	ble.n	800cbde <__sflush_r+0x1a>
 800cca4:	4643      	mov	r3, r8
 800cca6:	463a      	mov	r2, r7
 800cca8:	6a21      	ldr	r1, [r4, #32]
 800ccaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b0      	blx	r6
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	dc06      	bgt.n	800ccc2 <__sflush_r+0xfe>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	e78e      	b.n	800cbe0 <__sflush_r+0x1c>
 800ccc2:	4407      	add	r7, r0
 800ccc4:	eba8 0800 	sub.w	r8, r8, r0
 800ccc8:	e7e9      	b.n	800cc9e <__sflush_r+0xda>
 800ccca:	bf00      	nop
 800cccc:	20400001 	.word	0x20400001

0800ccd0 <_fflush_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	690b      	ldr	r3, [r1, #16]
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	b1db      	cbz	r3, 800cd12 <_fflush_r+0x42>
 800ccda:	b118      	cbz	r0, 800cce4 <_fflush_r+0x14>
 800ccdc:	6983      	ldr	r3, [r0, #24]
 800ccde:	b90b      	cbnz	r3, 800cce4 <_fflush_r+0x14>
 800cce0:	f000 f860 	bl	800cda4 <__sinit>
 800cce4:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <_fflush_r+0x48>)
 800cce6:	429c      	cmp	r4, r3
 800cce8:	d109      	bne.n	800ccfe <_fflush_r+0x2e>
 800ccea:	686c      	ldr	r4, [r5, #4]
 800ccec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf0:	b17b      	cbz	r3, 800cd12 <_fflush_r+0x42>
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccfa:	f7ff bf63 	b.w	800cbc4 <__sflush_r>
 800ccfe:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <_fflush_r+0x4c>)
 800cd00:	429c      	cmp	r4, r3
 800cd02:	d101      	bne.n	800cd08 <_fflush_r+0x38>
 800cd04:	68ac      	ldr	r4, [r5, #8]
 800cd06:	e7f1      	b.n	800ccec <_fflush_r+0x1c>
 800cd08:	4b05      	ldr	r3, [pc, #20]	; (800cd20 <_fflush_r+0x50>)
 800cd0a:	429c      	cmp	r4, r3
 800cd0c:	bf08      	it	eq
 800cd0e:	68ec      	ldreq	r4, [r5, #12]
 800cd10:	e7ec      	b.n	800ccec <_fflush_r+0x1c>
 800cd12:	2000      	movs	r0, #0
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	bf00      	nop
 800cd18:	0800fa70 	.word	0x0800fa70
 800cd1c:	0800fa90 	.word	0x0800fa90
 800cd20:	0800fa50 	.word	0x0800fa50

0800cd24 <std>:
 800cd24:	2300      	movs	r3, #0
 800cd26:	b510      	push	{r4, lr}
 800cd28:	4604      	mov	r4, r0
 800cd2a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd2e:	6083      	str	r3, [r0, #8]
 800cd30:	8181      	strh	r1, [r0, #12]
 800cd32:	6643      	str	r3, [r0, #100]	; 0x64
 800cd34:	81c2      	strh	r2, [r0, #14]
 800cd36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd3a:	6183      	str	r3, [r0, #24]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	2208      	movs	r2, #8
 800cd40:	305c      	adds	r0, #92	; 0x5c
 800cd42:	f7ff fce5 	bl	800c710 <memset>
 800cd46:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <std+0x38>)
 800cd48:	6263      	str	r3, [r4, #36]	; 0x24
 800cd4a:	4b05      	ldr	r3, [pc, #20]	; (800cd60 <std+0x3c>)
 800cd4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd4e:	4b05      	ldr	r3, [pc, #20]	; (800cd64 <std+0x40>)
 800cd50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd52:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <std+0x44>)
 800cd54:	6224      	str	r4, [r4, #32]
 800cd56:	6323      	str	r3, [r4, #48]	; 0x30
 800cd58:	bd10      	pop	{r4, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0800d581 	.word	0x0800d581
 800cd60:	0800d5a3 	.word	0x0800d5a3
 800cd64:	0800d5db 	.word	0x0800d5db
 800cd68:	0800d5ff 	.word	0x0800d5ff

0800cd6c <_cleanup_r>:
 800cd6c:	4901      	ldr	r1, [pc, #4]	; (800cd74 <_cleanup_r+0x8>)
 800cd6e:	f000 b885 	b.w	800ce7c <_fwalk_reent>
 800cd72:	bf00      	nop
 800cd74:	0800ccd1 	.word	0x0800ccd1

0800cd78 <__sfmoreglue>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	1e4a      	subs	r2, r1, #1
 800cd7c:	2568      	movs	r5, #104	; 0x68
 800cd7e:	4355      	muls	r5, r2
 800cd80:	460e      	mov	r6, r1
 800cd82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd86:	f7ff fd19 	bl	800c7bc <_malloc_r>
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	b140      	cbz	r0, 800cda0 <__sfmoreglue+0x28>
 800cd8e:	2100      	movs	r1, #0
 800cd90:	e9c0 1600 	strd	r1, r6, [r0]
 800cd94:	300c      	adds	r0, #12
 800cd96:	60a0      	str	r0, [r4, #8]
 800cd98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd9c:	f7ff fcb8 	bl	800c710 <memset>
 800cda0:	4620      	mov	r0, r4
 800cda2:	bd70      	pop	{r4, r5, r6, pc}

0800cda4 <__sinit>:
 800cda4:	6983      	ldr	r3, [r0, #24]
 800cda6:	b510      	push	{r4, lr}
 800cda8:	4604      	mov	r4, r0
 800cdaa:	bb33      	cbnz	r3, 800cdfa <__sinit+0x56>
 800cdac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cdb0:	6503      	str	r3, [r0, #80]	; 0x50
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <__sinit+0x58>)
 800cdb4:	4a12      	ldr	r2, [pc, #72]	; (800ce00 <__sinit+0x5c>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6282      	str	r2, [r0, #40]	; 0x28
 800cdba:	4298      	cmp	r0, r3
 800cdbc:	bf04      	itt	eq
 800cdbe:	2301      	moveq	r3, #1
 800cdc0:	6183      	streq	r3, [r0, #24]
 800cdc2:	f000 f81f 	bl	800ce04 <__sfp>
 800cdc6:	6060      	str	r0, [r4, #4]
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 f81b 	bl	800ce04 <__sfp>
 800cdce:	60a0      	str	r0, [r4, #8]
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 f817 	bl	800ce04 <__sfp>
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	60e0      	str	r0, [r4, #12]
 800cdda:	2104      	movs	r1, #4
 800cddc:	6860      	ldr	r0, [r4, #4]
 800cdde:	f7ff ffa1 	bl	800cd24 <std>
 800cde2:	2201      	movs	r2, #1
 800cde4:	2109      	movs	r1, #9
 800cde6:	68a0      	ldr	r0, [r4, #8]
 800cde8:	f7ff ff9c 	bl	800cd24 <std>
 800cdec:	2202      	movs	r2, #2
 800cdee:	2112      	movs	r1, #18
 800cdf0:	68e0      	ldr	r0, [r4, #12]
 800cdf2:	f7ff ff97 	bl	800cd24 <std>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	61a3      	str	r3, [r4, #24]
 800cdfa:	bd10      	pop	{r4, pc}
 800cdfc:	0800fa4c 	.word	0x0800fa4c
 800ce00:	0800cd6d 	.word	0x0800cd6d

0800ce04 <__sfp>:
 800ce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce06:	4b1b      	ldr	r3, [pc, #108]	; (800ce74 <__sfp+0x70>)
 800ce08:	681e      	ldr	r6, [r3, #0]
 800ce0a:	69b3      	ldr	r3, [r6, #24]
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	b913      	cbnz	r3, 800ce16 <__sfp+0x12>
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7ff ffc7 	bl	800cda4 <__sinit>
 800ce16:	3648      	adds	r6, #72	; 0x48
 800ce18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	d503      	bpl.n	800ce28 <__sfp+0x24>
 800ce20:	6833      	ldr	r3, [r6, #0]
 800ce22:	b133      	cbz	r3, 800ce32 <__sfp+0x2e>
 800ce24:	6836      	ldr	r6, [r6, #0]
 800ce26:	e7f7      	b.n	800ce18 <__sfp+0x14>
 800ce28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce2c:	b16d      	cbz	r5, 800ce4a <__sfp+0x46>
 800ce2e:	3468      	adds	r4, #104	; 0x68
 800ce30:	e7f4      	b.n	800ce1c <__sfp+0x18>
 800ce32:	2104      	movs	r1, #4
 800ce34:	4638      	mov	r0, r7
 800ce36:	f7ff ff9f 	bl	800cd78 <__sfmoreglue>
 800ce3a:	6030      	str	r0, [r6, #0]
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d1f1      	bne.n	800ce24 <__sfp+0x20>
 800ce40:	230c      	movs	r3, #12
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	4604      	mov	r4, r0
 800ce46:	4620      	mov	r0, r4
 800ce48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <__sfp+0x74>)
 800ce4c:	6665      	str	r5, [r4, #100]	; 0x64
 800ce4e:	e9c4 5500 	strd	r5, r5, [r4]
 800ce52:	60a5      	str	r5, [r4, #8]
 800ce54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ce58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ce5c:	2208      	movs	r2, #8
 800ce5e:	4629      	mov	r1, r5
 800ce60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce64:	f7ff fc54 	bl	800c710 <memset>
 800ce68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce70:	e7e9      	b.n	800ce46 <__sfp+0x42>
 800ce72:	bf00      	nop
 800ce74:	0800fa4c 	.word	0x0800fa4c
 800ce78:	ffff0001 	.word	0xffff0001

0800ce7c <_fwalk_reent>:
 800ce7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce80:	4680      	mov	r8, r0
 800ce82:	4689      	mov	r9, r1
 800ce84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce88:	2600      	movs	r6, #0
 800ce8a:	b914      	cbnz	r4, 800ce92 <_fwalk_reent+0x16>
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ce96:	3f01      	subs	r7, #1
 800ce98:	d501      	bpl.n	800ce9e <_fwalk_reent+0x22>
 800ce9a:	6824      	ldr	r4, [r4, #0]
 800ce9c:	e7f5      	b.n	800ce8a <_fwalk_reent+0xe>
 800ce9e:	89ab      	ldrh	r3, [r5, #12]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d907      	bls.n	800ceb4 <_fwalk_reent+0x38>
 800cea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	d003      	beq.n	800ceb4 <_fwalk_reent+0x38>
 800ceac:	4629      	mov	r1, r5
 800ceae:	4640      	mov	r0, r8
 800ceb0:	47c8      	blx	r9
 800ceb2:	4306      	orrs	r6, r0
 800ceb4:	3568      	adds	r5, #104	; 0x68
 800ceb6:	e7ee      	b.n	800ce96 <_fwalk_reent+0x1a>

0800ceb8 <__swhatbuf_r>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	460e      	mov	r6, r1
 800cebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec0:	2900      	cmp	r1, #0
 800cec2:	b096      	sub	sp, #88	; 0x58
 800cec4:	4614      	mov	r4, r2
 800cec6:	461d      	mov	r5, r3
 800cec8:	da07      	bge.n	800ceda <__swhatbuf_r+0x22>
 800ceca:	2300      	movs	r3, #0
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	89b3      	ldrh	r3, [r6, #12]
 800ced0:	061a      	lsls	r2, r3, #24
 800ced2:	d410      	bmi.n	800cef6 <__swhatbuf_r+0x3e>
 800ced4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ced8:	e00e      	b.n	800cef8 <__swhatbuf_r+0x40>
 800ceda:	466a      	mov	r2, sp
 800cedc:	f000 fbb6 	bl	800d64c <_fstat_r>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	dbf2      	blt.n	800ceca <__swhatbuf_r+0x12>
 800cee4:	9a01      	ldr	r2, [sp, #4]
 800cee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ceea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ceee:	425a      	negs	r2, r3
 800cef0:	415a      	adcs	r2, r3
 800cef2:	602a      	str	r2, [r5, #0]
 800cef4:	e7ee      	b.n	800ced4 <__swhatbuf_r+0x1c>
 800cef6:	2340      	movs	r3, #64	; 0x40
 800cef8:	2000      	movs	r0, #0
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	b016      	add	sp, #88	; 0x58
 800cefe:	bd70      	pop	{r4, r5, r6, pc}

0800cf00 <__smakebuf_r>:
 800cf00:	898b      	ldrh	r3, [r1, #12]
 800cf02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf04:	079d      	lsls	r5, r3, #30
 800cf06:	4606      	mov	r6, r0
 800cf08:	460c      	mov	r4, r1
 800cf0a:	d507      	bpl.n	800cf1c <__smakebuf_r+0x1c>
 800cf0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	6123      	str	r3, [r4, #16]
 800cf14:	2301      	movs	r3, #1
 800cf16:	6163      	str	r3, [r4, #20]
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	ab01      	add	r3, sp, #4
 800cf1e:	466a      	mov	r2, sp
 800cf20:	f7ff ffca 	bl	800ceb8 <__swhatbuf_r>
 800cf24:	9900      	ldr	r1, [sp, #0]
 800cf26:	4605      	mov	r5, r0
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7ff fc47 	bl	800c7bc <_malloc_r>
 800cf2e:	b948      	cbnz	r0, 800cf44 <__smakebuf_r+0x44>
 800cf30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf34:	059a      	lsls	r2, r3, #22
 800cf36:	d4ef      	bmi.n	800cf18 <__smakebuf_r+0x18>
 800cf38:	f023 0303 	bic.w	r3, r3, #3
 800cf3c:	f043 0302 	orr.w	r3, r3, #2
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	e7e3      	b.n	800cf0c <__smakebuf_r+0xc>
 800cf44:	4b0d      	ldr	r3, [pc, #52]	; (800cf7c <__smakebuf_r+0x7c>)
 800cf46:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	6020      	str	r0, [r4, #0]
 800cf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	9b00      	ldr	r3, [sp, #0]
 800cf54:	6163      	str	r3, [r4, #20]
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	6120      	str	r0, [r4, #16]
 800cf5a:	b15b      	cbz	r3, 800cf74 <__smakebuf_r+0x74>
 800cf5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf60:	4630      	mov	r0, r6
 800cf62:	f000 fb85 	bl	800d670 <_isatty_r>
 800cf66:	b128      	cbz	r0, 800cf74 <__smakebuf_r+0x74>
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	f023 0303 	bic.w	r3, r3, #3
 800cf6e:	f043 0301 	orr.w	r3, r3, #1
 800cf72:	81a3      	strh	r3, [r4, #12]
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	431d      	orrs	r5, r3
 800cf78:	81a5      	strh	r5, [r4, #12]
 800cf7a:	e7cd      	b.n	800cf18 <__smakebuf_r+0x18>
 800cf7c:	0800cd6d 	.word	0x0800cd6d

0800cf80 <__malloc_lock>:
 800cf80:	4770      	bx	lr

0800cf82 <__malloc_unlock>:
 800cf82:	4770      	bx	lr

0800cf84 <__sfputc_r>:
 800cf84:	6893      	ldr	r3, [r2, #8]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	b410      	push	{r4}
 800cf8c:	6093      	str	r3, [r2, #8]
 800cf8e:	da08      	bge.n	800cfa2 <__sfputc_r+0x1e>
 800cf90:	6994      	ldr	r4, [r2, #24]
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	db01      	blt.n	800cf9a <__sfputc_r+0x16>
 800cf96:	290a      	cmp	r1, #10
 800cf98:	d103      	bne.n	800cfa2 <__sfputc_r+0x1e>
 800cf9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf9e:	f7ff bd51 	b.w	800ca44 <__swbuf_r>
 800cfa2:	6813      	ldr	r3, [r2, #0]
 800cfa4:	1c58      	adds	r0, r3, #1
 800cfa6:	6010      	str	r0, [r2, #0]
 800cfa8:	7019      	strb	r1, [r3, #0]
 800cfaa:	4608      	mov	r0, r1
 800cfac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <__sfputs_r>:
 800cfb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	460f      	mov	r7, r1
 800cfb8:	4614      	mov	r4, r2
 800cfba:	18d5      	adds	r5, r2, r3
 800cfbc:	42ac      	cmp	r4, r5
 800cfbe:	d101      	bne.n	800cfc4 <__sfputs_r+0x12>
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	e007      	b.n	800cfd4 <__sfputs_r+0x22>
 800cfc4:	463a      	mov	r2, r7
 800cfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f7ff ffda 	bl	800cf84 <__sfputc_r>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	d1f3      	bne.n	800cfbc <__sfputs_r+0xa>
 800cfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfd8 <_vfiprintf_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	460c      	mov	r4, r1
 800cfde:	b09d      	sub	sp, #116	; 0x74
 800cfe0:	4617      	mov	r7, r2
 800cfe2:	461d      	mov	r5, r3
 800cfe4:	4606      	mov	r6, r0
 800cfe6:	b118      	cbz	r0, 800cff0 <_vfiprintf_r+0x18>
 800cfe8:	6983      	ldr	r3, [r0, #24]
 800cfea:	b90b      	cbnz	r3, 800cff0 <_vfiprintf_r+0x18>
 800cfec:	f7ff feda 	bl	800cda4 <__sinit>
 800cff0:	4b7c      	ldr	r3, [pc, #496]	; (800d1e4 <_vfiprintf_r+0x20c>)
 800cff2:	429c      	cmp	r4, r3
 800cff4:	d158      	bne.n	800d0a8 <_vfiprintf_r+0xd0>
 800cff6:	6874      	ldr	r4, [r6, #4]
 800cff8:	89a3      	ldrh	r3, [r4, #12]
 800cffa:	0718      	lsls	r0, r3, #28
 800cffc:	d55e      	bpl.n	800d0bc <_vfiprintf_r+0xe4>
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d05b      	beq.n	800d0bc <_vfiprintf_r+0xe4>
 800d004:	2300      	movs	r3, #0
 800d006:	9309      	str	r3, [sp, #36]	; 0x24
 800d008:	2320      	movs	r3, #32
 800d00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d00e:	2330      	movs	r3, #48	; 0x30
 800d010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d014:	9503      	str	r5, [sp, #12]
 800d016:	f04f 0b01 	mov.w	fp, #1
 800d01a:	46b8      	mov	r8, r7
 800d01c:	4645      	mov	r5, r8
 800d01e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d022:	b10b      	cbz	r3, 800d028 <_vfiprintf_r+0x50>
 800d024:	2b25      	cmp	r3, #37	; 0x25
 800d026:	d154      	bne.n	800d0d2 <_vfiprintf_r+0xfa>
 800d028:	ebb8 0a07 	subs.w	sl, r8, r7
 800d02c:	d00b      	beq.n	800d046 <_vfiprintf_r+0x6e>
 800d02e:	4653      	mov	r3, sl
 800d030:	463a      	mov	r2, r7
 800d032:	4621      	mov	r1, r4
 800d034:	4630      	mov	r0, r6
 800d036:	f7ff ffbc 	bl	800cfb2 <__sfputs_r>
 800d03a:	3001      	adds	r0, #1
 800d03c:	f000 80c2 	beq.w	800d1c4 <_vfiprintf_r+0x1ec>
 800d040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d042:	4453      	add	r3, sl
 800d044:	9309      	str	r3, [sp, #36]	; 0x24
 800d046:	f898 3000 	ldrb.w	r3, [r8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 80ba 	beq.w	800d1c4 <_vfiprintf_r+0x1ec>
 800d050:	2300      	movs	r3, #0
 800d052:	f04f 32ff 	mov.w	r2, #4294967295
 800d056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d05a:	9304      	str	r3, [sp, #16]
 800d05c:	9307      	str	r3, [sp, #28]
 800d05e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d062:	931a      	str	r3, [sp, #104]	; 0x68
 800d064:	46a8      	mov	r8, r5
 800d066:	2205      	movs	r2, #5
 800d068:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d06c:	485e      	ldr	r0, [pc, #376]	; (800d1e8 <_vfiprintf_r+0x210>)
 800d06e:	f7f3 f8d7 	bl	8000220 <memchr>
 800d072:	9b04      	ldr	r3, [sp, #16]
 800d074:	bb78      	cbnz	r0, 800d0d6 <_vfiprintf_r+0xfe>
 800d076:	06d9      	lsls	r1, r3, #27
 800d078:	bf44      	itt	mi
 800d07a:	2220      	movmi	r2, #32
 800d07c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d080:	071a      	lsls	r2, r3, #28
 800d082:	bf44      	itt	mi
 800d084:	222b      	movmi	r2, #43	; 0x2b
 800d086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d08a:	782a      	ldrb	r2, [r5, #0]
 800d08c:	2a2a      	cmp	r2, #42	; 0x2a
 800d08e:	d02a      	beq.n	800d0e6 <_vfiprintf_r+0x10e>
 800d090:	9a07      	ldr	r2, [sp, #28]
 800d092:	46a8      	mov	r8, r5
 800d094:	2000      	movs	r0, #0
 800d096:	250a      	movs	r5, #10
 800d098:	4641      	mov	r1, r8
 800d09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09e:	3b30      	subs	r3, #48	; 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d969      	bls.n	800d178 <_vfiprintf_r+0x1a0>
 800d0a4:	b360      	cbz	r0, 800d100 <_vfiprintf_r+0x128>
 800d0a6:	e024      	b.n	800d0f2 <_vfiprintf_r+0x11a>
 800d0a8:	4b50      	ldr	r3, [pc, #320]	; (800d1ec <_vfiprintf_r+0x214>)
 800d0aa:	429c      	cmp	r4, r3
 800d0ac:	d101      	bne.n	800d0b2 <_vfiprintf_r+0xda>
 800d0ae:	68b4      	ldr	r4, [r6, #8]
 800d0b0:	e7a2      	b.n	800cff8 <_vfiprintf_r+0x20>
 800d0b2:	4b4f      	ldr	r3, [pc, #316]	; (800d1f0 <_vfiprintf_r+0x218>)
 800d0b4:	429c      	cmp	r4, r3
 800d0b6:	bf08      	it	eq
 800d0b8:	68f4      	ldreq	r4, [r6, #12]
 800d0ba:	e79d      	b.n	800cff8 <_vfiprintf_r+0x20>
 800d0bc:	4621      	mov	r1, r4
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7ff fd12 	bl	800cae8 <__swsetup_r>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d09d      	beq.n	800d004 <_vfiprintf_r+0x2c>
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	b01d      	add	sp, #116	; 0x74
 800d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d2:	46a8      	mov	r8, r5
 800d0d4:	e7a2      	b.n	800d01c <_vfiprintf_r+0x44>
 800d0d6:	4a44      	ldr	r2, [pc, #272]	; (800d1e8 <_vfiprintf_r+0x210>)
 800d0d8:	1a80      	subs	r0, r0, r2
 800d0da:	fa0b f000 	lsl.w	r0, fp, r0
 800d0de:	4318      	orrs	r0, r3
 800d0e0:	9004      	str	r0, [sp, #16]
 800d0e2:	4645      	mov	r5, r8
 800d0e4:	e7be      	b.n	800d064 <_vfiprintf_r+0x8c>
 800d0e6:	9a03      	ldr	r2, [sp, #12]
 800d0e8:	1d11      	adds	r1, r2, #4
 800d0ea:	6812      	ldr	r2, [r2, #0]
 800d0ec:	9103      	str	r1, [sp, #12]
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	db01      	blt.n	800d0f6 <_vfiprintf_r+0x11e>
 800d0f2:	9207      	str	r2, [sp, #28]
 800d0f4:	e004      	b.n	800d100 <_vfiprintf_r+0x128>
 800d0f6:	4252      	negs	r2, r2
 800d0f8:	f043 0302 	orr.w	r3, r3, #2
 800d0fc:	9207      	str	r2, [sp, #28]
 800d0fe:	9304      	str	r3, [sp, #16]
 800d100:	f898 3000 	ldrb.w	r3, [r8]
 800d104:	2b2e      	cmp	r3, #46	; 0x2e
 800d106:	d10e      	bne.n	800d126 <_vfiprintf_r+0x14e>
 800d108:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d10c:	2b2a      	cmp	r3, #42	; 0x2a
 800d10e:	d138      	bne.n	800d182 <_vfiprintf_r+0x1aa>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	1d1a      	adds	r2, r3, #4
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	9203      	str	r2, [sp, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bfb8      	it	lt
 800d11c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d120:	f108 0802 	add.w	r8, r8, #2
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	4d33      	ldr	r5, [pc, #204]	; (800d1f4 <_vfiprintf_r+0x21c>)
 800d128:	f898 1000 	ldrb.w	r1, [r8]
 800d12c:	2203      	movs	r2, #3
 800d12e:	4628      	mov	r0, r5
 800d130:	f7f3 f876 	bl	8000220 <memchr>
 800d134:	b140      	cbz	r0, 800d148 <_vfiprintf_r+0x170>
 800d136:	2340      	movs	r3, #64	; 0x40
 800d138:	1b40      	subs	r0, r0, r5
 800d13a:	fa03 f000 	lsl.w	r0, r3, r0
 800d13e:	9b04      	ldr	r3, [sp, #16]
 800d140:	4303      	orrs	r3, r0
 800d142:	f108 0801 	add.w	r8, r8, #1
 800d146:	9304      	str	r3, [sp, #16]
 800d148:	f898 1000 	ldrb.w	r1, [r8]
 800d14c:	482a      	ldr	r0, [pc, #168]	; (800d1f8 <_vfiprintf_r+0x220>)
 800d14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d152:	2206      	movs	r2, #6
 800d154:	f108 0701 	add.w	r7, r8, #1
 800d158:	f7f3 f862 	bl	8000220 <memchr>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d037      	beq.n	800d1d0 <_vfiprintf_r+0x1f8>
 800d160:	4b26      	ldr	r3, [pc, #152]	; (800d1fc <_vfiprintf_r+0x224>)
 800d162:	bb1b      	cbnz	r3, 800d1ac <_vfiprintf_r+0x1d4>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	3307      	adds	r3, #7
 800d168:	f023 0307 	bic.w	r3, r3, #7
 800d16c:	3308      	adds	r3, #8
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d172:	444b      	add	r3, r9
 800d174:	9309      	str	r3, [sp, #36]	; 0x24
 800d176:	e750      	b.n	800d01a <_vfiprintf_r+0x42>
 800d178:	fb05 3202 	mla	r2, r5, r2, r3
 800d17c:	2001      	movs	r0, #1
 800d17e:	4688      	mov	r8, r1
 800d180:	e78a      	b.n	800d098 <_vfiprintf_r+0xc0>
 800d182:	2300      	movs	r3, #0
 800d184:	f108 0801 	add.w	r8, r8, #1
 800d188:	9305      	str	r3, [sp, #20]
 800d18a:	4619      	mov	r1, r3
 800d18c:	250a      	movs	r5, #10
 800d18e:	4640      	mov	r0, r8
 800d190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d194:	3a30      	subs	r2, #48	; 0x30
 800d196:	2a09      	cmp	r2, #9
 800d198:	d903      	bls.n	800d1a2 <_vfiprintf_r+0x1ca>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0c3      	beq.n	800d126 <_vfiprintf_r+0x14e>
 800d19e:	9105      	str	r1, [sp, #20]
 800d1a0:	e7c1      	b.n	800d126 <_vfiprintf_r+0x14e>
 800d1a2:	fb05 2101 	mla	r1, r5, r1, r2
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	e7f0      	b.n	800d18e <_vfiprintf_r+0x1b6>
 800d1ac:	ab03      	add	r3, sp, #12
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	4b13      	ldr	r3, [pc, #76]	; (800d200 <_vfiprintf_r+0x228>)
 800d1b4:	a904      	add	r1, sp, #16
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f3af 8000 	nop.w
 800d1bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d1c0:	4681      	mov	r9, r0
 800d1c2:	d1d5      	bne.n	800d170 <_vfiprintf_r+0x198>
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	065b      	lsls	r3, r3, #25
 800d1c8:	f53f af7e 	bmi.w	800d0c8 <_vfiprintf_r+0xf0>
 800d1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1ce:	e77d      	b.n	800d0cc <_vfiprintf_r+0xf4>
 800d1d0:	ab03      	add	r3, sp, #12
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4622      	mov	r2, r4
 800d1d6:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <_vfiprintf_r+0x228>)
 800d1d8:	a904      	add	r1, sp, #16
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f000 f888 	bl	800d2f0 <_printf_i>
 800d1e0:	e7ec      	b.n	800d1bc <_vfiprintf_r+0x1e4>
 800d1e2:	bf00      	nop
 800d1e4:	0800fa70 	.word	0x0800fa70
 800d1e8:	0800fab0 	.word	0x0800fab0
 800d1ec:	0800fa90 	.word	0x0800fa90
 800d1f0:	0800fa50 	.word	0x0800fa50
 800d1f4:	0800fab6 	.word	0x0800fab6
 800d1f8:	0800faba 	.word	0x0800faba
 800d1fc:	00000000 	.word	0x00000000
 800d200:	0800cfb3 	.word	0x0800cfb3

0800d204 <_printf_common>:
 800d204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d208:	4691      	mov	r9, r2
 800d20a:	461f      	mov	r7, r3
 800d20c:	688a      	ldr	r2, [r1, #8]
 800d20e:	690b      	ldr	r3, [r1, #16]
 800d210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d214:	4293      	cmp	r3, r2
 800d216:	bfb8      	it	lt
 800d218:	4613      	movlt	r3, r2
 800d21a:	f8c9 3000 	str.w	r3, [r9]
 800d21e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d222:	4606      	mov	r6, r0
 800d224:	460c      	mov	r4, r1
 800d226:	b112      	cbz	r2, 800d22e <_printf_common+0x2a>
 800d228:	3301      	adds	r3, #1
 800d22a:	f8c9 3000 	str.w	r3, [r9]
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	0699      	lsls	r1, r3, #26
 800d232:	bf42      	ittt	mi
 800d234:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d238:	3302      	addmi	r3, #2
 800d23a:	f8c9 3000 	strmi.w	r3, [r9]
 800d23e:	6825      	ldr	r5, [r4, #0]
 800d240:	f015 0506 	ands.w	r5, r5, #6
 800d244:	d107      	bne.n	800d256 <_printf_common+0x52>
 800d246:	f104 0a19 	add.w	sl, r4, #25
 800d24a:	68e3      	ldr	r3, [r4, #12]
 800d24c:	f8d9 2000 	ldr.w	r2, [r9]
 800d250:	1a9b      	subs	r3, r3, r2
 800d252:	42ab      	cmp	r3, r5
 800d254:	dc28      	bgt.n	800d2a8 <_printf_common+0xa4>
 800d256:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	3300      	adds	r3, #0
 800d25e:	bf18      	it	ne
 800d260:	2301      	movne	r3, #1
 800d262:	0692      	lsls	r2, r2, #26
 800d264:	d42d      	bmi.n	800d2c2 <_printf_common+0xbe>
 800d266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d26a:	4639      	mov	r1, r7
 800d26c:	4630      	mov	r0, r6
 800d26e:	47c0      	blx	r8
 800d270:	3001      	adds	r0, #1
 800d272:	d020      	beq.n	800d2b6 <_printf_common+0xb2>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	68e5      	ldr	r5, [r4, #12]
 800d278:	f8d9 2000 	ldr.w	r2, [r9]
 800d27c:	f003 0306 	and.w	r3, r3, #6
 800d280:	2b04      	cmp	r3, #4
 800d282:	bf08      	it	eq
 800d284:	1aad      	subeq	r5, r5, r2
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	6922      	ldr	r2, [r4, #16]
 800d28a:	bf0c      	ite	eq
 800d28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d290:	2500      	movne	r5, #0
 800d292:	4293      	cmp	r3, r2
 800d294:	bfc4      	itt	gt
 800d296:	1a9b      	subgt	r3, r3, r2
 800d298:	18ed      	addgt	r5, r5, r3
 800d29a:	f04f 0900 	mov.w	r9, #0
 800d29e:	341a      	adds	r4, #26
 800d2a0:	454d      	cmp	r5, r9
 800d2a2:	d11a      	bne.n	800d2da <_printf_common+0xd6>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	e008      	b.n	800d2ba <_printf_common+0xb6>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	4652      	mov	r2, sl
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	47c0      	blx	r8
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	d103      	bne.n	800d2be <_printf_common+0xba>
 800d2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2be:	3501      	adds	r5, #1
 800d2c0:	e7c3      	b.n	800d24a <_printf_common+0x46>
 800d2c2:	18e1      	adds	r1, r4, r3
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	2030      	movs	r0, #48	; 0x30
 800d2c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2cc:	4422      	add	r2, r4
 800d2ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	e7c5      	b.n	800d266 <_printf_common+0x62>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	4622      	mov	r2, r4
 800d2de:	4639      	mov	r1, r7
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	47c0      	blx	r8
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d0e6      	beq.n	800d2b6 <_printf_common+0xb2>
 800d2e8:	f109 0901 	add.w	r9, r9, #1
 800d2ec:	e7d8      	b.n	800d2a0 <_printf_common+0x9c>
	...

0800d2f0 <_printf_i>:
 800d2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	7e09      	ldrb	r1, [r1, #24]
 800d2fc:	b085      	sub	sp, #20
 800d2fe:	296e      	cmp	r1, #110	; 0x6e
 800d300:	4617      	mov	r7, r2
 800d302:	4606      	mov	r6, r0
 800d304:	4698      	mov	r8, r3
 800d306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d308:	f000 80b3 	beq.w	800d472 <_printf_i+0x182>
 800d30c:	d822      	bhi.n	800d354 <_printf_i+0x64>
 800d30e:	2963      	cmp	r1, #99	; 0x63
 800d310:	d036      	beq.n	800d380 <_printf_i+0x90>
 800d312:	d80a      	bhi.n	800d32a <_printf_i+0x3a>
 800d314:	2900      	cmp	r1, #0
 800d316:	f000 80b9 	beq.w	800d48c <_printf_i+0x19c>
 800d31a:	2958      	cmp	r1, #88	; 0x58
 800d31c:	f000 8083 	beq.w	800d426 <_printf_i+0x136>
 800d320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d324:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d328:	e032      	b.n	800d390 <_printf_i+0xa0>
 800d32a:	2964      	cmp	r1, #100	; 0x64
 800d32c:	d001      	beq.n	800d332 <_printf_i+0x42>
 800d32e:	2969      	cmp	r1, #105	; 0x69
 800d330:	d1f6      	bne.n	800d320 <_printf_i+0x30>
 800d332:	6820      	ldr	r0, [r4, #0]
 800d334:	6813      	ldr	r3, [r2, #0]
 800d336:	0605      	lsls	r5, r0, #24
 800d338:	f103 0104 	add.w	r1, r3, #4
 800d33c:	d52a      	bpl.n	800d394 <_printf_i+0xa4>
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6011      	str	r1, [r2, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	da03      	bge.n	800d34e <_printf_i+0x5e>
 800d346:	222d      	movs	r2, #45	; 0x2d
 800d348:	425b      	negs	r3, r3
 800d34a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d34e:	486f      	ldr	r0, [pc, #444]	; (800d50c <_printf_i+0x21c>)
 800d350:	220a      	movs	r2, #10
 800d352:	e039      	b.n	800d3c8 <_printf_i+0xd8>
 800d354:	2973      	cmp	r1, #115	; 0x73
 800d356:	f000 809d 	beq.w	800d494 <_printf_i+0x1a4>
 800d35a:	d808      	bhi.n	800d36e <_printf_i+0x7e>
 800d35c:	296f      	cmp	r1, #111	; 0x6f
 800d35e:	d020      	beq.n	800d3a2 <_printf_i+0xb2>
 800d360:	2970      	cmp	r1, #112	; 0x70
 800d362:	d1dd      	bne.n	800d320 <_printf_i+0x30>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	f043 0320 	orr.w	r3, r3, #32
 800d36a:	6023      	str	r3, [r4, #0]
 800d36c:	e003      	b.n	800d376 <_printf_i+0x86>
 800d36e:	2975      	cmp	r1, #117	; 0x75
 800d370:	d017      	beq.n	800d3a2 <_printf_i+0xb2>
 800d372:	2978      	cmp	r1, #120	; 0x78
 800d374:	d1d4      	bne.n	800d320 <_printf_i+0x30>
 800d376:	2378      	movs	r3, #120	; 0x78
 800d378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d37c:	4864      	ldr	r0, [pc, #400]	; (800d510 <_printf_i+0x220>)
 800d37e:	e055      	b.n	800d42c <_printf_i+0x13c>
 800d380:	6813      	ldr	r3, [r2, #0]
 800d382:	1d19      	adds	r1, r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6011      	str	r1, [r2, #0]
 800d388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d390:	2301      	movs	r3, #1
 800d392:	e08c      	b.n	800d4ae <_printf_i+0x1be>
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6011      	str	r1, [r2, #0]
 800d398:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d39c:	bf18      	it	ne
 800d39e:	b21b      	sxthne	r3, r3
 800d3a0:	e7cf      	b.n	800d342 <_printf_i+0x52>
 800d3a2:	6813      	ldr	r3, [r2, #0]
 800d3a4:	6825      	ldr	r5, [r4, #0]
 800d3a6:	1d18      	adds	r0, r3, #4
 800d3a8:	6010      	str	r0, [r2, #0]
 800d3aa:	0628      	lsls	r0, r5, #24
 800d3ac:	d501      	bpl.n	800d3b2 <_printf_i+0xc2>
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	e002      	b.n	800d3b8 <_printf_i+0xc8>
 800d3b2:	0668      	lsls	r0, r5, #25
 800d3b4:	d5fb      	bpl.n	800d3ae <_printf_i+0xbe>
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	4854      	ldr	r0, [pc, #336]	; (800d50c <_printf_i+0x21c>)
 800d3ba:	296f      	cmp	r1, #111	; 0x6f
 800d3bc:	bf14      	ite	ne
 800d3be:	220a      	movne	r2, #10
 800d3c0:	2208      	moveq	r2, #8
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3c8:	6865      	ldr	r5, [r4, #4]
 800d3ca:	60a5      	str	r5, [r4, #8]
 800d3cc:	2d00      	cmp	r5, #0
 800d3ce:	f2c0 8095 	blt.w	800d4fc <_printf_i+0x20c>
 800d3d2:	6821      	ldr	r1, [r4, #0]
 800d3d4:	f021 0104 	bic.w	r1, r1, #4
 800d3d8:	6021      	str	r1, [r4, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d13d      	bne.n	800d45a <_printf_i+0x16a>
 800d3de:	2d00      	cmp	r5, #0
 800d3e0:	f040 808e 	bne.w	800d500 <_printf_i+0x210>
 800d3e4:	4665      	mov	r5, ip
 800d3e6:	2a08      	cmp	r2, #8
 800d3e8:	d10b      	bne.n	800d402 <_printf_i+0x112>
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	07db      	lsls	r3, r3, #31
 800d3ee:	d508      	bpl.n	800d402 <_printf_i+0x112>
 800d3f0:	6923      	ldr	r3, [r4, #16]
 800d3f2:	6862      	ldr	r2, [r4, #4]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	bfde      	ittt	le
 800d3f8:	2330      	movle	r3, #48	; 0x30
 800d3fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d402:	ebac 0305 	sub.w	r3, ip, r5
 800d406:	6123      	str	r3, [r4, #16]
 800d408:	f8cd 8000 	str.w	r8, [sp]
 800d40c:	463b      	mov	r3, r7
 800d40e:	aa03      	add	r2, sp, #12
 800d410:	4621      	mov	r1, r4
 800d412:	4630      	mov	r0, r6
 800d414:	f7ff fef6 	bl	800d204 <_printf_common>
 800d418:	3001      	adds	r0, #1
 800d41a:	d14d      	bne.n	800d4b8 <_printf_i+0x1c8>
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	b005      	add	sp, #20
 800d422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d426:	4839      	ldr	r0, [pc, #228]	; (800d50c <_printf_i+0x21c>)
 800d428:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d42c:	6813      	ldr	r3, [r2, #0]
 800d42e:	6821      	ldr	r1, [r4, #0]
 800d430:	1d1d      	adds	r5, r3, #4
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6015      	str	r5, [r2, #0]
 800d436:	060a      	lsls	r2, r1, #24
 800d438:	d50b      	bpl.n	800d452 <_printf_i+0x162>
 800d43a:	07ca      	lsls	r2, r1, #31
 800d43c:	bf44      	itt	mi
 800d43e:	f041 0120 	orrmi.w	r1, r1, #32
 800d442:	6021      	strmi	r1, [r4, #0]
 800d444:	b91b      	cbnz	r3, 800d44e <_printf_i+0x15e>
 800d446:	6822      	ldr	r2, [r4, #0]
 800d448:	f022 0220 	bic.w	r2, r2, #32
 800d44c:	6022      	str	r2, [r4, #0]
 800d44e:	2210      	movs	r2, #16
 800d450:	e7b7      	b.n	800d3c2 <_printf_i+0xd2>
 800d452:	064d      	lsls	r5, r1, #25
 800d454:	bf48      	it	mi
 800d456:	b29b      	uxthmi	r3, r3
 800d458:	e7ef      	b.n	800d43a <_printf_i+0x14a>
 800d45a:	4665      	mov	r5, ip
 800d45c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d460:	fb02 3311 	mls	r3, r2, r1, r3
 800d464:	5cc3      	ldrb	r3, [r0, r3]
 800d466:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d46a:	460b      	mov	r3, r1
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d1f5      	bne.n	800d45c <_printf_i+0x16c>
 800d470:	e7b9      	b.n	800d3e6 <_printf_i+0xf6>
 800d472:	6813      	ldr	r3, [r2, #0]
 800d474:	6825      	ldr	r5, [r4, #0]
 800d476:	6961      	ldr	r1, [r4, #20]
 800d478:	1d18      	adds	r0, r3, #4
 800d47a:	6010      	str	r0, [r2, #0]
 800d47c:	0628      	lsls	r0, r5, #24
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	d501      	bpl.n	800d486 <_printf_i+0x196>
 800d482:	6019      	str	r1, [r3, #0]
 800d484:	e002      	b.n	800d48c <_printf_i+0x19c>
 800d486:	066a      	lsls	r2, r5, #25
 800d488:	d5fb      	bpl.n	800d482 <_printf_i+0x192>
 800d48a:	8019      	strh	r1, [r3, #0]
 800d48c:	2300      	movs	r3, #0
 800d48e:	6123      	str	r3, [r4, #16]
 800d490:	4665      	mov	r5, ip
 800d492:	e7b9      	b.n	800d408 <_printf_i+0x118>
 800d494:	6813      	ldr	r3, [r2, #0]
 800d496:	1d19      	adds	r1, r3, #4
 800d498:	6011      	str	r1, [r2, #0]
 800d49a:	681d      	ldr	r5, [r3, #0]
 800d49c:	6862      	ldr	r2, [r4, #4]
 800d49e:	2100      	movs	r1, #0
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f7f2 febd 	bl	8000220 <memchr>
 800d4a6:	b108      	cbz	r0, 800d4ac <_printf_i+0x1bc>
 800d4a8:	1b40      	subs	r0, r0, r5
 800d4aa:	6060      	str	r0, [r4, #4]
 800d4ac:	6863      	ldr	r3, [r4, #4]
 800d4ae:	6123      	str	r3, [r4, #16]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4b6:	e7a7      	b.n	800d408 <_printf_i+0x118>
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	4639      	mov	r1, r7
 800d4be:	4630      	mov	r0, r6
 800d4c0:	47c0      	blx	r8
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	d0aa      	beq.n	800d41c <_printf_i+0x12c>
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	079b      	lsls	r3, r3, #30
 800d4ca:	d413      	bmi.n	800d4f4 <_printf_i+0x204>
 800d4cc:	68e0      	ldr	r0, [r4, #12]
 800d4ce:	9b03      	ldr	r3, [sp, #12]
 800d4d0:	4298      	cmp	r0, r3
 800d4d2:	bfb8      	it	lt
 800d4d4:	4618      	movlt	r0, r3
 800d4d6:	e7a3      	b.n	800d420 <_printf_i+0x130>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	464a      	mov	r2, r9
 800d4dc:	4639      	mov	r1, r7
 800d4de:	4630      	mov	r0, r6
 800d4e0:	47c0      	blx	r8
 800d4e2:	3001      	adds	r0, #1
 800d4e4:	d09a      	beq.n	800d41c <_printf_i+0x12c>
 800d4e6:	3501      	adds	r5, #1
 800d4e8:	68e3      	ldr	r3, [r4, #12]
 800d4ea:	9a03      	ldr	r2, [sp, #12]
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	42ab      	cmp	r3, r5
 800d4f0:	dcf2      	bgt.n	800d4d8 <_printf_i+0x1e8>
 800d4f2:	e7eb      	b.n	800d4cc <_printf_i+0x1dc>
 800d4f4:	2500      	movs	r5, #0
 800d4f6:	f104 0919 	add.w	r9, r4, #25
 800d4fa:	e7f5      	b.n	800d4e8 <_printf_i+0x1f8>
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1ac      	bne.n	800d45a <_printf_i+0x16a>
 800d500:	7803      	ldrb	r3, [r0, #0]
 800d502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d50a:	e76c      	b.n	800d3e6 <_printf_i+0xf6>
 800d50c:	0800fac1 	.word	0x0800fac1
 800d510:	0800fad2 	.word	0x0800fad2

0800d514 <_putc_r>:
 800d514:	b570      	push	{r4, r5, r6, lr}
 800d516:	460d      	mov	r5, r1
 800d518:	4614      	mov	r4, r2
 800d51a:	4606      	mov	r6, r0
 800d51c:	b118      	cbz	r0, 800d526 <_putc_r+0x12>
 800d51e:	6983      	ldr	r3, [r0, #24]
 800d520:	b90b      	cbnz	r3, 800d526 <_putc_r+0x12>
 800d522:	f7ff fc3f 	bl	800cda4 <__sinit>
 800d526:	4b13      	ldr	r3, [pc, #76]	; (800d574 <_putc_r+0x60>)
 800d528:	429c      	cmp	r4, r3
 800d52a:	d112      	bne.n	800d552 <_putc_r+0x3e>
 800d52c:	6874      	ldr	r4, [r6, #4]
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	3b01      	subs	r3, #1
 800d532:	2b00      	cmp	r3, #0
 800d534:	60a3      	str	r3, [r4, #8]
 800d536:	da16      	bge.n	800d566 <_putc_r+0x52>
 800d538:	69a2      	ldr	r2, [r4, #24]
 800d53a:	4293      	cmp	r3, r2
 800d53c:	db02      	blt.n	800d544 <_putc_r+0x30>
 800d53e:	b2eb      	uxtb	r3, r5
 800d540:	2b0a      	cmp	r3, #10
 800d542:	d110      	bne.n	800d566 <_putc_r+0x52>
 800d544:	4622      	mov	r2, r4
 800d546:	4629      	mov	r1, r5
 800d548:	4630      	mov	r0, r6
 800d54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d54e:	f7ff ba79 	b.w	800ca44 <__swbuf_r>
 800d552:	4b09      	ldr	r3, [pc, #36]	; (800d578 <_putc_r+0x64>)
 800d554:	429c      	cmp	r4, r3
 800d556:	d101      	bne.n	800d55c <_putc_r+0x48>
 800d558:	68b4      	ldr	r4, [r6, #8]
 800d55a:	e7e8      	b.n	800d52e <_putc_r+0x1a>
 800d55c:	4b07      	ldr	r3, [pc, #28]	; (800d57c <_putc_r+0x68>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	bf08      	it	eq
 800d562:	68f4      	ldreq	r4, [r6, #12]
 800d564:	e7e3      	b.n	800d52e <_putc_r+0x1a>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	6022      	str	r2, [r4, #0]
 800d56c:	701d      	strb	r5, [r3, #0]
 800d56e:	b2e8      	uxtb	r0, r5
 800d570:	bd70      	pop	{r4, r5, r6, pc}
 800d572:	bf00      	nop
 800d574:	0800fa70 	.word	0x0800fa70
 800d578:	0800fa90 	.word	0x0800fa90
 800d57c:	0800fa50 	.word	0x0800fa50

0800d580 <__sread>:
 800d580:	b510      	push	{r4, lr}
 800d582:	460c      	mov	r4, r1
 800d584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d588:	f000 f894 	bl	800d6b4 <_read_r>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	bfab      	itete	ge
 800d590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d592:	89a3      	ldrhlt	r3, [r4, #12]
 800d594:	181b      	addge	r3, r3, r0
 800d596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d59a:	bfac      	ite	ge
 800d59c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d59e:	81a3      	strhlt	r3, [r4, #12]
 800d5a0:	bd10      	pop	{r4, pc}

0800d5a2 <__swrite>:
 800d5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a6:	461f      	mov	r7, r3
 800d5a8:	898b      	ldrh	r3, [r1, #12]
 800d5aa:	05db      	lsls	r3, r3, #23
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	4616      	mov	r6, r2
 800d5b2:	d505      	bpl.n	800d5c0 <__swrite+0x1e>
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5bc:	f000 f868 	bl	800d690 <_lseek_r>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	4632      	mov	r2, r6
 800d5ce:	463b      	mov	r3, r7
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d6:	f000 b817 	b.w	800d608 <_write_r>

0800d5da <__sseek>:
 800d5da:	b510      	push	{r4, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e2:	f000 f855 	bl	800d690 <_lseek_r>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	bf15      	itete	ne
 800d5ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5f6:	81a3      	strheq	r3, [r4, #12]
 800d5f8:	bf18      	it	ne
 800d5fa:	81a3      	strhne	r3, [r4, #12]
 800d5fc:	bd10      	pop	{r4, pc}

0800d5fe <__sclose>:
 800d5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d602:	f000 b813 	b.w	800d62c <_close_r>
	...

0800d608 <_write_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4c07      	ldr	r4, [pc, #28]	; (800d628 <_write_r+0x20>)
 800d60c:	4605      	mov	r5, r0
 800d60e:	4608      	mov	r0, r1
 800d610:	4611      	mov	r1, r2
 800d612:	2200      	movs	r2, #0
 800d614:	6022      	str	r2, [r4, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	f7fe feda 	bl	800c3d0 <_write>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_write_r+0x1e>
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	b103      	cbz	r3, 800d626 <_write_r+0x1e>
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	2000bb0c 	.word	0x2000bb0c

0800d62c <_close_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4c06      	ldr	r4, [pc, #24]	; (800d648 <_close_r+0x1c>)
 800d630:	2300      	movs	r3, #0
 800d632:	4605      	mov	r5, r0
 800d634:	4608      	mov	r0, r1
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	f7fe fed8 	bl	800c3ec <_close>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	d102      	bne.n	800d646 <_close_r+0x1a>
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	b103      	cbz	r3, 800d646 <_close_r+0x1a>
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	bd38      	pop	{r3, r4, r5, pc}
 800d648:	2000bb0c 	.word	0x2000bb0c

0800d64c <_fstat_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4c07      	ldr	r4, [pc, #28]	; (800d66c <_fstat_r+0x20>)
 800d650:	2300      	movs	r3, #0
 800d652:	4605      	mov	r5, r0
 800d654:	4608      	mov	r0, r1
 800d656:	4611      	mov	r1, r2
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	f7fe feca 	bl	800c3f2 <_fstat>
 800d65e:	1c43      	adds	r3, r0, #1
 800d660:	d102      	bne.n	800d668 <_fstat_r+0x1c>
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	b103      	cbz	r3, 800d668 <_fstat_r+0x1c>
 800d666:	602b      	str	r3, [r5, #0]
 800d668:	bd38      	pop	{r3, r4, r5, pc}
 800d66a:	bf00      	nop
 800d66c:	2000bb0c 	.word	0x2000bb0c

0800d670 <_isatty_r>:
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	4c06      	ldr	r4, [pc, #24]	; (800d68c <_isatty_r+0x1c>)
 800d674:	2300      	movs	r3, #0
 800d676:	4605      	mov	r5, r0
 800d678:	4608      	mov	r0, r1
 800d67a:	6023      	str	r3, [r4, #0]
 800d67c:	f7fe febe 	bl	800c3fc <_isatty>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	d102      	bne.n	800d68a <_isatty_r+0x1a>
 800d684:	6823      	ldr	r3, [r4, #0]
 800d686:	b103      	cbz	r3, 800d68a <_isatty_r+0x1a>
 800d688:	602b      	str	r3, [r5, #0]
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	2000bb0c 	.word	0x2000bb0c

0800d690 <_lseek_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4c07      	ldr	r4, [pc, #28]	; (800d6b0 <_lseek_r+0x20>)
 800d694:	4605      	mov	r5, r0
 800d696:	4608      	mov	r0, r1
 800d698:	4611      	mov	r1, r2
 800d69a:	2200      	movs	r2, #0
 800d69c:	6022      	str	r2, [r4, #0]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f7fe feae 	bl	800c400 <_lseek>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d102      	bne.n	800d6ae <_lseek_r+0x1e>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	b103      	cbz	r3, 800d6ae <_lseek_r+0x1e>
 800d6ac:	602b      	str	r3, [r5, #0]
 800d6ae:	bd38      	pop	{r3, r4, r5, pc}
 800d6b0:	2000bb0c 	.word	0x2000bb0c

0800d6b4 <_read_r>:
 800d6b4:	b538      	push	{r3, r4, r5, lr}
 800d6b6:	4c07      	ldr	r4, [pc, #28]	; (800d6d4 <_read_r+0x20>)
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	4608      	mov	r0, r1
 800d6bc:	4611      	mov	r1, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	6022      	str	r2, [r4, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	f7fe fe9e 	bl	800c404 <_read>
 800d6c8:	1c43      	adds	r3, r0, #1
 800d6ca:	d102      	bne.n	800d6d2 <_read_r+0x1e>
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	b103      	cbz	r3, 800d6d2 <_read_r+0x1e>
 800d6d0:	602b      	str	r3, [r5, #0]
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	2000bb0c 	.word	0x2000bb0c

0800d6d8 <_init>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_fini>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	bf00      	nop
 800d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ea:	bc08      	pop	{r3}
 800d6ec:	469e      	mov	lr, r3
 800d6ee:	4770      	bx	lr
