
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023a8  0800d660  0800d660  0001d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa08  0800fa08  0001fa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa10  0800fa10  0001fa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa14  0800fa14  0001fa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800fa18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          0000a908  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000a980  2000a980  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00056661  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a849  00000000  00000000  00076709  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001adb4  00000000  00000000  00080f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d58  00000000  00000000  0009bd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d68  00000000  00000000  0009da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000342bb  00000000  00000000  000a07c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c921  00000000  00000000  000d4a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f86aa  00000000  00000000  001013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f9a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000611c  00000000  00000000  001f9acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d648 	.word	0x0800d648

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800d648 	.word	0x0800d648

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x30>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f82f 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f00b fe9a 	bl	800c31c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f00b fdc8 	bl	800c17c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005ec:	2000      	movs	r0, #0
 80005ee:	bd08      	pop	{r3, pc}
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x10>)
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_IncTick+0x14>)
 80005f8:	6811      	ldr	r1, [r2, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	440b      	add	r3, r1
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20003f98 	.word	0x20003f98
 8000608:	20000000 	.word	0x20000000

0800060c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <HAL_GetTick+0x8>)
 800060e:	6818      	ldr	r0, [r3, #0]
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20003f98 	.word	0x20003f98

08000618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000618:	b538      	push	{r3, r4, r5, lr}
 800061a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff fff6 	bl	800060c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000620:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000622:	bf1c      	itt	ne
 8000624:	4b05      	ldrne	r3, [pc, #20]	; (800063c <HAL_Delay+0x24>)
 8000626:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000628:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf18      	it	ne
 800062c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062e:	f7ff ffed 	bl	800060c <HAL_GetTick>
 8000632:	1b40      	subs	r0, r0, r5
 8000634:	42a0      	cmp	r0, r4
 8000636:	d3fa      	bcc.n	800062e <HAL_Delay+0x16>
  {
  }
}
 8000638:	bd38      	pop	{r3, r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b570      	push	{r4, r5, r6, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0507 	rsb	r5, r4, #7
 8000672:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000674:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	bf28      	it	cs
 800067a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000680:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000682:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	bf8c      	ite	hi
 8000688:	3c03      	subhi	r4, #3
 800068a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	ea21 0303 	bic.w	r3, r1, r3
 8000690:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa06 f404 	lsl.w	r4, r6, r4
 8000696:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	bfa8      	it	ge
 80006a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80006a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	bfbc      	itt	lt
 80006ac:	f000 000f 	andlt.w	r0, r0, #15
 80006b0:	4a05      	ldrlt	r2, [pc, #20]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
 80006b2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfaa      	itet	ge
 80006b6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006cc:	0942      	lsrs	r2, r0, #5
 80006ce:	2301      	movs	r3, #1
 80006d0:	f000 001f 	and.w	r0, r0, #31
 80006d4:	fa03 f000 	lsl.w	r0, r3, r0
 80006d8:	4b01      	ldr	r3, [pc, #4]	; (80006e0 <HAL_NVIC_EnableIRQ+0x14>)
 80006da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e4:	3801      	subs	r0, #1
 80006e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ea:	d20a      	bcs.n	8000702 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	21f0      	movs	r1, #240	; 0xf0
 80006f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000712:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000714:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000716:	bf0c      	ite	eq
 8000718:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800071c:	f022 0204 	bicne.w	r2, r2, #4
 8000720:	601a      	str	r2, [r3, #0]
  }
}
 8000722:	4770      	bx	lr
 8000724:	e000e010 	.word	0xe000e010

08000728 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000728:	6803      	ldr	r3, [r0, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000730:	f023 0303 	bic.w	r3, r3, #3
 8000734:	2118      	movs	r1, #24
 8000736:	3a10      	subs	r2, #16
 8000738:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800073c:	4904      	ldr	r1, [pc, #16]	; (8000750 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800073e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000740:	bf88      	it	hi
 8000742:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000744:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000746:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000748:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800074a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	0800d688 	.word	0x0800d688

08000754 <HAL_DMA_Init>:
{
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff ff58 	bl	800060c <HAL_GetTick>
 800075c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800075e:	2c00      	cmp	r4, #0
 8000760:	d071      	beq.n	8000846 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000762:	2300      	movs	r3, #0
 8000764:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000768:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800076a:	2302      	movs	r3, #2
 800076c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000770:	6813      	ldr	r3, [r2, #0]
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000778:	6821      	ldr	r1, [r4, #0]
 800077a:	680b      	ldr	r3, [r1, #0]
 800077c:	07d8      	lsls	r0, r3, #31
 800077e:	d43c      	bmi.n	80007fa <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000780:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000782:	4d32      	ldr	r5, [pc, #200]	; (800084c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000784:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000786:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000788:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	68e2      	ldr	r2, [r4, #12]
 8000790:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000792:	6922      	ldr	r2, [r4, #16]
 8000794:	4313      	orrs	r3, r2
 8000796:	6962      	ldr	r2, [r4, #20]
 8000798:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800079a:	69e2      	ldr	r2, [r4, #28]
 800079c:	4303      	orrs	r3, r0
 800079e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007a0:	6a22      	ldr	r2, [r4, #32]
 80007a2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007a6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007a8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007ac:	bf02      	ittt	eq
 80007ae:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007b2:	4335      	orreq	r5, r6
 80007b4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80007b6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007b8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007ba:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007bc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007c4:	d10b      	bne.n	80007de <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80007c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007c8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80007ca:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007cc:	b13d      	cbz	r5, 80007de <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007ce:	b9f8      	cbnz	r0, 8000810 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80007d0:	2a01      	cmp	r2, #1
 80007d2:	d02d      	beq.n	8000830 <HAL_DMA_Init+0xdc>
 80007d4:	d301      	bcc.n	80007da <HAL_DMA_Init+0x86>
 80007d6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007d8:	d101      	bne.n	80007de <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007da:	01ea      	lsls	r2, r5, #7
 80007dc:	d42b      	bmi.n	8000836 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80007de:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff ffa1 	bl	8000728 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007e8:	233f      	movs	r3, #63	; 0x3f
 80007ea:	4093      	lsls	r3, r2
 80007ec:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ee:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80007f0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80007f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80007f8:	e009      	b.n	800080e <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007fa:	f7ff ff07 	bl	800060c <HAL_GetTick>
 80007fe:	1b40      	subs	r0, r0, r5
 8000800:	2805      	cmp	r0, #5
 8000802:	d9b9      	bls.n	8000778 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000804:	2320      	movs	r3, #32
 8000806:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000808:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800080a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800080e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000810:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000814:	d113      	bne.n	800083e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000816:	2a03      	cmp	r2, #3
 8000818:	d8e1      	bhi.n	80007de <HAL_DMA_Init+0x8a>
 800081a:	a001      	add	r0, pc, #4	; (adr r0, 8000820 <HAL_DMA_Init+0xcc>)
 800081c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000820:	08000837 	.word	0x08000837
 8000824:	080007db 	.word	0x080007db
 8000828:	08000837 	.word	0x08000837
 800082c:	08000831 	.word	0x08000831
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000830:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000834:	d1d3      	bne.n	80007de <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800083a:	2001      	movs	r0, #1
 800083c:	e7e5      	b.n	800080a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800083e:	2a02      	cmp	r2, #2
 8000840:	d9f9      	bls.n	8000836 <HAL_DMA_Init+0xe2>
 8000842:	2a03      	cmp	r2, #3
 8000844:	e7c8      	b.n	80007d8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e7e1      	b.n	800080e <HAL_DMA_Init+0xba>
 800084a:	bf00      	nop
 800084c:	f010803f 	.word	0xf010803f

08000850 <HAL_DMA_Start_IT>:
{
 8000850:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000852:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000856:	2c01      	cmp	r4, #1
 8000858:	d036      	beq.n	80008c8 <HAL_DMA_Start_IT+0x78>
 800085a:	2401      	movs	r4, #1
 800085c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000860:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000864:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000866:	2c01      	cmp	r4, #1
 8000868:	f04f 0500 	mov.w	r5, #0
 800086c:	f04f 0402 	mov.w	r4, #2
 8000870:	d128      	bne.n	80008c4 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000872:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000876:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000878:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800087a:	6825      	ldr	r5, [r4, #0]
 800087c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000880:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000882:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000884:	6883      	ldr	r3, [r0, #8]
 8000886:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000888:	bf0e      	itee	eq
 800088a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800088c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800088e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000890:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000892:	bf08      	it	eq
 8000894:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000896:	233f      	movs	r3, #63	; 0x3f
 8000898:	4093      	lsls	r3, r2
 800089a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	f043 0316 	orr.w	r3, r3, #22
 80008a2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008a4:	6963      	ldr	r3, [r4, #20]
 80008a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008aa:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ae:	b11b      	cbz	r3, 80008b8 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008c0:	2000      	movs	r0, #0
}
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80008c4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80008c8:	2002      	movs	r0, #2
 80008ca:	e7fa      	b.n	80008c2 <HAL_DMA_Start_IT+0x72>

080008cc <HAL_DMA_Abort>:
{
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008d0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80008d2:	f7ff fe9b 	bl	800060c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80008da:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80008dc:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008de:	d006      	beq.n	80008ee <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80008e4:	2300      	movs	r3, #0
 80008e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
}
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f022 0216 	bic.w	r2, r2, #22
 80008f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008fe:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000900:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000902:	b90a      	cbnz	r2, 8000908 <HAL_DMA_Abort+0x3c>
 8000904:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000906:	b11a      	cbz	r2, 8000910 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f022 0208 	bic.w	r2, r2, #8
 800090e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f022 0201 	bic.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	f010 0001 	ands.w	r0, r0, #1
 8000920:	d109      	bne.n	8000936 <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000922:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000924:	233f      	movs	r3, #63	; 0x3f
 8000926:	4093      	lsls	r3, r2
 8000928:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800092a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800092c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000930:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000934:	e7da      	b.n	80008ec <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000936:	f7ff fe69 	bl	800060c <HAL_GetTick>
 800093a:	1b80      	subs	r0, r0, r6
 800093c:	2805      	cmp	r0, #5
 800093e:	d9eb      	bls.n	8000918 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000940:	2320      	movs	r3, #32
 8000942:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000944:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8000946:	2300      	movs	r3, #0
 8000948:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800094c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8000950:	e7cc      	b.n	80008ec <HAL_DMA_Abort+0x20>
	...

08000954 <HAL_DMA_IRQHandler>:
{
 8000954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000956:	2300      	movs	r3, #0
 8000958:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800095a:	4b5c      	ldr	r3, [pc, #368]	; (8000acc <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800095c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800095e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000960:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000962:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000964:	2208      	movs	r2, #8
 8000966:	409a      	lsls	r2, r3
 8000968:	4232      	tst	r2, r6
{
 800096a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800096c:	d00c      	beq.n	8000988 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800096e:	6801      	ldr	r1, [r0, #0]
 8000970:	6808      	ldr	r0, [r1, #0]
 8000972:	0740      	lsls	r0, r0, #29
 8000974:	d508      	bpl.n	8000988 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000976:	6808      	ldr	r0, [r1, #0]
 8000978:	f020 0004 	bic.w	r0, r0, #4
 800097c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800097e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000980:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000982:	f042 0201 	orr.w	r2, r2, #1
 8000986:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000988:	2201      	movs	r2, #1
 800098a:	409a      	lsls	r2, r3
 800098c:	4232      	tst	r2, r6
 800098e:	d008      	beq.n	80009a2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000990:	6821      	ldr	r1, [r4, #0]
 8000992:	6949      	ldr	r1, [r1, #20]
 8000994:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000996:	bf41      	itttt	mi
 8000998:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800099a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800099c:	f042 0202 	orrmi.w	r2, r2, #2
 80009a0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80009a2:	2204      	movs	r2, #4
 80009a4:	409a      	lsls	r2, r3
 80009a6:	4232      	tst	r2, r6
 80009a8:	d008      	beq.n	80009bc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80009aa:	6821      	ldr	r1, [r4, #0]
 80009ac:	6809      	ldr	r1, [r1, #0]
 80009ae:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80009b0:	bf41      	itttt	mi
 80009b2:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80009b4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80009b6:	f042 0204 	orrmi.w	r2, r2, #4
 80009ba:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80009bc:	2210      	movs	r2, #16
 80009be:	409a      	lsls	r2, r3
 80009c0:	4232      	tst	r2, r6
 80009c2:	d010      	beq.n	80009e6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	6819      	ldr	r1, [r3, #0]
 80009c8:	0709      	lsls	r1, r1, #28
 80009ca:	d50c      	bpl.n	80009e6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009cc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	0350      	lsls	r0, r2, #13
 80009d2:	d537      	bpl.n	8000a44 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	0319      	lsls	r1, r3, #12
 80009d8:	d401      	bmi.n	80009de <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80009da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009dc:	e000      	b.n	80009e0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80009e0:	b10b      	cbz	r3, 80009e6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80009e2:	4620      	mov	r0, r4
 80009e4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009e8:	2220      	movs	r2, #32
 80009ea:	408a      	lsls	r2, r1
 80009ec:	4232      	tst	r2, r6
 80009ee:	d03a      	beq.n	8000a66 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	06c6      	lsls	r6, r0, #27
 80009f6:	d536      	bpl.n	8000a66 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009f8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009fa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009fe:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a00:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a02:	d127      	bne.n	8000a54 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a04:	f022 0216 	bic.w	r2, r2, #22
 8000a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a10:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a14:	b90a      	cbnz	r2, 8000a1a <HAL_DMA_IRQHandler+0xc6>
 8000a16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000a18:	b11a      	cbz	r2, 8000a22 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f022 0208 	bic.w	r2, r2, #8
 8000a20:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a22:	233f      	movs	r3, #63	; 0x3f
 8000a24:	408b      	lsls	r3, r1
 8000a26:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a34:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d045      	beq.n	8000ac6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000a3a:	4620      	mov	r0, r4
}
 8000a3c:	b003      	add	sp, #12
 8000a3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000a42:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a48:	bf5e      	ittt	pl
 8000a4a:	681a      	ldrpl	r2, [r3, #0]
 8000a4c:	f022 0208 	bicpl.w	r2, r2, #8
 8000a50:	601a      	strpl	r2, [r3, #0]
 8000a52:	e7c2      	b.n	80009da <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a54:	0350      	lsls	r0, r2, #13
 8000a56:	d527      	bpl.n	8000aa8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	0319      	lsls	r1, r3, #12
 8000a5c:	d431      	bmi.n	8000ac2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000a5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000a60:	b10b      	cbz	r3, 8000a66 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000a62:	4620      	mov	r0, r4
 8000a64:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a68:	b36b      	cbz	r3, 8000ac6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a6c:	07da      	lsls	r2, r3, #31
 8000a6e:	d519      	bpl.n	8000aa4 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a70:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a72:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a78:	6813      	ldr	r3, [r2, #0]
 8000a7a:	f023 0301 	bic.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a84:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a88:	9b01      	ldr	r3, [sp, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	42bb      	cmp	r3, r7
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	d802      	bhi.n	8000a98 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a92:	6813      	ldr	r3, [r2, #0]
 8000a94:	07db      	lsls	r3, r3, #31
 8000a96:	d4f7      	bmi.n	8000a88 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000aa4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000aa6:	e7c6      	b.n	8000a36 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000aae:	d108      	bne.n	8000ac2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	f021 0110 	bic.w	r1, r1, #16
 8000ab6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000ab8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000aba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000abe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ac4:	e7cc      	b.n	8000a60 <HAL_DMA_IRQHandler+0x10c>
}
 8000ac6:	b003      	add	sp, #12
 8000ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000010 	.word	0x20000010

08000ad0 <HAL_DMA_GetState>:
  return hdma->State;
 8000ad0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 8000ad8:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <ETH_Delay.constprop.4+0x20>)
 8000adc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ae6:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ae8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000aea:	9b01      	ldr	r3, [sp, #4]
 8000aec:	1e5a      	subs	r2, r3, #1
 8000aee:	9201      	str	r2, [sp, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f9      	bne.n	8000ae8 <ETH_Delay.constprop.4+0x10>
}
 8000af4:	b002      	add	sp, #8
 8000af6:	4770      	bx	lr
 8000af8:	20000010 	.word	0x20000010

08000afc <ETH_FlushTransmitFIFO>:
{
 8000afc:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000b02:	f241 0118 	movw	r1, #4120	; 0x1018
 8000b06:	6803      	ldr	r3, [r0, #0]
 8000b08:	585a      	ldr	r2, [r3, r1]
 8000b0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b0e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000b10:	585b      	ldr	r3, [r3, r1]
 8000b12:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000b14:	f7ff ffe0 	bl	8000ad8 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000b18:	9a01      	ldr	r2, [sp, #4]
 8000b1a:	6803      	ldr	r3, [r0, #0]
 8000b1c:	505a      	str	r2, [r3, r1]
}
 8000b1e:	b003      	add	sp, #12
 8000b20:	f85d fb04 	ldr.w	pc, [sp], #4

08000b24 <ETH_MACDMAConfig>:
{
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000b28:	b129      	cbz	r1, 8000b36 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8000b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b32:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000b36:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000b38:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000b3a:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000b3c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
  tmpreg1 = (heth->Instance)->MACCR;
 8000b40:	6815      	ldr	r5, [r2, #0]
                       macinit.LoopbackMode |
 8000b42:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000b46:	4830      	ldr	r0, [pc, #192]	; (8000c08 <ETH_MACDMAConfig+0xe4>)
 8000b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4c:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000b50:	bf0c      	ite	eq
 8000b52:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000b56:	2100      	movne	r1, #0
 8000b58:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000b5a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000b5c:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b5e:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8000b60:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b62:	f7ff fd59 	bl	8000618 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000b66:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000b68:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8000b6a:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b6c:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000b6e:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000b70:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b72:	f7ff fd51 	bl	8000618 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000b7e:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8000b80:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000b82:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000b86:	0412      	lsls	r2, r2, #16
 8000b88:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000b8e:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b90:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000b92:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b94:	f7ff fd40 	bl	8000618 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000b98:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b9a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8000b9c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000b9e:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000ba0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ba2:	f7ff fd39 	bl	8000618 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000ba6:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000baa:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000bac:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000bb0:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000bb2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000bb4:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000bb6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000bba:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000bbe:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000bc0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000bc2:	f7ff fd29 	bl	8000618 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000bc6:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000bc8:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 8000bca:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000bd0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000bd2:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000bd4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000bd6:	f7ff fd1f 	bl	8000618 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000bda:	6822      	ldr	r2, [r4, #0]
 8000bdc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000be0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000be2:	69a3      	ldr	r3, [r4, #24]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d107      	bne.n	8000bf8 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000be8:	f241 011c 	movw	r1, #4124	; 0x101c
 8000bec:	5853      	ldr	r3, [r2, r1]
 8000bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000bf8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000bfa:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000bfc:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000bfe:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000c00:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <ETH_MACDMAConfig+0xf4>)
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	ff20810f 	.word	0xff20810f
 8000c0c:	f8de3f23 	.word	0xf8de3f23
 8000c10:	02c12080 	.word	0x02c12080
 8000c14:	40028040 	.word	0x40028040
 8000c18:	40028044 	.word	0x40028044

08000c1c <HAL_ETH_DMATxDescListInit>:
{
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000c20:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000c24:	2c01      	cmp	r4, #1
 8000c26:	f04f 0402 	mov.w	r4, #2
 8000c2a:	d031      	beq.n	8000c90 <HAL_ETH_DMATxDescListInit+0x74>
 8000c2c:	2501      	movs	r5, #1
 8000c2e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000c32:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000c36:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000c38:	460c      	mov	r4, r1
 8000c3a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c3c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c40:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8000c44:	f103 3eff 	add.w	lr, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8000c48:	429d      	cmp	r5, r3
 8000c4a:	d10c      	bne.n	8000c66 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c4c:	6802      	ldr	r2, [r0, #0]
 8000c4e:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c52:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000c60:	4618      	mov	r0, r3
}
 8000c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c66:	fb0c 2605 	mla	r6, ip, r5, r2
 8000c6a:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c6c:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c6e:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c70:	b91e      	cbnz	r6, 8000c7a <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000c72:	6826      	ldr	r6, [r4, #0]
 8000c74:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000c78:	6026      	str	r6, [r4, #0]
 8000c7a:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000c7e:	45ae      	cmp	lr, r5
 8000c80:	bf94      	ite	ls
 8000c82:	4688      	movls	r8, r1
 8000c84:	46b0      	movhi	r8, r6
 8000c86:	f8c4 800c 	str.w	r8, [r4, #12]
 8000c8a:	3501      	adds	r5, #1
 8000c8c:	4634      	mov	r4, r6
 8000c8e:	e7db      	b.n	8000c48 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000c90:	4620      	mov	r0, r4
 8000c92:	e7e6      	b.n	8000c62 <HAL_ETH_DMATxDescListInit+0x46>

08000c94 <HAL_ETH_DMARxDescListInit>:
{
 8000c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8000c98:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000c9c:	2c01      	cmp	r4, #1
 8000c9e:	f04f 0402 	mov.w	r4, #2
 8000ca2:	d02f      	beq.n	8000d04 <HAL_ETH_DMARxDescListInit+0x70>
 8000ca4:	2501      	movs	r5, #1
 8000ca6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000caa:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000cae:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8000cb0:	460c      	mov	r4, r1
 8000cb2:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000cb4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000cb8:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000cbc:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000cc0:	f103 38ff 	add.w	r8, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000cc8:	6802      	ldr	r2, [r0, #0]
 8000cca:	f241 030c 	movw	r3, #4108	; 0x100c
 8000cce:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000cdc:	4618      	mov	r0, r3
}
 8000cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000ce2:	fb0e 2605 	mla	r6, lr, r5, r2
 8000ce6:	60a6      	str	r6, [r4, #8]
 8000ce8:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000cec:	45a8      	cmp	r8, r5
 8000cee:	bf94      	ite	ls
 8000cf0:	4689      	movls	r9, r1
 8000cf2:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000cf4:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000cf6:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000cfa:	f8c4 900c 	str.w	r9, [r4, #12]
 8000cfe:	3501      	adds	r5, #1
 8000d00:	4634      	mov	r4, r6
 8000d02:	e7df      	b.n	8000cc4 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8000d04:	4620      	mov	r0, r4
 8000d06:	e7ea      	b.n	8000cde <HAL_ETH_DMARxDescListInit+0x4a>

08000d08 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000d08:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000d0c:	2b01      	cmp	r3, #1
{
 8000d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d10:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000d14:	d068      	beq.n	8000de8 <HAL_ETH_TransmitFrame+0xe0>
 8000d16:	2201      	movs	r2, #1
 8000d18:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000d1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000d20:	b929      	cbnz	r1, 8000d2e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000d22:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000d26:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000d2a:	4610      	mov	r0, r2
}
 8000d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d30:	681c      	ldr	r4, [r3, #0]
 8000d32:	2c00      	cmp	r4, #0
 8000d34:	da06      	bge.n	8000d44 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000d36:	2312      	movs	r3, #18
 8000d38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000d42:	e7f2      	b.n	8000d2a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000d44:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000d48:	42a1      	cmp	r1, r4
 8000d4a:	d92e      	bls.n	8000daa <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000d4c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000d50:	fb04 1412 	mls	r4, r4, r2, r1
 8000d54:	b33c      	cbz	r4, 8000da6 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 8000d56:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000d58:	4c24      	ldr	r4, [pc, #144]	; (8000dec <HAL_ETH_TransmitFrame+0xe4>)
 8000d5a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8000d5e:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000d62:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8000d66:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000d68:	f240 57f4 	movw	r7, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8000d6c:	1e56      	subs	r6, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000d6e:	681d      	ldr	r5, [r3, #0]
 8000d70:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000d74:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 8000d76:	b91c      	cbnz	r4, 8000d80 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000d78:	681d      	ldr	r5, [r3, #0]
 8000d7a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000d7e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8000d80:	42a6      	cmp	r6, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000d82:	bf08      	it	eq
 8000d84:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000d86:	605f      	str	r7, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000d88:	bf04      	itt	eq
 8000d8a:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8000d8e:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000d90:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000d92:	bf08      	it	eq
 8000d94:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 8000d96:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000d98:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8000d9c:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000d9e:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000da0:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8000da2:	d1e4      	bne.n	8000d6e <HAL_ETH_TransmitFrame+0x66>
 8000da4:	e00d      	b.n	8000dc2 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 8000da6:	2a01      	cmp	r2, #1
 8000da8:	d1d6      	bne.n	8000d58 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000db0:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000db2:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000db4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000db8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000dbc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000dbe:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000dc4:	f241 0214 	movw	r2, #4116	; 0x1014
 8000dc8:	6803      	ldr	r3, [r0, #0]
 8000dca:	5899      	ldr	r1, [r3, r2]
 8000dcc:	0749      	lsls	r1, r1, #29
 8000dce:	d505      	bpl.n	8000ddc <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000dd4:	f241 0204 	movw	r2, #4100	; 0x1004
 8000dd8:	2100      	movs	r1, #0
 8000dda:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000de2:	2300      	movs	r3, #0
 8000de4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000de8:	4618      	mov	r0, r3
 8000dea:	e79f      	b.n	8000d2c <HAL_ETH_TransmitFrame+0x24>
 8000dec:	fffffa0c 	.word	0xfffffa0c

08000df0 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000df0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000df4:	2b01      	cmp	r3, #1
{
 8000df6:	b570      	push	{r4, r5, r6, lr}
 8000df8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000dfc:	d03b      	beq.n	8000e76 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000e04:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000e08:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8000e0a:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000e0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	db01      	blt.n	8000e18 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000e14:	3c01      	subs	r4, #1
 8000e16:	d106      	bne.n	8000e26 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000e18:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000e1a:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000e1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e20:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000e24:	e027      	b.n	8000e76 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68dd      	ldr	r5, [r3, #12]
 8000e2a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e2e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000e32:	d103      	bne.n	8000e3c <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000e34:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000e36:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000e38:	6285      	str	r5, [r0, #40]	; 0x28
 8000e3a:	e7e7      	b.n	8000e0c <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000e3c:	681e      	ldr	r6, [r3, #0]
 8000e3e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000e40:	f416 7f40 	tst.w	r6, #768	; 0x300
 8000e44:	f102 0201 	add.w	r2, r2, #1
 8000e48:	d101      	bne.n	8000e4e <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8000e4a:	6382      	str	r2, [r0, #56]	; 0x38
 8000e4c:	e7f4      	b.n	8000e38 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000e4e:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000e50:	bf08      	it	eq
 8000e52:	6303      	streq	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos.SegCount)++;
 8000e54:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000e62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000e6e:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000e70:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000e72:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd70      	pop	{r4, r5, r6, pc}

08000e7a <HAL_ETH_TxCpltCallback>:
 8000e7a:	4770      	bx	lr

08000e7c <HAL_ETH_ErrorCallback>:
 8000e7c:	4770      	bx	lr

08000e7e <HAL_ETH_IRQHandler>:
{
 8000e7e:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000e80:	6802      	ldr	r2, [r0, #0]
 8000e82:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000e86:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000e88:	5995      	ldr	r5, [r2, r6]
 8000e8a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e8e:	d021      	beq.n	8000ed4 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000e90:	f00a fbb6 	bl	800b600 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	2240      	movs	r2, #64	; 0x40
 8000e98:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f241 0514 	movw	r5, #4116	; 0x1014
 8000eac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb0:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000eb2:	595b      	ldr	r3, [r3, r5]
 8000eb4:	041b      	lsls	r3, r3, #16
 8000eb6:	d50c      	bpl.n	8000ed2 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff ffdf 	bl	8000e7c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec4:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ed2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000ed4:	5993      	ldr	r3, [r2, r6]
 8000ed6:	07da      	lsls	r2, r3, #31
 8000ed8:	d5e5      	bpl.n	8000ea6 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000eda:	f7ff ffce 	bl	8000e7a <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000ee4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ee8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000eec:	e7db      	b.n	8000ea6 <HAL_ETH_IRQHandler+0x28>

08000eee <HAL_ETH_ReadPHYRegister>:
{
 8000eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ef0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ef4:	2b82      	cmp	r3, #130	; 0x82
{
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000efa:	d030      	beq.n	8000f5e <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000efc:	2382      	movs	r3, #130	; 0x82
 8000efe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000f02:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000f04:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000f06:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000f08:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000f0c:	f044 0401 	orr.w	r4, r4, #1
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000f10:	f000 001c 	and.w	r0, r0, #28
 8000f14:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000f16:	8a2c      	ldrh	r4, [r5, #16]
 8000f18:	02e4      	lsls	r4, r4, #11
 8000f1a:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000f1c:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg1;
 8000f1e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000f20:	f7ff fb74 	bl	800060c <HAL_GetTick>
 8000f24:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000f26:	f014 0001 	ands.w	r0, r4, #1
 8000f2a:	d107      	bne.n	8000f3c <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000f3a:	e00c      	b.n	8000f56 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000f3c:	f7ff fb66 	bl	800060c <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000f46:	d307      	bcc.n	8000f58 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000f54:	2003      	movs	r0, #3
}
 8000f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	691c      	ldr	r4, [r3, #16]
 8000f5c:	e7e3      	b.n	8000f26 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000f5e:	2002      	movs	r0, #2
 8000f60:	e7f9      	b.n	8000f56 <HAL_ETH_ReadPHYRegister+0x68>

08000f62 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000f62:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000f66:	2b42      	cmp	r3, #66	; 0x42
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000f6c:	d02e      	beq.n	8000fcc <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000f6e:	2342      	movs	r3, #66	; 0x42
 8000f70:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000f74:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000f76:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000f78:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000f7a:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000f7e:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000f82:	f000 001c 	and.w	r0, r0, #28
 8000f86:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000f88:	8a2c      	ldrh	r4, [r5, #16]
 8000f8a:	02e4      	lsls	r4, r4, #11
 8000f8c:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000f8e:	4304      	orrs	r4, r0
 8000f90:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000f92:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000f94:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000f96:	f7ff fb39 	bl	800060c <HAL_GetTick>
 8000f9a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000f9c:	f014 0001 	ands.w	r0, r4, #1
 8000fa0:	d103      	bne.n	8000faa <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000fa8:	e00c      	b.n	8000fc4 <HAL_ETH_WritePHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000faa:	f7ff fb2f 	bl	800060c <HAL_GetTick>
 8000fae:	1b80      	subs	r0, r0, r6
 8000fb0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000fb4:	d307      	bcc.n	8000fc6 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000fc2:	2003      	movs	r0, #3
}
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	691c      	ldr	r4, [r3, #16]
 8000fca:	e7e7      	b.n	8000f9c <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000fcc:	2002      	movs	r0, #2
 8000fce:	e7f9      	b.n	8000fc4 <HAL_ETH_WritePHYRegister+0x62>

08000fd0 <HAL_ETH_Init>:
{
 8000fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f000 80de 	beq.w	800119a <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000fde:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fe6:	b91b      	cbnz	r3, 8000ff0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000fe8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000fec:	f00a faa0 	bl	800b530 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b6a      	ldr	r3, [pc, #424]	; (80011a0 <HAL_ETH_Init+0x1d0>)
 8000ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001008:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <HAL_ETH_Init+0x1d4>)
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001010:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	6a21      	ldr	r1, [r4, #32]
 8001016:	430a      	orrs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001028:	f7ff faf0 	bl	800060c <HAL_GetTick>
 800102c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	07d0      	lsls	r0, r2, #31
 8001038:	d41d      	bmi.n	8001076 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800103a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800103c:	f000 fc3a 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001040:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <HAL_ETH_Init+0x1d8>)
 8001042:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <HAL_ETH_Init+0x1dc>)
 8001044:	4403      	add	r3, r0
 8001046:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001048:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800104c:	d822      	bhi.n	8001094 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800104e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001052:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001054:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001058:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff ff80 	bl	8000f62 <HAL_ETH_WritePHYRegister>
 8001062:	4605      	mov	r5, r0
 8001064:	b368      	cbz	r0, 80010c2 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8001066:	2101      	movs	r1, #1
 8001068:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 800106a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 800106c:	f7ff fd5a 	bl	8000b24 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001070:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001074:	e00b      	b.n	800108e <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001076:	f7ff fac9 	bl	800060c <HAL_GetTick>
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001080:	d9d5      	bls.n	800102e <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001082:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001084:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001086:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800108a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800108e:	4628      	mov	r0, r5
 8001090:	b003      	add	sp, #12
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_ETH_Init+0x1e0>)
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_ETH_Init+0x1e4>)
 8001098:	4403      	add	r3, r0
 800109a:	4293      	cmp	r3, r2
 800109c:	d802      	bhi.n	80010a4 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800109e:	f045 050c 	orr.w	r5, r5, #12
 80010a2:	e7d6      	b.n	8001052 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_ETH_Init+0x1e8>)
 80010a6:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_ETH_Init+0x1ec>)
 80010a8:	4403      	add	r3, r0
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d9d1      	bls.n	8001052 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_ETH_Init+0x1f0>)
 80010b0:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <HAL_ETH_Init+0x1f4>)
 80010b2:	4403      	add	r3, r0
 80010b4:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80010b6:	bf94      	ite	ls
 80010b8:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80010bc:	f045 0510 	orrhi.w	r5, r5, #16
 80010c0:	e7c7      	b.n	8001052 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	f7ff faa8 	bl	8000618 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010c8:	6863      	ldr	r3, [r4, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d053      	beq.n	8001176 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 80010ce:	f7ff fa9d 	bl	800060c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010d2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010d6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010d8:	466a      	mov	r2, sp
 80010da:	2101      	movs	r1, #1
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff ff06 	bl	8000eee <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010e2:	f7ff fa93 	bl	800060c <HAL_GetTick>
 80010e6:	1b80      	subs	r0, r0, r6
 80010e8:	42b8      	cmp	r0, r7
 80010ea:	d90b      	bls.n	8001104 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 80010ec:	2101      	movs	r1, #1
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fd18 	bl	8000b24 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80010fa:	2300      	movs	r3, #0
 80010fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001100:	2503      	movs	r5, #3
 8001102:	e7c4      	b.n	800108e <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001104:	9b00      	ldr	r3, [sp, #0]
 8001106:	0759      	lsls	r1, r3, #29
 8001108:	d5e6      	bpl.n	80010d8 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800110a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110e:	2100      	movs	r1, #0
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff ff26 	bl	8000f62 <HAL_ETH_WritePHYRegister>
 8001116:	2800      	cmp	r0, #0
 8001118:	d1a5      	bne.n	8001066 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 800111a:	f7ff fa77 	bl	800060c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800111e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001122:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001124:	466a      	mov	r2, sp
 8001126:	2101      	movs	r1, #1
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff fee0 	bl	8000eee <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800112e:	f7ff fa6d 	bl	800060c <HAL_GetTick>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	42b8      	cmp	r0, r7
 8001136:	d8d9      	bhi.n	80010ec <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001138:	9b00      	ldr	r3, [sp, #0]
 800113a:	069a      	lsls	r2, r3, #26
 800113c:	d5f2      	bpl.n	8001124 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800113e:	466a      	mov	r2, sp
 8001140:	2110      	movs	r1, #16
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff fed3 	bl	8000eee <HAL_ETH_ReadPHYRegister>
 8001148:	2800      	cmp	r0, #0
 800114a:	d18c      	bne.n	8001066 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800114c:	9b00      	ldr	r3, [sp, #0]
 800114e:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001152:	bf18      	it	ne
 8001154:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001158:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 800115a:	bf4c      	ite	mi
 800115c:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 800115e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001162:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001164:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001166:	2100      	movs	r1, #0
 8001168:	4620      	mov	r0, r4
 800116a:	f7ff fcdb 	bl	8000b24 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800116e:	2301      	movs	r3, #1
 8001170:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001174:	e78b      	b.n	800108e <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001176:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800117a:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800117c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001180:	b292      	uxth	r2, r2
 8001182:	4629      	mov	r1, r5
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff feec 	bl	8000f62 <HAL_ETH_WritePHYRegister>
 800118a:	2800      	cmp	r0, #0
 800118c:	f47f af6b 	bne.w	8001066 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001190:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001194:	f7ff fa40 	bl	8000618 <HAL_Delay>
 8001198:	e7e5      	b.n	8001166 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 800119a:	2501      	movs	r5, #1
 800119c:	e777      	b.n	800108e <HAL_ETH_Init+0xbe>
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40013800 	.word	0x40013800
 80011a8:	feced300 	.word	0xfeced300
 80011ac:	00e4e1bf 	.word	0x00e4e1bf
 80011b0:	fde9f140 	.word	0xfde9f140
 80011b4:	017d783f 	.word	0x017d783f
 80011b8:	fc6c7900 	.word	0xfc6c7900
 80011bc:	026259ff 	.word	0x026259ff
 80011c0:	fa0a1f00 	.word	0xfa0a1f00
 80011c4:	02faf07f 	.word	0x02faf07f

080011c8 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 80011c8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80011cc:	2b01      	cmp	r3, #1
{  
 80011ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011d0:	4605      	mov	r5, r0
 80011d2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 80011d6:	d031      	beq.n	800123c <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 80011d8:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80011da:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80011dc:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 80011e0:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80011e2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 80011e4:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80011e6:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 80011ea:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80011ee:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80011f4:	f7ff fc70 	bl	8000ad8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	9a01      	ldr	r2, [sp, #4]
 80011fc:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 80011fe:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	f042 0204 	orr.w	r2, r2, #4
 8001206:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800120c:	f7ff fc64 	bl	8000ad8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	9a00      	ldr	r2, [sp, #0]
 8001214:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001216:	4628      	mov	r0, r5
 8001218:	f7ff fc70 	bl	8000afc <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800121c:	682a      	ldr	r2, [r5, #0]
 800121e:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8001222:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001224:	58d1      	ldr	r1, [r2, r3]
 8001226:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800122a:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800122c:	58d1      	ldr	r1, [r2, r3]
 800122e:	f041 0102 	orr.w	r1, r1, #2
 8001232:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001234:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001238:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 800123c:	b002      	add	sp, #8
 800123e:	bd70      	pop	{r4, r5, r6, pc}

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001244:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001246:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001248:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001410 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001414 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001254:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001256:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800125c:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001260:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8001264:	45b4      	cmp	ip, r6
 8001266:	f040 80b6 	bne.w	80013d6 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126a:	684c      	ldr	r4, [r1, #4]
 800126c:	f024 0710 	bic.w	r7, r4, #16
 8001270:	2f02      	cmp	r7, #2
 8001272:	d116      	bne.n	80012a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001274:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001278:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001280:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001284:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001288:	f04f 0e0f 	mov.w	lr, #15
 800128c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001290:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001294:	690d      	ldr	r5, [r1, #16]
 8001296:	fa05 f50b 	lsl.w	r5, r5, fp
 800129a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	f8ca 5020 	str.w	r5, [sl, #32]
 80012a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012a8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ac:	fa05 f50a 	lsl.w	r5, r5, sl
 80012b0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b2:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ba:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80012c6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ca:	d811      	bhi.n	80012f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80012cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ce:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d2:	68cf      	ldr	r7, [r1, #12]
 80012d4:	fa07 fe0a 	lsl.w	lr, r7, sl
 80012d8:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 80012dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012e4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80012e8:	409f      	lsls	r7, r3
 80012ea:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80012ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80012f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f4:	688f      	ldr	r7, [r1, #8]
 80012f6:	fa07 f70a 	lsl.w	r7, r7, sl
 80012fa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80012fc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fe:	00e5      	lsls	r5, r4, #3
 8001300:	d569      	bpl.n	80013d6 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	f04f 0b00 	mov.w	fp, #0
 8001306:	f8cd b00c 	str.w	fp, [sp, #12]
 800130a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130e:	4d3f      	ldr	r5, [pc, #252]	; (800140c <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001314:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001318:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800131c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001320:	9703      	str	r7, [sp, #12]
 8001322:	9f03      	ldr	r7, [sp, #12]
 8001324:	f023 0703 	bic.w	r7, r3, #3
 8001328:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800132c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001334:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001338:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800133c:	f04f 0c0f 	mov.w	ip, #15
 8001340:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001344:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001346:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	d04b      	beq.n	80013e4 <HAL_GPIO_Init+0x1a4>
 800134c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001350:	42a8      	cmp	r0, r5
 8001352:	d049      	beq.n	80013e8 <HAL_GPIO_Init+0x1a8>
 8001354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001358:	42a8      	cmp	r0, r5
 800135a:	d047      	beq.n	80013ec <HAL_GPIO_Init+0x1ac>
 800135c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001360:	42a8      	cmp	r0, r5
 8001362:	d045      	beq.n	80013f0 <HAL_GPIO_Init+0x1b0>
 8001364:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001368:	42a8      	cmp	r0, r5
 800136a:	d043      	beq.n	80013f4 <HAL_GPIO_Init+0x1b4>
 800136c:	4548      	cmp	r0, r9
 800136e:	d043      	beq.n	80013f8 <HAL_GPIO_Init+0x1b8>
 8001370:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001374:	42a8      	cmp	r0, r5
 8001376:	d041      	beq.n	80013fc <HAL_GPIO_Init+0x1bc>
 8001378:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800137c:	42a8      	cmp	r0, r5
 800137e:	d03f      	beq.n	8001400 <HAL_GPIO_Init+0x1c0>
 8001380:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001384:	42a8      	cmp	r0, r5
 8001386:	d03d      	beq.n	8001404 <HAL_GPIO_Init+0x1c4>
 8001388:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800138c:	42a8      	cmp	r0, r5
 800138e:	bf14      	ite	ne
 8001390:	250a      	movne	r5, #10
 8001392:	2509      	moveq	r5, #9
 8001394:	fa05 f50e 	lsl.w	r5, r5, lr
 8001398:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800139e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013a6:	bf0c      	ite	eq
 80013a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013aa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80013ac:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80013ae:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013b4:	bf0c      	ite	eq
 80013b6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013b8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80013ba:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013bc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013be:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80013c2:	bf0c      	ite	eq
 80013c4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013c6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80013c8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80013ca:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013cc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80013ce:	bf54      	ite	pl
 80013d0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80013d2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80013d4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	3301      	adds	r3, #1
 80013d8:	2b10      	cmp	r3, #16
 80013da:	f47f af3c 	bne.w	8001256 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80013de:	b005      	add	sp, #20
 80013e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e4:	465d      	mov	r5, fp
 80013e6:	e7d5      	b.n	8001394 <HAL_GPIO_Init+0x154>
 80013e8:	2501      	movs	r5, #1
 80013ea:	e7d3      	b.n	8001394 <HAL_GPIO_Init+0x154>
 80013ec:	2502      	movs	r5, #2
 80013ee:	e7d1      	b.n	8001394 <HAL_GPIO_Init+0x154>
 80013f0:	2503      	movs	r5, #3
 80013f2:	e7cf      	b.n	8001394 <HAL_GPIO_Init+0x154>
 80013f4:	2504      	movs	r5, #4
 80013f6:	e7cd      	b.n	8001394 <HAL_GPIO_Init+0x154>
 80013f8:	2505      	movs	r5, #5
 80013fa:	e7cb      	b.n	8001394 <HAL_GPIO_Init+0x154>
 80013fc:	2506      	movs	r5, #6
 80013fe:	e7c9      	b.n	8001394 <HAL_GPIO_Init+0x154>
 8001400:	2507      	movs	r5, #7
 8001402:	e7c7      	b.n	8001394 <HAL_GPIO_Init+0x154>
 8001404:	2508      	movs	r5, #8
 8001406:	e7c5      	b.n	8001394 <HAL_GPIO_Init+0x154>
 8001408:	40013c00 	.word	0x40013c00
 800140c:	40020000 	.word	0x40020000
 8001410:	40023800 	.word	0x40023800
 8001414:	40021400 	.word	0x40021400

08001418 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	b10a      	cbz	r2, 800141e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141a:	6181      	str	r1, [r0, #24]
  }
}
 800141c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	0409      	lsls	r1, r1, #16
 8001420:	e7fb      	b.n	800141a <HAL_GPIO_WritePin+0x2>
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	4604      	mov	r4, r0
 800142a:	b918      	cbnz	r0, 8001434 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800142e:	b002      	add	sp, #8
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	07dd      	lsls	r5, r3, #31
 8001438:	d410      	bmi.n	800145c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	0798      	lsls	r0, r3, #30
 800143e:	d458      	bmi.n	80014f2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	071a      	lsls	r2, r3, #28
 8001444:	f100 809a 	bmi.w	800157c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	075b      	lsls	r3, r3, #29
 800144c:	f100 80b8 	bmi.w	80015c0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001450:	69a2      	ldr	r2, [r4, #24]
 8001452:	2a00      	cmp	r2, #0
 8001454:	f040 8119 	bne.w	800168a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001458:	2000      	movs	r0, #0
 800145a:	e7e8      	b.n	800142e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145c:	4ba6      	ldr	r3, [pc, #664]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	f002 020c 	and.w	r2, r2, #12
 8001464:	2a04      	cmp	r2, #4
 8001466:	d007      	beq.n	8001478 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146e:	2a08      	cmp	r2, #8
 8001470:	d10a      	bne.n	8001488 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	0259      	lsls	r1, r3, #9
 8001476:	d507      	bpl.n	8001488 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b9f      	ldr	r3, [pc, #636]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	039a      	lsls	r2, r3, #14
 800147e:	d5dc      	bpl.n	800143a <HAL_RCC_OscConfig+0x16>
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1d9      	bne.n	800143a <HAL_RCC_OscConfig+0x16>
 8001486:	e7d1      	b.n	800142c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	6863      	ldr	r3, [r4, #4]
 800148a:	4d9b      	ldr	r5, [pc, #620]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d111      	bne.n	80014b6 <HAL_RCC_OscConfig+0x92>
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800149a:	f7ff f8b7 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4d96      	ldr	r5, [pc, #600]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80014a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	039b      	lsls	r3, r3, #14
 80014a6:	d4c8      	bmi.n	800143a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff f8b0 	bl	800060c <HAL_GetTick>
 80014ac:	1b80      	subs	r0, r0, r6
 80014ae:	2864      	cmp	r0, #100	; 0x64
 80014b0:	d9f7      	bls.n	80014a2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80014b2:	2003      	movs	r0, #3
 80014b4:	e7bb      	b.n	800142e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ba:	d104      	bne.n	80014c6 <HAL_RCC_OscConfig+0xa2>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c2:	602b      	str	r3, [r5, #0]
 80014c4:	e7e5      	b.n	8001492 <HAL_RCC_OscConfig+0x6e>
 80014c6:	682a      	ldr	r2, [r5, #0]
 80014c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014cc:	602a      	str	r2, [r5, #0]
 80014ce:	682a      	ldr	r2, [r5, #0]
 80014d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014d4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1df      	bne.n	800149a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80014da:	f7ff f897 	bl	800060c <HAL_GetTick>
 80014de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	039f      	lsls	r7, r3, #14
 80014e4:	d5a9      	bpl.n	800143a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e6:	f7ff f891 	bl	800060c <HAL_GetTick>
 80014ea:	1b80      	subs	r0, r0, r6
 80014ec:	2864      	cmp	r0, #100	; 0x64
 80014ee:	d9f7      	bls.n	80014e0 <HAL_RCC_OscConfig+0xbc>
 80014f0:	e7df      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	f012 0f0c 	tst.w	r2, #12
 80014fa:	d007      	beq.n	800150c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001502:	2a08      	cmp	r2, #8
 8001504:	d111      	bne.n	800152a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	025e      	lsls	r6, r3, #9
 800150a:	d40e      	bmi.n	800152a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	0795      	lsls	r5, r2, #30
 8001512:	d502      	bpl.n	800151a <HAL_RCC_OscConfig+0xf6>
 8001514:	68e2      	ldr	r2, [r4, #12]
 8001516:	2a01      	cmp	r2, #1
 8001518:	d188      	bne.n	800142c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	6921      	ldr	r1, [r4, #16]
 800151e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001522:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001526:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001528:	e78a      	b.n	8001440 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152a:	68e2      	ldr	r2, [r4, #12]
 800152c:	4b73      	ldr	r3, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x2d8>)
 800152e:	b1b2      	cbz	r2, 800155e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001534:	f7ff f86a 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4d6f      	ldr	r5, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800153a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	0798      	lsls	r0, r3, #30
 8001540:	d507      	bpl.n	8001552 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	6922      	ldr	r2, [r4, #16]
 8001546:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800154a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800154e:	602b      	str	r3, [r5, #0]
 8001550:	e776      	b.n	8001440 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff f85b 	bl	800060c <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	2802      	cmp	r0, #2
 800155a:	d9ef      	bls.n	800153c <HAL_RCC_OscConfig+0x118>
 800155c:	e7a9      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800155e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001560:	f7ff f854 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001564:	4d64      	ldr	r5, [pc, #400]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001566:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	0799      	lsls	r1, r3, #30
 800156c:	f57f af68 	bpl.w	8001440 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff f84c 	bl	800060c <HAL_GetTick>
 8001574:	1b80      	subs	r0, r0, r6
 8001576:	2802      	cmp	r0, #2
 8001578:	d9f6      	bls.n	8001568 <HAL_RCC_OscConfig+0x144>
 800157a:	e79a      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800157c:	6962      	ldr	r2, [r4, #20]
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_RCC_OscConfig+0x2dc>)
 8001580:	b17a      	cbz	r2, 80015a2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001586:	f7ff f841 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4d5b      	ldr	r5, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800158c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001590:	079f      	lsls	r7, r3, #30
 8001592:	f53f af59 	bmi.w	8001448 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff f839 	bl	800060c <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	2802      	cmp	r0, #2
 800159e:	d9f6      	bls.n	800158e <HAL_RCC_OscConfig+0x16a>
 80015a0:	e787      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80015a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015a4:	f7ff f832 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	4d53      	ldr	r5, [pc, #332]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80015aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015ae:	0798      	lsls	r0, r3, #30
 80015b0:	f57f af4a 	bpl.w	8001448 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff f82a 	bl	800060c <HAL_GetTick>
 80015b8:	1b80      	subs	r0, r0, r6
 80015ba:	2802      	cmp	r0, #2
 80015bc:	d9f6      	bls.n	80015ac <HAL_RCC_OscConfig+0x188>
 80015be:	e778      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 80015c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80015c8:	d128      	bne.n	800161c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4d48      	ldr	r5, [pc, #288]	; (8001704 <HAL_RCC_OscConfig+0x2e0>)
 80015e2:	682b      	ldr	r3, [r5, #0]
 80015e4:	05d9      	lsls	r1, r3, #23
 80015e6:	d51b      	bpl.n	8001620 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	68a3      	ldr	r3, [r4, #8]
 80015ea:	4d43      	ldr	r5, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d127      	bne.n	8001640 <HAL_RCC_OscConfig+0x21c>
 80015f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80015f8:	f7ff f808 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	4d3e      	ldr	r5, [pc, #248]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80015fe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001606:	079b      	lsls	r3, r3, #30
 8001608:	d539      	bpl.n	800167e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800160a:	2e00      	cmp	r6, #0
 800160c:	f43f af20 	beq.w	8001450 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 8001612:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	e719      	b.n	8001450 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800161c:	2600      	movs	r6, #0
 800161e:	e7df      	b.n	80015e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001628:	f7fe fff0 	bl	800060c <HAL_GetTick>
 800162c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	682b      	ldr	r3, [r5, #0]
 8001630:	05da      	lsls	r2, r3, #23
 8001632:	d4d9      	bmi.n	80015e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7fe ffea 	bl	800060c <HAL_GetTick>
 8001638:	1bc0      	subs	r0, r0, r7
 800163a:	2802      	cmp	r0, #2
 800163c:	d9f7      	bls.n	800162e <HAL_RCC_OscConfig+0x20a>
 800163e:	e738      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	2b05      	cmp	r3, #5
 8001642:	d104      	bne.n	800164e <HAL_RCC_OscConfig+0x22a>
 8001644:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	672b      	str	r3, [r5, #112]	; 0x70
 800164c:	e7d0      	b.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
 800164e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	672a      	str	r2, [r5, #112]	; 0x70
 8001656:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001658:	f022 0204 	bic.w	r2, r2, #4
 800165c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ca      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001662:	f7fe ffd3 	bl	800060c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800166a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800166e:	0798      	lsls	r0, r3, #30
 8001670:	d5cb      	bpl.n	800160a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7fe ffcb 	bl	800060c <HAL_GetTick>
 8001676:	1bc0      	subs	r0, r0, r7
 8001678:	4540      	cmp	r0, r8
 800167a:	d9f7      	bls.n	800166c <HAL_RCC_OscConfig+0x248>
 800167c:	e719      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7fe ffc5 	bl	800060c <HAL_GetTick>
 8001682:	1bc0      	subs	r0, r0, r7
 8001684:	4540      	cmp	r0, r8
 8001686:	d9bd      	bls.n	8001604 <HAL_RCC_OscConfig+0x1e0>
 8001688:	e713      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168a:	4d1b      	ldr	r5, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800168c:	68ab      	ldr	r3, [r5, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	f43f aeca 	beq.w	800142c <HAL_RCC_OscConfig+0x8>
 8001698:	4e1b      	ldr	r6, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 800169a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800169e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	d134      	bne.n	800170c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80016a2:	f7fe ffb3 	bl	800060c <HAL_GetTick>
 80016a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	0199      	lsls	r1, r3, #6
 80016ac:	d41e      	bmi.n	80016ec <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4c0d      	ldr	r4, [pc, #52]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c4:	0852      	lsrs	r2, r2, #1
 80016c6:	3a01      	subs	r2, #1
 80016c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016ce:	2301      	movs	r3, #1
 80016d0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016d2:	f7fe ff9b 	bl	800060c <HAL_GetTick>
 80016d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	019a      	lsls	r2, r3, #6
 80016dc:	f53f aebc 	bmi.w	8001458 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7fe ff94 	bl	800060c <HAL_GetTick>
 80016e4:	1b40      	subs	r0, r0, r5
 80016e6:	2802      	cmp	r0, #2
 80016e8:	d9f6      	bls.n	80016d8 <HAL_RCC_OscConfig+0x2b4>
 80016ea:	e6e2      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7fe ff8e 	bl	800060c <HAL_GetTick>
 80016f0:	1bc0      	subs	r0, r0, r7
 80016f2:	2802      	cmp	r0, #2
 80016f4:	d9d8      	bls.n	80016a8 <HAL_RCC_OscConfig+0x284>
 80016f6:	e6dc      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470000 	.word	0x42470000
 8001700:	42470e80 	.word	0x42470e80
 8001704:	40007000 	.word	0x40007000
 8001708:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800170c:	f7fe ff7e 	bl	800060c <HAL_GetTick>
 8001710:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	682b      	ldr	r3, [r5, #0]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	f57f ae9f 	bpl.w	8001458 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7fe ff77 	bl	800060c <HAL_GetTick>
 800171e:	1b00      	subs	r0, r0, r4
 8001720:	2802      	cmp	r0, #2
 8001722:	d9f6      	bls.n	8001712 <HAL_RCC_OscConfig+0x2ee>
 8001724:	e6c5      	b.n	80014b2 <HAL_RCC_OscConfig+0x8e>
 8001726:	bf00      	nop

08001728 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001728:	4913      	ldr	r1, [pc, #76]	; (8001778 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800172a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172c:	688b      	ldr	r3, [r1, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d003      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0x16>
 8001736:	2b08      	cmp	r3, #8
 8001738:	d003      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800173c:	e000      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8001740:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001742:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001744:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001746:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001748:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174c:	bf14      	ite	ne
 800174e:	480c      	ldrne	r0, [pc, #48]	; (8001780 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	480a      	ldreq	r0, [pc, #40]	; (800177c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001752:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001756:	bf18      	it	ne
 8001758:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	fba1 0100 	umull	r0, r1, r1, r0
 8001762:	f7fe fdad 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_RCC_GetSysClockFreq+0x50>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800176e:	3301      	adds	r3, #1
 8001770:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001772:	fbb0 f0f3 	udiv	r0, r0, r3
 8001776:	e7e3      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x18>
 8001778:	40023800 	.word	0x40023800
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200

08001784 <HAL_RCC_ClockConfig>:
{
 8001784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001788:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800178a:	4604      	mov	r4, r0
 800178c:	b910      	cbnz	r0, 8001794 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800178e:	2001      	movs	r0, #1
}
 8001790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_ClockConfig+0x120>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f002 020f 	and.w	r2, r2, #15
 800179c:	428a      	cmp	r2, r1
 800179e:	d327      	bcc.n	80017f0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	6821      	ldr	r1, [r4, #0]
 80017a2:	078f      	lsls	r7, r1, #30
 80017a4:	d42c      	bmi.n	8001800 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	07c8      	lsls	r0, r1, #31
 80017a8:	d43f      	bmi.n	800182a <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_RCC_ClockConfig+0x120>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f002 020f 	and.w	r2, r2, #15
 80017b2:	42aa      	cmp	r2, r5
 80017b4:	d864      	bhi.n	8001880 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	0751      	lsls	r1, r2, #29
 80017ba:	d46a      	bmi.n	8001892 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	0713      	lsls	r3, r2, #28
 80017be:	d507      	bpl.n	80017d0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c0:	4a39      	ldr	r2, [pc, #228]	; (80018a8 <HAL_RCC_ClockConfig+0x124>)
 80017c2:	6921      	ldr	r1, [r4, #16]
 80017c4:	6893      	ldr	r3, [r2, #8]
 80017c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d0:	f7ff ffaa 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80017d4:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_ClockConfig+0x124>)
 80017d6:	4a35      	ldr	r2, [pc, #212]	; (80018ac <HAL_RCC_ClockConfig+0x128>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	40d8      	lsrs	r0, r3
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_ClockConfig+0x12c>)
 80017e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f00a fd98 	bl	800c31c <HAL_InitTick>
  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
 80017ee:	e7cf      	b.n	8001790 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d1c7      	bne.n	800178e <HAL_RCC_ClockConfig+0xa>
 80017fe:	e7cf      	b.n	80017a0 <HAL_RCC_ClockConfig+0x1c>
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001802:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001806:	bf1e      	ittt	ne
 8001808:	689a      	ldrne	r2, [r3, #8]
 800180a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800180e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001812:	bf42      	ittt	mi
 8001814:	689a      	ldrmi	r2, [r3, #8]
 8001816:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800181a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	68a0      	ldr	r0, [r4, #8]
 8001820:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001824:	4302      	orrs	r2, r0
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	e7bd      	b.n	80017a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	6862      	ldr	r2, [r4, #4]
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_ClockConfig+0x124>)
 800182e:	2a01      	cmp	r2, #1
 8001830:	d11c      	bne.n	800186c <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	d0a9      	beq.n	800178e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4e1b      	ldr	r6, [pc, #108]	; (80018a8 <HAL_RCC_ClockConfig+0x124>)
 800183c:	68b3      	ldr	r3, [r6, #8]
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	4313      	orrs	r3, r2
 8001844:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001846:	f7fe fee1 	bl	800060c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800184e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001850:	68b3      	ldr	r3, [r6, #8]
 8001852:	6862      	ldr	r2, [r4, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800185c:	d0a5      	beq.n	80017aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7fe fed5 	bl	800060c <HAL_GetTick>
 8001862:	1bc0      	subs	r0, r0, r7
 8001864:	4540      	cmp	r0, r8
 8001866:	d9f3      	bls.n	8001850 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8001868:	2003      	movs	r0, #3
 800186a:	e791      	b.n	8001790 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186c:	1e91      	subs	r1, r2, #2
 800186e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	d802      	bhi.n	800187a <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001874:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001878:	e7de      	b.n	8001838 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	f013 0f02 	tst.w	r3, #2
 800187e:	e7db      	b.n	8001838 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001880:	b2ea      	uxtb	r2, r5
 8001882:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	42ab      	cmp	r3, r5
 800188c:	f47f af7f 	bne.w	800178e <HAL_RCC_ClockConfig+0xa>
 8001890:	e791      	b.n	80017b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001892:	4905      	ldr	r1, [pc, #20]	; (80018a8 <HAL_RCC_ClockConfig+0x124>)
 8001894:	68e0      	ldr	r0, [r4, #12]
 8001896:	688b      	ldr	r3, [r1, #8]
 8001898:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800189c:	4303      	orrs	r3, r0
 800189e:	608b      	str	r3, [r1, #8]
 80018a0:	e78c      	b.n	80017bc <HAL_RCC_ClockConfig+0x38>
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	40023800 	.word	0x40023800
 80018ac:	0800f957 	.word	0x0800f957
 80018b0:	20000010 	.word	0x20000010

080018b4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018b4:	4b01      	ldr	r3, [pc, #4]	; (80018bc <HAL_RCC_GetHCLKFreq+0x8>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000010 	.word	0x20000010

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018ce:	6810      	ldr	r0, [r2, #0]
}
 80018d0:	40d8      	lsrs	r0, r3
 80018d2:	4770      	bx	lr
 80018d4:	40023800 	.word	0x40023800
 80018d8:	0800f967 	.word	0x0800f967
 80018dc:	20000010 	.word	0x20000010

080018e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018ee:	6810      	ldr	r0, [r2, #0]
}
 80018f0:	40d8      	lsrs	r0, r3
 80018f2:	4770      	bx	lr
 80018f4:	40023800 	.word	0x40023800
 80018f8:	0800f967 	.word	0x0800f967
 80018fc:	20000010 	.word	0x20000010

08001900 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001900:	230f      	movs	r3, #15
 8001902:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_GetClockConfig+0x34>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	f002 0203 	and.w	r2, r2, #3
 800190c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001914:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800191c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001926:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_RCC_GetClockConfig+0x38>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	600b      	str	r3, [r1, #0]
}
 8001932:	4770      	bx	lr
 8001934:	40023800 	.word	0x40023800
 8001938:	40023c00 	.word	0x40023c00

0800193c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001940:	9e06      	ldr	r6, [sp, #24]
 8001942:	4604      	mov	r4, r0
 8001944:	4688      	mov	r8, r1
 8001946:	4617      	mov	r7, r2
 8001948:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	6893      	ldr	r3, [r2, #8]
 800194e:	ea38 0303 	bics.w	r3, r8, r3
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	429f      	cmp	r7, r3
 800195a:	d101      	bne.n	8001960 <SPI_WaitFlagStateUntilTimeout+0x24>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	e02b      	b.n	80019b8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    if(Timeout != HAL_MAX_DELAY)
 8001960:	1c6b      	adds	r3, r5, #1
 8001962:	d0f3      	beq.n	800194c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001964:	bb55      	cbnz	r5, 80019bc <SPI_WaitFlagStateUntilTimeout+0x80>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800196e:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001970:	6862      	ldr	r2, [r4, #4]
 8001972:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001976:	d10a      	bne.n	800198e <SPI_WaitFlagStateUntilTimeout+0x52>
 8001978:	68a2      	ldr	r2, [r4, #8]
 800197a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800197e:	d002      	beq.n	8001986 <SPI_WaitFlagStateUntilTimeout+0x4a>
 8001980:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001984:	d103      	bne.n	800198e <SPI_WaitFlagStateUntilTimeout+0x52>
          __HAL_SPI_DISABLE(hspi);
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800198c:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800198e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001990:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001994:	d109      	bne.n	80019aa <SPI_WaitFlagStateUntilTimeout+0x6e>
          SPI_RESET_CRC(hspi);
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800199c:	0412      	lsls	r2, r2, #16
 800199e:	0c12      	lsrs	r2, r2, #16
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019a8:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80019b0:	2300      	movs	r3, #0
 80019b2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80019b6:	2003      	movs	r0, #3
}
 80019b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80019bc:	f7fe fe26 	bl	800060c <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	42a8      	cmp	r0, r5
 80019c4:	d3c1      	bcc.n	800194a <SPI_WaitFlagStateUntilTimeout+0xe>
 80019c6:	e7ce      	b.n	8001966 <SPI_WaitFlagStateUntilTimeout+0x2a>

080019c8 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019c8:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019ca:	460b      	mov	r3, r1
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	2200      	movs	r2, #0
{
 80019d2:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019d4:	f7ff ffb2 	bl	800193c <SPI_WaitFlagStateUntilTimeout>
 80019d8:	b120      	cbz	r0, 80019e4 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80019e2:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80019e4:	b002      	add	sp, #8
 80019e6:	bd10      	pop	{r4, pc}

080019e8 <HAL_SPI_Init>:
{
 80019e8:	b510      	push	{r4, lr}
  if(hspi == NULL)
 80019ea:	4604      	mov	r4, r0
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d036      	beq.n	8001a5e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 80019f4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80019f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019fc:	b91b      	cbnz	r3, 8001a06 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80019fe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001a02:	f00a fc05 	bl	800c210 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001a06:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a08:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001a10:	680b      	ldr	r3, [r1, #0]
 8001a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a16:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a18:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001a1c:	4303      	orrs	r3, r0
 8001a1e:	68e0      	ldr	r0, [r4, #12]
 8001a20:	4303      	orrs	r3, r0
 8001a22:	6920      	ldr	r0, [r4, #16]
 8001a24:	4303      	orrs	r3, r0
 8001a26:	6960      	ldr	r0, [r4, #20]
 8001a28:	4303      	orrs	r3, r0
 8001a2a:	69e0      	ldr	r0, [r4, #28]
 8001a2c:	4303      	orrs	r3, r0
 8001a2e:	6a20      	ldr	r0, [r4, #32]
 8001a30:	4303      	orrs	r3, r0
 8001a32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a34:	4303      	orrs	r3, r0
 8001a36:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001a3a:	4303      	orrs	r3, r0
 8001a3c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a3e:	0c12      	lsrs	r2, r2, #16
 8001a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a42:	f002 0204 	and.w	r2, r2, #4
 8001a46:	431a      	orrs	r2, r3
 8001a48:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a4a:	69cb      	ldr	r3, [r1, #28]
 8001a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a50:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a52:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001a54:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a56:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001a5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
 8001a60:	e7fc      	b.n	8001a5c <HAL_SPI_Init+0x74>
	...

08001a64 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 8001a64:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001a68:	2b01      	cmp	r3, #1
{
 8001a6a:	b510      	push	{r4, lr}
 8001a6c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001a6e:	d045      	beq.n	8001afc <HAL_SPI_Transmit_DMA+0x98>
 8001a70:	2301      	movs	r3, #1
 8001a72:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if(hspi->State != HAL_SPI_STATE_READY)
 8001a76:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8001a7a:	b2c0      	uxtb	r0, r0
 8001a7c:	4298      	cmp	r0, r3
 8001a7e:	d13b      	bne.n	8001af8 <HAL_SPI_Transmit_DMA+0x94>
  if((pData == NULL) || (Size == 0))
 8001a80:	2900      	cmp	r1, #0
 8001a82:	d035      	beq.n	8001af0 <HAL_SPI_Transmit_DMA+0x8c>
 8001a84:	2a00      	cmp	r2, #0
 8001a86:	d033      	beq.n	8001af0 <HAL_SPI_Transmit_DMA+0x8c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a92:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001a94:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a96:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 8001a9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001a9c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9e:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 8001aa0:	86a2      	strh	r2, [r4, #52]	; 0x34
 8001aa2:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001aa4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001aa6:	6321      	str	r1, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001aac:	bf02      	ittt	eq
 8001aae:	6813      	ldreq	r3, [r2, #0]
 8001ab0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001ab4:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_SPI_Transmit_DMA+0x9c>)
 8001ab8:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_SPI_Transmit_DMA+0xa0>)
 8001abc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_SPI_Transmit_DMA+0xa4>)
 8001ac0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8001ac6:	320c      	adds	r2, #12
 8001ac8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001aca:	f7fe fec1 	bl	8000850 <HAL_DMA_Start_IT>
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001ad4:	bf5e      	ittt	pl
 8001ad6:	681a      	ldrpl	r2, [r3, #0]
 8001ad8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001adc:	601a      	strpl	r2, [r3, #0]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	f042 0202 	orr.w	r2, r2, #2
 8001aec:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001aee:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8001af0:	2300      	movs	r3, #0
 8001af2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001af6:	bd10      	pop	{r4, pc}
    errorcode = HAL_BUSY;
 8001af8:	2002      	movs	r0, #2
 8001afa:	e7f9      	b.n	8001af0 <HAL_SPI_Transmit_DMA+0x8c>
  __HAL_LOCK(hspi);
 8001afc:	2002      	movs	r0, #2
 8001afe:	e7fa      	b.n	8001af6 <HAL_SPI_Transmit_DMA+0x92>
 8001b00:	08001b37 	.word	0x08001b37
 8001b04:	08001b65 	.word	0x08001b65
 8001b08:	08001b43 	.word	0x08001b43

08001b0c <HAL_SPI_DMAStop>:
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	4604      	mov	r4, r0
  if(hspi->hdmatx != NULL)
 8001b10:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001b12:	b108      	cbz	r0, 8001b18 <HAL_SPI_DMAStop+0xc>
    HAL_DMA_Abort(hspi->hdmatx);
 8001b14:	f7fe feda 	bl	80008cc <HAL_DMA_Abort>
  if(hspi->hdmarx != NULL)
 8001b18:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001b1a:	b108      	cbz	r0, 8001b20 <HAL_SPI_DMAStop+0x14>
    HAL_DMA_Abort(hspi->hdmarx);
 8001b1c:	f7fe fed6 	bl	80008cc <HAL_DMA_Abort>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001b20:	6822      	ldr	r2, [r4, #0]
 8001b22:	6853      	ldr	r3, [r2, #4]
 8001b24:	f023 0303 	bic.w	r3, r3, #3
 8001b28:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001b30:	2000      	movs	r0, #0
 8001b32:	bd10      	pop	{r4, pc}

08001b34 <HAL_SPI_TxHalfCpltCallback>:
 8001b34:	4770      	bx	lr

08001b36 <SPI_DMAHalfTransmitCplt>:
{
 8001b36:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001b38:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b3a:	f7ff fffb 	bl	8001b34 <HAL_SPI_TxHalfCpltCallback>
}
 8001b3e:	bd08      	pop	{r3, pc}

08001b40 <HAL_SPI_ErrorCallback>:
 8001b40:	4770      	bx	lr

08001b42 <SPI_DMAError>:
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b42:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001b44:	6802      	ldr	r2, [r0, #0]
{
 8001b46:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001b48:	6853      	ldr	r3, [r2, #4]
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001b50:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8001b5e:	f7ff ffef 	bl	8001b40 <HAL_SPI_ErrorCallback>
}
 8001b62:	bd08      	pop	{r3, pc}

08001b64 <SPI_DMATransmitCplt>:
{
 8001b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b66:	4605      	mov	r5, r0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b68:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8001b6a:	f7fe fd4f 	bl	800060c <HAL_GetTick>
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001b6e:	682b      	ldr	r3, [r5, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 8001b74:	4602      	mov	r2, r0
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001b76:	d422      	bmi.n	8001bbe <SPI_DMATransmitCplt+0x5a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001b78:	6821      	ldr	r1, [r4, #0]
 8001b7a:	684b      	ldr	r3, [r1, #4]
 8001b7c:	f023 0302 	bic.w	r3, r3, #2
 8001b80:	604b      	str	r3, [r1, #4]
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001b82:	4620      	mov	r0, r4
 8001b84:	2164      	movs	r1, #100	; 0x64
 8001b86:	f7ff ff1f 	bl	80019c8 <SPI_CheckFlag_BSY>
 8001b8a:	b118      	cbz	r0, 8001b94 <SPI_DMATransmitCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6563      	str	r3, [r4, #84]	; 0x54
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b94:	68a3      	ldr	r3, [r4, #8]
 8001b96:	b933      	cbnz	r3, 8001ba6 <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	9201      	str	r2, [sp, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bb2:	b123      	cbz	r3, 8001bbe <SPI_DMATransmitCplt+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff ffc3 	bl	8001b40 <HAL_SPI_ErrorCallback>
}
 8001bba:	b003      	add	sp, #12
 8001bbc:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f00a fad6 	bl	800c170 <HAL_SPI_TxCpltCallback>
 8001bc4:	e7f9      	b.n	8001bba <SPI_DMATransmitCplt+0x56>

08001bc6 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc8:	6803      	ldr	r3, [r0, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001bda:	2000      	movs	r0, #0
 8001bdc:	4770      	bx	lr

08001bde <HAL_TIM_OC_DelayElapsedCallback>:
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIM_IC_CaptureCallback>:
 8001be0:	4770      	bx	lr

08001be2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001be2:	4770      	bx	lr

08001be4 <HAL_TIM_TriggerCallback>:
 8001be4:	4770      	bx	lr

08001be6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be6:	6803      	ldr	r3, [r0, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	0791      	lsls	r1, r2, #30
{
 8001bec:	b510      	push	{r4, lr}
 8001bee:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf0:	d50e      	bpl.n	8001c10 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	0792      	lsls	r2, r2, #30
 8001bf6:	d50b      	bpl.n	8001c10 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bf8:	f06f 0202 	mvn.w	r2, #2
 8001bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bfe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c00:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c02:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c04:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c06:	d077      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001c08:	f7ff ffea 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	0750      	lsls	r0, r2, #29
 8001c16:	d510      	bpl.n	8001c3a <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	0751      	lsls	r1, r2, #29
 8001c1c:	d50d      	bpl.n	8001c3a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c1e:	f06f 0204 	mvn.w	r2, #4
 8001c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c24:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c26:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c28:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2c:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c30:	d068      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	f7ff ffd5 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	2300      	movs	r3, #0
 8001c38:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	0712      	lsls	r2, r2, #28
 8001c40:	d50f      	bpl.n	8001c62 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	0710      	lsls	r0, r2, #28
 8001c46:	d50c      	bpl.n	8001c62 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c48:	f06f 0208 	mvn.w	r2, #8
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c50:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c52:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c54:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c58:	d05a      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	f7ff ffc1 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	06d2      	lsls	r2, r2, #27
 8001c68:	d510      	bpl.n	8001c8c <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	06d0      	lsls	r0, r2, #27
 8001c6e:	d50d      	bpl.n	8001c8c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c70:	f06f 0210 	mvn.w	r2, #16
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c76:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c78:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c7a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c80:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c82:	d04b      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c84:	f7ff ffac 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	07d1      	lsls	r1, r2, #31
 8001c92:	d508      	bpl.n	8001ca6 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	07d2      	lsls	r2, r2, #31
 8001c98:	d505      	bpl.n	8001ca6 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c9a:	f06f 0201 	mvn.w	r2, #1
 8001c9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f009 ff2b 	bl	800bafc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	0610      	lsls	r0, r2, #24
 8001cac:	d508      	bpl.n	8001cc0 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	0611      	lsls	r1, r2, #24
 8001cb2:	d505      	bpl.n	8001cc0 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f000 f8b3 	bl	8001e26 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	0652      	lsls	r2, r2, #25
 8001cc6:	d508      	bpl.n	8001cda <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	0650      	lsls	r0, r2, #25
 8001ccc:	d505      	bpl.n	8001cda <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7ff ff85 	bl	8001be4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	0691      	lsls	r1, r2, #26
 8001ce0:	d522      	bpl.n	8001d28 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	0692      	lsls	r2, r2, #26
 8001ce6:	d51f      	bpl.n	8001d28 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ce8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001cec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cee:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001cf4:	f000 b896 	b.w	8001e24 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf8:	f7ff ff71 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff ff70 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d02:	e783      	b.n	8001c0c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d04:	f7ff ff6b 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f7ff ff6a 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d0e:	e792      	b.n	8001c36 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d10:	f7ff ff65 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff ff64 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d1a:	e7a0      	b.n	8001c5e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1c:	f7ff ff5f 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff ff5e 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d26:	e7af      	b.n	8001c88 <HAL_TIM_IRQHandler+0xa2>
}
 8001d28:	bd10      	pop	{r4, pc}
	...

08001d2c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001d2c:	4a2e      	ldr	r2, [pc, #184]	; (8001de8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001d2e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001d30:	4290      	cmp	r0, r2
 8001d32:	d012      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d38:	d00f      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d3a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d3e:	4290      	cmp	r0, r2
 8001d40:	d00b      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d46:	4290      	cmp	r0, r2
 8001d48:	d007      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d4e:	4290      	cmp	r0, r2
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d52:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d56:	4290      	cmp	r0, r2
 8001d58:	d119      	bne.n	8001d8e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d5a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d60:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d62:	4a21      	ldr	r2, [pc, #132]	; (8001de8 <TIM_Base_SetConfig+0xbc>)
 8001d64:	4290      	cmp	r0, r2
 8001d66:	d029      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d6c:	d026      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d72:	4290      	cmp	r0, r2
 8001d74:	d022      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7a:	4290      	cmp	r0, r2
 8001d7c:	d01e      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d82:	4290      	cmp	r0, r2
 8001d84:	d01a      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d8a:	4290      	cmp	r0, r2
 8001d8c:	d016      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d8e:	4a17      	ldr	r2, [pc, #92]	; (8001dec <TIM_Base_SetConfig+0xc0>)
 8001d90:	4290      	cmp	r0, r2
 8001d92:	d013      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d98:	4290      	cmp	r0, r2
 8001d9a:	d00f      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da0:	4290      	cmp	r0, r2
 8001da2:	d00b      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001da4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d007      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d003      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db8:	4290      	cmp	r0, r2
 8001dba:	d103      	bne.n	8001dc4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dbc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001dc4:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc6:	688b      	ldr	r3, [r1, #8]
 8001dc8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dca:	680b      	ldr	r3, [r1, #0]
 8001dcc:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <TIM_Base_SetConfig+0xbc>)
 8001dd0:	4298      	cmp	r0, r3
 8001dd2:	d003      	beq.n	8001ddc <TIM_Base_SetConfig+0xb0>
 8001dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd8:	4298      	cmp	r0, r3
 8001dda:	d101      	bne.n	8001de0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ddc:	690b      	ldr	r3, [r1, #16]
 8001dde:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de0:	2301      	movs	r3, #1
 8001de2:	6143      	str	r3, [r0, #20]
}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40014000 	.word	0x40014000

08001df0 <HAL_TIM_Base_Init>:
{ 
 8001df0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001df2:	4604      	mov	r4, r0
 8001df4:	b1a0      	cbz	r0, 8001e20 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001df6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dfe:	b91b      	cbnz	r3, 8001e08 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e00:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001e04:	f7ff fedf 	bl	8001bc6 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e0e:	6820      	ldr	r0, [r4, #0]
 8001e10:	1d21      	adds	r1, r4, #4
 8001e12:	f7ff ff8b 	bl	8001d2c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
}
 8001e1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	e7fc      	b.n	8001e1e <HAL_TIM_Base_Init+0x2e>

08001e24 <HAL_TIMEx_CommutationCallback>:
 8001e24:	4770      	bx	lr

08001e26 <HAL_TIMEx_BreakCallback>:
 8001e26:	4770      	bx	lr

08001e28 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001e2c:	6803      	ldr	r3, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e2e:	68c1      	ldr	r1, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001e30:	691a      	ldr	r2, [r3, #16]
{
 8001e32:	4604      	mov	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001e34:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e38:	430a      	orrs	r2, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001e3a:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e3c:	6925      	ldr	r5, [r4, #16]
 8001e3e:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8001e40:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e42:	69c0      	ldr	r0, [r0, #28]
 8001e44:	432a      	orrs	r2, r5
 8001e46:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e48:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e4c:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e4e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e52:	4302      	orrs	r2, r0
 8001e54:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001e56:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001e58:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001e5a:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001e5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001e60:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001e66:	615a      	str	r2, [r3, #20]
 8001e68:	4a7a      	ldr	r2, [pc, #488]	; (8002054 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e6a:	d17b      	bne.n	8001f64 <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <UART_SetConfig+0x50>
 8001e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d144      	bne.n	8001f02 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e78:	f7ff fd32 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001e7c:	6867      	ldr	r7, [r4, #4]
 8001e7e:	2519      	movs	r5, #25
 8001e80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e84:	fb05 f300 	mul.w	r3, r5, r0
 8001e88:	007f      	lsls	r7, r7, #1
 8001e8a:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e8e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e92:	011f      	lsls	r7, r3, #4
 8001e94:	f7ff fd24 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	4368      	muls	r0, r5
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fbb0 f6f3 	udiv	r6, r0, r3
 8001ea2:	f7ff fd1d 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001ea6:	6863      	ldr	r3, [r4, #4]
 8001ea8:	4368      	muls	r0, r5
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001eb4:	fb08 6313 	mls	r3, r8, r3, r6
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	3332      	adds	r3, #50	; 0x32
 8001ebc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001ec6:	f7ff fd0b 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001eca:	6862      	ldr	r2, [r4, #4]
 8001ecc:	4368      	muls	r0, r5
 8001ece:	0052      	lsls	r2, r2, #1
 8001ed0:	fbb0 f9f2 	udiv	r9, r0, r2
 8001ed4:	f7ff fd04 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ed8:	6863      	ldr	r3, [r4, #4]
 8001eda:	6822      	ldr	r2, [r4, #0]
 8001edc:	4368      	muls	r0, r5
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ee8:	fb08 9313 	mls	r3, r8, r3, r9
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	3332      	adds	r3, #50	; 0x32
 8001ef0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	443b      	add	r3, r7
 8001efa:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001efc:	6093      	str	r3, [r2, #8]
    }
  }
}
 8001efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f02:	f7ff fcdd 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001f06:	6867      	ldr	r7, [r4, #4]
 8001f08:	2519      	movs	r5, #25
 8001f0a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f0e:	fb05 f300 	mul.w	r3, r5, r0
 8001f12:	007f      	lsls	r7, r7, #1
 8001f14:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f18:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f1c:	011f      	lsls	r7, r3, #4
 8001f1e:	f7ff fccf 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001f22:	6863      	ldr	r3, [r4, #4]
 8001f24:	4368      	muls	r0, r5
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fbb0 f6f3 	udiv	r6, r0, r3
 8001f2c:	f7ff fcc8 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001f30:	6863      	ldr	r3, [r4, #4]
 8001f32:	4368      	muls	r0, r5
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f3e:	fb08 6313 	mls	r3, r8, r3, r6
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	3332      	adds	r3, #50	; 0x32
 8001f46:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001f50:	f7ff fcb6 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001f54:	6862      	ldr	r2, [r4, #4]
 8001f56:	4368      	muls	r0, r5
 8001f58:	0052      	lsls	r2, r2, #1
 8001f5a:	fbb0 f9f2 	udiv	r9, r0, r2
 8001f5e:	f7ff fcaf 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001f62:	e7b9      	b.n	8001ed8 <UART_SetConfig+0xb0>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <UART_SetConfig+0x146>
 8001f68:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <UART_SetConfig+0x230>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d141      	bne.n	8001ff2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f6e:	f7ff fcb7 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001f72:	6867      	ldr	r7, [r4, #4]
 8001f74:	2519      	movs	r5, #25
 8001f76:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f7a:	fb05 f300 	mul.w	r3, r5, r0
 8001f7e:	00bf      	lsls	r7, r7, #2
 8001f80:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f84:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f88:	011f      	lsls	r7, r3, #4
 8001f8a:	f7ff fca9 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001f8e:	6863      	ldr	r3, [r4, #4]
 8001f90:	4368      	muls	r0, r5
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb0 f6f3 	udiv	r6, r0, r3
 8001f98:	f7ff fca2 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001f9c:	6863      	ldr	r3, [r4, #4]
 8001f9e:	4368      	muls	r0, r5
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001faa:	fb08 6313 	mls	r3, r8, r3, r6
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	3332      	adds	r3, #50	; 0x32
 8001fb2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fb6:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001fba:	f7ff fc91 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001fbe:	6862      	ldr	r2, [r4, #4]
 8001fc0:	4368      	muls	r0, r5
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	fbb0 f9f2 	udiv	r9, r0, r2
 8001fc8:	f7ff fc8a 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fcc:	6863      	ldr	r3, [r4, #4]
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	4368      	muls	r0, r5
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fdc:	fb08 9313 	mls	r3, r8, r3, r9
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	3332      	adds	r3, #50	; 0x32
 8001fe4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	4333      	orrs	r3, r6
 8001fee:	443b      	add	r3, r7
 8001ff0:	e784      	b.n	8001efc <UART_SetConfig+0xd4>
 8001ff2:	f7ff fc65 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8001ff6:	6867      	ldr	r7, [r4, #4]
 8001ff8:	2519      	movs	r5, #25
 8001ffa:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001ffe:	fb05 f300 	mul.w	r3, r5, r0
 8002002:	00bf      	lsls	r7, r7, #2
 8002004:	fbb3 f3f7 	udiv	r3, r3, r7
 8002008:	fbb3 f3f8 	udiv	r3, r3, r8
 800200c:	011f      	lsls	r7, r3, #4
 800200e:	f7ff fc57 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002012:	6863      	ldr	r3, [r4, #4]
 8002014:	4368      	muls	r0, r5
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fbb0 f6f3 	udiv	r6, r0, r3
 800201c:	f7ff fc50 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	4368      	muls	r0, r5
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	fbb0 f3f3 	udiv	r3, r0, r3
 800202a:	fbb3 f3f8 	udiv	r3, r3, r8
 800202e:	fb08 6313 	mls	r3, r8, r3, r6
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	3332      	adds	r3, #50	; 0x32
 8002036:	fbb3 f3f8 	udiv	r3, r3, r8
 800203a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800203e:	f7ff fc3f 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002042:	6862      	ldr	r2, [r4, #4]
 8002044:	4368      	muls	r0, r5
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	fbb0 f9f2 	udiv	r9, r0, r2
 800204c:	f7ff fc38 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002050:	e7bc      	b.n	8001fcc <UART_SetConfig+0x1a4>
 8002052:	bf00      	nop
 8002054:	40011000 	.word	0x40011000
 8002058:	40011400 	.word	0x40011400

0800205c <HAL_UART_Init>:
{
 800205c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800205e:	4604      	mov	r4, r0
 8002060:	b340      	cbz	r0, 80020b4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002062:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002066:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800206a:	b91b      	cbnz	r3, 8002074 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800206c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002070:	f00a f92a 	bl	800c2c8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002074:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002076:	2324      	movs	r3, #36	; 0x24
 8002078:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800207c:	68d3      	ldr	r3, [r2, #12]
 800207e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002082:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff fecf 	bl	8001e28 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002092:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800209a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80020a6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80020aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80020ae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80020b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
 80020b6:	e7fc      	b.n	80020b2 <HAL_UART_Init+0x56>

080020b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020b8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80020ba:	f000 fe07 	bl	8002ccc <vTaskStartScheduler>
  
  return osOK;
}
 80020be:	2000      	movs	r0, #0
 80020c0:	bd08      	pop	{r3, pc}

080020c2 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c2:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80020c6:	b10b      	cbz	r3, 80020cc <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80020c8:	f000 be4a 	b.w	8002d60 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80020cc:	f000 be42 	b.w	8002d54 <xTaskGetTickCount>

080020d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020d0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80020d6:	8a02      	ldrh	r2, [r0, #16]
{
 80020d8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020da:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 80020de:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80020e0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80020e2:	bf14      	ite	ne
 80020e4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020e6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020e8:	a803      	add	r0, sp, #12
 80020ea:	e9cd 4000 	strd	r4, r0, [sp]
 80020ee:	4628      	mov	r0, r5
 80020f0:	f000 fd1c 	bl	8002b2c <xTaskCreate>
 80020f4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020f6:	bf0c      	ite	eq
 80020f8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80020fa:	2000      	movne	r0, #0
}
 80020fc:	b005      	add	sp, #20
 80020fe:	bd30      	pop	{r4, r5, pc}

08002100 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002100:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002102:	2800      	cmp	r0, #0
 8002104:	bf08      	it	eq
 8002106:	2001      	moveq	r0, #1
 8002108:	f000 ff3a 	bl	8002f80 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800210c:	2000      	movs	r0, #0
 800210e:	bd08      	pop	{r3, pc}

08002110 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002110:	2001      	movs	r0, #1
 8002112:	f000 bad3 	b.w	80026bc <xQueueCreateMutex>
	...

08002118 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002118:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800211a:	2400      	movs	r4, #0
{
 800211c:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800211e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002120:	b1e8      	cbz	r0, 800215e <osMutexWait+0x46>
 8002122:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002126:	b1a3      	cbz	r3, 8002152 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002128:	aa01      	add	r2, sp, #4
 800212a:	4621      	mov	r1, r4
 800212c:	f000 fc4e 	bl	80029cc <xQueueReceiveFromISR>
 8002130:	2801      	cmp	r0, #1
 8002132:	d002      	beq.n	800213a <osMutexWait+0x22>
      return osErrorOS;
 8002134:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002136:	b002      	add	sp, #8
 8002138:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	b13b      	cbz	r3, 800214e <osMutexWait+0x36>
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <osMutexWait+0x4c>)
 8002140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	f3bf 8f6f 	isb	sy
  return osOK;
 800214e:	2000      	movs	r0, #0
 8002150:	e7f1      	b.n	8002136 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002152:	4619      	mov	r1, r3
 8002154:	f000 fb7a 	bl	800284c <xQueueGenericReceive>
 8002158:	2801      	cmp	r0, #1
 800215a:	d0f8      	beq.n	800214e <osMutexWait+0x36>
 800215c:	e7ea      	b.n	8002134 <osMutexWait+0x1c>
    return osErrorParameter;
 800215e:	2080      	movs	r0, #128	; 0x80
 8002160:	e7e9      	b.n	8002136 <osMutexWait+0x1e>
 8002162:	bf00      	nop
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002168:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800216a:	2400      	movs	r4, #0
 800216c:	9401      	str	r4, [sp, #4]
 800216e:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8002172:	b193      	cbz	r3, 800219a <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002174:	a901      	add	r1, sp, #4
 8002176:	f000 fb14 	bl	80027a2 <xQueueGiveFromISR>
 800217a:	2801      	cmp	r0, #1
 800217c:	d113      	bne.n	80021a6 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800217e:	9b01      	ldr	r3, [sp, #4]
 8002180:	b913      	cbnz	r3, 8002188 <osMutexRelease+0x20>
  osStatus result = osOK;
 8002182:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8002184:	b002      	add	sp, #8
 8002186:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <osMutexRelease+0x44>)
 800218a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	e7f3      	b.n	8002182 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800219a:	461a      	mov	r2, r3
 800219c:	4619      	mov	r1, r3
 800219e:	f000 f9db 	bl	8002558 <xQueueGenericSend>
 80021a2:	2801      	cmp	r0, #1
 80021a4:	d0ed      	beq.n	8002182 <osMutexRelease+0x1a>
    result = osErrorOS;
 80021a6:	20ff      	movs	r0, #255	; 0xff
 80021a8:	e7ec      	b.n	8002184 <osMutexRelease+0x1c>
 80021aa:	bf00      	nop
 80021ac:	e000ed04 	.word	0xe000ed04

080021b0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80021b0:	2901      	cmp	r1, #1
{ 
 80021b2:	b510      	push	{r4, lr}
 80021b4:	4608      	mov	r0, r1
  if (count == 1) {
 80021b6:	d10c      	bne.n	80021d2 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80021b8:	2203      	movs	r2, #3
 80021ba:	2100      	movs	r1, #0
 80021bc:	f000 f9aa 	bl	8002514 <xQueueGenericCreate>
 80021c0:	4604      	mov	r4, r0
 80021c2:	b120      	cbz	r0, 80021ce <osSemaphoreCreate+0x1e>
 80021c4:	2300      	movs	r3, #0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4619      	mov	r1, r3
 80021ca:	f000 f9c5 	bl	8002558 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80021ce:	4620      	mov	r0, r4
 80021d0:	bd10      	pop	{r4, pc}
    return NULL;
 80021d2:	2400      	movs	r4, #0
 80021d4:	e7fb      	b.n	80021ce <osSemaphoreCreate+0x1e>
	...

080021d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80021d8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80021da:	2400      	movs	r4, #0
{
 80021dc:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80021de:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80021e0:	b1e8      	cbz	r0, 800221e <osSemaphoreWait+0x46>
 80021e2:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80021e6:	b1a3      	cbz	r3, 8002212 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021e8:	aa01      	add	r2, sp, #4
 80021ea:	4621      	mov	r1, r4
 80021ec:	f000 fbee 	bl	80029cc <xQueueReceiveFromISR>
 80021f0:	2801      	cmp	r0, #1
 80021f2:	d002      	beq.n	80021fa <osSemaphoreWait+0x22>
      return osErrorOS;
 80021f4:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80021f6:	b002      	add	sp, #8
 80021f8:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80021fa:	9b01      	ldr	r3, [sp, #4]
 80021fc:	b13b      	cbz	r3, 800220e <osSemaphoreWait+0x36>
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <osSemaphoreWait+0x4c>)
 8002200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	f3bf 8f6f 	isb	sy
  return osOK;
 800220e:	2000      	movs	r0, #0
 8002210:	e7f1      	b.n	80021f6 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002212:	4619      	mov	r1, r3
 8002214:	f000 fb1a 	bl	800284c <xQueueGenericReceive>
 8002218:	2801      	cmp	r0, #1
 800221a:	d0f8      	beq.n	800220e <osSemaphoreWait+0x36>
 800221c:	e7ea      	b.n	80021f4 <osSemaphoreWait+0x1c>
    return osErrorParameter;
 800221e:	2080      	movs	r0, #128	; 0x80
 8002220:	e7e9      	b.n	80021f6 <osSemaphoreWait+0x1e>
 8002222:	bf00      	nop
 8002224:	e000ed04 	.word	0xe000ed04

08002228 <osSemaphoreRelease>:
 8002228:	f7ff bf9e 	b.w	8002168 <osMutexRelease>

0800222c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800222c:	2200      	movs	r2, #0
 800222e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8002232:	f000 b96f 	b.w	8002514 <xQueueGenericCreate>
	...

08002238 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800223a:	2400      	movs	r4, #0
{
 800223c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800223e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8002240:	42a2      	cmp	r2, r4
 8002242:	bf08      	it	eq
 8002244:	2201      	moveq	r2, #1
 8002246:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800224a:	b1ab      	cbz	r3, 8002278 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800224c:	4623      	mov	r3, r4
 800224e:	aa03      	add	r2, sp, #12
 8002250:	a901      	add	r1, sp, #4
 8002252:	f000 fa45 	bl	80026e0 <xQueueGenericSendFromISR>
 8002256:	2801      	cmp	r0, #1
 8002258:	d002      	beq.n	8002260 <osMessagePut+0x28>
      return osErrorOS;
 800225a:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800225c:	b004      	add	sp, #16
 800225e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002260:	9b03      	ldr	r3, [sp, #12]
 8002262:	b13b      	cbz	r3, 8002274 <osMessagePut+0x3c>
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <osMessagePut+0x4c>)
 8002266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	f3bf 8f6f 	isb	sy
  return osOK;
 8002274:	2000      	movs	r0, #0
 8002276:	e7f1      	b.n	800225c <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002278:	a901      	add	r1, sp, #4
 800227a:	f000 f96d 	bl	8002558 <xQueueGenericSend>
 800227e:	2801      	cmp	r0, #1
 8002280:	d0f8      	beq.n	8002274 <osMessagePut+0x3c>
 8002282:	e7ea      	b.n	800225a <osMessagePut+0x22>
 8002284:	e000ed04 	.word	0xe000ed04

08002288 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800228c:	2600      	movs	r6, #0
{
 800228e:	4604      	mov	r4, r0
 8002290:	4617      	mov	r7, r2
 8002292:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8002294:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8002296:	9602      	str	r6, [sp, #8]
 8002298:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800229a:	b911      	cbnz	r1, 80022a2 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 800229c:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	e017      	b.n	80022d2 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80022a2:	9600      	str	r6, [sp, #0]
 80022a4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80022a8:	b1d3      	cbz	r3, 80022e0 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80022aa:	466a      	mov	r2, sp
 80022ac:	a902      	add	r1, sp, #8
 80022ae:	f000 fb8d 	bl	80029cc <xQueueReceiveFromISR>
 80022b2:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 80022b4:	bf04      	itt	eq
 80022b6:	2310      	moveq	r3, #16
 80022b8:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80022ba:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80022bc:	bf18      	it	ne
 80022be:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80022c0:	b13b      	cbz	r3, 80022d2 <osMessageGet+0x4a>
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <osMessageGet+0x70>)
 80022c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80022d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80022da:	4620      	mov	r0, r4
 80022dc:	b005      	add	sp, #20
 80022de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80022e0:	a902      	add	r1, sp, #8
 80022e2:	f000 fab3 	bl	800284c <xQueueGenericReceive>
 80022e6:	2801      	cmp	r0, #1
 80022e8:	d101      	bne.n	80022ee <osMessageGet+0x66>
      event.status = osEventMessage;
 80022ea:	2310      	movs	r3, #16
 80022ec:	e7d7      	b.n	800229e <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80022ee:	2f00      	cmp	r7, #0
 80022f0:	bf0c      	ite	eq
 80022f2:	2300      	moveq	r3, #0
 80022f4:	2340      	movne	r3, #64	; 0x40
 80022f6:	e7d2      	b.n	800229e <osMessageGet+0x16>
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80022fc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022fe:	f000 ff83 	bl	8003208 <xTaskGetSchedulerState>
 8002302:	2801      	cmp	r0, #1
 8002304:	d003      	beq.n	800230e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800230a:	f001 b8f3 	b.w	80034f4 <xPortSysTickHandler>
}
 800230e:	bd08      	pop	{r3, pc}

08002310 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002310:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002318:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800231a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800231e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002324:	4770      	bx	lr

08002326 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800232a:	4770      	bx	lr

0800232c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800232c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800232e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002338:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800233a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800233c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800233e:	3301      	adds	r3, #1
 8002340:	6003      	str	r3, [r0, #0]
}
 8002342:	4770      	bx	lr

08002344 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002344:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002346:	1c53      	adds	r3, r2, #1
{
 8002348:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800234a:	d10a      	bne.n	8002362 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800234c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002352:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002354:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002356:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002358:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800235a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800235c:	3301      	adds	r3, #1
 800235e:	6003      	str	r3, [r0, #0]
}
 8002360:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002362:	f100 0308 	add.w	r3, r0, #8
 8002366:	685c      	ldr	r4, [r3, #4]
 8002368:	6825      	ldr	r5, [r4, #0]
 800236a:	4295      	cmp	r5, r2
 800236c:	d8ef      	bhi.n	800234e <vListInsert+0xa>
 800236e:	4623      	mov	r3, r4
 8002370:	e7f9      	b.n	8002366 <vListInsert+0x22>

08002372 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002372:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002376:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002378:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800237a:	6882      	ldr	r2, [r0, #8]
 800237c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002382:	bf08      	it	eq
 8002384:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002386:	2200      	movs	r2, #0
 8002388:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	3801      	subs	r0, #1
 800238e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002390:	4770      	bx	lr

08002392 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002392:	b570      	push	{r4, r5, r6, lr}
 8002394:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002396:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002398:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800239a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800239c:	b942      	cbnz	r2, 80023b0 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800239e:	6805      	ldr	r5, [r0, #0]
 80023a0:	b99d      	cbnz	r5, 80023ca <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023a2:	6840      	ldr	r0, [r0, #4]
 80023a4:	f000 ff88 	bl	80032b8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80023a8:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80023aa:	3601      	adds	r6, #1
 80023ac:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80023b0:	b96d      	cbnz	r5, 80023ce <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80023b2:	6880      	ldr	r0, [r0, #8]
 80023b4:	f00a f995 	bl	800c6e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023b8:	68a3      	ldr	r3, [r4, #8]
 80023ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023bc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023be:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023c0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d301      	bcc.n	80023ca <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80023ca:	2000      	movs	r0, #0
 80023cc:	e7ed      	b.n	80023aa <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ce:	68c0      	ldr	r0, [r0, #12]
 80023d0:	f00a f987 	bl	800c6e2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d6:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023d8:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023da:	425b      	negs	r3, r3
 80023dc:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023de:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023e0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80023e2:	bf3e      	ittt	cc
 80023e4:	6862      	ldrcc	r2, [r4, #4]
 80023e6:	189b      	addcc	r3, r3, r2
 80023e8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80023ea:	2d02      	cmp	r5, #2
 80023ec:	d1ed      	bne.n	80023ca <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023ee:	b10e      	cbz	r6, 80023f4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80023f0:	3e01      	subs	r6, #1
 80023f2:	e7ea      	b.n	80023ca <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80023f4:	4630      	mov	r0, r6
 80023f6:	e7d8      	b.n	80023aa <prvCopyDataToQueue+0x18>

080023f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023f8:	4603      	mov	r3, r0
 80023fa:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80023fe:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002400:	b162      	cbz	r2, 800241c <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002402:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002404:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002406:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002408:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800240a:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800240c:	bf24      	itt	cs
 800240e:	6819      	ldrcs	r1, [r3, #0]
 8002410:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002412:	68d9      	ldr	r1, [r3, #12]
	}
}
 8002414:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002418:	f00a b963 	b.w	800c6e2 <memcpy>
}
 800241c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002420:	4770      	bx	lr

08002422 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002422:	b570      	push	{r4, r5, r6, lr}
 8002424:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002426:	f000 fffd 	bl	8003424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800242a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800242e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002432:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002434:	2d00      	cmp	r5, #0
 8002436:	dc14      	bgt.n	8002462 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002438:	23ff      	movs	r3, #255	; 0xff
 800243a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800243e:	f001 f813 	bl	8003468 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002442:	f000 ffef 	bl	8003424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002446:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800244a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800244e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002450:	2d00      	cmp	r5, #0
 8002452:	dc12      	bgt.n	800247a <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800245a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800245e:	f001 b803 	b.w	8003468 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0e7      	beq.n	8002438 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002468:	4630      	mov	r0, r6
 800246a:	f000 fe3b 	bl	80030e4 <xTaskRemoveFromEventList>
 800246e:	b108      	cbz	r0, 8002474 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002470:	f000 fec4 	bl	80031fc <vTaskMissedYield>
 8002474:	3d01      	subs	r5, #1
 8002476:	b26d      	sxtb	r5, r5
 8002478:	e7dc      	b.n	8002434 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800247a:	6923      	ldr	r3, [r4, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0e9      	beq.n	8002454 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002480:	4630      	mov	r0, r6
 8002482:	f000 fe2f 	bl	80030e4 <xTaskRemoveFromEventList>
 8002486:	b108      	cbz	r0, 800248c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002488:	f000 feb8 	bl	80031fc <vTaskMissedYield>
 800248c:	3d01      	subs	r5, #1
 800248e:	b26d      	sxtb	r5, r5
 8002490:	e7de      	b.n	8002450 <prvUnlockQueue+0x2e>
	...

08002494 <xQueueGenericReset>:
{
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002498:	4604      	mov	r4, r0
 800249a:	b940      	cbnz	r0, 80024ae <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	e7fe      	b.n	80024ac <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80024ae:	f000 ffb9 	bl	8003424 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024b2:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 80024b6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024b8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024ba:	4343      	muls	r3, r0
 80024bc:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024be:	1a1b      	subs	r3, r3, r0
 80024c0:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024c2:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024c4:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024c6:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80024c8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ca:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80024cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80024d4:	b995      	cbnz	r5, 80024fc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024d6:	6923      	ldr	r3, [r4, #16]
 80024d8:	b163      	cbz	r3, 80024f4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024da:	f104 0010 	add.w	r0, r4, #16
 80024de:	f000 fe01 	bl	80030e4 <xTaskRemoveFromEventList>
 80024e2:	b138      	cbz	r0, 80024f4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <xQueueGenericReset+0x7c>)
 80024e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80024f4:	f000 ffb8 	bl	8003468 <vPortExitCritical>
}
 80024f8:	2001      	movs	r0, #1
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024fc:	f104 0010 	add.w	r0, r4, #16
 8002500:	f7ff ff06 	bl	8002310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002504:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002508:	f7ff ff02 	bl	8002310 <vListInitialise>
 800250c:	e7f2      	b.n	80024f4 <xQueueGenericReset+0x60>
 800250e:	bf00      	nop
 8002510:	e000ed04 	.word	0xe000ed04

08002514 <xQueueGenericCreate>:
	{
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002518:	4606      	mov	r6, r0
 800251a:	b940      	cbnz	r0, 800252e <xQueueGenericCreate+0x1a>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	e7fe      	b.n	800252c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800252e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002530:	3048      	adds	r0, #72	; 0x48
 8002532:	f001 f8d1 	bl	80036d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002536:	4604      	mov	r4, r0
 8002538:	b138      	cbz	r0, 800254a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800253a:	b945      	cbnz	r5, 800254e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800253c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800253e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002542:	2101      	movs	r1, #1
 8002544:	4620      	mov	r0, r4
 8002546:	f7ff ffa5 	bl	8002494 <xQueueGenericReset>
	}
 800254a:	4620      	mov	r0, r4
 800254c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800254e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002552:	6003      	str	r3, [r0, #0]
 8002554:	e7f3      	b.n	800253e <xQueueGenericCreate+0x2a>
	...

08002558 <xQueueGenericSend>:
{
 8002558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	4688      	mov	r8, r1
 800255e:	9201      	str	r2, [sp, #4]
 8002560:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002562:	4604      	mov	r4, r0
 8002564:	b940      	cbnz	r0, 8002578 <xQueueGenericSend+0x20>
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	e7fe      	b.n	8002576 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002578:	b951      	cbnz	r1, 8002590 <xQueueGenericSend+0x38>
 800257a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800257c:	b143      	cbz	r3, 8002590 <xQueueGenericSend+0x38>
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	e7fe      	b.n	800258e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002590:	2f02      	cmp	r7, #2
 8002592:	d10b      	bne.n	80025ac <xQueueGenericSend+0x54>
 8002594:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002596:	2b01      	cmp	r3, #1
 8002598:	d008      	beq.n	80025ac <xQueueGenericSend+0x54>
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	e7fe      	b.n	80025aa <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ac:	f000 fe2c 	bl	8003208 <xTaskGetSchedulerState>
 80025b0:	b950      	cbnz	r0, 80025c8 <xQueueGenericSend+0x70>
 80025b2:	9e01      	ldr	r6, [sp, #4]
 80025b4:	b14e      	cbz	r6, 80025ca <xQueueGenericSend+0x72>
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	e7fe      	b.n	80025c6 <xQueueGenericSend+0x6e>
 80025c8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80025ca:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80025ce:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80026b8 <xQueueGenericSend+0x160>
 80025d2:	e037      	b.n	8002644 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80025d4:	9d01      	ldr	r5, [sp, #4]
 80025d6:	b91d      	cbnz	r5, 80025e0 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80025d8:	f000 ff46 	bl	8003468 <vPortExitCritical>
			return errQUEUE_FULL;
 80025dc:	2000      	movs	r0, #0
 80025de:	e050      	b.n	8002682 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 80025e0:	b916      	cbnz	r6, 80025e8 <xQueueGenericSend+0x90>
					vTaskSetTimeOutState( &xTimeOut );
 80025e2:	a802      	add	r0, sp, #8
 80025e4:	f000 fdc0 	bl	8003168 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80025e8:	f000 ff3e 	bl	8003468 <vPortExitCritical>
		vTaskSuspendAll();
 80025ec:	f000 fbaa 	bl	8002d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025f0:	f000 ff18 	bl	8003424 <vPortEnterCritical>
 80025f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025f8:	2bff      	cmp	r3, #255	; 0xff
 80025fa:	bf08      	it	eq
 80025fc:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002600:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002604:	2bff      	cmp	r3, #255	; 0xff
 8002606:	bf08      	it	eq
 8002608:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800260c:	f000 ff2c 	bl	8003468 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002610:	a901      	add	r1, sp, #4
 8002612:	a802      	add	r0, sp, #8
 8002614:	f000 fdb8 	bl	8003188 <xTaskCheckForTimeOut>
 8002618:	2800      	cmp	r0, #0
 800261a:	d146      	bne.n	80026aa <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800261c:	f000 ff02 	bl	8003424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002620:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002622:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002624:	429a      	cmp	r2, r3
 8002626:	d12f      	bne.n	8002688 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002628:	f000 ff1e 	bl	8003468 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800262c:	9901      	ldr	r1, [sp, #4]
 800262e:	f104 0010 	add.w	r0, r4, #16
 8002632:	f000 fd3d 	bl	80030b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff fef3 	bl	8002422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800263c:	f000 fc2a 	bl	8002e94 <xTaskResumeAll>
 8002640:	b350      	cbz	r0, 8002698 <xQueueGenericSend+0x140>
 8002642:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002644:	f000 feee 	bl	8003424 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002648:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800264a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800264c:	429a      	cmp	r2, r3
 800264e:	d301      	bcc.n	8002654 <xQueueGenericSend+0xfc>
 8002650:	2f02      	cmp	r7, #2
 8002652:	d1bf      	bne.n	80025d4 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002654:	463a      	mov	r2, r7
 8002656:	4641      	mov	r1, r8
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fe9a 	bl	8002392 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800265e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002660:	b11b      	cbz	r3, 800266a <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002662:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002666:	f000 fd3d 	bl	80030e4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800266a:	b138      	cbz	r0, 800267c <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <xQueueGenericSend+0x160>)
 800266e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800267c:	f000 fef4 	bl	8003468 <vPortExitCritical>
				return pdPASS;
 8002680:	2001      	movs	r0, #1
}
 8002682:	b004      	add	sp, #16
 8002684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8002688:	f000 feee 	bl	8003468 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800268c:	4620      	mov	r0, r4
 800268e:	f7ff fec8 	bl	8002422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002692:	f000 fbff 	bl	8002e94 <xTaskResumeAll>
 8002696:	e7d4      	b.n	8002642 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8002698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800269c:	f8ca 3000 	str.w	r3, [sl]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	e7cb      	b.n	8002642 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80026aa:	4620      	mov	r0, r4
 80026ac:	f7ff feb9 	bl	8002422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026b0:	f000 fbf0 	bl	8002e94 <xTaskResumeAll>
 80026b4:	e792      	b.n	80025dc <xQueueGenericSend+0x84>
 80026b6:	bf00      	nop
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <xQueueCreateMutex>:
	{
 80026bc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80026be:	4602      	mov	r2, r0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff ff26 	bl	8002514 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80026c8:	4604      	mov	r4, r0
 80026ca:	b138      	cbz	r0, 80026dc <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80026cc:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80026ce:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80026d2:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80026d4:	461a      	mov	r2, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff ff3e 	bl	8002558 <xQueueGenericSend>
	}
 80026dc:	4620      	mov	r0, r4
 80026de:	bd10      	pop	{r4, pc}

080026e0 <xQueueGenericSendFromISR>:
{
 80026e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e4:	4689      	mov	r9, r1
 80026e6:	4690      	mov	r8, r2
 80026e8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026ea:	4604      	mov	r4, r0
 80026ec:	b940      	cbnz	r0, 8002700 <xQueueGenericSendFromISR+0x20>
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	e7fe      	b.n	80026fe <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002700:	b951      	cbnz	r1, 8002718 <xQueueGenericSendFromISR+0x38>
 8002702:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002704:	b143      	cbz	r3, 8002718 <xQueueGenericSendFromISR+0x38>
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	e7fe      	b.n	8002716 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002718:	2f02      	cmp	r7, #2
 800271a:	d10b      	bne.n	8002734 <xQueueGenericSendFromISR+0x54>
 800271c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d008      	beq.n	8002734 <xQueueGenericSendFromISR+0x54>
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	e7fe      	b.n	8002732 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002734:	f000 ff7e 	bl	8003634 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002738:	f3ef 8611 	mrs	r6, BASEPRI
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800274c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800274e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002750:	429a      	cmp	r2, r3
 8002752:	d301      	bcc.n	8002758 <xQueueGenericSendFromISR+0x78>
 8002754:	2f02      	cmp	r7, #2
 8002756:	d122      	bne.n	800279e <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002758:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275c:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800275e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002760:	4649      	mov	r1, r9
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fe15 	bl	8002392 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002768:	1c6b      	adds	r3, r5, #1
 800276a:	d113      	bne.n	8002794 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800276c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800276e:	b90b      	cbnz	r3, 8002774 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8002770:	2001      	movs	r0, #1
 8002772:	e00b      	b.n	800278c <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002774:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002778:	f000 fcb4 	bl	80030e4 <xTaskRemoveFromEventList>
 800277c:	2800      	cmp	r0, #0
 800277e:	d0f7      	beq.n	8002770 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8002780:	f1b8 0f00 	cmp.w	r8, #0
 8002784:	d0f4      	beq.n	8002770 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002786:	2001      	movs	r0, #1
 8002788:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800278c:	f386 8811 	msr	BASEPRI, r6
}
 8002790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002794:	3501      	adds	r5, #1
 8002796:	b26d      	sxtb	r5, r5
 8002798:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800279c:	e7e8      	b.n	8002770 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800279e:	2000      	movs	r0, #0
 80027a0:	e7f4      	b.n	800278c <xQueueGenericSendFromISR+0xac>

080027a2 <xQueueGiveFromISR>:
{
 80027a2:	b570      	push	{r4, r5, r6, lr}
 80027a4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80027a6:	4604      	mov	r4, r0
 80027a8:	b940      	cbnz	r0, 80027bc <xQueueGiveFromISR+0x1a>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	e7fe      	b.n	80027ba <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80027bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027be:	b143      	cbz	r3, 80027d2 <xQueueGiveFromISR+0x30>
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	e7fe      	b.n	80027d0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80027d2:	6803      	ldr	r3, [r0, #0]
 80027d4:	b953      	cbnz	r3, 80027ec <xQueueGiveFromISR+0x4a>
 80027d6:	6843      	ldr	r3, [r0, #4]
 80027d8:	b143      	cbz	r3, 80027ec <xQueueGiveFromISR+0x4a>
 80027da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	e7fe      	b.n	80027ea <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027ec:	f000 ff22 	bl	8003634 <vPortValidateInterruptPriority>
	__asm volatile
 80027f0:	f3ef 8611 	mrs	r6, BASEPRI
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002804:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002808:	4293      	cmp	r3, r2
 800280a:	d91c      	bls.n	8002846 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800280c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002810:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002812:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002814:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	d110      	bne.n	800283c <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800281a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800281c:	b90b      	cbnz	r3, 8002822 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800281e:	2001      	movs	r0, #1
 8002820:	e009      	b.n	8002836 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002822:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002826:	f000 fc5d 	bl	80030e4 <xTaskRemoveFromEventList>
 800282a:	2800      	cmp	r0, #0
 800282c:	d0f7      	beq.n	800281e <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800282e:	2d00      	cmp	r5, #0
 8002830:	d0f5      	beq.n	800281e <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002832:	2001      	movs	r0, #1
 8002834:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002836:	f386 8811 	msr	BASEPRI, r6
}
 800283a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800283c:	3301      	adds	r3, #1
 800283e:	b25b      	sxtb	r3, r3
 8002840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002844:	e7eb      	b.n	800281e <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8002846:	2000      	movs	r0, #0
 8002848:	e7f5      	b.n	8002836 <xQueueGiveFromISR+0x94>
	...

0800284c <xQueueGenericReceive>:
{
 800284c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002850:	460f      	mov	r7, r1
 8002852:	9201      	str	r2, [sp, #4]
 8002854:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8002856:	4604      	mov	r4, r0
 8002858:	b940      	cbnz	r0, 800286c <xQueueGenericReceive+0x20>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	e7fe      	b.n	800286a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800286c:	b951      	cbnz	r1, 8002884 <xQueueGenericReceive+0x38>
 800286e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002870:	b143      	cbz	r3, 8002884 <xQueueGenericReceive+0x38>
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	e7fe      	b.n	8002882 <xQueueGenericReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002884:	f000 fcc0 	bl	8003208 <xTaskGetSchedulerState>
 8002888:	b950      	cbnz	r0, 80028a0 <xQueueGenericReceive+0x54>
 800288a:	9d01      	ldr	r5, [sp, #4]
 800288c:	b14d      	cbz	r5, 80028a2 <xQueueGenericReceive+0x56>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	e7fe      	b.n	800289e <xQueueGenericReceive+0x52>
 80028a0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80028a2:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80028a6:	f8df a120 	ldr.w	sl, [pc, #288]	; 80029c8 <xQueueGenericReceive+0x17c>
 80028aa:	e055      	b.n	8002958 <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80028ae:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d074      	beq.n	800299e <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028b8:	e066      	b.n	8002988 <xQueueGenericReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	b91b      	cbnz	r3, 80028c6 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 80028be:	f000 fdd3 	bl	8003468 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80028c2:	2000      	movs	r0, #0
 80028c4:	e06e      	b.n	80029a4 <xQueueGenericReceive+0x158>
				else if( xEntryTimeSet == pdFALSE )
 80028c6:	b915      	cbnz	r5, 80028ce <xQueueGenericReceive+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 80028c8:	a802      	add	r0, sp, #8
 80028ca:	f000 fc4d 	bl	8003168 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80028ce:	f000 fdcb 	bl	8003468 <vPortExitCritical>
		vTaskSuspendAll();
 80028d2:	f000 fa37 	bl	8002d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028d6:	f000 fda5 	bl	8003424 <vPortEnterCritical>
 80028da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	bf08      	it	eq
 80028e2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80028e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	bf08      	it	eq
 80028ee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80028f2:	f000 fdb9 	bl	8003468 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f6:	a901      	add	r1, sp, #4
 80028f8:	a802      	add	r0, sp, #8
 80028fa:	f000 fc45 	bl	8003188 <xTaskCheckForTimeOut>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d153      	bne.n	80029aa <xQueueGenericReceive+0x15e>
	taskENTER_CRITICAL();
 8002902:	f000 fd8f 	bl	8003424 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002908:	b9f3      	cbnz	r3, 8002948 <xQueueGenericReceive+0xfc>
	taskEXIT_CRITICAL();
 800290a:	f000 fdad 	bl	8003468 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	b933      	cbnz	r3, 8002920 <xQueueGenericReceive+0xd4>
						taskENTER_CRITICAL();
 8002912:	f000 fd87 	bl	8003424 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002916:	6860      	ldr	r0, [r4, #4]
 8002918:	f000 fc86 	bl	8003228 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800291c:	f000 fda4 	bl	8003468 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002920:	9901      	ldr	r1, [sp, #4]
 8002922:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002926:	f000 fbc3 	bl	80030b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fd79 	bl	8002422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002930:	f000 fab0 	bl	8002e94 <xTaskResumeAll>
 8002934:	b978      	cbnz	r0, 8002956 <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
 8002936:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800293a:	f8ca 3000 	str.w	r3, [sl]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	e006      	b.n	8002956 <xQueueGenericReceive+0x10a>
	taskEXIT_CRITICAL();
 8002948:	f000 fd8e 	bl	8003468 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff fd68 	bl	8002422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002952:	f000 fa9f 	bl	8002e94 <xTaskResumeAll>
 8002956:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8002958:	f000 fd64 	bl	8003424 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800295c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800295e:	2e00      	cmp	r6, #0
 8002960:	d0ab      	beq.n	80028ba <xQueueGenericReceive+0x6e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002962:	4639      	mov	r1, r7
 8002964:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002966:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002968:	f7ff fd46 	bl	80023f8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800296c:	f1b9 0f00 	cmp.w	r9, #0
 8002970:	d19c      	bne.n	80028ac <xQueueGenericReceive+0x60>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002972:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002974:	3e01      	subs	r6, #1
 8002976:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002978:	b913      	cbnz	r3, 8002980 <xQueueGenericReceive+0x134>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800297a:	f000 fced 	bl	8003358 <pvTaskIncrementMutexHeldCount>
 800297e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	b163      	cbz	r3, 800299e <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002984:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002988:	f000 fbac 	bl	80030e4 <xTaskRemoveFromEventList>
 800298c:	b138      	cbz	r0, 800299e <xQueueGenericReceive+0x152>
							queueYIELD_IF_USING_PREEMPTION();
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <xQueueGenericReceive+0x17c>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800299e:	f000 fd63 	bl	8003468 <vPortExitCritical>
				return pdPASS;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	b004      	add	sp, #16
 80029a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			prvUnlockQueue( pxQueue );
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff fd39 	bl	8002422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029b0:	f000 fa70 	bl	8002e94 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80029b4:	f000 fd36 	bl	8003424 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f43f af7f 	beq.w	80028be <xQueueGenericReceive+0x72>
	taskEXIT_CRITICAL();
 80029c0:	f000 fd52 	bl	8003468 <vPortExitCritical>
 80029c4:	e7c7      	b.n	8002956 <xQueueGenericReceive+0x10a>
 80029c6:	bf00      	nop
 80029c8:	e000ed04 	.word	0xe000ed04

080029cc <xQueueReceiveFromISR>:
{
 80029cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d0:	4689      	mov	r9, r1
 80029d2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80029d4:	4605      	mov	r5, r0
 80029d6:	b940      	cbnz	r0, 80029ea <xQueueReceiveFromISR+0x1e>
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	e7fe      	b.n	80029e8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ea:	b951      	cbnz	r1, 8002a02 <xQueueReceiveFromISR+0x36>
 80029ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029ee:	b143      	cbz	r3, 8002a02 <xQueueReceiveFromISR+0x36>
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	e7fe      	b.n	8002a00 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a02:	f000 fe17 	bl	8003634 <vPortValidateInterruptPriority>
	__asm volatile
 8002a06:	f3ef 8711 	mrs	r7, BASEPRI
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a1a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a1c:	b31c      	cbz	r4, 8002a66 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a1e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a22:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a24:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a26:	4628      	mov	r0, r5
 8002a28:	f7ff fce6 	bl	80023f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002a2c:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002a2e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002a30:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002a32:	d113      	bne.n	8002a5c <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a34:	692b      	ldr	r3, [r5, #16]
 8002a36:	b90b      	cbnz	r3, 8002a3c <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e00b      	b.n	8002a54 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3c:	f105 0010 	add.w	r0, r5, #16
 8002a40:	f000 fb50 	bl	80030e4 <xTaskRemoveFromEventList>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d0f7      	beq.n	8002a38 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8002a48:	f1b8 0f00 	cmp.w	r8, #0
 8002a4c:	d0f4      	beq.n	8002a38 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002a54:	f387 8811 	msr	BASEPRI, r7
}
 8002a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a5c:	3601      	adds	r6, #1
 8002a5e:	b276      	sxtb	r6, r6
 8002a60:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002a64:	e7e8      	b.n	8002a38 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8002a66:	4620      	mov	r0, r4
 8002a68:	e7f4      	b.n	8002a54 <xQueueReceiveFromISR+0x88>

08002a6a <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	e7fe      	b.n	8002a7a <prvTaskIsTaskSuspended.part.0+0x10>

08002a7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <prvResetNextTaskUnblockTime+0x1c>)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <prvResetNextTaskUnblockTime+0x20>)
 8002a84:	b919      	cbnz	r1, 8002a8e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a86:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a8a:	601a      	str	r2, [r3, #0]
	}
}
 8002a8c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a92:	68d2      	ldr	r2, [r2, #12]
 8002a94:	6852      	ldr	r2, [r2, #4]
 8002a96:	e7f8      	b.n	8002a8a <prvResetNextTaskUnblockTime+0xe>
 8002a98:	20000098 	.word	0x20000098
 8002a9c:	20000170 	.word	0x20000170

08002aa0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002aa4:	4e1b      	ldr	r6, [pc, #108]	; (8002b14 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002aa6:	681c      	ldr	r4, [r3, #0]
{
 8002aa8:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002aaa:	6830      	ldr	r0, [r6, #0]
 8002aac:	3004      	adds	r0, #4
{
 8002aae:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ab0:	f7ff fc5f 	bl	8002372 <uxListRemove>
 8002ab4:	4633      	mov	r3, r6
 8002ab6:	b940      	cbnz	r0, 8002aca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002ab8:	6831      	ldr	r1, [r6, #0]
 8002aba:	4e17      	ldr	r6, [pc, #92]	; (8002b18 <prvAddCurrentTaskToDelayedList+0x78>)
 8002abc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002abe:	6832      	ldr	r2, [r6, #0]
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	4088      	lsls	r0, r1
 8002ac4:	ea22 0200 	bic.w	r2, r2, r0
 8002ac8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002aca:	1c6a      	adds	r2, r5, #1
 8002acc:	d107      	bne.n	8002ade <prvAddCurrentTaskToDelayedList+0x3e>
 8002ace:	b137      	cbz	r7, 8002ade <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	4812      	ldr	r0, [pc, #72]	; (8002b1c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002ad4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ada:	f7ff bc27 	b.w	800232c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	1964      	adds	r4, r4, r5
 8002ae2:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002ae4:	d307      	bcc.n	8002af6 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <prvAddCurrentTaskToDelayedList+0x80>)
 8002ae8:	6810      	ldr	r0, [r2, #0]
 8002aea:	6819      	ldr	r1, [r3, #0]
}
 8002aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002af0:	3104      	adds	r1, #4
 8002af2:	f7ff bc27 	b.w	8002344 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <prvAddCurrentTaskToDelayedList+0x84>)
 8002af8:	6810      	ldr	r0, [r2, #0]
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	3104      	adds	r1, #4
 8002afe:	f7ff fc21 	bl	8002344 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <prvAddCurrentTaskToDelayedList+0x88>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002b08:	bf88      	it	hi
 8002b0a:	601c      	strhi	r4, [r3, #0]
}
 8002b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200001b8 	.word	0x200001b8
 8002b14:	20000094 	.word	0x20000094
 8002b18:	20000140 	.word	0x20000140
 8002b1c:	20000190 	.word	0x20000190
 8002b20:	2000009c 	.word	0x2000009c
 8002b24:	20000098 	.word	0x20000098
 8002b28:	20000170 	.word	0x20000170

08002b2c <xTaskCreate>:
	{
 8002b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b30:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002b34:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b36:	4650      	mov	r0, sl
	{
 8002b38:	460f      	mov	r7, r1
 8002b3a:	4699      	mov	r9, r3
 8002b3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3e:	f000 fdcb 	bl	80036d8 <pvPortMalloc>
			if( pxStack != NULL )
 8002b42:	4605      	mov	r5, r0
 8002b44:	2800      	cmp	r0, #0
 8002b46:	f000 8097 	beq.w	8002c78 <xTaskCreate+0x14c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b4a:	2054      	movs	r0, #84	; 0x54
 8002b4c:	f000 fdc4 	bl	80036d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002b50:	4604      	mov	r4, r0
 8002b52:	2800      	cmp	r0, #0
 8002b54:	f000 808d 	beq.w	8002c72 <xTaskCreate+0x146>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b58:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002b5c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b5e:	4455      	add	r5, sl
 8002b60:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b62:	f025 0a07 	bic.w	sl, r5, #7
 8002b66:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002b6a:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b6c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002b70:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002b74:	7819      	ldrb	r1, [r3, #0]
 8002b76:	b109      	cbz	r1, 8002b7c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b78:	429f      	cmp	r7, r3
 8002b7a:	d1f7      	bne.n	8002b6c <xTaskCreate+0x40>
 8002b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002b7e:	2d06      	cmp	r5, #6
 8002b80:	bf28      	it	cs
 8002b82:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b84:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b88:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002b8a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8002b8c:	e9c4 5b11 	strd	r5, fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b90:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b92:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b96:	f7ff fbc6 	bl	8002326 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b9e:	f104 0018 	add.w	r0, r4, #24
 8002ba2:	f7ff fbc0 	bl	8002326 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ba6:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002baa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bac:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bae:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bb0:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bb4:	464a      	mov	r2, r9
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	4650      	mov	r0, sl
 8002bba:	f000 fc0b 	bl	80033d4 <pxPortInitialiseStack>
 8002bbe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002bc0:	b106      	cbz	r6, 8002bc4 <xTaskCreate+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bc2:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002bc4:	f000 fc2e 	bl	8003424 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002bc8:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002bca:	4e33      	ldr	r6, [pc, #204]	; (8002c98 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002cc4 <xTaskCreate+0x198>
 8002bd2:	3201      	adds	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002bd6:	6835      	ldr	r5, [r6, #0]
 8002bd8:	2d00      	cmp	r5, #0
 8002bda:	d150      	bne.n	8002c7e <xTaskCreate+0x152>
			pxCurrentTCB = pxNewTCB;
 8002bdc:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11f      	bne.n	8002c24 <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002be4:	f04f 0914 	mov.w	r9, #20
 8002be8:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bec:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bee:	f7ff fb8f 	bl	8002310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bf2:	2d07      	cmp	r5, #7
 8002bf4:	d1f8      	bne.n	8002be8 <xTaskCreate+0xbc>
	vListInitialise( &xDelayedTaskList1 );
 8002bf6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002cc8 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002bfa:	4d28      	ldr	r5, [pc, #160]	; (8002c9c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002bfc:	4648      	mov	r0, r9
 8002bfe:	f7ff fb87 	bl	8002310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c02:	4628      	mov	r0, r5
 8002c04:	f7ff fb84 	bl	8002310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c08:	4825      	ldr	r0, [pc, #148]	; (8002ca0 <xTaskCreate+0x174>)
 8002c0a:	f7ff fb81 	bl	8002310 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002c0e:	4825      	ldr	r0, [pc, #148]	; (8002ca4 <xTaskCreate+0x178>)
 8002c10:	f7ff fb7e 	bl	8002310 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002c14:	4824      	ldr	r0, [pc, #144]	; (8002ca8 <xTaskCreate+0x17c>)
 8002c16:	f7ff fb7b 	bl	8002310 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <xTaskCreate+0x180>)
 8002c1c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <xTaskCreate+0x184>)
 8002c22:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002c24:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002c26:	4924      	ldr	r1, [pc, #144]	; (8002cb8 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002c28:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c2a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c32:	2501      	movs	r5, #1
 8002c34:	fa05 f302 	lsl.w	r3, r5, r2
 8002c38:	4303      	orrs	r3, r0
 8002c3a:	2014      	movs	r0, #20
 8002c3c:	600b      	str	r3, [r1, #0]
 8002c3e:	fb00 8002 	mla	r0, r0, r2, r8
 8002c42:	4639      	mov	r1, r7
 8002c44:	f7ff fb72 	bl	800232c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002c48:	f000 fc0e 	bl	8003468 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <xTaskCreate+0x190>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b163      	cbz	r3, 8002c6c <xTaskCreate+0x140>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c52:	6833      	ldr	r3, [r6, #0]
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d207      	bcs.n	8002c6c <xTaskCreate+0x140>
			taskYIELD_IF_USING_PREEMPTION();
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <xTaskCreate+0x194>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
	}
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002c72:	4628      	mov	r0, r5
 8002c74:	f000 fdbc 	bl	80037f0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c78:	f04f 35ff 	mov.w	r5, #4294967295
 8002c7c:	e7f6      	b.n	8002c6c <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <xTaskCreate+0x190>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ce      	bne.n	8002c24 <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c86:	6833      	ldr	r3, [r6, #0]
 8002c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002c8e:	bf28      	it	cs
 8002c90:	6034      	strcs	r4, [r6, #0]
 8002c92:	e7c7      	b.n	8002c24 <xTaskCreate+0xf8>
 8002c94:	2000012c 	.word	0x2000012c
 8002c98:	20000094 	.word	0x20000094
 8002c9c:	20000158 	.word	0x20000158
 8002ca0:	20000178 	.word	0x20000178
 8002ca4:	200001a4 	.word	0x200001a4
 8002ca8:	20000190 	.word	0x20000190
 8002cac:	20000098 	.word	0x20000098
 8002cb0:	2000009c 	.word	0x2000009c
 8002cb4:	2000013c 	.word	0x2000013c
 8002cb8:	20000140 	.word	0x20000140
 8002cbc:	2000018c 	.word	0x2000018c
 8002cc0:	e000ed04 	.word	0xe000ed04
 8002cc4:	200000a0 	.word	0x200000a0
 8002cc8:	20000144 	.word	0x20000144

08002ccc <vTaskStartScheduler>:
{
 8002ccc:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <vTaskStartScheduler+0x60>)
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	9400      	str	r4, [sp, #0]
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	4915      	ldr	r1, [pc, #84]	; (8002d30 <vTaskStartScheduler+0x64>)
 8002cdc:	4815      	ldr	r0, [pc, #84]	; (8002d34 <vTaskStartScheduler+0x68>)
 8002cde:	f7ff ff25 	bl	8002b2c <xTaskCreate>
	if( xReturn == pdPASS )
 8002ce2:	2801      	cmp	r0, #1
 8002ce4:	d114      	bne.n	8002d10 <vTaskStartScheduler+0x44>
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <vTaskStartScheduler+0x6c>)
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <vTaskStartScheduler+0x70>)
 8002d00:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <vTaskStartScheduler+0x74>)
 8002d04:	601c      	str	r4, [r3, #0]
}
 8002d06:	b002      	add	sp, #8
 8002d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002d0c:	f000 bc1c 	b.w	8003548 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d10:	3001      	adds	r0, #1
 8002d12:	d108      	bne.n	8002d26 <vTaskStartScheduler+0x5a>
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	e7fe      	b.n	8002d24 <vTaskStartScheduler+0x58>
}
 8002d26:	b002      	add	sp, #8
 8002d28:	bd10      	pop	{r4, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000016c 	.word	0x2000016c
 8002d30:	0800d690 	.word	0x0800d690
 8002d34:	08002fc9 	.word	0x08002fc9
 8002d38:	20000170 	.word	0x20000170
 8002d3c:	2000018c 	.word	0x2000018c
 8002d40:	200001b8 	.word	0x200001b8

08002d44 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002d44:	4a02      	ldr	r2, [pc, #8]	; (8002d50 <vTaskSuspendAll+0xc>)
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000138 	.word	0x20000138

08002d54 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002d54:	4b01      	ldr	r3, [pc, #4]	; (8002d5c <xTaskGetTickCount+0x8>)
 8002d56:	6818      	ldr	r0, [r3, #0]
}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200001b8 	.word	0x200001b8

08002d60 <xTaskGetTickCountFromISR>:
{
 8002d60:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d62:	f000 fc67 	bl	8003634 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8002d66:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <xTaskGetTickCountFromISR+0xc>)
 8002d68:	6818      	ldr	r0, [r3, #0]
}
 8002d6a:	bd08      	pop	{r3, pc}
 8002d6c:	200001b8 	.word	0x200001b8

08002d70 <xTaskIncrementTick>:
{
 8002d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d74:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <xTaskIncrementTick+0xf8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d16e      	bne.n	8002e5a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <xTaskIncrementTick+0xfc>)
 8002d7e:	681c      	ldr	r4, [r3, #0]
 8002d80:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002d82:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002d84:	b9bc      	cbnz	r4, 8002db6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002d86:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <xTaskIncrementTick+0x100>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	b142      	cbz	r2, 8002da0 <xTaskIncrementTick+0x30>
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	e7fe      	b.n	8002d9e <xTaskIncrementTick+0x2e>
 8002da0:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <xTaskIncrementTick+0x104>)
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	6810      	ldr	r0, [r2, #0]
 8002da6:	6018      	str	r0, [r3, #0]
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <xTaskIncrementTick+0x108>)
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	f7ff fe63 	bl	8002a7c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002db6:	4d31      	ldr	r5, [pc, #196]	; (8002e7c <xTaskIncrementTick+0x10c>)
 8002db8:	4f31      	ldr	r7, [pc, #196]	; (8002e80 <xTaskIncrementTick+0x110>)
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8002dbe:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dc2:	d911      	bls.n	8002de8 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <xTaskIncrementTick+0x114>)
 8002dc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dca:	2214      	movs	r2, #20
 8002dcc:	434a      	muls	r2, r1
 8002dce:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002dd0:	2a02      	cmp	r2, #2
 8002dd2:	bf28      	it	cs
 8002dd4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <xTaskIncrementTick+0x118>)
 8002dda:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002ddc:	2a00      	cmp	r2, #0
}
 8002dde:	bf0c      	ite	eq
 8002de0:	4658      	moveq	r0, fp
 8002de2:	2001      	movne	r0, #1
 8002de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de8:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002e70 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002dec:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002e90 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df0:	f8da 2000 	ldr.w	r2, [sl]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	b91a      	cbnz	r2, 8002e00 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	602a      	str	r2, [r5, #0]
					break;
 8002dfe:	e7e1      	b.n	8002dc4 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e00:	f8da 2000 	ldr.w	r2, [sl]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e08:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002e0a:	428c      	cmp	r4, r1
 8002e0c:	d201      	bcs.n	8002e12 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8002e0e:	6029      	str	r1, [r5, #0]
						break;
 8002e10:	e7d8      	b.n	8002dc4 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e12:	f106 0804 	add.w	r8, r6, #4
 8002e16:	4640      	mov	r0, r8
 8002e18:	f7ff faab 	bl	8002372 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e1c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002e1e:	b119      	cbz	r1, 8002e28 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e20:	f106 0018 	add.w	r0, r6, #24
 8002e24:	f7ff faa5 	bl	8002372 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e28:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002e2a:	f8d9 3000 	ldr.w	r3, [r9]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f100 	lsl.w	r1, r2, r0
 8002e34:	4319      	orrs	r1, r3
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <xTaskIncrementTick+0x114>)
 8002e38:	f8c9 1000 	str.w	r1, [r9]
 8002e3c:	f04f 0c14 	mov.w	ip, #20
 8002e40:	4641      	mov	r1, r8
 8002e42:	fb0c 3000 	mla	r0, ip, r0, r3
 8002e46:	f7ff fa71 	bl	800232c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e4a:	6838      	ldr	r0, [r7, #0]
 8002e4c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002e4e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002e50:	4291      	cmp	r1, r2
 8002e52:	bf28      	it	cs
 8002e54:	f04f 0b01 	movcs.w	fp, #1
 8002e58:	e7ca      	b.n	8002df0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <xTaskIncrementTick+0x11c>)
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002e62:	f04f 0b00 	mov.w	fp, #0
 8002e66:	e7b7      	b.n	8002dd8 <xTaskIncrementTick+0x68>
 8002e68:	20000138 	.word	0x20000138
 8002e6c:	200001b8 	.word	0x200001b8
 8002e70:	20000098 	.word	0x20000098
 8002e74:	2000009c 	.word	0x2000009c
 8002e78:	20000174 	.word	0x20000174
 8002e7c:	20000170 	.word	0x20000170
 8002e80:	20000094 	.word	0x20000094
 8002e84:	200000a0 	.word	0x200000a0
 8002e88:	200001bc 	.word	0x200001bc
 8002e8c:	20000134 	.word	0x20000134
 8002e90:	20000140 	.word	0x20000140

08002e94 <xTaskResumeAll>:
{
 8002e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002e98:	4c30      	ldr	r4, [pc, #192]	; (8002f5c <xTaskResumeAll+0xc8>)
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	b943      	cbnz	r3, 8002eb0 <xTaskResumeAll+0x1c>
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	e7fe      	b.n	8002eae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002eb0:	f000 fab8 	bl	8003424 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eba:	6824      	ldr	r4, [r4, #0]
 8002ebc:	b12c      	cbz	r4, 8002eca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ebe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ec0:	f000 fad2 	bl	8003468 <vPortExitCritical>
}
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <xTaskResumeAll+0xcc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f5      	beq.n	8002ebe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed2:	4d24      	ldr	r5, [pc, #144]	; (8002f64 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002ed4:	4e24      	ldr	r6, [pc, #144]	; (8002f68 <xTaskResumeAll+0xd4>)
 8002ed6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002f7c <xTaskResumeAll+0xe8>
 8002eda:	e01f      	b.n	8002f1c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002edc:	68eb      	ldr	r3, [r5, #12]
 8002ede:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee0:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee4:	f104 0018 	add.w	r0, r4, #24
 8002ee8:	f7ff fa43 	bl	8002372 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eec:	4648      	mov	r0, r9
 8002eee:	f7ff fa40 	bl	8002372 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ef2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ef4:	6831      	ldr	r1, [r6, #0]
 8002ef6:	2701      	movs	r7, #1
 8002ef8:	fa07 f302 	lsl.w	r3, r7, r2
 8002efc:	2014      	movs	r0, #20
 8002efe:	430b      	orrs	r3, r1
 8002f00:	fb00 8002 	mla	r0, r0, r2, r8
 8002f04:	4649      	mov	r1, r9
 8002f06:	6033      	str	r3, [r6, #0]
 8002f08:	f7ff fa10 	bl	800232c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <xTaskResumeAll+0xd8>)
 8002f0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d301      	bcc.n	8002f1c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <xTaskResumeAll+0xdc>)
 8002f1a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1dc      	bne.n	8002edc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8002f22:	b10c      	cbz	r4, 8002f28 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002f24:	f7ff fdaa 	bl	8002a7c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f28:	4d12      	ldr	r5, [pc, #72]	; (8002f74 <xTaskResumeAll+0xe0>)
 8002f2a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f2c:	b144      	cbz	r4, 8002f40 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8002f2e:	4e10      	ldr	r6, [pc, #64]	; (8002f70 <xTaskResumeAll+0xdc>)
 8002f30:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002f32:	f7ff ff1d 	bl	8002d70 <xTaskIncrementTick>
 8002f36:	b100      	cbz	r0, 8002f3a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002f38:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f3a:	3c01      	subs	r4, #1
 8002f3c:	d1f9      	bne.n	8002f32 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002f3e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <xTaskResumeAll+0xdc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ba      	beq.n	8002ebe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <xTaskResumeAll+0xe4>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002f58:	2401      	movs	r4, #1
 8002f5a:	e7b1      	b.n	8002ec0 <xTaskResumeAll+0x2c>
 8002f5c:	20000138 	.word	0x20000138
 8002f60:	2000012c 	.word	0x2000012c
 8002f64:	20000178 	.word	0x20000178
 8002f68:	20000140 	.word	0x20000140
 8002f6c:	20000094 	.word	0x20000094
 8002f70:	200001bc 	.word	0x200001bc
 8002f74:	20000134 	.word	0x20000134
 8002f78:	e000ed04 	.word	0xe000ed04
 8002f7c:	200000a0 	.word	0x200000a0

08002f80 <vTaskDelay>:
	{
 8002f80:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f82:	b940      	cbnz	r0, 8002f96 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <vTaskDelay+0x40>)
 8002f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	f3bf 8f6f 	isb	sy
	}
 8002f94:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <vTaskDelay+0x44>)
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	b141      	cbz	r1, 8002fae <vTaskDelay+0x2e>
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	e7fe      	b.n	8002fac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002fae:	f7ff fec9 	bl	8002d44 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fb2:	f7ff fd75 	bl	8002aa0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002fb6:	f7ff ff6d 	bl	8002e94 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d0e2      	beq.n	8002f84 <vTaskDelay+0x4>
 8002fbe:	e7e9      	b.n	8002f94 <vTaskDelay+0x14>
 8002fc0:	e000ed04 	.word	0xe000ed04
 8002fc4:	20000138 	.word	0x20000138

08002fc8 <prvIdleTask>:
{
 8002fc8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002fca:	4e17      	ldr	r6, [pc, #92]	; (8003028 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fcc:	4c17      	ldr	r4, [pc, #92]	; (800302c <prvIdleTask+0x64>)
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	b963      	cbnz	r3, 8002fec <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <prvIdleTask+0x68>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d9f8      	bls.n	8002fcc <prvIdleTask+0x4>
				taskYIELD();
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <prvIdleTask+0x6c>)
 8002fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	e7ef      	b.n	8002fcc <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002fec:	f7ff feaa 	bl	8002d44 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002ff0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002ff2:	f7ff ff4f 	bl	8002e94 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8002ff6:	2d00      	cmp	r5, #0
 8002ff8:	d0e9      	beq.n	8002fce <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002ffa:	f000 fa13 	bl	8003424 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ffe:	68f3      	ldr	r3, [r6, #12]
 8003000:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003002:	1d28      	adds	r0, r5, #4
 8003004:	f7ff f9b5 	bl	8002372 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <prvIdleTask+0x70>)
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	3b01      	subs	r3, #1
 800300e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	3b01      	subs	r3, #1
 8003014:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003016:	f000 fa27 	bl	8003468 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800301a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800301c:	f000 fbe8 	bl	80037f0 <vPortFree>
			vPortFree( pxTCB );
 8003020:	4628      	mov	r0, r5
 8003022:	f000 fbe5 	bl	80037f0 <vPortFree>
 8003026:	e7d2      	b.n	8002fce <prvIdleTask+0x6>
 8003028:	200001a4 	.word	0x200001a4
 800302c:	20000130 	.word	0x20000130
 8003030:	200000a0 	.word	0x200000a0
 8003034:	e000ed04 	.word	0xe000ed04
 8003038:	2000012c 	.word	0x2000012c

0800303c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <vTaskSwitchContext+0x60>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <vTaskSwitchContext+0x64>)
{
 8003042:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003044:	b112      	cbz	r2, 800304c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003046:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800304c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <vTaskSwitchContext+0x68>)
 8003050:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f1c3 031f 	rsb	r3, r3, #31
 800305c:	2214      	movs	r2, #20
 800305e:	4912      	ldr	r1, [pc, #72]	; (80030a8 <vTaskSwitchContext+0x6c>)
 8003060:	435a      	muls	r2, r3
 8003062:	1888      	adds	r0, r1, r2
 8003064:	588c      	ldr	r4, [r1, r2]
 8003066:	b944      	cbnz	r4, 800307a <vTaskSwitchContext+0x3e>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	e7fe      	b.n	8003078 <vTaskSwitchContext+0x3c>
 800307a:	6844      	ldr	r4, [r0, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	6864      	ldr	r4, [r4, #4]
 8003080:	6044      	str	r4, [r0, #4]
 8003082:	440a      	add	r2, r1
 8003084:	4294      	cmp	r4, r2
 8003086:	bf04      	itt	eq
 8003088:	6862      	ldreq	r2, [r4, #4]
 800308a:	6042      	streq	r2, [r0, #4]
 800308c:	2214      	movs	r2, #20
 800308e:	fb02 1303 	mla	r3, r2, r3, r1
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <vTaskSwitchContext+0x70>)
 8003098:	e7d6      	b.n	8003048 <vTaskSwitchContext+0xc>
 800309a:	bf00      	nop
 800309c:	20000138 	.word	0x20000138
 80030a0:	200001bc 	.word	0x200001bc
 80030a4:	20000140 	.word	0x20000140
 80030a8:	200000a0 	.word	0x200000a0
 80030ac:	20000094 	.word	0x20000094

080030b0 <vTaskPlaceOnEventList>:
{
 80030b0:	b510      	push	{r4, lr}
 80030b2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80030b4:	b940      	cbnz	r0, 80030c8 <vTaskPlaceOnEventList+0x18>
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	e7fe      	b.n	80030c6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <vTaskPlaceOnEventList+0x30>)
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	3118      	adds	r1, #24
 80030ce:	f7ff f939 	bl	8002344 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030d2:	4620      	mov	r0, r4
 80030d4:	2101      	movs	r1, #1
}
 80030d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030da:	f7ff bce1 	b.w	8002aa0 <prvAddCurrentTaskToDelayedList>
 80030de:	bf00      	nop
 80030e0:	20000094 	.word	0x20000094

080030e4 <xTaskRemoveFromEventList>:
{
 80030e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030e6:	68c3      	ldr	r3, [r0, #12]
 80030e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80030ea:	b944      	cbnz	r4, 80030fe <xTaskRemoveFromEventList+0x1a>
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	e7fe      	b.n	80030fc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030fe:	f104 0518 	add.w	r5, r4, #24
 8003102:	4628      	mov	r0, r5
 8003104:	f7ff f935 	bl	8002372 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <xTaskRemoveFromEventList+0x6c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b9e3      	cbnz	r3, 8003148 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800310e:	1d25      	adds	r5, r4, #4
 8003110:	4628      	mov	r0, r5
 8003112:	f7ff f92e 	bl	8002372 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003116:	490f      	ldr	r1, [pc, #60]	; (8003154 <xTaskRemoveFromEventList+0x70>)
 8003118:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800311a:	6808      	ldr	r0, [r1, #0]
 800311c:	2301      	movs	r3, #1
 800311e:	4093      	lsls	r3, r2
 8003120:	4303      	orrs	r3, r0
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <xTaskRemoveFromEventList+0x74>)
 8003126:	2014      	movs	r0, #20
 8003128:	4629      	mov	r1, r5
 800312a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800312e:	f7ff f8fd 	bl	800232c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <xTaskRemoveFromEventList+0x78>)
 8003134:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800313c:	bf83      	ittte	hi
 800313e:	4b08      	ldrhi	r3, [pc, #32]	; (8003160 <xTaskRemoveFromEventList+0x7c>)
 8003140:	2001      	movhi	r0, #1
 8003142:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003144:	2000      	movls	r0, #0
}
 8003146:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003148:	4629      	mov	r1, r5
 800314a:	4806      	ldr	r0, [pc, #24]	; (8003164 <xTaskRemoveFromEventList+0x80>)
 800314c:	e7ef      	b.n	800312e <xTaskRemoveFromEventList+0x4a>
 800314e:	bf00      	nop
 8003150:	20000138 	.word	0x20000138
 8003154:	20000140 	.word	0x20000140
 8003158:	200000a0 	.word	0x200000a0
 800315c:	20000094 	.word	0x20000094
 8003160:	200001bc 	.word	0x200001bc
 8003164:	20000178 	.word	0x20000178

08003168 <vTaskSetTimeOutState>:
{
 8003168:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800316a:	b908      	cbnz	r0, 8003170 <vTaskSetTimeOutState+0x8>
 800316c:	f7ff fc7d 	bl	8002a6a <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <vTaskSetTimeOutState+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003176:	4b03      	ldr	r3, [pc, #12]	; (8003184 <vTaskSetTimeOutState+0x1c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6043      	str	r3, [r0, #4]
}
 800317c:	bd08      	pop	{r3, pc}
 800317e:	bf00      	nop
 8003180:	20000174 	.word	0x20000174
 8003184:	200001b8 	.word	0x200001b8

08003188 <xTaskCheckForTimeOut>:
{
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800318c:	4604      	mov	r4, r0
 800318e:	b940      	cbnz	r0, 80031a2 <xTaskCheckForTimeOut+0x1a>
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	e7fe      	b.n	80031a0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80031a2:	b941      	cbnz	r1, 80031b6 <xTaskCheckForTimeOut+0x2e>
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	e7fe      	b.n	80031b4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80031b6:	f000 f935 	bl	8003424 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <xTaskCheckForTimeOut+0x6c>)
 80031bc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80031be:	682b      	ldr	r3, [r5, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	d010      	beq.n	80031e6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <xTaskCheckForTimeOut+0x70>)
 80031c6:	6810      	ldr	r0, [r2, #0]
 80031c8:	e9d4 6200 	ldrd	r6, r2, [r4]
 80031cc:	4286      	cmp	r6, r0
 80031ce:	d001      	beq.n	80031d4 <xTaskCheckForTimeOut+0x4c>
 80031d0:	4291      	cmp	r1, r2
 80031d2:	d20d      	bcs.n	80031f0 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031d4:	1a88      	subs	r0, r1, r2
 80031d6:	4283      	cmp	r3, r0
 80031d8:	d90a      	bls.n	80031f0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80031da:	1a5b      	subs	r3, r3, r1
 80031dc:	4413      	add	r3, r2
 80031de:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7ff ffc1 	bl	8003168 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80031e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031e8:	f000 f93e 	bl	8003468 <vPortExitCritical>
}
 80031ec:	4620      	mov	r0, r4
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80031f0:	2401      	movs	r4, #1
 80031f2:	e7f9      	b.n	80031e8 <xTaskCheckForTimeOut+0x60>
 80031f4:	200001b8 	.word	0x200001b8
 80031f8:	20000174 	.word	0x20000174

080031fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80031fc:	4b01      	ldr	r3, [pc, #4]	; (8003204 <vTaskMissedYield+0x8>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	4770      	bx	lr
 8003204:	200001bc 	.word	0x200001bc

08003208 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <xTaskGetSchedulerState+0x18>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b133      	cbz	r3, 800321c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <xTaskGetSchedulerState+0x1c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003214:	bf0c      	ite	eq
 8003216:	2002      	moveq	r0, #2
 8003218:	2000      	movne	r0, #0
 800321a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800321c:	2001      	movs	r0, #1
	}
 800321e:	4770      	bx	lr
 8003220:	2000018c 	.word	0x2000018c
 8003224:	20000138 	.word	0x20000138

08003228 <vTaskPriorityInherit>:
	{
 8003228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800322c:	4604      	mov	r4, r0
 800322e:	2800      	cmp	r0, #0
 8003230:	d02e      	beq.n	8003290 <vTaskPriorityInherit+0x68>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003232:	4d1e      	ldr	r5, [pc, #120]	; (80032ac <vTaskPriorityInherit+0x84>)
 8003234:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003236:	682a      	ldr	r2, [r5, #0]
 8003238:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800323a:	4293      	cmp	r3, r2
 800323c:	d228      	bcs.n	8003290 <vTaskPriorityInherit+0x68>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800323e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003240:	4e1b      	ldr	r6, [pc, #108]	; (80032b0 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003242:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003244:	bfa1      	itttt	ge
 8003246:	682a      	ldrge	r2, [r5, #0]
 8003248:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800324a:	f1c2 0207 	rsbge	r2, r2, #7
 800324e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003250:	2714      	movs	r7, #20
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	fb07 6303 	mla	r3, r7, r3, r6
 8003258:	429a      	cmp	r2, r3
 800325a:	d116      	bne.n	800328a <vTaskPriorityInherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800325c:	f100 0804 	add.w	r8, r0, #4
 8003260:	4640      	mov	r0, r8
 8003262:	f7ff f886 	bl	8002372 <uxListRemove>
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <vTaskPriorityInherit+0x8c>)
 8003268:	b1a0      	cbz	r0, 8003294 <vTaskPriorityInherit+0x6c>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800326a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800326c:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800326e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003270:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003272:	2301      	movs	r3, #1
 8003274:	4083      	lsls	r3, r0
 8003276:	430b      	orrs	r3, r1
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	2314      	movs	r3, #20
 800327c:	4641      	mov	r1, r8
 800327e:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003286:	f7ff b851 	b.w	800232c <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 8003290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003294:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003296:	4347      	muls	r7, r0
 8003298:	59f3      	ldr	r3, [r6, r7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e5      	bne.n	800326a <vTaskPriorityInherit+0x42>
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	4081      	lsls	r1, r0
 80032a4:	ea23 0301 	bic.w	r3, r3, r1
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e7de      	b.n	800326a <vTaskPriorityInherit+0x42>
 80032ac:	20000094 	.word	0x20000094
 80032b0:	200000a0 	.word	0x200000a0
 80032b4:	20000140 	.word	0x20000140

080032b8 <xTaskPriorityDisinherit>:
	{
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80032ba:	4604      	mov	r4, r0
 80032bc:	b908      	cbnz	r0, 80032c2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80032be:	2000      	movs	r0, #0
	}
 80032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <xTaskPriorityDisinherit+0x94>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4283      	cmp	r3, r0
 80032c8:	d008      	beq.n	80032dc <xTaskPriorityDisinherit+0x24>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	e7fe      	b.n	80032da <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80032dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032de:	b943      	cbnz	r3, 80032f2 <xTaskPriorityDisinherit+0x3a>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	e7fe      	b.n	80032f0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80032f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80032f6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032f8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80032fa:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032fc:	d0df      	beq.n	80032be <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1dd      	bne.n	80032be <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003302:	1d05      	adds	r5, r0, #4
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff f834 	bl	8002372 <uxListRemove>
 800330a:	4e11      	ldr	r6, [pc, #68]	; (8003350 <xTaskPriorityDisinherit+0x98>)
 800330c:	4a11      	ldr	r2, [pc, #68]	; (8003354 <xTaskPriorityDisinherit+0x9c>)
 800330e:	b950      	cbnz	r0, 8003326 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003310:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003312:	2114      	movs	r1, #20
 8003314:	4379      	muls	r1, r7
 8003316:	5873      	ldr	r3, [r6, r1]
 8003318:	b92b      	cbnz	r3, 8003326 <xTaskPriorityDisinherit+0x6e>
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	2001      	movs	r0, #1
 800331e:	40b8      	lsls	r0, r7
 8003320:	ea23 0300 	bic.w	r3, r3, r0
 8003324:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003328:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332a:	f1c3 0107 	rsb	r1, r3, #7
 800332e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003330:	6811      	ldr	r1, [r2, #0]
 8003332:	2401      	movs	r4, #1
 8003334:	fa04 f003 	lsl.w	r0, r4, r3
 8003338:	4308      	orrs	r0, r1
 800333a:	6010      	str	r0, [r2, #0]
 800333c:	2014      	movs	r0, #20
 800333e:	fb00 6003 	mla	r0, r0, r3, r6
 8003342:	4629      	mov	r1, r5
 8003344:	f7fe fff2 	bl	800232c <vListInsertEnd>
					xReturn = pdTRUE;
 8003348:	4620      	mov	r0, r4
		return xReturn;
 800334a:	e7b9      	b.n	80032c0 <xTaskPriorityDisinherit+0x8>
 800334c:	20000094 	.word	0x20000094
 8003350:	200000a0 	.word	0x200000a0
 8003354:	20000140 	.word	0x20000140

08003358 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <pvTaskIncrementMutexHeldCount+0x14>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	b11a      	cbz	r2, 8003366 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003362:	3201      	adds	r2, #1
 8003364:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003366:	6818      	ldr	r0, [r3, #0]
	}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000094 	.word	0x20000094

08003370 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <prvTaskExitError+0x2c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	d008      	beq.n	800338a <prvTaskExitError+0x1a>
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	e7fe      	b.n	8003388 <prvTaskExitError+0x18>
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	e7fe      	b.n	800339a <prvTaskExitError+0x2a>
 800339c:	20000004 	.word	0x20000004

080033a0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80033a0:	4806      	ldr	r0, [pc, #24]	; (80033bc <prvPortStartFirstTask+0x1c>)
 80033a2:	6800      	ldr	r0, [r0, #0]
 80033a4:	6800      	ldr	r0, [r0, #0]
 80033a6:	f380 8808 	msr	MSP, r0
 80033aa:	b662      	cpsie	i
 80033ac:	b661      	cpsie	f
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	df00      	svc	0
 80033b8:	bf00      	nop
 80033ba:	0000      	.short	0x0000
 80033bc:	e000ed08 	.word	0xe000ed08

080033c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80033c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033d0 <vPortEnableVFP+0x10>
 80033c4:	6801      	ldr	r1, [r0, #0]
 80033c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033ca:	6001      	str	r1, [r0, #0]
 80033cc:	4770      	bx	lr
 80033ce:	0000      	.short	0x0000
 80033d0:	e000ed88 	.word	0xe000ed88

080033d4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <pxPortInitialiseStack+0x28>)
 80033de:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033e2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80033e6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033ea:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033ee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80033f2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80033f6:	3844      	subs	r0, #68	; 0x44
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	08003371 	.word	0x08003371

08003400 <SVC_Handler>:
	__asm volatile (
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <pxCurrentTCBConst2>)
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	6808      	ldr	r0, [r1, #0]
 8003406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340a:	f380 8809 	msr	PSP, r0
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f380 8811 	msr	BASEPRI, r0
 800341a:	4770      	bx	lr
 800341c:	f3af 8000 	nop.w

08003420 <pxCurrentTCBConst2>:
 8003420:	20000094 	.word	0x20000094

08003424 <vPortEnterCritical>:
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <vPortEnterCritical+0x3c>)
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800343a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800343c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800343e:	d10d      	bne.n	800345c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <vPortEnterCritical+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003448:	d008      	beq.n	800345c <vPortEnterCritical+0x38>
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	e7fe      	b.n	800345a <vPortEnterCritical+0x36>
}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000004 	.word	0x20000004
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vPortExitCritical+0x24>)
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	b943      	cbnz	r3, 8003480 <vPortExitCritical+0x18>
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	e7fe      	b.n	800347e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003480:	3b01      	subs	r3, #1
 8003482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003484:	b90b      	cbnz	r3, 800348a <vPortExitCritical+0x22>
	__asm volatile
 8003486:	f383 8811 	msr	BASEPRI, r3
}
 800348a:	4770      	bx	lr
 800348c:	20000004 	.word	0x20000004

08003490 <PendSV_Handler>:
	__asm volatile
 8003490:	f3ef 8009 	mrs	r0, PSP
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <pxCurrentTCBConst>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f01e 0f10 	tst.w	lr, #16
 80034a0:	bf08      	it	eq
 80034a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034aa:	6010      	str	r0, [r2, #0]
 80034ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80034b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034b4:	f380 8811 	msr	BASEPRI, r0
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f7ff fdbc 	bl	800303c <vTaskSwitchContext>
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f380 8811 	msr	BASEPRI, r0
 80034cc:	bc08      	pop	{r3}
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	6808      	ldr	r0, [r1, #0]
 80034d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d6:	f01e 0f10 	tst.w	lr, #16
 80034da:	bf08      	it	eq
 80034dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034e0:	f380 8809 	msr	PSP, r0
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst>:
 80034f0:	20000094 	.word	0x20000094

080034f4 <xPortSysTickHandler>:
{
 80034f4:	b508      	push	{r3, lr}
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003506:	f7ff fc33 	bl	8002d70 <xTaskIncrementTick>
 800350a:	b118      	cbz	r0, 8003514 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <xPortSysTickHandler+0x28>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003514:	2300      	movs	r3, #0
 8003516:	f383 8811 	msr	BASEPRI, r3
}
 800351a:	bd08      	pop	{r3, pc}
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <vPortSetupTimerInterrupt+0x1c>)
 8003522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fbb3 f3f2 	udiv	r3, r3, r2
 800352c:	4a04      	ldr	r2, [pc, #16]	; (8003540 <vPortSetupTimerInterrupt+0x20>)
 800352e:	3b01      	subs	r3, #1
 8003530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <vPortSetupTimerInterrupt+0x24>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000010 	.word	0x20000010
 8003540:	e000e014 	.word	0xe000e014
 8003544:	e000e010 	.word	0xe000e010

08003548 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003548:	4b31      	ldr	r3, [pc, #196]	; (8003610 <xPortStartScheduler+0xc8>)
 800354a:	4a32      	ldr	r2, [pc, #200]	; (8003614 <xPortStartScheduler+0xcc>)
{
 800354c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	4291      	cmp	r1, r2
 8003552:	d108      	bne.n	8003566 <xPortStartScheduler+0x1e>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	e7fe      	b.n	8003564 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <xPortStartScheduler+0xd0>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d108      	bne.n	8003580 <xPortStartScheduler+0x38>
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	e7fe      	b.n	800357e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <xPortStartScheduler+0xd4>)
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800358c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800358e:	4a24      	ldr	r2, [pc, #144]	; (8003620 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003596:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800359a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800359e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035a0:	4b20      	ldr	r3, [pc, #128]	; (8003624 <xPortStartScheduler+0xdc>)
 80035a2:	2207      	movs	r2, #7
 80035a4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035a6:	2100      	movs	r1, #0
 80035a8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80035ac:	0600      	lsls	r0, r0, #24
 80035ae:	f102 34ff 	add.w	r4, r2, #4294967295
 80035b2:	d423      	bmi.n	80035fc <xPortStartScheduler+0xb4>
 80035b4:	b101      	cbz	r1, 80035b8 <xPortStartScheduler+0x70>
 80035b6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035c0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035c2:	9b01      	ldr	r3, [sp, #4]
 80035c4:	4a15      	ldr	r2, [pc, #84]	; (800361c <xPortStartScheduler+0xd4>)
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <xPortStartScheduler+0xe0>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80035d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80035da:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80035dc:	f7ff ffa0 	bl	8003520 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <xPortStartScheduler+0xe4>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80035e6:	f7ff feeb 	bl	80033c0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <xPortStartScheduler+0xe8>)
 80035ec:	6813      	ldr	r3, [r2, #0]
 80035ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035f2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80035f4:	f7ff fed4 	bl	80033a0 <prvPortStartFirstTask>
	prvTaskExitError();
 80035f8:	f7ff feba 	bl	8003370 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003600:	0052      	lsls	r2, r2, #1
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	f88d 2003 	strb.w	r2, [sp, #3]
 8003608:	2101      	movs	r1, #1
 800360a:	4622      	mov	r2, r4
 800360c:	e7cc      	b.n	80035a8 <xPortStartScheduler+0x60>
 800360e:	bf00      	nop
 8003610:	e000ed00 	.word	0xe000ed00
 8003614:	410fc271 	.word	0x410fc271
 8003618:	410fc270 	.word	0x410fc270
 800361c:	e000e400 	.word	0xe000e400
 8003620:	200001c0 	.word	0x200001c0
 8003624:	200001c4 	.word	0x200001c4
 8003628:	e000ed20 	.word	0xe000ed20
 800362c:	20000004 	.word	0x20000004
 8003630:	e000ef34 	.word	0xe000ef34

08003634 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003634:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d90e      	bls.n	800365a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800363c:	4a10      	ldr	r2, [pc, #64]	; (8003680 <vPortValidateInterruptPriority+0x4c>)
 800363e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003640:	4a10      	ldr	r2, [pc, #64]	; (8003684 <vPortValidateInterruptPriority+0x50>)
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d908      	bls.n	800365a <vPortValidateInterruptPriority+0x26>
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	e7fe      	b.n	8003658 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <vPortValidateInterruptPriority+0x54>)
 800365c:	4a0b      	ldr	r2, [pc, #44]	; (800368c <vPortValidateInterruptPriority+0x58>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003666:	4293      	cmp	r3, r2
 8003668:	d908      	bls.n	800367c <vPortValidateInterruptPriority+0x48>
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	e7fe      	b.n	800367a <vPortValidateInterruptPriority+0x46>
	}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e3f0 	.word	0xe000e3f0
 8003684:	200001c0 	.word	0x200001c0
 8003688:	e000ed0c 	.word	0xe000ed0c
 800368c:	200001c4 	.word	0x200001c4

08003690 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003690:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <prvInsertBlockIntoFreeList+0x40>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4282      	cmp	r2, r0
 8003698:	d318      	bcc.n	80036cc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800369a:	685c      	ldr	r4, [r3, #4]
 800369c:	1919      	adds	r1, r3, r4
 800369e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036a0:	bf01      	itttt	eq
 80036a2:	6841      	ldreq	r1, [r0, #4]
 80036a4:	4618      	moveq	r0, r3
 80036a6:	1909      	addeq	r1, r1, r4
 80036a8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036aa:	6844      	ldr	r4, [r0, #4]
 80036ac:	1901      	adds	r1, r0, r4
 80036ae:	428a      	cmp	r2, r1
 80036b0:	d107      	bne.n	80036c2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <prvInsertBlockIntoFreeList+0x44>)
 80036b4:	6809      	ldr	r1, [r1, #0]
 80036b6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036b8:	bf1f      	itttt	ne
 80036ba:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036bc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036be:	1909      	addne	r1, r1, r4
 80036c0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036c2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036c4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036c6:	bf18      	it	ne
 80036c8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ca:	bd10      	pop	{r4, pc}
 80036cc:	4613      	mov	r3, r2
 80036ce:	e7e1      	b.n	8003694 <prvInsertBlockIntoFreeList+0x4>
 80036d0:	20003dd8 	.word	0x20003dd8
 80036d4:	200001c8 	.word	0x200001c8

080036d8 <pvPortMalloc>:
{
 80036d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036dc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80036de:	f7ff fb31 	bl	8002d44 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80036e2:	493d      	ldr	r1, [pc, #244]	; (80037d8 <pvPortMalloc+0x100>)
 80036e4:	4d3d      	ldr	r5, [pc, #244]	; (80037dc <pvPortMalloc+0x104>)
 80036e6:	680b      	ldr	r3, [r1, #0]
 80036e8:	b9fb      	cbnz	r3, 800372a <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80036ea:	4a3d      	ldr	r2, [pc, #244]	; (80037e0 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036ec:	0756      	lsls	r6, r2, #29
 80036ee:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036f2:	bf1d      	ittte	ne
 80036f4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036f6:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036fa:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036fc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003700:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003702:	4e38      	ldr	r6, [pc, #224]	; (80037e4 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8003704:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003706:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800370a:	2000      	movs	r0, #0
 800370c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800370e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003710:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003714:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8003716:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003718:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <pvPortMalloc+0x110>)
 800371e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <pvPortMalloc+0x114>)
 8003722:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003728:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800372a:	682f      	ldr	r7, [r5, #0]
 800372c:	4227      	tst	r7, r4
 800372e:	d14e      	bne.n	80037ce <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8003730:	2c00      	cmp	r4, #0
 8003732:	d03f      	beq.n	80037b4 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8003734:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003738:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800373a:	bf1c      	itt	ne
 800373c:	f023 0307 	bicne.w	r3, r3, #7
 8003740:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003742:	2b00      	cmp	r3, #0
 8003744:	d043      	beq.n	80037ce <pvPortMalloc+0xf6>
 8003746:	4a29      	ldr	r2, [pc, #164]	; (80037ec <pvPortMalloc+0x114>)
 8003748:	6816      	ldr	r6, [r2, #0]
 800374a:	429e      	cmp	r6, r3
 800374c:	4690      	mov	r8, r2
 800374e:	d33e      	bcc.n	80037ce <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <pvPortMalloc+0x10c>)
 8003752:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003754:	6868      	ldr	r0, [r5, #4]
 8003756:	4298      	cmp	r0, r3
 8003758:	d201      	bcs.n	800375e <pvPortMalloc+0x86>
 800375a:	682c      	ldr	r4, [r5, #0]
 800375c:	b9a4      	cbnz	r4, 8003788 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800375e:	6809      	ldr	r1, [r1, #0]
 8003760:	42a9      	cmp	r1, r5
 8003762:	d034      	beq.n	80037ce <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003764:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003766:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003768:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800376a:	1ac2      	subs	r2, r0, r3
 800376c:	2a10      	cmp	r2, #16
 800376e:	d912      	bls.n	8003796 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003770:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003772:	0741      	lsls	r1, r0, #29
 8003774:	d00b      	beq.n	800378e <pvPortMalloc+0xb6>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	e7fe      	b.n	8003786 <pvPortMalloc+0xae>
 8003788:	462a      	mov	r2, r5
 800378a:	4625      	mov	r5, r4
 800378c:	e7e2      	b.n	8003754 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800378e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003790:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003792:	f7ff ff7d 	bl	8003690 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003796:	4914      	ldr	r1, [pc, #80]	; (80037e8 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003798:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800379a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800379c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800379e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037a0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80037a2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037a6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037aa:	bf38      	it	cc
 80037ac:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037ae:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80037b0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80037b2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80037b4:	f7ff fb6e 	bl	8002e94 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b8:	0763      	lsls	r3, r4, #29
 80037ba:	d00a      	beq.n	80037d2 <pvPortMalloc+0xfa>
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	e7fe      	b.n	80037cc <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 80037ce:	2400      	movs	r4, #0
 80037d0:	e7f0      	b.n	80037b4 <pvPortMalloc+0xdc>
}
 80037d2:	4620      	mov	r0, r4
 80037d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d8:	200001c8 	.word	0x200001c8
 80037dc:	20003dcc 	.word	0x20003dcc
 80037e0:	200001cc 	.word	0x200001cc
 80037e4:	20003dd8 	.word	0x20003dd8
 80037e8:	20003dd4 	.word	0x20003dd4
 80037ec:	20003dd0 	.word	0x20003dd0

080037f0 <vPortFree>:
{
 80037f0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80037f2:	4604      	mov	r4, r0
 80037f4:	b370      	cbz	r0, 8003854 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <vPortFree+0x68>)
 80037f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	4213      	tst	r3, r2
 8003800:	d108      	bne.n	8003814 <vPortFree+0x24>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	e7fe      	b.n	8003812 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003814:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003818:	b141      	cbz	r1, 800382c <vPortFree+0x3c>
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	e7fe      	b.n	800382a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800382c:	ea23 0302 	bic.w	r3, r3, r2
 8003830:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003834:	f7ff fa86 	bl	8002d44 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <vPortFree+0x6c>)
 800383a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800383e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003840:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003844:	440b      	add	r3, r1
 8003846:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003848:	f7ff ff22 	bl	8003690 <prvInsertBlockIntoFreeList>
}
 800384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003850:	f7ff bb20 	b.w	8002e94 <xTaskResumeAll>
}
 8003854:	bd10      	pop	{r4, pc}
 8003856:	bf00      	nop
 8003858:	20003dcc 	.word	0x20003dcc
 800385c:	20003dd0 	.word	0x20003dd0

08003860 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <tcpip_thread+0x7c>)
 8003862:	681b      	ldr	r3, [r3, #0]
{
 8003864:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8003866:	b113      	cbz	r3, 800386e <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <tcpip_thread+0x80>)
 800386a:	6810      	ldr	r0, [r2, #0]
 800386c:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800386e:	481d      	ldr	r0, [pc, #116]	; (80038e4 <tcpip_thread+0x84>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8003870:	4d1c      	ldr	r5, [pc, #112]	; (80038e4 <tcpip_thread+0x84>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003872:	4e1d      	ldr	r6, [pc, #116]	; (80038e8 <tcpip_thread+0x88>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003874:	4c1d      	ldr	r4, [pc, #116]	; (80038ec <tcpip_thread+0x8c>)
  LOCK_TCPIP_CORE();
 8003876:	f007 fd58 	bl	800b32a <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 800387a:	4628      	mov	r0, r5
 800387c:	f007 fd5a 	bl	800b334 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003880:	a901      	add	r1, sp, #4
 8003882:	4630      	mov	r0, r6
 8003884:	f004 ffb4 	bl	80087f0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8003888:	4628      	mov	r0, r5
 800388a:	f007 fd4e 	bl	800b32a <sys_mutex_lock>
    if (msg == NULL) {
 800388e:	9b01      	ldr	r3, [sp, #4]
 8003890:	b933      	cbnz	r3, 80038a0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003892:	4623      	mov	r3, r4
 8003894:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003896:	4916      	ldr	r1, [pc, #88]	; (80038f0 <tcpip_thread+0x90>)
 8003898:	4816      	ldr	r0, [pc, #88]	; (80038f4 <tcpip_thread+0x94>)
 800389a:	f008 ffeb 	bl	800c874 <iprintf>
      break;
 800389e:	e7ec      	b.n	800387a <tcpip_thread+0x1a>
    switch (msg->type) {
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	2a03      	cmp	r2, #3
 80038a4:	d00c      	beq.n	80038c0 <tcpip_thread+0x60>
 80038a6:	2a04      	cmp	r2, #4
 80038a8:	d010      	beq.n	80038cc <tcpip_thread+0x6c>
 80038aa:	2a02      	cmp	r2, #2
 80038ac:	d112      	bne.n	80038d4 <tcpip_thread+0x74>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80038ae:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80038b2:	6858      	ldr	r0, [r3, #4]
 80038b4:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80038b6:	9901      	ldr	r1, [sp, #4]
 80038b8:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80038ba:	f001 f955 	bl	8004b68 <memp_free>
      break;
 80038be:	e7dc      	b.n	800387a <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80038c0:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 80038c4:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80038c6:	9901      	ldr	r1, [sp, #4]
 80038c8:	2008      	movs	r0, #8
 80038ca:	e7f6      	b.n	80038ba <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80038cc:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 80038d0:	4790      	blx	r2
      break;
 80038d2:	e7d2      	b.n	800387a <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80038d4:	4623      	mov	r3, r4
 80038d6:	229b      	movs	r2, #155	; 0x9b
 80038d8:	e7dd      	b.n	8003896 <tcpip_thread+0x36>
 80038da:	bf00      	nop
 80038dc:	20003de4 	.word	0x20003de4
 80038e0:	20003de8 	.word	0x20003de8
 80038e4:	20003f9c 	.word	0x20003f9c
 80038e8:	20003de0 	.word	0x20003de0
 80038ec:	0800d6f3 	.word	0x0800d6f3
 80038f0:	0800d723 	.word	0x0800d723
 80038f4:	0800d741 	.word	0x0800d741

080038f8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80038fc:	4810      	ldr	r0, [pc, #64]	; (8003940 <tcpip_inpkt+0x48>)
{
 80038fe:	460e      	mov	r6, r1
 8003900:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003902:	f007 fcf1 	bl	800b2e8 <sys_mbox_valid>
 8003906:	b928      	cbnz	r0, 8003914 <tcpip_inpkt+0x1c>
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <tcpip_inpkt+0x4c>)
 800390a:	490f      	ldr	r1, [pc, #60]	; (8003948 <tcpip_inpkt+0x50>)
 800390c:	480f      	ldr	r0, [pc, #60]	; (800394c <tcpip_inpkt+0x54>)
 800390e:	22b5      	movs	r2, #181	; 0xb5
 8003910:	f008 ffb0 	bl	800c874 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003914:	2009      	movs	r0, #9
 8003916:	f001 f90b 	bl	8004b30 <memp_malloc>
  if (msg == NULL) {
 800391a:	4604      	mov	r4, r0
 800391c:	b168      	cbz	r0, 800393a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800391e:	2302      	movs	r3, #2
 8003920:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 8003922:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->msg.inp.input_fn = input_fn;
 8003926:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8003928:	4601      	mov	r1, r0
 800392a:	4805      	ldr	r0, [pc, #20]	; (8003940 <tcpip_inpkt+0x48>)
 800392c:	f007 fcb0 	bl	800b290 <sys_mbox_trypost>
 8003930:	b128      	cbz	r0, 800393e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003932:	4621      	mov	r1, r4
 8003934:	2009      	movs	r0, #9
 8003936:	f001 f917 	bl	8004b68 <memp_free>
    return ERR_MEM;
 800393a:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003940:	20003de0 	.word	0x20003de0
 8003944:	0800d6f3 	.word	0x0800d6f3
 8003948:	0800d6e6 	.word	0x0800d6e6
 800394c:	0800d741 	.word	0x0800d741

08003950 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8003950:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8003954:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8003958:	bf14      	ite	ne
 800395a:	4a02      	ldrne	r2, [pc, #8]	; (8003964 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800395c:	4a02      	ldreq	r2, [pc, #8]	; (8003968 <tcpip_input+0x18>)
 800395e:	f7ff bfcb 	b.w	80038f8 <tcpip_inpkt>
 8003962:	bf00      	nop
 8003964:	0800b151 	.word	0x0800b151
 8003968:	0800a739 	.word	0x0800a739

0800396c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003970:	4813      	ldr	r0, [pc, #76]	; (80039c0 <tcpip_callback_with_block+0x54>)
{
 8003972:	460e      	mov	r6, r1
 8003974:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003976:	f007 fcb7 	bl	800b2e8 <sys_mbox_valid>
 800397a:	b928      	cbnz	r0, 8003988 <tcpip_callback_with_block+0x1c>
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <tcpip_callback_with_block+0x58>)
 800397e:	4912      	ldr	r1, [pc, #72]	; (80039c8 <tcpip_callback_with_block+0x5c>)
 8003980:	4812      	ldr	r0, [pc, #72]	; (80039cc <tcpip_callback_with_block+0x60>)
 8003982:	22ee      	movs	r2, #238	; 0xee
 8003984:	f008 ff76 	bl	800c874 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8003988:	2008      	movs	r0, #8
 800398a:	f001 f8d1 	bl	8004b30 <memp_malloc>
  if (msg == NULL) {
 800398e:	4604      	mov	r4, r0
 8003990:	b190      	cbz	r0, 80039b8 <tcpip_callback_with_block+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8003992:	2303      	movs	r3, #3
 8003994:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;
 8003996:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (block) {
    sys_mbox_post(&mbox, msg);
 800399a:	4601      	mov	r1, r0
 800399c:	4808      	ldr	r0, [pc, #32]	; (80039c0 <tcpip_callback_with_block+0x54>)
  if (block) {
 800399e:	b11d      	cbz	r5, 80039a8 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 80039a0:	f007 fc6a 	bl	800b278 <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 80039a4:	2000      	movs	r0, #0
}
 80039a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80039a8:	f007 fc72 	bl	800b290 <sys_mbox_trypost>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d0fa      	beq.n	80039a6 <tcpip_callback_with_block+0x3a>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80039b0:	4621      	mov	r1, r4
 80039b2:	2008      	movs	r0, #8
 80039b4:	f001 f8d8 	bl	8004b68 <memp_free>
    return ERR_MEM;
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	e7f3      	b.n	80039a6 <tcpip_callback_with_block+0x3a>
 80039be:	bf00      	nop
 80039c0:	20003de0 	.word	0x20003de0
 80039c4:	0800d6f3 	.word	0x0800d6f3
 80039c8:	0800d6e6 	.word	0x0800d6e6
 80039cc:	0800d741 	.word	0x0800d741

080039d0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80039d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039d2:	4605      	mov	r5, r0
 80039d4:	460c      	mov	r4, r1
  lwip_init();
 80039d6:	f000 fe24 	bl	8004622 <lwip_init>

  tcpip_init_done = initfunc;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80039dc:	4813      	ldr	r0, [pc, #76]	; (8003a2c <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 80039de:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80039e2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80039e4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80039e6:	f007 fc37 	bl	800b258 <sys_mbox_new>
 80039ea:	b130      	cbz	r0, 80039fa <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <tcpip_init+0x64>)
 80039ee:	4912      	ldr	r1, [pc, #72]	; (8003a38 <tcpip_init+0x68>)
 80039f0:	4812      	ldr	r0, [pc, #72]	; (8003a3c <tcpip_init+0x6c>)
 80039f2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80039f6:	f008 ff3d 	bl	800c874 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80039fa:	4811      	ldr	r0, [pc, #68]	; (8003a40 <tcpip_init+0x70>)
 80039fc:	f007 fc86 	bl	800b30c <sys_mutex_new>
 8003a00:	b130      	cbz	r0, 8003a10 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <tcpip_init+0x64>)
 8003a04:	490f      	ldr	r1, [pc, #60]	; (8003a44 <tcpip_init+0x74>)
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <tcpip_init+0x6c>)
 8003a08:	f240 12d9 	movw	r2, #473	; 0x1d9
 8003a0c:	f008 ff32 	bl	800c874 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003a10:	2303      	movs	r3, #3
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1a:	490b      	ldr	r1, [pc, #44]	; (8003a48 <tcpip_init+0x78>)
 8003a1c:	480b      	ldr	r0, [pc, #44]	; (8003a4c <tcpip_init+0x7c>)
 8003a1e:	f007 fc8c 	bl	800b33a <sys_thread_new>
}
 8003a22:	b003      	add	sp, #12
 8003a24:	bd30      	pop	{r4, r5, pc}
 8003a26:	bf00      	nop
 8003a28:	20003de4 	.word	0x20003de4
 8003a2c:	20003de0 	.word	0x20003de0
 8003a30:	20003de8 	.word	0x20003de8
 8003a34:	0800d6f3 	.word	0x0800d6f3
 8003a38:	0800d695 	.word	0x0800d695
 8003a3c:	0800d741 	.word	0x0800d741
 8003a40:	20003f9c 	.word	0x20003f9c
 8003a44:	0800d6b8 	.word	0x0800d6b8
 8003a48:	08003861 	.word	0x08003861
 8003a4c:	0800d6d9 	.word	0x0800d6d9

08003a50 <mqtt_output_append_u16>:
}

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
  mqtt_ringbuf_put(rb, value >> 8);
 8003a50:	8803      	ldrh	r3, [r0, #0]
 8003a52:	fa50 f283 	uxtab	r2, r0, r3
{
 8003a56:	b510      	push	{r4, lr}
  mqtt_ringbuf_put(rb, value >> 8);
 8003a58:	0a0c      	lsrs	r4, r1, #8
 8003a5a:	7114      	strb	r4, [r2, #4]
  mqtt_ringbuf_put(rb, value & 0xff);
 8003a5c:	1c9a      	adds	r2, r3, #2
  mqtt_ringbuf_put(rb, value >> 8);
 8003a5e:	3301      	adds	r3, #1
  mqtt_ringbuf_put(rb, value & 0xff);
 8003a60:	8002      	strh	r2, [r0, #0]
 8003a62:	fa50 f083 	uxtab	r0, r0, r3
 8003a66:	7101      	strb	r1, [r0, #4]
}
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8003a6a:	8803      	ldrh	r3, [r0, #0]
{
 8003a6c:	b530      	push	{r4, r5, lr}
  mqtt_ringbuf_put(rb, length >> 8);
 8003a6e:	fa50 f483 	uxtab	r4, r0, r3
 8003a72:	0a15      	lsrs	r5, r2, #8
 8003a74:	7125      	strb	r5, [r4, #4]
  mqtt_ringbuf_put(rb, length & 0xff);
 8003a76:	1c9c      	adds	r4, r3, #2
  mqtt_ringbuf_put(rb, length >> 8);
 8003a78:	3301      	adds	r3, #1
  mqtt_ringbuf_put(rb, length & 0xff);
 8003a7a:	fa50 f383 	uxtab	r3, r0, r3
 8003a7e:	8004      	strh	r4, [r0, #0]
 8003a80:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 8003a82:	460c      	mov	r4, r1
 8003a84:	1a63      	subs	r3, r4, r1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d800      	bhi.n	8003a8e <mqtt_output_append_string+0x24>
    mqtt_ringbuf_put(rb, str[n]);
  }
}
 8003a8c:	bd30      	pop	{r4, r5, pc}
    mqtt_ringbuf_put(rb, str[n]);
 8003a8e:	8803      	ldrh	r3, [r0, #0]
 8003a90:	1c5d      	adds	r5, r3, #1
 8003a92:	8005      	strh	r5, [r0, #0]
 8003a94:	fa50 f383 	uxtab	r3, r0, r3
 8003a98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003a9c:	711d      	strb	r5, [r3, #4]
 8003a9e:	e7f1      	b.n	8003a84 <mqtt_output_append_string+0x1a>

08003aa0 <mqtt_create_request>:
{
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	2400      	movs	r4, #0
    if (r_objs[n].next == &r_objs[n]) {
 8003aa6:	5928      	ldr	r0, [r5, r4]
 8003aa8:	192e      	adds	r6, r5, r4
 8003aaa:	42b0      	cmp	r0, r6
 8003aac:	d105      	bne.n	8003aba <mqtt_create_request+0x1a>
      r->next = NULL;
 8003aae:	2400      	movs	r4, #0
      r->cb = cb;
 8003ab0:	e9c0 4200 	strd	r4, r2, [r0]
      r->arg = arg;
 8003ab4:	6083      	str	r3, [r0, #8]
      r->pkt_id = pkt_id;
 8003ab6:	8181      	strh	r1, [r0, #12]
}
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
 8003aba:	3410      	adds	r4, #16
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 8003abc:	2c40      	cmp	r4, #64	; 0x40
 8003abe:	d1f2      	bne.n	8003aa6 <mqtt_create_request+0x6>
  struct mqtt_request_t *r = NULL;
 8003ac0:	2000      	movs	r0, #0
  return r;
 8003ac2:	e7f9      	b.n	8003ab8 <mqtt_create_request+0x18>

08003ac4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8003ac4:	b570      	push	{r4, r5, r6, lr}
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8003ac6:	1c4c      	adds	r4, r1, #1
{
 8003ac8:	460d      	mov	r5, r1
  u16_t total_len = 1 + r_length;
 8003aca:	b2a4      	uxth	r4, r4

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8003acc:	4606      	mov	r6, r0
 8003ace:	b930      	cbnz	r0, 8003ade <mqtt_output_check_space+0x1a>
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <mqtt_output_check_space+0x38>)
 8003ad2:	490b      	ldr	r1, [pc, #44]	; (8003b00 <mqtt_output_check_space+0x3c>)
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <mqtt_output_check_space+0x40>)
 8003ad6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8003ada:	f008 fecb 	bl	800c874 <iprintf>

 /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8003ade:	3401      	adds	r4, #1
    r_length >>= 7;
  } while (r_length > 0);
 8003ae0:	09ed      	lsrs	r5, r5, #7
    total_len++;
 8003ae2:	b2a4      	uxth	r4, r4
  } while (r_length > 0);
 8003ae4:	d1fb      	bne.n	8003ade <mqtt_output_check_space+0x1a>

  return (total_len <= mqtt_ringbuf_free(rb));
 8003ae6:	8830      	ldrh	r0, [r6, #0]
 8003ae8:	8873      	ldrh	r3, [r6, #2]
 8003aea:	1ac0      	subs	r0, r0, r3
 8003aec:	b280      	uxth	r0, r0
 8003aee:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
}
 8003af2:	4284      	cmp	r4, r0
 8003af4:	bfcc      	ite	gt
 8003af6:	2000      	movgt	r0, #0
 8003af8:	2001      	movle	r0, #1
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	0800d9a9 	.word	0x0800d9a9
 8003b00:	0800d9de 	.word	0x0800d9de
 8003b04:	0800d741 	.word	0x0800d741

08003b08 <mqtt_append_request>:
{
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  s16_t time_before = 0;
 8003b0a:	2200      	movs	r2, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003b0c:	6803      	ldr	r3, [r0, #0]
{
 8003b0e:	4607      	mov	r7, r0
 8003b10:	460e      	mov	r6, r1
  struct mqtt_request_t *head = NULL;
 8003b12:	4615      	mov	r5, r2
 8003b14:	b294      	uxth	r4, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003b16:	b973      	cbnz	r3, 8003b36 <mqtt_append_request+0x2e>
  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8003b18:	2a1e      	cmp	r2, #30
 8003b1a:	dd06      	ble.n	8003b2a <mqtt_append_request+0x22>
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <mqtt_append_request+0x40>)
 8003b1e:	490b      	ldr	r1, [pc, #44]	; (8003b4c <mqtt_append_request+0x44>)
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <mqtt_append_request+0x48>)
 8003b22:	f240 1229 	movw	r2, #297	; 0x129
 8003b26:	f008 fea5 	bl	800c874 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8003b2a:	f1c4 041e 	rsb	r4, r4, #30
 8003b2e:	81f4      	strh	r4, [r6, #14]
  if (head == NULL) {
 8003b30:	b93d      	cbnz	r5, 8003b42 <mqtt_append_request+0x3a>
    *tail = r;
 8003b32:	603e      	str	r6, [r7, #0]
}
 8003b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    time_before += iter->timeout_diff;
 8003b36:	89da      	ldrh	r2, [r3, #14]
 8003b38:	4414      	add	r4, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003b3a:	461d      	mov	r5, r3
    time_before += iter->timeout_diff;
 8003b3c:	b222      	sxth	r2, r4
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	e7e8      	b.n	8003b14 <mqtt_append_request+0xc>
    head->next = r;
 8003b42:	602e      	str	r6, [r5, #0]
}
 8003b44:	e7f6      	b.n	8003b34 <mqtt_append_request+0x2c>
 8003b46:	bf00      	nop
 8003b48:	0800d9a9 	.word	0x0800d9a9
 8003b4c:	0800d769 	.word	0x0800d769
 8003b50:	0800d741 	.word	0x0800d741

08003b54 <mqtt_take_request>:
{
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	460d      	mov	r5, r1
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8003b58:	4604      	mov	r4, r0
 8003b5a:	b930      	cbnz	r0, 8003b6a <mqtt_take_request+0x16>
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <mqtt_take_request+0x48>)
 8003b5e:	4910      	ldr	r1, [pc, #64]	; (8003ba0 <mqtt_take_request+0x4c>)
 8003b60:	4810      	ldr	r0, [pc, #64]	; (8003ba4 <mqtt_take_request+0x50>)
 8003b62:	f240 1249 	movw	r2, #329	; 0x149
 8003b66:	f008 fe85 	bl	800c874 <iprintf>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003b6a:	6820      	ldr	r0, [r4, #0]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8003b6c:	2200      	movs	r2, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003b6e:	b900      	cbnz	r0, 8003b72 <mqtt_take_request+0x1e>
}
 8003b70:	bd38      	pop	{r3, r4, r5, pc}
    if (iter->pkt_id == pkt_id) {
 8003b72:	8981      	ldrh	r1, [r0, #12]
 8003b74:	6803      	ldr	r3, [r0, #0]
 8003b76:	42a9      	cmp	r1, r5
 8003b78:	d004      	beq.n	8003b84 <mqtt_take_request+0x30>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	e7f6      	b.n	8003b6e <mqtt_take_request+0x1a>
      prev->next = iter->next;
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e002      	b.n	8003b8a <mqtt_take_request+0x36>
    if (prev == NULL) {
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	d1fb      	bne.n	8003b80 <mqtt_take_request+0x2c>
      *tail= iter->next;
 8003b88:	6023      	str	r3, [r4, #0]
    if (iter->next != NULL) {
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	b11b      	cbz	r3, 8003b96 <mqtt_take_request+0x42>
      iter->next->timeout_diff += iter->timeout_diff;
 8003b8e:	89da      	ldrh	r2, [r3, #14]
 8003b90:	89c1      	ldrh	r1, [r0, #14]
 8003b92:	440a      	add	r2, r1
 8003b94:	81da      	strh	r2, [r3, #14]
    iter->next = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	6003      	str	r3, [r0, #0]
  return iter;
 8003b9a:	e7e9      	b.n	8003b70 <mqtt_take_request+0x1c>
 8003b9c:	0800d9a9 	.word	0x0800d9a9
 8003ba0:	0800dacb 	.word	0x0800dacb
 8003ba4:	0800d741 	.word	0x0800d741

08003ba8 <mqtt_output_send>:
  u16_t send_len = tcp_sndbuf(tpcb);
 8003ba8:	f8b1 2060 	ldrh.w	r2, [r1, #96]	; 0x60
{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	4605      	mov	r5, r0
 8003bb0:	460e      	mov	r6, r1
  if (send_len == 0 || ringbuf_lin_len == 0) {
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d043      	beq.n	8003c3e <mqtt_output_send+0x96>
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8003bb6:	8840      	ldrh	r0, [r0, #2]
 8003bb8:	882b      	ldrh	r3, [r5, #0]
 8003bba:	b2c1      	uxtb	r1, r0
 8003bbc:	1a1b      	subs	r3, r3, r0
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f5c1 7480 	rsb	r4, r1, #256	; 0x100
 8003bc4:	429c      	cmp	r4, r3
 8003bc6:	bfa8      	it	ge
 8003bc8:	461c      	movge	r4, r3
  if (send_len == 0 || ringbuf_lin_len == 0) {
 8003bca:	2c00      	cmp	r4, #0
 8003bcc:	d037      	beq.n	8003c3e <mqtt_output_send+0x96>
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8003bce:	b2a4      	uxth	r4, r4
 8003bd0:	3104      	adds	r1, #4
  if (send_len > ringbuf_lin_len) {
 8003bd2:	4294      	cmp	r4, r2
 8003bd4:	4429      	add	r1, r5
 8003bd6:	d22e      	bcs.n	8003c36 <mqtt_output_send+0x8e>
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	bf8b      	itete	hi
 8003bdc:	2701      	movhi	r7, #1
 8003bde:	2700      	movls	r7, #0
 8003be0:	2303      	movhi	r3, #3
 8003be2:	2301      	movls	r3, #1
 8003be4:	4622      	mov	r2, r4
 8003be6:	4630      	mov	r0, r6
 8003be8:	f003 fee0 	bl	80079ac <tcp_write>
  if ((err == ERR_OK) && wrap) {
 8003bec:	bb38      	cbnz	r0, 8003c3e <mqtt_output_send+0x96>
 8003bee:	b1d7      	cbz	r7, 8003c26 <mqtt_output_send+0x7e>
 8003bf0:	886b      	ldrh	r3, [r5, #2]
 8003bf2:	441c      	add	r4, r3
 8003bf4:	b2a3      	uxth	r3, r4
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8003bf6:	882c      	ldrh	r4, [r5, #0]
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8003bf8:	806b      	strh	r3, [r5, #2]
 8003bfa:	b2d9      	uxtb	r1, r3
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8003bfc:	1ae4      	subs	r4, r4, r3
 8003bfe:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
 8003c02:	b2a4      	uxth	r4, r4
 8003c04:	429c      	cmp	r4, r3
 8003c06:	bfa8      	it	ge
 8003c08:	461c      	movge	r4, r3
 8003c0a:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8003c0e:	429c      	cmp	r4, r3
 8003c10:	bfa8      	it	ge
 8003c12:	461c      	movge	r4, r3
 8003c14:	b2a4      	uxth	r4, r4
    err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8003c16:	3104      	adds	r1, #4
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4429      	add	r1, r5
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f003 fec4 	bl	80079ac <tcp_write>
  if (err == ERR_OK) {
 8003c24:	b958      	cbnz	r0, 8003c3e <mqtt_output_send+0x96>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8003c26:	886b      	ldrh	r3, [r5, #2]
 8003c28:	441c      	add	r4, r3
 8003c2a:	806c      	strh	r4, [r5, #2]
    tcp_output(tpcb);
 8003c2c:	4630      	mov	r0, r6
}
 8003c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    tcp_output(tpcb);
 8003c32:	f004 ba33 	b.w	800809c <tcp_output>
 8003c36:	4614      	mov	r4, r2
 8003c38:	2700      	movs	r7, #0
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e7d2      	b.n	8003be4 <mqtt_output_send+0x3c>
}
 8003c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c40 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct tcp_pcb *tpcb)
{
 8003c40:	b508      	push	{r3, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  if (client->conn_state == MQTT_CONNECTED) {
 8003c42:	7a83      	ldrb	r3, [r0, #10]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d102      	bne.n	8003c4e <mqtt_tcp_poll_cb+0xe>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8003c48:	30ec      	adds	r0, #236	; 0xec
 8003c4a:	f7ff ffad 	bl	8003ba8 <mqtt_output_send>
  }
  return ERR_OK;
}
 8003c4e:	2000      	movs	r0, #0
 8003c50:	bd08      	pop	{r3, pc}
	...

08003c54 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4604      	mov	r4, r0
 8003c58:	460e      	mov	r6, r1
  mqtt_client_t* client = (mqtt_client_t *)arg;

  if (err != ERR_OK) {
 8003c5a:	4615      	mov	r5, r2
 8003c5c:	b9da      	cbnz	r2, 8003c96 <mqtt_tcp_connect_cb+0x42>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8003c5e:	66a2      	str	r2, [r4, #104]	; 0x68

  /* Setup TCP callbacks */
  tcp_recv(tpcb, mqtt_tcp_recv_cb);
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <mqtt_tcp_connect_cb+0x48>)
 8003c62:	4630      	mov	r0, r6
 8003c64:	f001 fd52 	bl	800570c <tcp_recv>
  tcp_sent(tpcb, mqtt_tcp_sent_cb);
 8003c68:	490d      	ldr	r1, [pc, #52]	; (8003ca0 <mqtt_tcp_connect_cb+0x4c>)
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f001 fd66 	bl	800573c <tcp_sent>
  tcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8003c70:	2202      	movs	r2, #2
 8003c72:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <mqtt_tcp_connect_cb+0x50>)
 8003c74:	4630      	mov	r0, r6
 8003c76:	f001 fd8f 	bl	8005798 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8003c7a:	2302      	movs	r3, #2

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 8003c7c:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <mqtt_tcp_connect_cb+0x54>)
  client->conn_state = MQTT_CONNECTING;
 8003c7e:	72a3      	strb	r3, [r4, #10]
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 8003c80:	f241 3088 	movw	r0, #5000	; 0x1388
 8003c84:	4622      	mov	r2, r4
 8003c86:	f004 fcd1 	bl	800862c <sys_timeout>
  client->cyclic_tick = 0;
 8003c8a:	4620      	mov	r0, r4

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8003c8c:	68e1      	ldr	r1, [r4, #12]
  client->cyclic_tick = 0;
 8003c8e:	f820 5bec 	strh.w	r5, [r0], #236
  mqtt_output_send(&client->output, client->conn);
 8003c92:	f7ff ff89 	bl	8003ba8 <mqtt_output_send>

  return ERR_OK;
}
 8003c96:	4628      	mov	r0, r5
 8003c98:	bd70      	pop	{r4, r5, r6, pc}
 8003c9a:	bf00      	nop
 8003c9c:	0800409d 	.word	0x0800409d
 8003ca0:	08003d61 	.word	0x08003d61
 8003ca4:	08003c41 	.word	0x08003c41
 8003ca8:	08003de5 	.word	0x08003de5

08003cac <mqtt_close>:
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	460e      	mov	r6, r1
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	b930      	cbnz	r0, 8003cc2 <mqtt_close+0x16>
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <mqtt_close+0x70>)
 8003cb6:	491a      	ldr	r1, [pc, #104]	; (8003d20 <mqtt_close+0x74>)
 8003cb8:	481a      	ldr	r0, [pc, #104]	; (8003d24 <mqtt_close+0x78>)
 8003cba:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8003cbe:	f008 fdd9 	bl	800c874 <iprintf>
  if (client->conn != NULL) {
 8003cc2:	68e0      	ldr	r0, [r4, #12]
 8003cc4:	b198      	cbz	r0, 8003cee <mqtt_close+0x42>
    tcp_recv(client->conn, NULL);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f001 fd20 	bl	800570c <tcp_recv>
    tcp_err(client->conn,  NULL);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	68e0      	ldr	r0, [r4, #12]
 8003cd0:	f001 fd4a 	bl	8005768 <tcp_err>
    tcp_sent(client->conn, NULL);
 8003cd4:	68e0      	ldr	r0, [r4, #12]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f001 fd30 	bl	800573c <tcp_sent>
    res = tcp_close(client->conn);
 8003cdc:	68e0      	ldr	r0, [r4, #12]
 8003cde:	f002 f869 	bl	8005db4 <tcp_close>
    if (res != ERR_OK) {
 8003ce2:	b110      	cbz	r0, 8003cea <mqtt_close+0x3e>
      tcp_abort(client->conn);
 8003ce4:	68e0      	ldr	r0, [r4, #12]
 8003ce6:	f002 f97d 	bl	8005fe4 <tcp_abort>
    client->conn = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60e3      	str	r3, [r4, #12]
  for (iter = *tail; iter != NULL; iter = next) {
 8003cee:	69a5      	ldr	r5, [r4, #24]
 8003cf0:	b97d      	cbnz	r5, 8003d12 <mqtt_close+0x66>
  *tail = NULL;
 8003cf2:	61a5      	str	r5, [r4, #24]
  sys_untimeout(mqtt_cyclic_timer, client);
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	480c      	ldr	r0, [pc, #48]	; (8003d28 <mqtt_close+0x7c>)
 8003cf8:	f004 fd56 	bl	80087a8 <sys_untimeout>
  if (client->conn_state != TCP_DISCONNECTED) {
 8003cfc:	7aa3      	ldrb	r3, [r4, #10]
 8003cfe:	b163      	cbz	r3, 8003d1a <mqtt_close+0x6e>
    if (client->connect_cb != NULL) {
 8003d00:	6963      	ldr	r3, [r4, #20]
    client->conn_state = TCP_DISCONNECTED;
 8003d02:	72a5      	strb	r5, [r4, #10]
    if (client->connect_cb != NULL) {
 8003d04:	b14b      	cbz	r3, 8003d1a <mqtt_close+0x6e>
      client->connect_cb(client, client->connect_arg, reason);
 8003d06:	4632      	mov	r2, r6
 8003d08:	6921      	ldr	r1, [r4, #16]
 8003d0a:	4620      	mov	r0, r4
}
 8003d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      client->connect_cb(client, client->connect_arg, reason);
 8003d10:	4718      	bx	r3
    next = iter->next;
 8003d12:	682b      	ldr	r3, [r5, #0]
    r->next = r;
 8003d14:	602d      	str	r5, [r5, #0]
 8003d16:	461d      	mov	r5, r3
 8003d18:	e7ea      	b.n	8003cf0 <mqtt_close+0x44>
}
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	0800d9a9 	.word	0x0800d9a9
 8003d20:	0800d96c 	.word	0x0800d96c
 8003d24:	0800d741 	.word	0x0800d741
 8003d28:	08003de5 	.word	0x08003de5

08003d2c <mqtt_tcp_err_cb>:
{
 8003d2c:	b510      	push	{r4, lr}
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8003d2e:	4604      	mov	r4, r0
 8003d30:	b930      	cbnz	r0, 8003d40 <mqtt_tcp_err_cb+0x14>
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <mqtt_tcp_err_cb+0x28>)
 8003d34:	4908      	ldr	r1, [pc, #32]	; (8003d58 <mqtt_tcp_err_cb+0x2c>)
 8003d36:	4809      	ldr	r0, [pc, #36]	; (8003d5c <mqtt_tcp_err_cb+0x30>)
 8003d38:	f240 32ae 	movw	r2, #942	; 0x3ae
 8003d3c:	f008 fd9a 	bl	800c874 <iprintf>
  client->conn = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60e3      	str	r3, [r4, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003d44:	4620      	mov	r0, r4
 8003d46:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8003d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003d4e:	f7ff bfad 	b.w	8003cac <mqtt_close>
 8003d52:	bf00      	nop
 8003d54:	0800d9a9 	.word	0x0800d9a9
 8003d58:	0800daeb 	.word	0x0800daeb
 8003d5c:	0800d741 	.word	0x0800d741

08003d60 <mqtt_tcp_sent_cb>:
{
 8003d60:	b570      	push	{r4, r5, r6, lr}
  if (client->conn_state == MQTT_CONNECTED) {
 8003d62:	7a83      	ldrb	r3, [r0, #10]
 8003d64:	2b03      	cmp	r3, #3
{
 8003d66:	4604      	mov	r4, r0
  if (client->conn_state == MQTT_CONNECTED) {
 8003d68:	d10f      	bne.n	8003d8a <mqtt_tcp_sent_cb+0x2a>
    client->cyclic_tick = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	8003      	strh	r3, [r0, #0]
    client->server_watchdog = 0;
 8003d6e:	8083      	strh	r3, [r0, #4]
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8003d70:	f100 0618 	add.w	r6, r0, #24
 8003d74:	2100      	movs	r1, #0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f7ff feec 	bl	8003b54 <mqtt_take_request>
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	b930      	cbnz	r0, 8003d8e <mqtt_tcp_sent_cb+0x2e>
    mqtt_output_send(&client->output, client->conn);
 8003d80:	68e1      	ldr	r1, [r4, #12]
 8003d82:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8003d86:	f7ff ff0f 	bl	8003ba8 <mqtt_output_send>
}
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
      if (r->cb != NULL) {
 8003d8e:	686b      	ldr	r3, [r5, #4]
 8003d90:	b113      	cbz	r3, 8003d98 <mqtt_tcp_sent_cb+0x38>
        r->cb(r->arg, ERR_OK);
 8003d92:	2100      	movs	r1, #0
 8003d94:	68a8      	ldr	r0, [r5, #8]
 8003d96:	4798      	blx	r3
    r->next = r;
 8003d98:	602d      	str	r5, [r5, #0]
 8003d9a:	e7eb      	b.n	8003d74 <mqtt_tcp_sent_cb+0x14>

08003d9c <mqtt_output_append_fixed_header.constprop.5>:
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
 8003d9c:	b570      	push	{r4, r5, r6, lr}
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003d9e:	0052      	lsls	r2, r2, #1
  mqtt_ringbuf_put(rb, value);
 8003da0:	8806      	ldrh	r6, [r0, #0]
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
 8003da2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003da6:	f002 0206 	and.w	r2, r2, #6
  mqtt_ringbuf_put(rb, value);
 8003daa:	1c74      	adds	r4, r6, #1
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003dac:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  mqtt_ringbuf_put(rb, value);
 8003db0:	fa50 f686 	uxtab	r6, r0, r6
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003db4:	f003 0301 	and.w	r3, r3, #1
  mqtt_ringbuf_put(rb, value);
 8003db8:	b2a4      	uxth	r4, r4
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003dba:	431a      	orrs	r2, r3
  mqtt_ringbuf_put(rb, value);
 8003dbc:	8004      	strh	r4, [r0, #0]
 8003dbe:	7132      	strb	r2, [r6, #4]
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8003dc0:	2d80      	cmp	r5, #128	; 0x80
 8003dc2:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8003dc6:	bf34      	ite	cc
 8003dc8:	2100      	movcc	r1, #0
 8003dca:	f06f 017f 	mvncs.w	r1, #127	; 0x7f
  mqtt_ringbuf_put(rb, value);
 8003dce:	1c62      	adds	r2, r4, #1
 8003dd0:	fa50 f484 	uxtab	r4, r0, r4
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8003dd4:	430b      	orrs	r3, r1
  } while (r_length > 0);
 8003dd6:	09ed      	lsrs	r5, r5, #7
  mqtt_ringbuf_put(rb, value);
 8003dd8:	7123      	strb	r3, [r4, #4]
 8003dda:	b294      	uxth	r4, r2
  } while (r_length > 0);
 8003ddc:	d1f0      	bne.n	8003dc0 <mqtt_output_append_fixed_header.constprop.5+0x24>
 8003dde:	8004      	strh	r4, [r0, #0]
}
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003de4 <mqtt_cyclic_timer>:
{
 8003de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8003de6:	4604      	mov	r4, r0
 8003de8:	b930      	cbnz	r0, 8003df8 <mqtt_cyclic_timer+0x14>
 8003dea:	4b37      	ldr	r3, [pc, #220]	; (8003ec8 <mqtt_cyclic_timer+0xe4>)
 8003dec:	4937      	ldr	r1, [pc, #220]	; (8003ecc <mqtt_cyclic_timer+0xe8>)
 8003dee:	4838      	ldr	r0, [pc, #224]	; (8003ed0 <mqtt_cyclic_timer+0xec>)
 8003df0:	f240 2225 	movw	r2, #549	; 0x225
 8003df4:	f008 fd3e 	bl	800c874 <iprintf>
  if (client->conn_state == MQTT_CONNECTING) {
 8003df8:	7aa3      	ldrb	r3, [r4, #10]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d118      	bne.n	8003e30 <mqtt_cyclic_timer+0x4c>
    client->cyclic_tick++;
 8003dfe:	8823      	ldrh	r3, [r4, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	8023      	strh	r3, [r4, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8003e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e0a:	2b63      	cmp	r3, #99	; 0x63
 8003e0c:	dc08      	bgt.n	8003e20 <mqtt_cyclic_timer+0x3c>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 8003e0e:	4931      	ldr	r1, [pc, #196]	; (8003ed4 <mqtt_cyclic_timer+0xf0>)
 8003e10:	4622      	mov	r2, r4
 8003e12:	f241 3088 	movw	r0, #5000	; 0x1388
}
 8003e16:	b003      	add	sp, #12
 8003e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 8003e1c:	f004 bc06 	b.w	800862c <sys_timeout>
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8003e20:	f240 1101 	movw	r1, #257	; 0x101
 8003e24:	4620      	mov	r0, r4
}
 8003e26:	b003      	add	sp, #12
 8003e28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8003e2c:	f7ff bf3e 	b.w	8003cac <mqtt_close>
  } else if (client->conn_state == MQTT_CONNECTED) {
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d13f      	bne.n	8003eb4 <mqtt_cyclic_timer+0xd0>
  r = *tail;
 8003e34:	69a5      	ldr	r5, [r4, #24]
 8003e36:	2605      	movs	r6, #5
  while (t > 0 && r != NULL) {
 8003e38:	b18d      	cbz	r5, 8003e5e <mqtt_cyclic_timer+0x7a>
    if (t >= r->timeout_diff) {
 8003e3a:	89eb      	ldrh	r3, [r5, #14]
 8003e3c:	b2b2      	uxth	r2, r6
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d33a      	bcc.n	8003eb8 <mqtt_cyclic_timer+0xd4>
      t -= (u8_t)r->timeout_diff;
 8003e42:	1af6      	subs	r6, r6, r3
      *tail = r->next;
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	61a3      	str	r3, [r4, #24]
      if (r->cb != NULL) {
 8003e48:	686b      	ldr	r3, [r5, #4]
      t -= (u8_t)r->timeout_diff;
 8003e4a:	b2f6      	uxtb	r6, r6
      if (r->cb != NULL) {
 8003e4c:	b11b      	cbz	r3, 8003e56 <mqtt_cyclic_timer+0x72>
        r->cb(r->arg, ERR_TIMEOUT);
 8003e4e:	f06f 0102 	mvn.w	r1, #2
 8003e52:	68a8      	ldr	r0, [r5, #8]
 8003e54:	4798      	blx	r3
    r->next = r;
 8003e56:	602d      	str	r5, [r5, #0]
      r = *(struct mqtt_request_t * const volatile *)tail;
 8003e58:	69a5      	ldr	r5, [r4, #24]
  while (t > 0 && r != NULL) {
 8003e5a:	2e00      	cmp	r6, #0
 8003e5c:	d1ec      	bne.n	8003e38 <mqtt_cyclic_timer+0x54>
    if (client->keep_alive > 0) {
 8003e5e:	8862      	ldrh	r2, [r4, #2]
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	d0d4      	beq.n	8003e0e <mqtt_cyclic_timer+0x2a>
      client->server_watchdog++;
 8003e64:	88a3      	ldrh	r3, [r4, #4]
 8003e66:	3301      	adds	r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	80a3      	strh	r3, [r4, #4]
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive/2)) {
 8003e6c:	eb02 0252 	add.w	r2, r2, r2, lsr #1
 8003e70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e74:	4293      	cmp	r3, r2
 8003e76:	dd22      	ble.n	8003ebe <mqtt_cyclic_timer+0xda>
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8003e78:	f240 1101 	movw	r1, #257	; 0x101
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ff15 	bl	8003cac <mqtt_close>
        restart_timer = 0;
 8003e82:	2600      	movs	r6, #0
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8003e84:	8823      	ldrh	r3, [r4, #0]
 8003e86:	8862      	ldrh	r2, [r4, #2]
 8003e88:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003e8c:	4291      	cmp	r1, r2
 8003e8e:	db18      	blt.n	8003ec2 <mqtt_cyclic_timer+0xde>
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8003e90:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 8003e94:	2100      	movs	r1, #0
 8003e96:	4638      	mov	r0, r7
 8003e98:	f7ff fe14 	bl	8003ac4 <mqtt_output_check_space>
 8003e9c:	b140      	cbz	r0, 8003eb0 <mqtt_cyclic_timer+0xcc>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8003e9e:	2500      	movs	r5, #0
 8003ea0:	9500      	str	r5, [sp, #0]
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	210c      	movs	r1, #12
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f7ff ff77 	bl	8003d9c <mqtt_output_append_fixed_header.constprop.5>
          client->cyclic_tick = 0;
 8003eae:	8025      	strh	r5, [r4, #0]
  if (restart_timer) {
 8003eb0:	2e00      	cmp	r6, #0
 8003eb2:	d1ac      	bne.n	8003e0e <mqtt_cyclic_timer+0x2a>
}
 8003eb4:	b003      	add	sp, #12
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      r->timeout_diff -= t;
 8003eb8:	1a9e      	subs	r6, r3, r2
 8003eba:	81ee      	strh	r6, [r5, #14]
 8003ebc:	e7cf      	b.n	8003e5e <mqtt_cyclic_timer+0x7a>
  u8_t restart_timer = 1;
 8003ebe:	2601      	movs	r6, #1
 8003ec0:	e7e0      	b.n	8003e84 <mqtt_cyclic_timer+0xa0>
        client->cyclic_tick++;
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	8023      	strh	r3, [r4, #0]
 8003ec6:	e7f3      	b.n	8003eb0 <mqtt_cyclic_timer+0xcc>
 8003ec8:	0800d9a9 	.word	0x0800d9a9
 8003ecc:	0800d987 	.word	0x0800d987
 8003ed0:	0800d741 	.word	0x0800d741
 8003ed4:	08003de5 	.word	0x08003de5

08003ed8 <pub_ack_rec_rel_response>:
{
 8003ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (mqtt_output_check_space(&client->output, 2)) {
 8003edc:	f100 04ec 	add.w	r4, r0, #236	; 0xec
{
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	460f      	mov	r7, r1
  if (mqtt_output_check_space(&client->output, 2)) {
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	2102      	movs	r1, #2
{
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4698      	mov	r8, r3
  if (mqtt_output_check_space(&client->output, 2)) {
 8003eec:	f7ff fdea 	bl	8003ac4 <mqtt_output_check_space>
 8003ef0:	b190      	cbz	r0, 8003f18 <pub_ack_rec_rel_response+0x40>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	4639      	mov	r1, r7
 8003efc:	2300      	movs	r3, #0
 8003efe:	f7ff ff4d 	bl	8003d9c <mqtt_output_append_fixed_header.constprop.5>
    mqtt_output_append_u16(&client->output, pkt_id);
 8003f02:	4631      	mov	r1, r6
 8003f04:	f7ff fda4 	bl	8003a50 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8003f08:	4620      	mov	r0, r4
 8003f0a:	68e9      	ldr	r1, [r5, #12]
 8003f0c:	f7ff fe4c 	bl	8003ba8 <mqtt_output_send>
  err_t err = ERR_OK;
 8003f10:	2000      	movs	r0, #0
}
 8003f12:	b002      	add	sp, #8
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_MEM;
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e7f9      	b.n	8003f12 <pub_ack_rec_rel_response+0x3a>

08003f1e <mqtt_message_received>:
{
 8003f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8003f22:	f890 a06c 	ldrb.w	sl, [r0, #108]	; 0x6c
 8003f26:	ea4f 161a 	mov.w	r6, sl, lsr #4
{
 8003f2a:	461c      	mov	r4, r3
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8003f2c:	2e02      	cmp	r6, #2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8003f2e:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
 8003f32:	4605      	mov	r5, r0
 8003f34:	4690      	mov	r8, r2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8003f36:	eb03 0901 	add.w	r9, r3, r1
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8003f3a:	d114      	bne.n	8003f66 <mqtt_message_received+0x48>
    if (client->conn_state == MQTT_CONNECTING) {
 8003f3c:	7a83      	ldrb	r3, [r0, #10]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d001      	beq.n	8003f46 <mqtt_message_received+0x28>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8003f42:	2400      	movs	r4, #0
 8003f44:	e00b      	b.n	8003f5e <mqtt_message_received+0x40>
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8003f46:	f899 4001 	ldrb.w	r4, [r9, #1]
      if (res == MQTT_CONNECT_ACCEPTED) {
 8003f4a:	b944      	cbnz	r4, 8003f5e <mqtt_message_received+0x40>
        client->conn_state = MQTT_CONNECTED;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	7283      	strb	r3, [r0, #10]
        if (client->connect_cb != 0) {
 8003f50:	6943      	ldr	r3, [r0, #20]
        client->cyclic_tick = 0;
 8003f52:	8004      	strh	r4, [r0, #0]
        if (client->connect_cb != 0) {
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f4      	beq.n	8003f42 <mqtt_message_received+0x24>
          client->connect_cb(client, client->connect_arg, res);
 8003f58:	4622      	mov	r2, r4
 8003f5a:	6901      	ldr	r1, [r0, #16]
 8003f5c:	4798      	blx	r3
}
 8003f5e:	4620      	mov	r0, r4
 8003f60:	b003      	add	sp, #12
 8003f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8003f66:	2e0d      	cmp	r6, #13
 8003f68:	d0eb      	beq.n	8003f42 <mqtt_message_received+0x24>
  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8003f6a:	2e03      	cmp	r6, #3
 8003f6c:	d15d      	bne.n	800402a <mqtt_message_received+0x10c>
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8003f6e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003f70:	2a80      	cmp	r2, #128	; 0x80
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8003f72:	f3ca 0a41 	ubfx	sl, sl, #1, #2
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8003f76:	d856      	bhi.n	8004026 <mqtt_message_received+0x108>
      u16_t topic_len = var_hdr_payload[0];
 8003f78:	5c5b      	ldrb	r3, [r3, r1]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8003f7a:	f899 7001 	ldrb.w	r7, [r9, #1]
 8003f7e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8003f82:	b2bf      	uxth	r7, r7
      if ((after_topic + (qos? 2 : 1)) > length) {
 8003f84:	f1ba 0f00 	cmp.w	sl, #0
      after_topic = 2 + topic_len;
 8003f88:	f107 0602 	add.w	r6, r7, #2
      if ((after_topic + (qos? 2 : 1)) > length) {
 8003f8c:	bf14      	ite	ne
 8003f8e:	2302      	movne	r3, #2
 8003f90:	2301      	moveq	r3, #1
      after_topic = 2 + topic_len;
 8003f92:	b2b6      	uxth	r6, r6
      if ((after_topic + (qos? 2 : 1)) > length) {
 8003f94:	4433      	add	r3, r6
 8003f96:	4543      	cmp	r3, r8
 8003f98:	dd02      	ble.n	8003fa0 <mqtt_message_received+0x82>
  return MQTT_CONNECT_DISCONNECTED;
 8003f9a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003f9e:	e7de      	b.n	8003f5e <mqtt_message_received+0x40>
      if (qos > 0) {
 8003fa0:	f1ba 0f00 	cmp.w	sl, #0
 8003fa4:	d03c      	beq.n	8004020 <mqtt_message_received+0x102>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8003fa6:	f819 2006 	ldrb.w	r2, [r9, r6]
 8003faa:	444e      	add	r6, r9
 8003fac:	7873      	ldrb	r3, [r6, #1]
        after_topic += 2;
 8003fae:	1d3e      	adds	r6, r7, #4
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8003fb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fb4:	8103      	strh	r3, [r0, #8]
        after_topic += 2;
 8003fb6:	b2b6      	uxth	r6, r6
      topic = var_hdr_payload + 2;
 8003fb8:	f109 0b02 	add.w	fp, r9, #2
      payload_length = length - after_topic;
 8003fbc:	eba8 0806 	sub.w	r8, r8, r6
      bkp = topic[topic_len];
 8003fc0:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8003fc4:	9301      	str	r3, [sp, #4]
      topic[topic_len] = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f80b 3007 	strb.w	r3, [fp, r7]
      if (client->pub_cb != NULL) {
 8003fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      payload_length = length - after_topic;
 8003fce:	fa1f f888 	uxth.w	r8, r8
      if (client->pub_cb != NULL) {
 8003fd2:	b123      	cbz	r3, 8003fde <mqtt_message_received+0xc0>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8003fd4:	eb08 0204 	add.w	r2, r8, r4
 8003fd8:	4659      	mov	r1, fp
 8003fda:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8003fdc:	4798      	blx	r3
      topic[topic_len] = bkp;
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	f80b 3007 	strb.w	r3, [fp, r7]
    if (payload_length > 0 || remaining_length == 0) {
 8003fe4:	f1b8 0f00 	cmp.w	r8, #0
 8003fe8:	d101      	bne.n	8003fee <mqtt_message_received+0xd0>
 8003fea:	2c00      	cmp	r4, #0
 8003fec:	d1a9      	bne.n	8003f42 <mqtt_message_received+0x24>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8003fee:	fab4 f384 	clz	r3, r4
 8003ff2:	6e2f      	ldr	r7, [r5, #96]	; 0x60
 8003ff4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	eb09 0106 	add.w	r1, r9, r6
 8003ffe:	47b8      	blx	r7
      if (remaining_length == 0 && qos > 0) {
 8004000:	2c00      	cmp	r4, #0
 8004002:	d19e      	bne.n	8003f42 <mqtt_message_received+0x24>
 8004004:	f1ba 0f00 	cmp.w	sl, #0
 8004008:	d09b      	beq.n	8003f42 <mqtt_message_received+0x24>
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800400a:	f1ba 0f01 	cmp.w	sl, #1
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800400e:	4623      	mov	r3, r4
 8004010:	892a      	ldrh	r2, [r5, #8]
 8004012:	bf0c      	ite	eq
 8004014:	2104      	moveq	r1, #4
 8004016:	2105      	movne	r1, #5
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff ff5d 	bl	8003ed8 <pub_ack_rec_rel_response>
 800401e:	e79e      	b.n	8003f5e <mqtt_message_received+0x40>
        client->inpub_pkt_id = 0;
 8004020:	f8a0 a008 	strh.w	sl, [r0, #8]
 8004024:	e7c8      	b.n	8003fb8 <mqtt_message_received+0x9a>
    u16_t payload_offset = 0;
 8004026:	2600      	movs	r6, #0
 8004028:	e7dc      	b.n	8003fe4 <mqtt_message_received+0xc6>
 800402a:	f8b9 2000 	ldrh.w	r2, [r9]
 800402e:	ba52      	rev16	r2, r2
 8004030:	b292      	uxth	r2, r2
    if (pkt_id == 0) {
 8004032:	2a00      	cmp	r2, #0
 8004034:	d0b1      	beq.n	8003f9a <mqtt_message_received+0x7c>
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8004036:	2e05      	cmp	r6, #5
 8004038:	d104      	bne.n	8004044 <mqtt_message_received+0x126>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800403a:	2301      	movs	r3, #1
 800403c:	2106      	movs	r1, #6
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800403e:	f7ff ff4b 	bl	8003ed8 <pub_ack_rec_rel_response>
 8004042:	e77e      	b.n	8003f42 <mqtt_message_received+0x24>
    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8004044:	2e06      	cmp	r6, #6
 8004046:	d102      	bne.n	800404e <mqtt_message_received+0x130>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8004048:	2300      	movs	r3, #0
 800404a:	2107      	movs	r1, #7
 800404c:	e7f7      	b.n	800403e <mqtt_message_received+0x120>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800404e:	2e0b      	cmp	r6, #11
 8004050:	d8a3      	bhi.n	8003f9a <mqtt_message_received+0x7c>
 8004052:	f44f 6329 	mov.w	r3, #2704	; 0xa90
 8004056:	40f3      	lsrs	r3, r6
 8004058:	07db      	lsls	r3, r3, #31
 800405a:	d59e      	bpl.n	8003f9a <mqtt_message_received+0x7c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800405c:	4611      	mov	r1, r2
 800405e:	3018      	adds	r0, #24
 8004060:	f7ff fd78 	bl	8003b54 <mqtt_take_request>
      if (r != NULL) {
 8004064:	4604      	mov	r4, r0
 8004066:	2800      	cmp	r0, #0
 8004068:	f43f af6b 	beq.w	8003f42 <mqtt_message_received+0x24>
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800406c:	2e09      	cmp	r6, #9
 800406e:	d10f      	bne.n	8004090 <mqtt_message_received+0x172>
          if (length < 3) {
 8004070:	f1b8 0f02 	cmp.w	r8, #2
 8004074:	d991      	bls.n	8003f9a <mqtt_message_received+0x7c>
  if (r->cb != NULL) {
 8004076:	6843      	ldr	r3, [r0, #4]
 8004078:	b143      	cbz	r3, 800408c <mqtt_message_received+0x16e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800407a:	f899 2002 	ldrb.w	r2, [r9, #2]
 800407e:	2a03      	cmp	r2, #3
 8004080:	bf2c      	ite	cs
 8004082:	f06f 010c 	mvncs.w	r1, #12
 8004086:	2100      	movcc	r1, #0
          r->cb(r->arg, ERR_OK);
 8004088:	68a0      	ldr	r0, [r4, #8]
 800408a:	4798      	blx	r3
    r->next = r;
 800408c:	6024      	str	r4, [r4, #0]
 800408e:	e758      	b.n	8003f42 <mqtt_message_received+0x24>
        } else if (r->cb != NULL) {
 8004090:	6843      	ldr	r3, [r0, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0fa      	beq.n	800408c <mqtt_message_received+0x16e>
          r->cb(r->arg, ERR_OK);
 8004096:	2100      	movs	r1, #0
 8004098:	e7f6      	b.n	8004088 <mqtt_message_received+0x16a>
	...

0800409c <mqtt_tcp_recv_cb>:
{
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	460d      	mov	r5, r1
 80040a2:	b085      	sub	sp, #20
 80040a4:	4690      	mov	r8, r2
 80040a6:	4699      	mov	r9, r3
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 80040a8:	4604      	mov	r4, r0
 80040aa:	b930      	cbnz	r0, 80040ba <mqtt_tcp_recv_cb+0x1e>
 80040ac:	4b60      	ldr	r3, [pc, #384]	; (8004230 <mqtt_tcp_recv_cb+0x194>)
 80040ae:	4961      	ldr	r1, [pc, #388]	; (8004234 <mqtt_tcp_recv_cb+0x198>)
 80040b0:	4861      	ldr	r0, [pc, #388]	; (8004238 <mqtt_tcp_recv_cb+0x19c>)
 80040b2:	f240 325f 	movw	r2, #863	; 0x35f
 80040b6:	f008 fbdd 	bl	800c874 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	42ab      	cmp	r3, r5
 80040be:	d006      	beq.n	80040ce <mqtt_tcp_recv_cb+0x32>
 80040c0:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <mqtt_tcp_recv_cb+0x194>)
 80040c2:	495e      	ldr	r1, [pc, #376]	; (800423c <mqtt_tcp_recv_cb+0x1a0>)
 80040c4:	485c      	ldr	r0, [pc, #368]	; (8004238 <mqtt_tcp_recv_cb+0x19c>)
 80040c6:	f44f 7258 	mov.w	r2, #864	; 0x360
 80040ca:	f008 fbd3 	bl	800c874 <iprintf>
  if (p == NULL) {
 80040ce:	f1b8 0f00 	cmp.w	r8, #0
 80040d2:	d109      	bne.n	80040e8 <mqtt_tcp_recv_cb+0x4c>
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80040d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fde7 	bl	8003cac <mqtt_close>
  return ERR_OK;
 80040de:	46c1      	mov	r9, r8
}
 80040e0:	4648      	mov	r0, r9
 80040e2:	b005      	add	sp, #20
 80040e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (err != ERR_OK) {
 80040e8:	f1b9 0f00 	cmp.w	r9, #0
 80040ec:	d003      	beq.n	80040f6 <mqtt_tcp_recv_cb+0x5a>
      pbuf_free(p);
 80040ee:	4640      	mov	r0, r8
 80040f0:	f000 fecc 	bl	8004e8c <pbuf_free>
      return err;
 80040f4:	e7f4      	b.n	80040e0 <mqtt_tcp_recv_cb+0x44>
    tcp_recved(pcb, p->tot_len);
 80040f6:	4628      	mov	r0, r5
 80040f8:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80040fc:	f001 fa98 	bl	8005630 <tcp_recved>
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 8004100:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  u8_t b = 0;
 8004104:	46ca      	mov	sl, r9
  u8_t fixed_hdr_idx = 0;
 8004106:	464e      	mov	r6, r9
  u32_t msg_rem_len = 0;
 8004108:	464d      	mov	r5, r9
  u16_t in_offset = 0;
 800410a:	464f      	mov	r7, r9
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 800410c:	9303      	str	r3, [sp, #12]
  while (p->tot_len > in_offset) {
 800410e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8004112:	429f      	cmp	r7, r3
 8004114:	d311      	bcc.n	800413a <mqtt_tcp_recv_cb+0x9e>
  return MQTT_CONNECT_ACCEPTED;
 8004116:	f04f 0b00 	mov.w	fp, #0
    pbuf_free(p);
 800411a:	4640      	mov	r0, r8
 800411c:	f000 feb6 	bl	8004e8c <pbuf_free>
    if (res != MQTT_CONNECT_ACCEPTED) {
 8004120:	f1bb 0f00 	cmp.w	fp, #0
 8004124:	d003      	beq.n	800412e <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8004126:	4659      	mov	r1, fp
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff fdbf 	bl	8003cac <mqtt_close>
    if (client->keep_alive != 0) {
 800412e:	8863      	ldrh	r3, [r4, #2]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0d5      	beq.n	80040e0 <mqtt_tcp_recv_cb+0x44>
      client->server_watchdog = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	80a3      	strh	r3, [r4, #4]
 8004138:	e7d2      	b.n	80040e0 <mqtt_tcp_recv_cb+0x44>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800413a:	2e01      	cmp	r6, #1
 800413c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800413e:	d902      	bls.n	8004146 <mqtt_tcp_recv_cb+0xaa>
 8004140:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8004144:	d032      	beq.n	80041ac <mqtt_tcp_recv_cb+0x110>
      if (fixed_hdr_idx < client->msg_idx) {
 8004146:	42b2      	cmp	r2, r6
 8004148:	d91b      	bls.n	8004182 <mqtt_tcp_recv_cb+0xe6>
        b = client->rx_buffer[fixed_hdr_idx];
 800414a:	19a3      	adds	r3, r4, r6
 800414c:	f893 a06c 	ldrb.w	sl, [r3, #108]	; 0x6c
      fixed_hdr_idx++;
 8004150:	3601      	adds	r6, #1
 8004152:	b2f6      	uxtb	r6, r6
      if (fixed_hdr_idx >= 2) {
 8004154:	2e01      	cmp	r6, #1
 8004156:	d9da      	bls.n	800410e <mqtt_tcp_recv_cb+0x72>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004158:	1eb2      	subs	r2, r6, #2
 800415a:	f00a 037f 	and.w	r3, sl, #127	; 0x7f
 800415e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004162:	4093      	lsls	r3, r2
        if ((b & 0x80) == 0) {
 8004164:	f01a 0f80 	tst.w	sl, #128	; 0x80
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004168:	ea45 0503 	orr.w	r5, r5, r3
        if ((b & 0x80) == 0) {
 800416c:	d1cf      	bne.n	800410e <mqtt_tcp_recv_cb+0x72>
          if (msg_rem_len == 0) {
 800416e:	b9cd      	cbnz	r5, 80041a4 <mqtt_tcp_recv_cb+0x108>
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8004170:	462b      	mov	r3, r5
 8004172:	462a      	mov	r2, r5
 8004174:	4631      	mov	r1, r6
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff fed1 	bl	8003f1e <mqtt_message_received>
          client->msg_idx = 0;
 800417c:	66a5      	str	r5, [r4, #104]	; 0x68
          fixed_hdr_idx = 0;
 800417e:	462e      	mov	r6, r5
 8004180:	e7c5      	b.n	800410e <mqtt_tcp_recv_cb+0x72>
        b = pbuf_get_at(p, in_offset++);
 8004182:	4639      	mov	r1, r7
 8004184:	4640      	mov	r0, r8
 8004186:	f001 f97c 	bl	8005482 <pbuf_get_at>
        client->rx_buffer[client->msg_idx++] = b;
 800418a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 800418c:	f107 0b01 	add.w	fp, r7, #1
        client->rx_buffer[client->msg_idx++] = b;
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	4423      	add	r3, r4
        b = pbuf_get_at(p, in_offset++);
 8004194:	fa1f fb8b 	uxth.w	fp, fp
        client->rx_buffer[client->msg_idx++] = b;
 8004198:	66a2      	str	r2, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 800419a:	4682      	mov	sl, r0
        client->rx_buffer[client->msg_idx++] = b;
 800419c:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
        b = pbuf_get_at(p, in_offset++);
 80041a0:	465f      	mov	r7, fp
 80041a2:	e7d5      	b.n	8004150 <mqtt_tcp_recv_cb+0xb4>
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 80041a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80041a6:	1af3      	subs	r3, r6, r3
 80041a8:	441d      	add	r5, r3
 80041aa:	e7b0      	b.n	800410e <mqtt_tcp_recv_cb+0x72>
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80041ac:	f1c6 0180 	rsb	r1, r6, #128	; 0x80
 80041b0:	1b92      	subs	r2, r2, r6
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80041b2:	1bdb      	subs	r3, r3, r7
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80041b4:	fbb2 fbf1 	udiv	fp, r2, r1
 80041b8:	fb01 221b 	mls	r2, r1, fp, r2
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80041bc:	b29b      	uxth	r3, r3
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80041be:	b292      	uxth	r2, r2
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80041c0:	429d      	cmp	r5, r3
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80041c2:	eb02 0106 	add.w	r1, r2, r6
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80041c6:	9300      	str	r3, [sp, #0]
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80041c8:	b289      	uxth	r1, r1
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80041ca:	bf9c      	itt	ls
 80041cc:	b2ab      	uxthls	r3, r5
 80041ce:	9300      	strls	r3, [sp, #0]
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80041d0:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	9302      	str	r3, [sp, #8]
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80041d8:	9201      	str	r2, [sp, #4]
 80041da:	9b00      	ldr	r3, [sp, #0]
 80041dc:	9a02      	ldr	r2, [sp, #8]
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 80041de:	9803      	ldr	r0, [sp, #12]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bf28      	it	cs
 80041e4:	4613      	movcs	r3, r2
 80041e6:	469b      	mov	fp, r3
 80041e8:	4401      	add	r1, r0
 80041ea:	463b      	mov	r3, r7
 80041ec:	465a      	mov	r2, fp
 80041ee:	4640      	mov	r0, r8
 80041f0:	f001 f8ee 	bl	80053d0 <pbuf_copy_partial>
      client->msg_idx += cpy_len;
 80041f4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 80041f6:	445f      	add	r7, fp
      client->msg_idx += cpy_len;
 80041f8:	445b      	add	r3, fp
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 80041fa:	ebb5 050b 	subs.w	r5, r5, fp
      client->msg_idx += cpy_len;
 80041fe:	66a3      	str	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 8004200:	b2bf      	uxth	r7, r7
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 8004202:	d003      	beq.n	800420c <mqtt_tcp_recv_cb+0x170>
 8004204:	9b02      	ldr	r3, [sp, #8]
 8004206:	9a00      	ldr	r2, [sp, #0]
 8004208:	4293      	cmp	r3, r2
 800420a:	d880      	bhi.n	800410e <mqtt_tcp_recv_cb+0x72>
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800420c:	9b01      	ldr	r3, [sp, #4]
 800420e:	445b      	add	r3, fp
 8004210:	461a      	mov	r2, r3
 8004212:	b292      	uxth	r2, r2
 8004214:	462b      	mov	r3, r5
 8004216:	4631      	mov	r1, r6
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff fe80 	bl	8003f1e <mqtt_message_received>
        if (res != MQTT_CONNECT_ACCEPTED) {
 800421e:	4683      	mov	fp, r0
 8004220:	2800      	cmp	r0, #0
 8004222:	f47f af7a 	bne.w	800411a <mqtt_tcp_recv_cb+0x7e>
        if (msg_rem_len == 0) {
 8004226:	2d00      	cmp	r5, #0
 8004228:	f47f af71 	bne.w	800410e <mqtt_tcp_recv_cb+0x72>
 800422c:	e7a6      	b.n	800417c <mqtt_tcp_recv_cb+0xe0>
 800422e:	bf00      	nop
 8004230:	0800d9a9 	.word	0x0800d9a9
 8004234:	0800db0b 	.word	0x0800db0b
 8004238:	0800d741 	.word	0x0800d741
 800423c:	0800db2c 	.word	0x0800db2c

08004240 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	b085      	sub	sp, #20
 8004246:	468b      	mov	fp, r1
 8004248:	4691      	mov	r9, r2
 800424a:	461f      	mov	r7, r3
 800424c:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8004250:	4604      	mov	r4, r0
 8004252:	b930      	cbnz	r0, 8004262 <mqtt_sub_unsub+0x22>
 8004254:	4b47      	ldr	r3, [pc, #284]	; (8004374 <mqtt_sub_unsub+0x134>)
 8004256:	4948      	ldr	r1, [pc, #288]	; (8004378 <mqtt_sub_unsub+0x138>)
 8004258:	4848      	ldr	r0, [pc, #288]	; (800437c <mqtt_sub_unsub+0x13c>)
 800425a:	f240 4255 	movw	r2, #1109	; 0x455
 800425e:	f008 fb09 	bl	800c874 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8004262:	f1bb 0f00 	cmp.w	fp, #0
 8004266:	d106      	bne.n	8004276 <mqtt_sub_unsub+0x36>
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <mqtt_sub_unsub+0x134>)
 800426a:	4945      	ldr	r1, [pc, #276]	; (8004380 <mqtt_sub_unsub+0x140>)
 800426c:	4843      	ldr	r0, [pc, #268]	; (800437c <mqtt_sub_unsub+0x13c>)
 800426e:	f240 4256 	movw	r2, #1110	; 0x456
 8004272:	f008 faff 	bl	800c874 <iprintf>

  topic_strlen = strlen(topic);
 8004276:	4658      	mov	r0, fp
 8004278:	f7fb ffc4 	bl	8000204 <strlen>
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800427c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004280:	4298      	cmp	r0, r3
 8004282:	d90b      	bls.n	800429c <mqtt_sub_unsub+0x5c>
 8004284:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <mqtt_sub_unsub+0x134>)
 8004286:	493f      	ldr	r1, [pc, #252]	; (8004384 <mqtt_sub_unsub+0x144>)
 8004288:	f240 4259 	movw	r2, #1113	; 0x459
  topic_len = (u16_t)topic_strlen;
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800428c:	483b      	ldr	r0, [pc, #236]	; (800437c <mqtt_sub_unsub+0x13c>)
 800428e:	f008 faf1 	bl	800c874 <iprintf>
 8004292:	f06f 000f 	mvn.w	r0, #15
  }

  mqtt_append_request(&client->pend_req_queue, r);
  mqtt_output_send(&client->output, client->conn);
  return ERR_OK;
}
 8004296:	b005      	add	sp, #20
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800429c:	1d05      	adds	r5, r0, #4
 800429e:	f1ba 0f00 	cmp.w	sl, #0
 80042a2:	bf18      	it	ne
 80042a4:	3501      	addne	r5, #1
  topic_len = (u16_t)topic_strlen;
 80042a6:	b283      	uxth	r3, r0
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80042a8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
  topic_len = (u16_t)topic_strlen;
 80042ac:	9303      	str	r3, [sp, #12]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80042ae:	db04      	blt.n	80042ba <mqtt_sub_unsub+0x7a>
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <mqtt_sub_unsub+0x134>)
 80042b2:	4935      	ldr	r1, [pc, #212]	; (8004388 <mqtt_sub_unsub+0x148>)
 80042b4:	f240 425d 	movw	r2, #1117	; 0x45d
 80042b8:	e7e8      	b.n	800428c <mqtt_sub_unsub+0x4c>
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80042ba:	f1b9 0f02 	cmp.w	r9, #2
  remaining_length = (u16_t)total_len;
 80042be:	b2ad      	uxth	r5, r5
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80042c0:	d906      	bls.n	80042d0 <mqtt_sub_unsub+0x90>
 80042c2:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <mqtt_sub_unsub+0x134>)
 80042c4:	4931      	ldr	r1, [pc, #196]	; (800438c <mqtt_sub_unsub+0x14c>)
 80042c6:	482d      	ldr	r0, [pc, #180]	; (800437c <mqtt_sub_unsub+0x13c>)
 80042c8:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80042cc:	f008 fad2 	bl	800c874 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 80042d0:	7aa3      	ldrb	r3, [r4, #10]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04b      	beq.n	800436e <mqtt_sub_unsub+0x12e>
  client->pkt_id_seq++;
 80042d6:	88e6      	ldrh	r6, [r4, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 80042d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  client->pkt_id_seq++;
 80042da:	3601      	adds	r6, #1
 80042dc:	b2b6      	uxth	r6, r6
    client->pkt_id_seq++;
 80042de:	2e00      	cmp	r6, #0
 80042e0:	bf08      	it	eq
 80042e2:	2601      	moveq	r6, #1
 80042e4:	80e6      	strh	r6, [r4, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 80042e6:	463a      	mov	r2, r7
 80042e8:	4631      	mov	r1, r6
 80042ea:	f104 001c 	add.w	r0, r4, #28
 80042ee:	f7ff fbd7 	bl	8003aa0 <mqtt_create_request>
  if (r == NULL) {
 80042f2:	4680      	mov	r8, r0
 80042f4:	b140      	cbz	r0, 8004308 <mqtt_sub_unsub+0xc8>
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80042f6:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 80042fa:	4629      	mov	r1, r5
 80042fc:	4638      	mov	r0, r7
 80042fe:	f7ff fbe1 	bl	8003ac4 <mqtt_output_check_space>
 8004302:	b920      	cbnz	r0, 800430e <mqtt_sub_unsub+0xce>
    r->next = r;
 8004304:	f8c8 8000 	str.w	r8, [r8]
    return ERR_MEM;
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	e7c3      	b.n	8004296 <mqtt_sub_unsub+0x56>
  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800430e:	f1ba 0f00 	cmp.w	sl, #0
 8004312:	bf0c      	ite	eq
 8004314:	210a      	moveq	r1, #10
 8004316:	2108      	movne	r1, #8
 8004318:	2201      	movs	r2, #1
 800431a:	4638      	mov	r0, r7
 800431c:	2300      	movs	r3, #0
 800431e:	9500      	str	r5, [sp, #0]
 8004320:	f7ff fd3c 	bl	8003d9c <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_u16(&client->output, pkt_id);
 8004324:	4631      	mov	r1, r6
 8004326:	f7ff fb93 	bl	8003a50 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, topic, topic_len);
 800432a:	9a03      	ldr	r2, [sp, #12]
 800432c:	4659      	mov	r1, fp
 800432e:	4638      	mov	r0, r7
 8004330:	f7ff fb9b 	bl	8003a6a <mqtt_output_append_string>
  if (sub != 0) {
 8004334:	f1ba 0f00 	cmp.w	sl, #0
 8004338:	d00e      	beq.n	8004358 <mqtt_sub_unsub+0x118>
  mqtt_ringbuf_put(rb, value);
 800433a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800433e:	f1b9 0f02 	cmp.w	r9, #2
  mqtt_ringbuf_put(rb, value);
 8004342:	f103 0201 	add.w	r2, r3, #1
 8004346:	fa54 f383 	uxtab	r3, r4, r3
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800434a:	bf28      	it	cs
 800434c:	f04f 0902 	movcs.w	r9, #2
  mqtt_ringbuf_put(rb, value);
 8004350:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
 8004354:	f883 90f0 	strb.w	r9, [r3, #240]	; 0xf0
  mqtt_append_request(&client->pend_req_queue, r);
 8004358:	4641      	mov	r1, r8
 800435a:	f104 0018 	add.w	r0, r4, #24
 800435e:	f7ff fbd3 	bl	8003b08 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8004362:	4638      	mov	r0, r7
 8004364:	68e1      	ldr	r1, [r4, #12]
 8004366:	f7ff fc1f 	bl	8003ba8 <mqtt_output_send>
  return ERR_OK;
 800436a:	2000      	movs	r0, #0
 800436c:	e793      	b.n	8004296 <mqtt_sub_unsub+0x56>
    return ERR_CONN;
 800436e:	f06f 000a 	mvn.w	r0, #10
 8004372:	e790      	b.n	8004296 <mqtt_sub_unsub+0x56>
 8004374:	0800d9a9 	.word	0x0800d9a9
 8004378:	0800da2a 	.word	0x0800da2a
 800437c:	0800d741 	.word	0x0800d741
 8004380:	0800da49 	.word	0x0800da49
 8004384:	0800da67 	.word	0x0800da67
 8004388:	0800da8d 	.word	0x0800da8d
 800438c:	0800dab3 	.word	0x0800dab3

08004390 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                             mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	460e      	mov	r6, r1
 8004394:	4617      	mov	r7, r2
 8004396:	461d      	mov	r5, r3
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8004398:	4604      	mov	r4, r0
 800439a:	b930      	cbnz	r0, 80043aa <mqtt_set_inpub_callback+0x1a>
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <mqtt_set_inpub_callback+0x24>)
 800439e:	4906      	ldr	r1, [pc, #24]	; (80043b8 <mqtt_set_inpub_callback+0x28>)
 80043a0:	4806      	ldr	r0, [pc, #24]	; (80043bc <mqtt_set_inpub_callback+0x2c>)
 80043a2:	f240 428f 	movw	r2, #1167	; 0x48f
 80043a6:	f008 fa65 	bl	800c874 <iprintf>
  client->data_cb = data_cb;
  client->pub_cb = pub_cb;
 80043aa:	e9c4 7618 	strd	r7, r6, [r4, #96]	; 0x60
  client->inpub_arg = arg;
 80043ae:	65e5      	str	r5, [r4, #92]	; 0x5c
}
 80043b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	0800d9a9 	.word	0x0800d9a9
 80043b8:	0800da02 	.word	0x0800da02
 80043bc:	0800d741 	.word	0x0800d741

080043c0 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80043c0:	b510      	push	{r4, lr}
  mqtt_client_t *client = (mqtt_client_t *)mem_malloc(sizeof(mqtt_client_t));
 80043c2:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 80043c6:	f000 fab9 	bl	800493c <mem_malloc>
  if (client != NULL) {
 80043ca:	4604      	mov	r4, r0
 80043cc:	b120      	cbz	r0, 80043d8 <mqtt_client_new+0x18>
    memset(client, 0, sizeof(mqtt_client_t));
 80043ce:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80043d2:	2100      	movs	r1, #0
 80043d4:	f008 f990 	bl	800c6f8 <memset>
  }
  return client;
}
 80043d8:	4620      	mov	r0, r4
 80043da:	bd10      	pop	{r4, pc}

080043dc <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	b087      	sub	sp, #28
 80043e2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80043e6:	461e      	mov	r6, r3
 80043e8:	9f11      	ldr	r7, [sp, #68]	; 0x44
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;

  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80043ea:	4604      	mov	r4, r0
 80043ec:	b930      	cbnz	r0, 80043fc <mqtt_client_connect+0x20>
 80043ee:	4b7b      	ldr	r3, [pc, #492]	; (80045dc <mqtt_client_connect+0x200>)
 80043f0:	497b      	ldr	r1, [pc, #492]	; (80045e0 <mqtt_client_connect+0x204>)
 80043f2:	487c      	ldr	r0, [pc, #496]	; (80045e4 <mqtt_client_connect+0x208>)
 80043f4:	f240 42bb 	movw	r2, #1211	; 0x4bb
 80043f8:	f008 fa3c 	bl	800c874 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80043fc:	9b04      	ldr	r3, [sp, #16]
 80043fe:	b933      	cbnz	r3, 800440e <mqtt_client_connect+0x32>
 8004400:	4b76      	ldr	r3, [pc, #472]	; (80045dc <mqtt_client_connect+0x200>)
 8004402:	4979      	ldr	r1, [pc, #484]	; (80045e8 <mqtt_client_connect+0x20c>)
 8004404:	4877      	ldr	r0, [pc, #476]	; (80045e4 <mqtt_client_connect+0x208>)
 8004406:	f240 42bc 	movw	r2, #1212	; 0x4bc
 800440a:	f008 fa33 	bl	800c874 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800440e:	b937      	cbnz	r7, 800441e <mqtt_client_connect+0x42>
 8004410:	4b72      	ldr	r3, [pc, #456]	; (80045dc <mqtt_client_connect+0x200>)
 8004412:	4976      	ldr	r1, [pc, #472]	; (80045ec <mqtt_client_connect+0x210>)
 8004414:	4873      	ldr	r0, [pc, #460]	; (80045e4 <mqtt_client_connect+0x208>)
 8004416:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800441a:	f008 fa2b 	bl	800c874 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b933      	cbnz	r3, 8004430 <mqtt_client_connect+0x54>
 8004422:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <mqtt_client_connect+0x200>)
 8004424:	4972      	ldr	r1, [pc, #456]	; (80045f0 <mqtt_client_connect+0x214>)
 8004426:	486f      	ldr	r0, [pc, #444]	; (80045e4 <mqtt_client_connect+0x208>)
 8004428:	f240 42be 	movw	r2, #1214	; 0x4be
 800442c:	f008 fa22 	bl	800c874 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8004430:	7aa5      	ldrb	r5, [r4, #10]
 8004432:	2d00      	cmp	r5, #0
 8004434:	f040 80ce 	bne.w	80045d4 <mqtt_client_connect+0x1f8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8004438:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800443c:	4629      	mov	r1, r5
 800443e:	4620      	mov	r0, r4
 8004440:	f008 f95a 	bl	800c6f8 <memset>
  client->connect_arg = arg;
 8004444:	9b10      	ldr	r3, [sp, #64]	; 0x40
  client->connect_cb = cb;
  client->keep_alive = client_info->keep_alive;
  mqtt_init_requests(client->req_list);

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8004446:	6938      	ldr	r0, [r7, #16]
  client->connect_cb = cb;
 8004448:	e9c4 3604 	strd	r3, r6, [r4, #16]
  client->keep_alive = client_info->keep_alive;
 800444c:	89bb      	ldrh	r3, [r7, #12]
 800444e:	8063      	strh	r3, [r4, #2]
  mqtt_init_requests(client->req_list);
 8004450:	f104 031c 	add.w	r3, r4, #28
    r_objs[n].next = &r_objs[n];
 8004454:	61e3      	str	r3, [r4, #28]
 8004456:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800445a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800445c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004460:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004462:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8004466:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8004468:	2800      	cmp	r0, #0
 800446a:	d043      	beq.n	80044f4 <mqtt_client_connect+0x118>
 800446c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8004470:	f1b8 0f00 	cmp.w	r8, #0
 8004474:	d03e      	beq.n	80044f4 <mqtt_client_connect+0x118>
    flags |= MQTT_CONNECT_FLAG_WILL;
    flags |= (client_info->will_qos & 3) << 3;
 8004476:	7e3d      	ldrb	r5, [r7, #24]
    if (client_info->will_retain) {
 8004478:	7e7b      	ldrb	r3, [r7, #25]
    flags |= (client_info->will_qos & 3) << 3;
 800447a:	00ed      	lsls	r5, r5, #3
 800447c:	f005 0518 	and.w	r5, r5, #24
 8004480:	f045 0504 	orr.w	r5, r5, #4
    if (client_info->will_retain) {
 8004484:	b10b      	cbz	r3, 800448a <mqtt_client_connect+0xae>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8004486:	f045 0520 	orr.w	r5, r5, #32
    }
    len = strlen(client_info->will_topic);
 800448a:	f7fb febb 	bl	8000204 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800448e:	28ff      	cmp	r0, #255	; 0xff
    len = strlen(client_info->will_topic);
 8004490:	4606      	mov	r6, r0
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8004492:	d90c      	bls.n	80044ae <mqtt_client_connect+0xd2>
 8004494:	4b51      	ldr	r3, [pc, #324]	; (80045dc <mqtt_client_connect+0x200>)
 8004496:	4957      	ldr	r1, [pc, #348]	; (80045f4 <mqtt_client_connect+0x218>)
 8004498:	f240 42d4 	movw	r2, #1236	; 0x4d4
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800449c:	4851      	ldr	r0, [pc, #324]	; (80045e4 <mqtt_client_connect+0x208>)
 800449e:	f008 f9e9 	bl	800c874 <iprintf>
 80044a2:	f06f 0605 	mvn.w	r6, #5

tcp_fail:
  tcp_abort(client->conn);
  client->conn = NULL;
  return err;
}
 80044a6:	4630      	mov	r0, r6
 80044a8:	b007      	add	sp, #28
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 80044ae:	b920      	cbnz	r0, 80044ba <mqtt_client_connect+0xde>
 80044b0:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <mqtt_client_connect+0x200>)
 80044b2:	4951      	ldr	r1, [pc, #324]	; (80045f8 <mqtt_client_connect+0x21c>)
 80044b4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80044b8:	e7f0      	b.n	800449c <mqtt_client_connect+0xc0>
    will_topic_len = (u8_t)len;
 80044ba:	fa5f fa80 	uxtb.w	sl, r0
    len = strlen(client_info->will_msg);
 80044be:	4640      	mov	r0, r8
 80044c0:	f7fb fea0 	bl	8000204 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 80044c4:	28ff      	cmp	r0, #255	; 0xff
 80044c6:	d904      	bls.n	80044d2 <mqtt_client_connect+0xf6>
 80044c8:	4b44      	ldr	r3, [pc, #272]	; (80045dc <mqtt_client_connect+0x200>)
 80044ca:	494c      	ldr	r1, [pc, #304]	; (80045fc <mqtt_client_connect+0x220>)
 80044cc:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80044d0:	e7e4      	b.n	800449c <mqtt_client_connect+0xc0>
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 80044d2:	360e      	adds	r6, #14
 80044d4:	4406      	add	r6, r0
    will_msg_len = (u8_t)len;
 80044d6:	fa5f f980 	uxtb.w	r9, r0
    remaining_length = (u16_t)len;
 80044da:	b2b6      	uxth	r6, r6
  len = strlen(client_info->client_id);
 80044dc:	6838      	ldr	r0, [r7, #0]
 80044de:	f7fb fe91 	bl	8000204 <strlen>
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80044e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(client_info->client_id);
 80044e6:	4683      	mov	fp, r0
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80044e8:	d308      	bcc.n	80044fc <mqtt_client_connect+0x120>
 80044ea:	4b3c      	ldr	r3, [pc, #240]	; (80045dc <mqtt_client_connect+0x200>)
 80044ec:	4944      	ldr	r1, [pc, #272]	; (8004600 <mqtt_client_connect+0x224>)
 80044ee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80044f2:	e7d3      	b.n	800449c <mqtt_client_connect+0xc0>
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80044f4:	46a9      	mov	r9, r5
 80044f6:	46aa      	mov	sl, r5
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80044f8:	260a      	movs	r6, #10
 80044fa:	e7ef      	b.n	80044dc <mqtt_client_connect+0x100>
  len = remaining_length + 2 + client_id_length;
 80044fc:	3602      	adds	r6, #2
 80044fe:	4406      	add	r6, r0
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8004500:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004504:	db04      	blt.n	8004510 <mqtt_client_connect+0x134>
 8004506:	4b35      	ldr	r3, [pc, #212]	; (80045dc <mqtt_client_connect+0x200>)
 8004508:	493e      	ldr	r1, [pc, #248]	; (8004604 <mqtt_client_connect+0x228>)
 800450a:	f240 42e6 	movw	r2, #1254	; 0x4e6
 800450e:	e7c5      	b.n	800449c <mqtt_client_connect+0xc0>
  remaining_length = (u16_t)len;
 8004510:	b2b3      	uxth	r3, r6
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8004512:	f104 08ec 	add.w	r8, r4, #236	; 0xec
 8004516:	4619      	mov	r1, r3
 8004518:	4640      	mov	r0, r8
  remaining_length = (u16_t)len;
 800451a:	9303      	str	r3, [sp, #12]
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800451c:	f7ff fad2 	bl	8003ac4 <mqtt_output_check_space>
 8004520:	b910      	cbnz	r0, 8004528 <mqtt_client_connect+0x14c>
    return ERR_MEM;
 8004522:	f04f 36ff 	mov.w	r6, #4294967295
 8004526:	e7be      	b.n	80044a6 <mqtt_client_connect+0xca>
  client->conn = tcp_new();
 8004528:	f001 fe14 	bl	8006154 <tcp_new>
 800452c:	60e0      	str	r0, [r4, #12]
  if (client->conn == NULL) {
 800452e:	2800      	cmp	r0, #0
 8004530:	d0f7      	beq.n	8004522 <mqtt_client_connect+0x146>
  tcp_arg(client->conn, client);
 8004532:	4621      	mov	r1, r4
 8004534:	f001 f8e6 	bl	8005704 <tcp_arg>
  err = tcp_bind(client->conn, IP_ADDR_ANY, 0);
 8004538:	2200      	movs	r2, #0
 800453a:	4933      	ldr	r1, [pc, #204]	; (8004608 <mqtt_client_connect+0x22c>)
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	f001 f801 	bl	8005544 <tcp_bind>
  if (err != ERR_OK) {
 8004542:	4606      	mov	r6, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d13f      	bne.n	80045c8 <mqtt_client_connect+0x1ec>
  err = tcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <mqtt_client_connect+0x230>)
 800454a:	68e0      	ldr	r0, [r4, #12]
 800454c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8004550:	f001 fe20 	bl	8006194 <tcp_connect>
  if (err != ERR_OK) {
 8004554:	4606      	mov	r6, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d136      	bne.n	80045c8 <mqtt_client_connect+0x1ec>
  tcp_err(client->conn, mqtt_tcp_err_cb);
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	492c      	ldr	r1, [pc, #176]	; (8004610 <mqtt_client_connect+0x234>)
 800455e:	f001 f903 	bl	8005768 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8004562:	2101      	movs	r1, #1
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8004564:	9b03      	ldr	r3, [sp, #12]
  client->conn_state = TCP_CONNECTING;
 8004566:	72a1      	strb	r1, [r4, #10]
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8004568:	4640      	mov	r0, r8
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4632      	mov	r2, r6
 800456e:	4633      	mov	r3, r6
 8004570:	f7ff fc14 	bl	8003d9c <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8004574:	2204      	movs	r2, #4
 8004576:	4927      	ldr	r1, [pc, #156]	; (8004614 <mqtt_client_connect+0x238>)
 8004578:	f7ff fa77 	bl	8003a6a <mqtt_output_append_string>
  mqtt_ringbuf_put(rb, value);
 800457c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8004580:	fa54 f283 	uxtab	r2, r4, r3
 8004584:	2104      	movs	r1, #4
 8004586:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 800458a:	1c9a      	adds	r2, r3, #2
 800458c:	3301      	adds	r3, #1
 800458e:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
 8004592:	fa54 f483 	uxtab	r4, r4, r3
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8004596:	f045 0302 	orr.w	r3, r5, #2
  mqtt_ringbuf_put(rb, value);
 800459a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800459e:	89b9      	ldrh	r1, [r7, #12]
 80045a0:	f7ff fa56 	bl	8003a50 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 80045a4:	fa1f f28b 	uxth.w	r2, fp
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	4640      	mov	r0, r8
 80045ac:	f7ff fa5d 	bl	8003a6a <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 80045b0:	076b      	lsls	r3, r5, #29
 80045b2:	f57f af78 	bpl.w	80044a6 <mqtt_client_connect+0xca>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 80045b6:	4652      	mov	r2, sl
 80045b8:	6939      	ldr	r1, [r7, #16]
 80045ba:	f7ff fa56 	bl	8003a6a <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 80045be:	464a      	mov	r2, r9
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	f7ff fa52 	bl	8003a6a <mqtt_output_append_string>
 80045c6:	e76e      	b.n	80044a6 <mqtt_client_connect+0xca>
  tcp_abort(client->conn);
 80045c8:	68e0      	ldr	r0, [r4, #12]
 80045ca:	f001 fd0b 	bl	8005fe4 <tcp_abort>
  client->conn = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60e3      	str	r3, [r4, #12]
  return err;
 80045d2:	e768      	b.n	80044a6 <mqtt_client_connect+0xca>
    return ERR_ISCONN;
 80045d4:	f06f 0609 	mvn.w	r6, #9
 80045d8:	e765      	b.n	80044a6 <mqtt_client_connect+0xca>
 80045da:	bf00      	nop
 80045dc:	0800d9a9 	.word	0x0800d9a9
 80045e0:	0800d79e 	.word	0x0800d79e
 80045e4:	0800d741 	.word	0x0800d741
 80045e8:	0800d7c2 	.word	0x0800d7c2
 80045ec:	0800d7e7 	.word	0x0800d7e7
 80045f0:	0800d810 	.word	0x0800d810
 80045f4:	0800d844 	.word	0x0800d844
 80045f8:	0800d881 	.word	0x0800d881
 80045fc:	0800d8c1 	.word	0x0800d8c1
 8004600:	0800d8fc 	.word	0x0800d8fc
 8004604:	0800d938 	.word	0x0800d938
 8004608:	0800f54c 	.word	0x0800f54c
 800460c:	08003c55 	.word	0x08003c55
 8004610:	08003d2d 	.word	0x08003d2d
 8004614:	0800d967 	.word	0x0800d967

08004618 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8004618:	ba40      	rev16	r0, r0
}
 800461a:	b280      	uxth	r0, r0
 800461c:	4770      	bx	lr

0800461e <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800461e:	ba00      	rev	r0, r0
 8004620:	4770      	bx	lr

08004622 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004622:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8004624:	f006 fe66 	bl	800b2f4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8004628:	f000 f80c 	bl	8004644 <mem_init>
  memp_init();
 800462c:	f000 fa72 	bl	8004b14 <memp_init>
  pbuf_init();
  netif_init();
 8004630:	f000 fabd 	bl	8004bae <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004634:	f004 f92e 	bl	8008894 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004638:	f000 ff82 	bl	8005540 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800463c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8004640:	f004 b87a 	b.w	8008738 <sys_timeouts_init>

08004644 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <mem_init+0x4c>)
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <mem_init+0x50>)
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004648:	4813      	ldr	r0, [pc, #76]	; (8004698 <mem_init+0x54>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800464a:	f023 0303 	bic.w	r3, r3, #3
{
 800464e:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004650:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8004652:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004656:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8004658:	2200      	movs	r2, #0
 800465a:	711a      	strb	r2, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800465c:	4a0f      	ldr	r2, [pc, #60]	; (800469c <mem_init+0x58>)
 800465e:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
 8004662:	6011      	str	r1, [r2, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <mem_init+0x5c>)
 8004666:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8004670:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <mem_init+0x60>)
 8004672:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004674:	f006 fe4a 	bl	800b30c <sys_mutex_new>
 8004678:	b140      	cbz	r0, 800468c <mem_init+0x48>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <mem_init+0x64>)
 800467c:	490b      	ldr	r1, [pc, #44]	; (80046ac <mem_init+0x68>)
 800467e:	480c      	ldr	r0, [pc, #48]	; (80046b0 <mem_init+0x6c>)
 8004680:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 8004684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004688:	f008 b8f4 	b.w	800c874 <iprintf>
}
 800468c:	bd10      	pop	{r4, pc}
 800468e:	bf00      	nop
 8004690:	20003fbb 	.word	0x20003fbb
 8004694:	20003df4 	.word	0x20003df4
 8004698:	20003df0 	.word	0x20003df0
 800469c:	20003df8 	.word	0x20003df8
 80046a0:	06400640 	.word	0x06400640
 80046a4:	20003dec 	.word	0x20003dec
 80046a8:	0800dc14 	.word	0x0800dc14
 80046ac:	0800dc43 	.word	0x0800dc43
 80046b0:	0800d741 	.word	0x0800d741

080046b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80046b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80046b8:	4604      	mov	r4, r0
 80046ba:	2800      	cmp	r0, #0
 80046bc:	f000 8096 	beq.w	80047ec <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80046c0:	0783      	lsls	r3, r0, #30
 80046c2:	d006      	beq.n	80046d2 <mem_free+0x1e>
 80046c4:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <mem_free+0x13c>)
 80046c6:	494b      	ldr	r1, [pc, #300]	; (80047f4 <mem_free+0x140>)
 80046c8:	484b      	ldr	r0, [pc, #300]	; (80047f8 <mem_free+0x144>)
 80046ca:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80046ce:	f008 f8d1 	bl	800c874 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80046d2:	4f4a      	ldr	r7, [pc, #296]	; (80047fc <mem_free+0x148>)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	d803      	bhi.n	80046e2 <mem_free+0x2e>
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <mem_free+0x14c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	42a3      	cmp	r3, r4
 80046e0:	d806      	bhi.n	80046f0 <mem_free+0x3c>
 80046e2:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <mem_free+0x13c>)
 80046e4:	4947      	ldr	r1, [pc, #284]	; (8004804 <mem_free+0x150>)
 80046e6:	4844      	ldr	r0, [pc, #272]	; (80047f8 <mem_free+0x144>)
 80046e8:	f240 12af 	movw	r2, #431	; 0x1af
 80046ec:	f008 f8c2 	bl	800c874 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d804      	bhi.n	8004700 <mem_free+0x4c>
 80046f6:	4b42      	ldr	r3, [pc, #264]	; (8004800 <mem_free+0x14c>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	42a2      	cmp	r2, r4
 80046fc:	4698      	mov	r8, r3
 80046fe:	d805      	bhi.n	800470c <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004700:	f006 fe2c 	bl	800b35c <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8004708:	f006 be34 	b.w	800b374 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800470c:	483e      	ldr	r0, [pc, #248]	; (8004808 <mem_free+0x154>)
 800470e:	f006 fe0c 	bl	800b32a <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004712:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004716:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800471a:	b933      	cbnz	r3, 800472a <mem_free+0x76>
 800471c:	4b34      	ldr	r3, [pc, #208]	; (80047f0 <mem_free+0x13c>)
 800471e:	493b      	ldr	r1, [pc, #236]	; (800480c <mem_free+0x158>)
 8004720:	4835      	ldr	r0, [pc, #212]	; (80047f8 <mem_free+0x144>)
 8004722:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004726:	f008 f8a5 	bl	800c874 <iprintf>
  if (mem < lfree) {
 800472a:	4e39      	ldr	r6, [pc, #228]	; (8004810 <mem_free+0x15c>)
  mem->used = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8004732:	6833      	ldr	r3, [r6, #0]
 8004734:	42ab      	cmp	r3, r5
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004736:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8004738:	bf88      	it	hi
 800473a:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800473c:	429d      	cmp	r5, r3
 800473e:	d206      	bcs.n	800474e <mem_free+0x9a>
 8004740:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <mem_free+0x13c>)
 8004742:	4934      	ldr	r1, [pc, #208]	; (8004814 <mem_free+0x160>)
 8004744:	482c      	ldr	r0, [pc, #176]	; (80047f8 <mem_free+0x144>)
 8004746:	f240 125d 	movw	r2, #349	; 0x15d
 800474a:	f008 f893 	bl	800c874 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800474e:	f8d8 3000 	ldr.w	r3, [r8]
 8004752:	429d      	cmp	r5, r3
 8004754:	d306      	bcc.n	8004764 <mem_free+0xb0>
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <mem_free+0x13c>)
 8004758:	492f      	ldr	r1, [pc, #188]	; (8004818 <mem_free+0x164>)
 800475a:	4827      	ldr	r0, [pc, #156]	; (80047f8 <mem_free+0x144>)
 800475c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004760:	f008 f888 	bl	800c874 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004764:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8004768:	b133      	cbz	r3, 8004778 <mem_free+0xc4>
 800476a:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <mem_free+0x13c>)
 800476c:	492b      	ldr	r1, [pc, #172]	; (800481c <mem_free+0x168>)
 800476e:	4822      	ldr	r0, [pc, #136]	; (80047f8 <mem_free+0x144>)
 8004770:	f240 125f 	movw	r2, #351	; 0x15f
 8004774:	f008 f87e 	bl	800c874 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004778:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800477c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004780:	d906      	bls.n	8004790 <mem_free+0xdc>
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <mem_free+0x13c>)
 8004784:	4926      	ldr	r1, [pc, #152]	; (8004820 <mem_free+0x16c>)
 8004786:	481c      	ldr	r0, [pc, #112]	; (80047f8 <mem_free+0x144>)
 8004788:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800478c:	f008 f872 	bl	800c874 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004796:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004798:	4295      	cmp	r5, r2
 800479a:	d010      	beq.n	80047be <mem_free+0x10a>
 800479c:	7910      	ldrb	r0, [r2, #4]
 800479e:	b970      	cbnz	r0, 80047be <mem_free+0x10a>
 80047a0:	f8d8 0000 	ldr.w	r0, [r8]
 80047a4:	4282      	cmp	r2, r0
 80047a6:	d00a      	beq.n	80047be <mem_free+0x10a>
    if (lfree == nmem) {
 80047a8:	6830      	ldr	r0, [r6, #0]
 80047aa:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80047ac:	5a5a      	ldrh	r2, [r3, r1]
 80047ae:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80047b2:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80047b4:	bf08      	it	eq
 80047b6:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80047b8:	441a      	add	r2, r3
 80047ba:	1ae9      	subs	r1, r5, r3
 80047bc:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80047be:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80047c2:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80047c4:	428d      	cmp	r5, r1
 80047c6:	d00c      	beq.n	80047e2 <mem_free+0x12e>
 80047c8:	7908      	ldrb	r0, [r1, #4]
 80047ca:	b950      	cbnz	r0, 80047e2 <mem_free+0x12e>
    if (lfree == mem) {
 80047cc:	6830      	ldr	r0, [r6, #0]
 80047ce:	4285      	cmp	r5, r0
      lfree = pmem;
 80047d0:	bf08      	it	eq
 80047d2:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80047d4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80047d8:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80047da:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80047de:	440b      	add	r3, r1
 80047e0:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80047e2:	4809      	ldr	r0, [pc, #36]	; (8004808 <mem_free+0x154>)
}
 80047e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80047e8:	f006 bda4 	b.w	800b334 <sys_mutex_unlock>
}
 80047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047f0:	0800dc14 	.word	0x0800dc14
 80047f4:	0800db52 	.word	0x0800db52
 80047f8:	0800d741 	.word	0x0800d741
 80047fc:	20003df4 	.word	0x20003df4
 8004800:	20003df8 	.word	0x20003df8
 8004804:	0800db73 	.word	0x0800db73
 8004808:	20003df0 	.word	0x20003df0
 800480c:	0800db8a 	.word	0x0800db8a
 8004810:	20003dec 	.word	0x20003dec
 8004814:	0800db9e 	.word	0x0800db9e
 8004818:	0800dbb5 	.word	0x0800dbb5
 800481c:	0800dbcf 	.word	0x0800dbcf
 8004820:	0800dbea 	.word	0x0800dbea

08004824 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004828:	3103      	adds	r1, #3
 800482a:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800482e:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8004830:	2d0b      	cmp	r5, #11
{
 8004832:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8004834:	d904      	bls.n	8004840 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004836:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800483a:	d902      	bls.n	8004842 <mem_trim+0x1e>
    return NULL;
 800483c:	2400      	movs	r4, #0
 800483e:	e01c      	b.n	800487a <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8004840:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <mem_trim+0xf8>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	42a2      	cmp	r2, r4
 8004848:	4698      	mov	r8, r3
 800484a:	d803      	bhi.n	8004854 <mem_trim+0x30>
 800484c:	4b34      	ldr	r3, [pc, #208]	; (8004920 <mem_trim+0xfc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	42a3      	cmp	r3, r4
 8004852:	d806      	bhi.n	8004862 <mem_trim+0x3e>
 8004854:	4b33      	ldr	r3, [pc, #204]	; (8004924 <mem_trim+0x100>)
 8004856:	4934      	ldr	r1, [pc, #208]	; (8004928 <mem_trim+0x104>)
 8004858:	4834      	ldr	r0, [pc, #208]	; (800492c <mem_trim+0x108>)
 800485a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800485e:	f008 f809 	bl	800c874 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004862:	f8d8 3000 	ldr.w	r3, [r8]
 8004866:	42a3      	cmp	r3, r4
 8004868:	d803      	bhi.n	8004872 <mem_trim+0x4e>
 800486a:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <mem_trim+0xfc>)
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	42a2      	cmp	r2, r4
 8004870:	d806      	bhi.n	8004880 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004872:	f006 fd73 	bl	800b35c <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8004876:	f006 fd7d 	bl	800b374 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800487a:	4620      	mov	r0, r4
 800487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004880:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004884:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004888:	1af6      	subs	r6, r6, r3
 800488a:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800488c:	3f08      	subs	r7, #8
 800488e:	1bbf      	subs	r7, r7, r6
 8004890:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004892:	42af      	cmp	r7, r5
 8004894:	d219      	bcs.n	80048ca <mem_trim+0xa6>
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <mem_trim+0x100>)
 8004898:	4925      	ldr	r1, [pc, #148]	; (8004930 <mem_trim+0x10c>)
 800489a:	4824      	ldr	r0, [pc, #144]	; (800492c <mem_trim+0x108>)
 800489c:	f240 2206 	movw	r2, #518	; 0x206
 80048a0:	f007 ffe8 	bl	800c874 <iprintf>
 80048a4:	e7ca      	b.n	800483c <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80048a6:	f105 0214 	add.w	r2, r5, #20
 80048aa:	42ba      	cmp	r2, r7
 80048ac:	d832      	bhi.n	8004914 <mem_trim+0xf0>
    if (mem2 < lfree) {
 80048ae:	4821      	ldr	r0, [pc, #132]	; (8004934 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80048b0:	f106 0208 	add.w	r2, r6, #8
 80048b4:	4415      	add	r5, r2
    if (mem2 < lfree) {
 80048b6:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80048b8:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80048ba:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 80048bc:	4297      	cmp	r7, r2
      lfree = mem2;
 80048be:	bf88      	it	hi
 80048c0:	6002      	strhi	r2, [r0, #0]
    mem2->used = 0;
 80048c2:	2000      	movs	r0, #0
 80048c4:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 80048c6:	5359      	strh	r1, [r3, r5]
 80048c8:	e01b      	b.n	8004902 <mem_trim+0xde>
  if (newsize == size) {
 80048ca:	d0d6      	beq.n	800487a <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 80048cc:	481a      	ldr	r0, [pc, #104]	; (8004938 <mem_trim+0x114>)
 80048ce:	f006 fd2c 	bl	800b32a <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80048d2:	f8d8 3000 	ldr.w	r3, [r8]
 80048d6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80048da:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 80048dc:	7902      	ldrb	r2, [r0, #4]
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d1e1      	bne.n	80048a6 <mem_trim+0x82>
    next = mem2->next;
 80048e2:	f833 c001 	ldrh.w	ip, [r3, r1]
    if (lfree == mem2) {
 80048e6:	4913      	ldr	r1, [pc, #76]	; (8004934 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80048e8:	f106 0208 	add.w	r2, r6, #8
    if (lfree == mem2) {
 80048ec:	680f      	ldr	r7, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80048ee:	4415      	add	r5, r2
 80048f0:	b2ad      	uxth	r5, r5
 80048f2:	195a      	adds	r2, r3, r5
    if (lfree == mem2) {
 80048f4:	4287      	cmp	r7, r0
      lfree = (struct mem *)(void *)&ram[ptr2];
 80048f6:	bf08      	it	eq
 80048f8:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 80048fa:	2100      	movs	r1, #0
 80048fc:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 80048fe:	f823 c005 	strh.w	ip, [r3, r5]
    mem2->prev = ptr;
 8004902:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8004904:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004908:	5b5a      	ldrh	r2, [r3, r5]
 800490a:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800490e:	bf1c      	itt	ne
 8004910:	189b      	addne	r3, r3, r2
 8004912:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8004914:	4808      	ldr	r0, [pc, #32]	; (8004938 <mem_trim+0x114>)
 8004916:	f006 fd0d 	bl	800b334 <sys_mutex_unlock>
  return rmem;
 800491a:	e7ae      	b.n	800487a <mem_trim+0x56>
 800491c:	20003df4 	.word	0x20003df4
 8004920:	20003df8 	.word	0x20003df8
 8004924:	0800dc14 	.word	0x0800dc14
 8004928:	0800dcf9 	.word	0x0800dcf9
 800492c:	0800d741 	.word	0x0800d741
 8004930:	0800dd10 	.word	0x0800dd10
 8004934:	20003dec 	.word	0x20003dec
 8004938:	20003df0 	.word	0x20003df0

0800493c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800493c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004940:	2800      	cmp	r0, #0
 8004942:	d07b      	beq.n	8004a3c <mem_malloc+0x100>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004944:	3003      	adds	r0, #3
 8004946:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800494a:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 800494c:	2d0b      	cmp	r5, #11
 800494e:	d904      	bls.n	800495a <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004950:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8004954:	d902      	bls.n	800495c <mem_malloc+0x20>
    return NULL;
 8004956:	2000      	movs	r0, #0
 8004958:	e070      	b.n	8004a3c <mem_malloc+0x100>
    size = MIN_SIZE_ALIGNED;
 800495a:	250c      	movs	r5, #12
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800495c:	483c      	ldr	r0, [pc, #240]	; (8004a50 <mem_malloc+0x114>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800495e:	4e3d      	ldr	r6, [pc, #244]	; (8004a54 <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 8004960:	f006 fce3 	bl	800b32a <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004964:	483c      	ldr	r0, [pc, #240]	; (8004a58 <mem_malloc+0x11c>)
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	6807      	ldr	r7, [r0, #0]
 800496a:	1a7b      	subs	r3, r7, r1
 800496c:	b29b      	uxth	r3, r3
 800496e:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004972:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004976:	4543      	cmp	r3, r8
 8004978:	d303      	bcc.n	8004982 <mem_malloc+0x46>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800497a:	4835      	ldr	r0, [pc, #212]	; (8004a50 <mem_malloc+0x114>)
 800497c:	f006 fcda 	bl	800b334 <sys_mutex_unlock>
 8004980:	e7e9      	b.n	8004956 <mem_malloc+0x1a>
      mem = (struct mem *)(void *)&ram[ptr];
 8004982:	18cc      	adds	r4, r1, r3
 8004984:	f831 c003 	ldrh.w	ip, [r1, r3]
      if ((!mem->used) &&
 8004988:	f894 e004 	ldrb.w	lr, [r4, #4]
 800498c:	f1be 0f00 	cmp.w	lr, #0
 8004990:	d15c      	bne.n	8004a4c <mem_malloc+0x110>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004992:	eba9 0203 	sub.w	r2, r9, r3
 8004996:	4462      	add	r2, ip
      if ((!mem->used) &&
 8004998:	42aa      	cmp	r2, r5
 800499a:	d357      	bcc.n	8004a4c <mem_malloc+0x110>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800499c:	f105 0814 	add.w	r8, r5, #20
 80049a0:	4542      	cmp	r2, r8
 80049a2:	d34d      	bcc.n	8004a40 <mem_malloc+0x104>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80049a4:	f105 0208 	add.w	r2, r5, #8
 80049a8:	441a      	add	r2, r3
 80049aa:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80049ac:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 80049b0:	f888 e004 	strb.w	lr, [r8, #4]
          mem2->next = mem->next;
 80049b4:	f821 c002 	strh.w	ip, [r1, r2]
          mem2->prev = ptr;
 80049b8:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 80049bc:	2301      	movs	r3, #1
          mem->next = ptr2;
 80049be:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 80049c0:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80049c2:	5a8b      	ldrh	r3, [r1, r2]
 80049c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049c8:	d001      	beq.n	80049ce <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80049ca:	4419      	add	r1, r3
 80049cc:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 80049ce:	42a7      	cmp	r7, r4
 80049d0:	4f22      	ldr	r7, [pc, #136]	; (8004a5c <mem_malloc+0x120>)
 80049d2:	d112      	bne.n	80049fa <mem_malloc+0xbe>
          while (cur->used && cur != ram_end) {
 80049d4:	683a      	ldr	r2, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 80049d6:	6836      	ldr	r6, [r6, #0]
 80049d8:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 80049da:	7919      	ldrb	r1, [r3, #4]
 80049dc:	b111      	cbz	r1, 80049e4 <mem_malloc+0xa8>
 80049de:	429a      	cmp	r2, r3
 80049e0:	d131      	bne.n	8004a46 <mem_malloc+0x10a>
 80049e2:	4613      	mov	r3, r2
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80049e4:	429a      	cmp	r2, r3
          lfree = cur;
 80049e6:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80049e8:	d007      	beq.n	80049fa <mem_malloc+0xbe>
 80049ea:	b131      	cbz	r1, 80049fa <mem_malloc+0xbe>
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <mem_malloc+0x124>)
 80049ee:	491d      	ldr	r1, [pc, #116]	; (8004a64 <mem_malloc+0x128>)
 80049f0:	481d      	ldr	r0, [pc, #116]	; (8004a68 <mem_malloc+0x12c>)
 80049f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80049f6:	f007 ff3d 	bl	800c874 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 80049fa:	4815      	ldr	r0, [pc, #84]	; (8004a50 <mem_malloc+0x114>)
 80049fc:	f006 fc9a 	bl	800b334 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004a00:	3508      	adds	r5, #8
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	4425      	add	r5, r4
 8004a06:	42ab      	cmp	r3, r5
 8004a08:	d206      	bcs.n	8004a18 <mem_malloc+0xdc>
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <mem_malloc+0x124>)
 8004a0c:	4917      	ldr	r1, [pc, #92]	; (8004a6c <mem_malloc+0x130>)
 8004a0e:	4816      	ldr	r0, [pc, #88]	; (8004a68 <mem_malloc+0x12c>)
 8004a10:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8004a14:	f007 ff2e 	bl	800c874 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004a18:	07a3      	lsls	r3, r4, #30
 8004a1a:	d00d      	beq.n	8004a38 <mem_malloc+0xfc>
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <mem_malloc+0x124>)
 8004a1e:	4914      	ldr	r1, [pc, #80]	; (8004a70 <mem_malloc+0x134>)
 8004a20:	4811      	ldr	r0, [pc, #68]	; (8004a68 <mem_malloc+0x12c>)
 8004a22:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004a26:	f007 ff25 	bl	800c874 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <mem_malloc+0x124>)
 8004a2c:	4911      	ldr	r1, [pc, #68]	; (8004a74 <mem_malloc+0x138>)
 8004a2e:	480e      	ldr	r0, [pc, #56]	; (8004a68 <mem_malloc+0x12c>)
 8004a30:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004a34:	f007 ff1e 	bl	800c874 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004a38:	f104 0008 	add.w	r0, r4, #8
  return NULL;
}
 8004a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8004a40:	2301      	movs	r3, #1
 8004a42:	7123      	strb	r3, [r4, #4]
 8004a44:	e7c3      	b.n	80049ce <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	4433      	add	r3, r6
 8004a4a:	e7c6      	b.n	80049da <mem_malloc+0x9e>
 8004a4c:	4663      	mov	r3, ip
 8004a4e:	e792      	b.n	8004976 <mem_malloc+0x3a>
 8004a50:	20003df0 	.word	0x20003df0
 8004a54:	20003df4 	.word	0x20003df4
 8004a58:	20003dec 	.word	0x20003dec
 8004a5c:	20003df8 	.word	0x20003df8
 8004a60:	0800dc14 	.word	0x0800dc14
 8004a64:	0800dc5e 	.word	0x0800dc5e
 8004a68:	0800d741 	.word	0x0800d741
 8004a6c:	0800dc77 	.word	0x0800dc77
 8004a70:	0800dca7 	.word	0x0800dca7
 8004a74:	0800dcd6 	.word	0x0800dcd6

08004a78 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8004a7c:	f006 fc6e 	bl	800b35c <sys_arch_protect>

  memp = *desc->tab;
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8004a84:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004a86:	b15c      	cbz	r4, 8004aa0 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004a8c:	07a3      	lsls	r3, r4, #30
 8004a8e:	d006      	beq.n	8004a9e <do_memp_malloc_pool.isra.0+0x26>
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <do_memp_malloc_pool.isra.0+0x30>)
 8004a92:	4906      	ldr	r1, [pc, #24]	; (8004aac <do_memp_malloc_pool.isra.0+0x34>)
 8004a94:	4806      	ldr	r0, [pc, #24]	; (8004ab0 <do_memp_malloc_pool.isra.0+0x38>)
 8004a96:	f240 1249 	movw	r2, #329	; 0x149
 8004a9a:	f007 feeb 	bl	800c874 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8004a9e:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8004aa0:	f006 fc68 	bl	800b374 <sys_arch_unprotect>
  return NULL;
}
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	0800dd50 	.word	0x0800dd50
 8004aac:	0800dd80 	.word	0x0800dd80
 8004ab0:	0800d741 	.word	0x0800d741

08004ab4 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8004ab4:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004ab6:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8004ab8:	4605      	mov	r5, r0
 8004aba:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8004abc:	d006      	beq.n	8004acc <do_memp_free_pool.isra.1+0x18>
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <do_memp_free_pool.isra.1+0x2c>)
 8004ac0:	4908      	ldr	r1, [pc, #32]	; (8004ae4 <do_memp_free_pool.isra.1+0x30>)
 8004ac2:	4809      	ldr	r0, [pc, #36]	; (8004ae8 <do_memp_free_pool.isra.1+0x34>)
 8004ac4:	f240 129d 	movw	r2, #413	; 0x19d
 8004ac8:	f007 fed4 	bl	800c874 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8004acc:	f006 fc46 	bl	800b35c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8004ad6:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8004adc:	f006 bc4a 	b.w	800b374 <sys_arch_unprotect>
 8004ae0:	0800dd50 	.word	0x0800dd50
 8004ae4:	0800dd30 	.word	0x0800dd30
 8004ae8:	0800d741 	.word	0x0800d741

08004aec <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004aec:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8004aee:	6881      	ldr	r1, [r0, #8]
{
 8004af0:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8004af2:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004af4:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8004af6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8004af8:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004afa:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8004afe:	4294      	cmp	r4, r2
 8004b00:	dc00      	bgt.n	8004b04 <memp_init_pool+0x18>
}
 8004b02:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8004b04:	680d      	ldr	r5, [r1, #0]
 8004b06:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004b08:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8004b0a:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8004b0c:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004b0e:	442b      	add	r3, r5
 8004b10:	e7f5      	b.n	8004afe <memp_init_pool+0x12>
	...

08004b14 <memp_init>:
{
 8004b14:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8004b16:	4d05      	ldr	r5, [pc, #20]	; (8004b2c <memp_init+0x18>)
{
 8004b18:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8004b1a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004b1e:	3401      	adds	r4, #1
 8004b20:	f7ff ffe4 	bl	8004aec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b24:	2c0d      	cmp	r4, #13
 8004b26:	d1f8      	bne.n	8004b1a <memp_init+0x6>
}
 8004b28:	bd38      	pop	{r3, r4, r5, pc}
 8004b2a:	bf00      	nop
 8004b2c:	0800de78 	.word	0x0800de78

08004b30 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004b30:	280c      	cmp	r0, #12
{
 8004b32:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004b34:	d807      	bhi.n	8004b46 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <memp_malloc+0x28>)
 8004b38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8004b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004b40:	3008      	adds	r0, #8
 8004b42:	f7ff bf99 	b.w	8004a78 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <memp_malloc+0x2c>)
 8004b48:	4905      	ldr	r1, [pc, #20]	; (8004b60 <memp_malloc+0x30>)
 8004b4a:	4806      	ldr	r0, [pc, #24]	; (8004b64 <memp_malloc+0x34>)
 8004b4c:	f240 1287 	movw	r2, #391	; 0x187
 8004b50:	f007 fe90 	bl	800c874 <iprintf>
}
 8004b54:	2000      	movs	r0, #0
 8004b56:	bd08      	pop	{r3, pc}
 8004b58:	0800de78 	.word	0x0800de78
 8004b5c:	0800dd50 	.word	0x0800dd50
 8004b60:	0800de5b 	.word	0x0800de5b
 8004b64:	0800d741 	.word	0x0800d741

08004b68 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004b68:	280c      	cmp	r0, #12
 8004b6a:	d906      	bls.n	8004b7a <memp_free+0x12>
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <memp_free+0x24>)
 8004b6e:	4908      	ldr	r1, [pc, #32]	; (8004b90 <memp_free+0x28>)
 8004b70:	4808      	ldr	r0, [pc, #32]	; (8004b94 <memp_free+0x2c>)
 8004b72:	f240 12db 	movw	r2, #475	; 0x1db
 8004b76:	f007 be7d 	b.w	800c874 <iprintf>

  if (mem == NULL) {
 8004b7a:	b129      	cbz	r1, 8004b88 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <memp_free+0x30>)
 8004b7e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004b82:	3008      	adds	r0, #8
 8004b84:	f7ff bf96 	b.w	8004ab4 <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	0800dd50 	.word	0x0800dd50
 8004b90:	0800de40 	.word	0x0800de40
 8004b94:	0800d741 	.word	0x0800d741
 8004b98:	0800de78 	.word	0x0800de78

08004b9c <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004b9c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004ba0:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8004ba2:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004ba4:	d502      	bpl.n	8004bac <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8004ba6:	3104      	adds	r1, #4
 8004ba8:	f005 bada 	b.w	800a160 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004bac:	4770      	bx	lr

08004bae <netif_init>:
}
 8004bae:	4770      	bx	lr

08004bb0 <netif_set_ipaddr>:
{
 8004bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bb2:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004bb4:	460d      	mov	r5, r1
 8004bb6:	b191      	cbz	r1, 8004bde <netif_set_ipaddr+0x2e>
 8004bb8:	680b      	ldr	r3, [r1, #0]
 8004bba:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004bbc:	9a01      	ldr	r2, [sp, #4]
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d00a      	beq.n	8004bda <netif_set_ipaddr+0x2a>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004bc4:	1d26      	adds	r6, r4, #4
 8004bc6:	a901      	add	r1, sp, #4
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f001 fb65 	bl	8006298 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004bce:	a901      	add	r1, sp, #4
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f004 f81f 	bl	8008c14 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004bd6:	b92d      	cbnz	r5, 8004be4 <netif_set_ipaddr+0x34>
 8004bd8:	6065      	str	r5, [r4, #4]
}
 8004bda:	b002      	add	sp, #8
 8004bdc:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <netif_set_ipaddr+0x44>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	e7ea      	b.n	8004bba <netif_set_ipaddr+0xa>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f6      	beq.n	8004bda <netif_set_ipaddr+0x2a>
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff ffd5 	bl	8004b9c <netif_issue_reports.part.0>
}
 8004bf2:	e7f2      	b.n	8004bda <netif_set_ipaddr+0x2a>
 8004bf4:	0800f54c 	.word	0x0800f54c

08004bf8 <netif_set_addr>:
{
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8004c00:	b109      	cbz	r1, 8004c06 <netif_set_addr+0xe>
 8004c02:	680b      	ldr	r3, [r1, #0]
 8004c04:	b94b      	cbnz	r3, 8004c1a <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7ff ffd2 	bl	8004bb0 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004c0c:	b105      	cbz	r5, 8004c10 <netif_set_addr+0x18>
 8004c0e:	682d      	ldr	r5, [r5, #0]
 8004c10:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004c12:	b104      	cbz	r4, 8004c16 <netif_set_addr+0x1e>
 8004c14:	6824      	ldr	r4, [r4, #0]
 8004c16:	60f4      	str	r4, [r6, #12]
}
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004c1a:	b102      	cbz	r2, 8004c1e <netif_set_addr+0x26>
 8004c1c:	6815      	ldr	r5, [r2, #0]
 8004c1e:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004c20:	b104      	cbz	r4, 8004c24 <netif_set_addr+0x2c>
 8004c22:	6824      	ldr	r4, [r4, #0]
 8004c24:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8004c26:	4630      	mov	r0, r6
}
 8004c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8004c2c:	f7ff bfc0 	b.w	8004bb0 <netif_set_ipaddr>

08004c30 <netif_add>:
{
 8004c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004c36:	4604      	mov	r4, r0
 8004c38:	460f      	mov	r7, r1
 8004c3a:	4690      	mov	r8, r2
 8004c3c:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8004c3e:	b92e      	cbnz	r6, 8004c4c <netif_add+0x1c>
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <netif_add+0x68>)
 8004c42:	4916      	ldr	r1, [pc, #88]	; (8004c9c <netif_add+0x6c>)
 8004c44:	4816      	ldr	r0, [pc, #88]	; (8004ca0 <netif_add+0x70>)
 8004c46:	22fb      	movs	r2, #251	; 0xfb
 8004c48:	f007 fe14 	bl	800c874 <iprintf>
  netif->num = netif_num++;
 8004c4c:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8004c54:	9b08      	ldr	r3, [sp, #32]
 8004c56:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8004c58:	7813      	ldrb	r3, [r2, #0]
 8004c5a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004c5e:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8004c60:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8004c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8004c64:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8004c66:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004c68:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->netmask);
 8004c6a:	e9c4 5501 	strd	r5, r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8004c6e:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8004c70:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8004c74:	6225      	str	r5, [r4, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004c76:	464b      	mov	r3, r9
 8004c78:	4642      	mov	r2, r8
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	f7ff ffbc 	bl	8004bf8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8004c80:	4620      	mov	r0, r4
 8004c82:	47b0      	blx	r6
 8004c84:	b930      	cbnz	r0, 8004c94 <netif_add+0x64>
  netif->next = netif_list;
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <netif_add+0x78>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8004c8c:	601c      	str	r4, [r3, #0]
}
 8004c8e:	4620      	mov	r0, r4
 8004c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8004c94:	462c      	mov	r4, r5
 8004c96:	e7fa      	b.n	8004c8e <netif_add+0x5e>
 8004c98:	0800deac 	.word	0x0800deac
 8004c9c:	0800dedd 	.word	0x0800dedd
 8004ca0:	0800d741 	.word	0x0800d741
 8004ca4:	20003e30 	.word	0x20003e30
 8004ca8:	200076b4 	.word	0x200076b4

08004cac <netif_set_default>:
  netif_default = netif;
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <netif_set_default+0x8>)
 8004cae:	6018      	str	r0, [r3, #0]
}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200076b8 	.word	0x200076b8

08004cb8 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004cb8:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8004cbc:	07d1      	lsls	r1, r2, #31
 8004cbe:	d409      	bmi.n	8004cd4 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8004cc0:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004cc4:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8004cc6:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004cca:	d503      	bpl.n	8004cd4 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ccc:	6843      	ldr	r3, [r0, #4]
 8004cce:	b10b      	cbz	r3, 8004cd4 <netif_set_up+0x1c>
 8004cd0:	f7ff bf64 	b.w	8004b9c <netif_issue_reports.part.0>
}
 8004cd4:	4770      	bx	lr

08004cd6 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8004cd6:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004cda:	07d9      	lsls	r1, r3, #31
 8004cdc:	d507      	bpl.n	8004cee <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8004cde:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004ce2:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8004ce4:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004ce8:	d501      	bpl.n	8004cee <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8004cea:	f005 b97f 	b.w	8009fec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004cee:	4770      	bx	lr

08004cf0 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf* q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8004cf0:	b110      	cbz	r0, 8004cf8 <pbuf_skip_const+0x8>
 8004cf2:	8943      	ldrh	r3, [r0, #10]
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	d902      	bls.n	8004cfe <pbuf_skip_const+0xe>
    offset_left -= q->len;
    q = q->next;
  }
  if (out_offset != NULL) {
 8004cf8:	b102      	cbz	r2, 8004cfc <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 8004cfa:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8004cfc:	4770      	bx	lr
    offset_left -= q->len;
 8004cfe:	1ac9      	subs	r1, r1, r3
 8004d00:	b289      	uxth	r1, r1
    q = q->next;
 8004d02:	6800      	ldr	r0, [r0, #0]
 8004d04:	e7f4      	b.n	8004cf0 <pbuf_skip_const>
	...

08004d08 <pbuf_free_ooseq_callback>:
{
 8004d08:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004d0a:	f006 fb27 	bl	800b35c <sys_arch_protect>
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <pbuf_free_ooseq_callback+0x28>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	f006 fb2e 	bl	800b374 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <pbuf_free_ooseq_callback+0x2c>)
 8004d1a:	681c      	ldr	r4, [r3, #0]
 8004d1c:	b12c      	cbz	r4, 8004d2a <pbuf_free_ooseq_callback+0x22>
    if (NULL != pcb->ooseq) {
 8004d1e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004d20:	b120      	cbz	r0, 8004d2c <pbuf_free_ooseq_callback+0x24>
      tcp_segs_free(pcb->ooseq);
 8004d22:	f000 fcd1 	bl	80056c8 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	6723      	str	r3, [r4, #112]	; 0x70
}
 8004d2a:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d2c:	68e4      	ldr	r4, [r4, #12]
 8004d2e:	e7f5      	b.n	8004d1c <pbuf_free_ooseq_callback+0x14>
 8004d30:	200076bc 	.word	0x200076bc
 8004d34:	200076c4 	.word	0x200076c4

08004d38 <pbuf_header_impl>:
{
 8004d38:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	bb70      	cbnz	r0, 8004d9c <pbuf_header_impl+0x64>
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <pbuf_header_impl+0x88>)
 8004d40:	4920      	ldr	r1, [pc, #128]	; (8004dc4 <pbuf_header_impl+0x8c>)
 8004d42:	4821      	ldr	r0, [pc, #132]	; (8004dc8 <pbuf_header_impl+0x90>)
 8004d44:	f240 223f 	movw	r2, #575	; 0x23f
 8004d48:	f007 fd94 	bl	800c874 <iprintf>
  return 0;
 8004d4c:	2000      	movs	r0, #0
}
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8004d50:	461d      	mov	r5, r3
  type = p->type;
 8004d52:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 8004d54:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004d56:	b10e      	cbz	r6, 8004d5c <pbuf_header_impl+0x24>
 8004d58:	2e03      	cmp	r6, #3
 8004d5a:	d106      	bne.n	8004d6a <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004d5c:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004d5e:	f104 0210 	add.w	r2, r4, #16
 8004d62:	4290      	cmp	r0, r2
 8004d64:	d20a      	bcs.n	8004d7c <pbuf_header_impl+0x44>
      return 1;
 8004d66:	2001      	movs	r0, #1
 8004d68:	e7f1      	b.n	8004d4e <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004d6a:	3e01      	subs	r6, #1
 8004d6c:	2e01      	cmp	r6, #1
 8004d6e:	d810      	bhi.n	8004d92 <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004d70:	2900      	cmp	r1, #0
 8004d72:	da0b      	bge.n	8004d8c <pbuf_header_impl+0x54>
 8004d74:	8962      	ldrh	r2, [r4, #10]
 8004d76:	42aa      	cmp	r2, r5
 8004d78:	d3f5      	bcc.n	8004d66 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004d7a:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 8004d7c:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004d7e:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 8004d80:	441a      	add	r2, r3
 8004d82:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 8004d84:	8922      	ldrh	r2, [r4, #8]
 8004d86:	4413      	add	r3, r2
 8004d88:	8123      	strh	r3, [r4, #8]
 8004d8a:	e7df      	b.n	8004d4c <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d1f4      	bne.n	8004d7a <pbuf_header_impl+0x42>
 8004d90:	e7e9      	b.n	8004d66 <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <pbuf_header_impl+0x88>)
 8004d94:	490d      	ldr	r1, [pc, #52]	; (8004dcc <pbuf_header_impl+0x94>)
 8004d96:	f240 2277 	movw	r2, #631	; 0x277
 8004d9a:	e00c      	b.n	8004db6 <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d0d5      	beq.n	8004d4c <pbuf_header_impl+0x14>
 8004da0:	b28b      	uxth	r3, r1
  if (header_size_increment < 0) {
 8004da2:	dad5      	bge.n	8004d50 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 8004da4:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004da6:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8004da8:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004daa:	42a8      	cmp	r0, r5
 8004dac:	d2d1      	bcs.n	8004d52 <pbuf_header_impl+0x1a>
 8004dae:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <pbuf_header_impl+0x88>)
 8004db0:	4907      	ldr	r1, [pc, #28]	; (8004dd0 <pbuf_header_impl+0x98>)
 8004db2:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8004db6:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <pbuf_header_impl+0x90>)
 8004db8:	f007 fd5c 	bl	800c874 <iprintf>
 8004dbc:	e7d3      	b.n	8004d66 <pbuf_header_impl+0x2e>
 8004dbe:	bf00      	nop
 8004dc0:	0800e159 	.word	0x0800e159
 8004dc4:	0800e1c3 	.word	0x0800e1c3
 8004dc8:	0800d741 	.word	0x0800d741
 8004dcc:	0800e1a7 	.word	0x0800e1a7
 8004dd0:	0800e189 	.word	0x0800e189

08004dd4 <pbuf_pool_is_empty>:
{
 8004dd4:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 8004dd6:	4d0c      	ldr	r5, [pc, #48]	; (8004e08 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 8004dd8:	f006 fac0 	bl	800b35c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8004ddc:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8004dde:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8004de0:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8004de2:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8004de4:	f006 fac6 	bl	800b374 <sys_arch_unprotect>
  if (!queued) {
 8004de8:	b964      	cbnz	r4, 8004e04 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8004dea:	4622      	mov	r2, r4
 8004dec:	4621      	mov	r1, r4
 8004dee:	4807      	ldr	r0, [pc, #28]	; (8004e0c <pbuf_pool_is_empty+0x38>)
 8004df0:	f7fe fdbc 	bl	800396c <tcpip_callback_with_block>
 8004df4:	b130      	cbz	r0, 8004e04 <pbuf_pool_is_empty+0x30>
 8004df6:	f006 fab1 	bl	800b35c <sys_arch_protect>
 8004dfa:	702c      	strb	r4, [r5, #0]
}
 8004dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8004e00:	f006 bab8 	b.w	800b374 <sys_arch_unprotect>
}
 8004e04:	bd38      	pop	{r3, r4, r5, pc}
 8004e06:	bf00      	nop
 8004e08:	200076bc 	.word	0x200076bc
 8004e0c:	08004d09 	.word	0x08004d09

08004e10 <pbuf_alloced_custom>:
{
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8004e14:	2804      	cmp	r0, #4
 8004e16:	d81e      	bhi.n	8004e56 <pbuf_alloced_custom+0x46>
 8004e18:	e8df f000 	tbb	[pc, r0]
 8004e1c:	1b280326 	.word	0x1b280326
 8004e20:	1b          	.byte	0x1b
 8004e21:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004e22:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004e24:	3003      	adds	r0, #3
 8004e26:	f020 0403 	bic.w	r4, r0, #3
 8004e2a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8004e2e:	190e      	adds	r6, r1, r4
 8004e30:	4286      	cmp	r6, r0
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	d816      	bhi.n	8004e66 <pbuf_alloced_custom+0x56>
  p->pbuf.next = NULL;
 8004e38:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8004e3a:	b1cd      	cbz	r5, 8004e70 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004e3c:	442c      	add	r4, r5
 8004e3e:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004e40:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8004e42:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004e44:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004e46:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004e48:	8119      	strh	r1, [r3, #8]
 8004e4a:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8004e4c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004e4e:	4618      	mov	r0, r3
 8004e50:	e009      	b.n	8004e66 <pbuf_alloced_custom+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004e52:	2000      	movs	r0, #0
    break;
 8004e54:	e7e6      	b.n	8004e24 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8004e56:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <pbuf_alloced_custom+0x64>)
 8004e58:	4907      	ldr	r1, [pc, #28]	; (8004e78 <pbuf_alloced_custom+0x68>)
 8004e5a:	4808      	ldr	r0, [pc, #32]	; (8004e7c <pbuf_alloced_custom+0x6c>)
 8004e5c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8004e60:	f007 fd08 	bl	800c874 <iprintf>
    return NULL;
 8004e64:	2000      	movs	r0, #0
}
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004e68:	2036      	movs	r0, #54	; 0x36
 8004e6a:	e7db      	b.n	8004e24 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004e6c:	200e      	movs	r0, #14
 8004e6e:	e7d9      	b.n	8004e24 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8004e70:	605d      	str	r5, [r3, #4]
 8004e72:	e7e5      	b.n	8004e40 <pbuf_alloced_custom+0x30>
 8004e74:	0800e159 	.word	0x0800e159
 8004e78:	0800df9c 	.word	0x0800df9c
 8004e7c:	0800d741 	.word	0x0800d741

08004e80 <pbuf_header>:
   return pbuf_header_impl(p, header_size_increment, 0);
 8004e80:	2200      	movs	r2, #0
 8004e82:	f7ff bf59 	b.w	8004d38 <pbuf_header_impl>

08004e86 <pbuf_header_force>:
   return pbuf_header_impl(p, header_size_increment, 1);
 8004e86:	2201      	movs	r2, #1
 8004e88:	f7ff bf56 	b.w	8004d38 <pbuf_header_impl>

08004e8c <pbuf_free>:
{
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 8004e90:	4604      	mov	r4, r0
 8004e92:	b950      	cbnz	r0, 8004eaa <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <pbuf_free+0xb8>)
 8004e96:	492c      	ldr	r1, [pc, #176]	; (8004f48 <pbuf_free+0xbc>)
 8004e98:	482c      	ldr	r0, [pc, #176]	; (8004f4c <pbuf_free+0xc0>)
 8004e9a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004e9e:	f007 fce9 	bl	800c874 <iprintf>
    return 0;
 8004ea2:	4625      	mov	r5, r4
}
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8004eaa:	7b03      	ldrb	r3, [r0, #12]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d906      	bls.n	8004ebe <pbuf_free+0x32>
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <pbuf_free+0xb8>)
 8004eb2:	4927      	ldr	r1, [pc, #156]	; (8004f50 <pbuf_free+0xc4>)
 8004eb4:	4825      	ldr	r0, [pc, #148]	; (8004f4c <pbuf_free+0xc0>)
 8004eb6:	f240 22de 	movw	r2, #734	; 0x2de
 8004eba:	f007 fcdb 	bl	800c874 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004ebe:	4f21      	ldr	r7, [pc, #132]	; (8004f44 <pbuf_free+0xb8>)
 8004ec0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8004f58 <pbuf_free+0xcc>
 8004ec4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004f4c <pbuf_free+0xc0>
{
 8004ec8:	2500      	movs	r5, #0
    SYS_ARCH_PROTECT(old_level);
 8004eca:	f006 fa47 	bl	800b35c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004ece:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8004ed0:	4682      	mov	sl, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004ed2:	b933      	cbnz	r3, 8004ee2 <pbuf_free+0x56>
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004eda:	4649      	mov	r1, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	f007 fcc9 	bl	800c874 <iprintf>
    ref = --(p->ref);
 8004ee2:	89e6      	ldrh	r6, [r4, #14]
 8004ee4:	3e01      	subs	r6, #1
 8004ee6:	b2b6      	uxth	r6, r6
 8004ee8:	81e6      	strh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8004eea:	4650      	mov	r0, sl
 8004eec:	f006 fa42 	bl	800b374 <sys_arch_unprotect>
    if (ref == 0) {
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	d1d7      	bne.n	8004ea4 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004ef4:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8004ef6:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004ef8:	079b      	lsls	r3, r3, #30
 8004efa:	d511      	bpl.n	8004f20 <pbuf_free+0x94>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	b933      	cbnz	r3, 8004f0e <pbuf_free+0x82>
 8004f00:	463b      	mov	r3, r7
 8004f02:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004f06:	4913      	ldr	r1, [pc, #76]	; (8004f54 <pbuf_free+0xc8>)
 8004f08:	4640      	mov	r0, r8
 8004f0a:	f007 fcb3 	bl	800c874 <iprintf>
        pc->custom_free_function(p);
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	4620      	mov	r0, r4
 8004f12:	4798      	blx	r3
      count++;
 8004f14:	3501      	adds	r5, #1
 8004f16:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8004f18:	4634      	mov	r4, r6
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	d1d5      	bne.n	8004eca <pbuf_free+0x3e>
 8004f1e:	e7c1      	b.n	8004ea4 <pbuf_free+0x18>
      type = p->type;
 8004f20:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d104      	bne.n	8004f30 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF_POOL, p);
 8004f26:	4621      	mov	r1, r4
 8004f28:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8004f2a:	f7ff fe1d 	bl	8004b68 <memp_free>
 8004f2e:	e7f1      	b.n	8004f14 <pbuf_free+0x88>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004f30:	3b01      	subs	r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d802      	bhi.n	8004f3c <pbuf_free+0xb0>
          memp_free(MEMP_PBUF, p);
 8004f36:	4621      	mov	r1, r4
 8004f38:	200b      	movs	r0, #11
 8004f3a:	e7f6      	b.n	8004f2a <pbuf_free+0x9e>
          mem_free(p);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff fbb9 	bl	80046b4 <mem_free>
 8004f42:	e7e7      	b.n	8004f14 <pbuf_free+0x88>
 8004f44:	0800e159 	.word	0x0800e159
 8004f48:	0800e1c3 	.word	0x0800e1c3
 8004f4c:	0800d741 	.word	0x0800d741
 8004f50:	0800e10d 	.word	0x0800e10d
 8004f54:	0800e138 	.word	0x0800e138
 8004f58:	0800e122 	.word	0x0800e122

08004f5c <pbuf_alloc>:
{
 8004f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	460e      	mov	r6, r1
 8004f62:	4617      	mov	r7, r2
  switch (layer) {
 8004f64:	2804      	cmp	r0, #4
 8004f66:	d80e      	bhi.n	8004f86 <pbuf_alloc+0x2a>
 8004f68:	e8df f000 	tbb	[pc, r0]
 8004f6c:	0b170315 	.word	0x0b170315
 8004f70:	0b          	.byte	0x0b
 8004f71:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004f72:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8004f74:	2f03      	cmp	r7, #3
 8004f76:	f200 80ba 	bhi.w	80050ee <pbuf_alloc+0x192>
 8004f7a:	e8df f007 	tbb	[pc, r7]
 8004f7e:	ab90      	.short	0xab90
 8004f80:	10ab      	.short	0x10ab
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004f82:	2500      	movs	r5, #0
    break;
 8004f84:	e7f6      	b.n	8004f74 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004f86:	4b5c      	ldr	r3, [pc, #368]	; (80050f8 <pbuf_alloc+0x19c>)
 8004f88:	495c      	ldr	r1, [pc, #368]	; (80050fc <pbuf_alloc+0x1a0>)
 8004f8a:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004f8e:	485c      	ldr	r0, [pc, #368]	; (8005100 <pbuf_alloc+0x1a4>)
 8004f90:	f007 fc70 	bl	800c874 <iprintf>
 8004f94:	e04a      	b.n	800502c <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004f96:	2536      	movs	r5, #54	; 0x36
 8004f98:	e7ec      	b.n	8004f74 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004f9a:	250e      	movs	r5, #14
 8004f9c:	e7ea      	b.n	8004f74 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004f9e:	200c      	movs	r0, #12
 8004fa0:	f7ff fdc6 	bl	8004b30 <memp_malloc>
    if (p == NULL) {
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	b920      	cbnz	r0, 8004fb2 <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 8004fa8:	f7ff ff14 	bl	8004dd4 <pbuf_pool_is_empty>
}
 8004fac:	4620      	mov	r0, r4
 8004fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004fba:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004fbc:	3503      	adds	r5, #3
 8004fbe:	f025 0503 	bic.w	r5, r5, #3
 8004fc2:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 8004fc6:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004fc8:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004fcc:	bf28      	it	cs
 8004fce:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004fd6:	f500 7718 	add.w	r7, r0, #608	; 0x260
 8004fda:	442b      	add	r3, r5
 8004fdc:	429f      	cmp	r7, r3
    p->tot_len = length;
 8004fde:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004fe0:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004fe2:	d206      	bcs.n	8004ff2 <pbuf_alloc+0x96>
 8004fe4:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <pbuf_alloc+0x19c>)
 8004fe6:	4947      	ldr	r1, [pc, #284]	; (8005104 <pbuf_alloc+0x1a8>)
 8004fe8:	4845      	ldr	r0, [pc, #276]	; (8005100 <pbuf_alloc+0x1a4>)
 8004fea:	f44f 7298 	mov.w	r2, #304	; 0x130
 8004fee:	f007 fc41 	bl	800c874 <iprintf>
    p->ref = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8004ff6:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004ff8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80050f8 <pbuf_alloc+0x19c>
 8004ffc:	f8df a110 	ldr.w	sl, [pc, #272]	; 8005110 <pbuf_alloc+0x1b4>
 8005000:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005100 <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 8005004:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8005006:	46a3      	mov	fp, r4
 8005008:	2e00      	cmp	r6, #0
 800500a:	dc04      	bgt.n	8005016 <pbuf_alloc+0xba>
  p->ref = 1;
 800500c:	2301      	movs	r3, #1
 800500e:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	7363      	strb	r3, [r4, #13]
  return p;
 8005014:	e7ca      	b.n	8004fac <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005016:	200c      	movs	r0, #12
 8005018:	f7ff fd8a 	bl	8004b30 <memp_malloc>
 800501c:	2300      	movs	r3, #0
      if (q == NULL) {
 800501e:	4605      	mov	r5, r0
 8005020:	b930      	cbnz	r0, 8005030 <pbuf_alloc+0xd4>
        PBUF_POOL_IS_EMPTY();
 8005022:	f7ff fed7 	bl	8004dd4 <pbuf_pool_is_empty>
        pbuf_free(p);
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff30 	bl	8004e8c <pbuf_free>
    return NULL;
 800502c:	2400      	movs	r4, #0
 800502e:	e7bd      	b.n	8004fac <pbuf_alloc+0x50>
      q->flags = 0;
 8005030:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8005032:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005034:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8005038:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800503a:	429e      	cmp	r6, r3
      q->type = type;
 800503c:	7302      	strb	r2, [r0, #12]
      r->next = q;
 800503e:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005042:	d106      	bne.n	8005052 <pbuf_alloc+0xf6>
 8005044:	4643      	mov	r3, r8
 8005046:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800504a:	4651      	mov	r1, sl
 800504c:	4648      	mov	r0, r9
 800504e:	f007 fc11 	bl	800c874 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005052:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005054:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8005058:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800505a:	bf28      	it	cs
 800505c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005060:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8005062:	f105 0310 	add.w	r3, r5, #16
 8005066:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005068:	079b      	lsls	r3, r3, #30
 800506a:	d006      	beq.n	800507a <pbuf_alloc+0x11e>
 800506c:	4643      	mov	r3, r8
 800506e:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005072:	4925      	ldr	r1, [pc, #148]	; (8005108 <pbuf_alloc+0x1ac>)
 8005074:	4648      	mov	r0, r9
 8005076:	f007 fbfd 	bl	800c874 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800507a:	8962      	ldrh	r2, [r4, #10]
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	4413      	add	r3, r2
 8005080:	429f      	cmp	r7, r3
 8005082:	d206      	bcs.n	8005092 <pbuf_alloc+0x136>
 8005084:	4643      	mov	r3, r8
 8005086:	f240 1255 	movw	r2, #341	; 0x155
 800508a:	491e      	ldr	r1, [pc, #120]	; (8005104 <pbuf_alloc+0x1a8>)
 800508c:	4648      	mov	r0, r9
 800508e:	f007 fbf1 	bl	800c874 <iprintf>
      q->ref = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8005096:	896b      	ldrh	r3, [r5, #10]
 8005098:	46ab      	mov	fp, r5
 800509a:	1af6      	subs	r6, r6, r3
 800509c:	e7b4      	b.n	8005008 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800509e:	f105 0013 	add.w	r0, r5, #19
 80050a2:	1cf3      	adds	r3, r6, #3
 80050a4:	f023 0303 	bic.w	r3, r3, #3
 80050a8:	f020 0003 	bic.w	r0, r0, #3
 80050ac:	4418      	add	r0, r3
 80050ae:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80050b0:	4298      	cmp	r0, r3
 80050b2:	d3bb      	bcc.n	800502c <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80050b4:	f7ff fc42 	bl	800493c <mem_malloc>
    if (p == NULL) {
 80050b8:	4604      	mov	r4, r0
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d0b6      	beq.n	800502c <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80050be:	4405      	add	r5, r0
 80050c0:	3513      	adds	r5, #19
    p->next = NULL;
 80050c2:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80050c4:	f025 0503 	bic.w	r5, r5, #3
 80050c8:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 80050ca:	8106      	strh	r6, [r0, #8]
 80050cc:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80050ce:	6003      	str	r3, [r0, #0]
    p->type = type;
 80050d0:	7303      	strb	r3, [r0, #12]
 80050d2:	e79b      	b.n	800500c <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80050d4:	200b      	movs	r0, #11
 80050d6:	f7ff fd2b 	bl	8004b30 <memp_malloc>
    if (p == NULL) {
 80050da:	4604      	mov	r4, r0
 80050dc:	2800      	cmp	r0, #0
 80050de:	d0a5      	beq.n	800502c <pbuf_alloc+0xd0>
    p->payload = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80050e4:	8106      	strh	r6, [r0, #8]
 80050e6:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80050e8:	6003      	str	r3, [r0, #0]
    p->type = type;
 80050ea:	7307      	strb	r7, [r0, #12]
    break;
 80050ec:	e78e      	b.n	800500c <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80050ee:	4b02      	ldr	r3, [pc, #8]	; (80050f8 <pbuf_alloc+0x19c>)
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <pbuf_alloc+0x1b0>)
 80050f2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80050f6:	e74a      	b.n	8004f8e <pbuf_alloc+0x32>
 80050f8:	0800e159 	.word	0x0800e159
 80050fc:	0800def4 	.word	0x0800def4
 8005100:	0800d741 	.word	0x0800d741
 8005104:	0800df0f 	.word	0x0800df0f
 8005108:	0800df54 	.word	0x0800df54
 800510c:	0800df81 	.word	0x0800df81
 8005110:	0800df40 	.word	0x0800df40

08005114 <pbuf_realloc>:
{
 8005114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005118:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800511a:	4604      	mov	r4, r0
 800511c:	b930      	cbnz	r0, 800512c <pbuf_realloc+0x18>
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <pbuf_realloc+0xc4>)
 8005120:	492e      	ldr	r1, [pc, #184]	; (80051dc <pbuf_realloc+0xc8>)
 8005122:	482f      	ldr	r0, [pc, #188]	; (80051e0 <pbuf_realloc+0xcc>)
 8005124:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005128:	f007 fba4 	bl	800c874 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800512c:	7b23      	ldrb	r3, [r4, #12]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d906      	bls.n	8005140 <pbuf_realloc+0x2c>
 8005132:	4b29      	ldr	r3, [pc, #164]	; (80051d8 <pbuf_realloc+0xc4>)
 8005134:	492b      	ldr	r1, [pc, #172]	; (80051e4 <pbuf_realloc+0xd0>)
 8005136:	482a      	ldr	r0, [pc, #168]	; (80051e0 <pbuf_realloc+0xcc>)
 8005138:	f240 12f7 	movw	r2, #503	; 0x1f7
 800513c:	f007 fb9a 	bl	800c874 <iprintf>
  if (new_len >= p->tot_len) {
 8005140:	8926      	ldrh	r6, [r4, #8]
 8005142:	42ae      	cmp	r6, r5
 8005144:	d945      	bls.n	80051d2 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005146:	4f24      	ldr	r7, [pc, #144]	; (80051d8 <pbuf_realloc+0xc4>)
 8005148:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80051f0 <pbuf_realloc+0xdc>
 800514c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80051e0 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8005150:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8005152:	8963      	ldrh	r3, [r4, #10]
 8005154:	42ab      	cmp	r3, r5
 8005156:	d319      	bcc.n	800518c <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005158:	7b22      	ldrb	r2, [r4, #12]
 800515a:	2a00      	cmp	r2, #0
 800515c:	d131      	bne.n	80051c2 <pbuf_realloc+0xae>
 800515e:	42ab      	cmp	r3, r5
 8005160:	d02f      	beq.n	80051c2 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005162:	7b63      	ldrb	r3, [r4, #13]
 8005164:	079b      	lsls	r3, r3, #30
 8005166:	d42c      	bmi.n	80051c2 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	1b09      	subs	r1, r1, r4
 800516c:	4429      	add	r1, r5
 800516e:	4620      	mov	r0, r4
 8005170:	b289      	uxth	r1, r1
 8005172:	f7ff fb57 	bl	8004824 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005176:	4604      	mov	r4, r0
 8005178:	bb18      	cbnz	r0, 80051c2 <pbuf_realloc+0xae>
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <pbuf_realloc+0xc4>)
 800517c:	491a      	ldr	r1, [pc, #104]	; (80051e8 <pbuf_realloc+0xd4>)
 800517e:	4818      	ldr	r0, [pc, #96]	; (80051e0 <pbuf_realloc+0xcc>)
 8005180:	f240 221d 	movw	r2, #541	; 0x21d
 8005184:	f007 fb76 	bl	800c874 <iprintf>
  q->len = rem_len;
 8005188:	8164      	strh	r4, [r4, #10]
 800518a:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 800518c:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800518e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005192:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8005194:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005196:	dd06      	ble.n	80051a6 <pbuf_realloc+0x92>
 8005198:	463b      	mov	r3, r7
 800519a:	f240 220b 	movw	r2, #523	; 0x20b
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	f007 fb67 	bl	800c874 <iprintf>
    q->tot_len += (u16_t)grow;
 80051a6:	8923      	ldrh	r3, [r4, #8]
 80051a8:	4433      	add	r3, r6
 80051aa:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80051ac:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d1cf      	bne.n	8005152 <pbuf_realloc+0x3e>
 80051b2:	463b      	mov	r3, r7
 80051b4:	f240 220f 	movw	r2, #527	; 0x20f
 80051b8:	490c      	ldr	r1, [pc, #48]	; (80051ec <pbuf_realloc+0xd8>)
 80051ba:	4640      	mov	r0, r8
 80051bc:	f007 fb5a 	bl	800c874 <iprintf>
 80051c0:	e7c7      	b.n	8005152 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80051c2:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80051c4:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80051c6:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80051c8:	b108      	cbz	r0, 80051ce <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80051ca:	f7ff fe5f 	bl	8004e8c <pbuf_free>
  q->next = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	6023      	str	r3, [r4, #0]
}
 80051d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d6:	bf00      	nop
 80051d8:	0800e159 	.word	0x0800e159
 80051dc:	0800e1b5 	.word	0x0800e1b5
 80051e0:	0800d741 	.word	0x0800d741
 80051e4:	0800e1cd 	.word	0x0800e1cd
 80051e8:	0800e211 	.word	0x0800e211
 80051ec:	0800e1f9 	.word	0x0800e1f9
 80051f0:	0800e1e8 	.word	0x0800e1e8

080051f4 <pbuf_clen>:
{
 80051f4:	4603      	mov	r3, r0
  while (p != NULL) {
 80051f6:	2200      	movs	r2, #0
 80051f8:	b290      	uxth	r0, r2
 80051fa:	3201      	adds	r2, #1
 80051fc:	b903      	cbnz	r3, 8005200 <pbuf_clen+0xc>
}
 80051fe:	4770      	bx	lr
    p = p->next;
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	e7f9      	b.n	80051f8 <pbuf_clen+0x4>

08005204 <pbuf_ref>:
{
 8005204:	b510      	push	{r4, lr}
  if (p != NULL) {
 8005206:	4604      	mov	r4, r0
 8005208:	b188      	cbz	r0, 800522e <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 800520a:	f006 f8a7 	bl	800b35c <sys_arch_protect>
 800520e:	89e3      	ldrh	r3, [r4, #14]
 8005210:	3301      	adds	r3, #1
 8005212:	81e3      	strh	r3, [r4, #14]
 8005214:	f006 f8ae 	bl	800b374 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005218:	89e3      	ldrh	r3, [r4, #14]
 800521a:	b943      	cbnz	r3, 800522e <pbuf_ref+0x2a>
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <pbuf_ref+0x2c>)
 800521e:	4905      	ldr	r1, [pc, #20]	; (8005234 <pbuf_ref+0x30>)
 8005220:	4805      	ldr	r0, [pc, #20]	; (8005238 <pbuf_ref+0x34>)
 8005222:	f240 3239 	movw	r2, #825	; 0x339
}
 8005226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800522a:	f007 bb23 	b.w	800c874 <iprintf>
}
 800522e:	bd10      	pop	{r4, pc}
 8005230:	0800e159 	.word	0x0800e159
 8005234:	0800e22d 	.word	0x0800e22d
 8005238:	0800d741 	.word	0x0800d741

0800523c <pbuf_cat>:
{
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005240:	4604      	mov	r4, r0
 8005242:	b100      	cbz	r0, 8005246 <pbuf_cat+0xa>
 8005244:	b961      	cbnz	r1, 8005260 <pbuf_cat+0x24>
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <pbuf_cat+0x60>)
 8005248:	4915      	ldr	r1, [pc, #84]	; (80052a0 <pbuf_cat+0x64>)
 800524a:	4816      	ldr	r0, [pc, #88]	; (80052a4 <pbuf_cat+0x68>)
 800524c:	f240 324d 	movw	r2, #845	; 0x34d
}
 8005250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005254:	f007 bb0e 	b.w	800c874 <iprintf>
    p->tot_len += t->tot_len;
 8005258:	8929      	ldrh	r1, [r5, #8]
 800525a:	440b      	add	r3, r1
 800525c:	8123      	strh	r3, [r4, #8]
 800525e:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	8923      	ldrh	r3, [r4, #8]
 8005264:	2a00      	cmp	r2, #0
 8005266:	d1f7      	bne.n	8005258 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005268:	8962      	ldrh	r2, [r4, #10]
 800526a:	429a      	cmp	r2, r3
 800526c:	d006      	beq.n	800527c <pbuf_cat+0x40>
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <pbuf_cat+0x60>)
 8005270:	490d      	ldr	r1, [pc, #52]	; (80052a8 <pbuf_cat+0x6c>)
 8005272:	480c      	ldr	r0, [pc, #48]	; (80052a4 <pbuf_cat+0x68>)
 8005274:	f240 3255 	movw	r2, #853	; 0x355
 8005278:	f007 fafc 	bl	800c874 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	b133      	cbz	r3, 800528e <pbuf_cat+0x52>
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <pbuf_cat+0x60>)
 8005282:	490a      	ldr	r1, [pc, #40]	; (80052ac <pbuf_cat+0x70>)
 8005284:	4807      	ldr	r0, [pc, #28]	; (80052a4 <pbuf_cat+0x68>)
 8005286:	f240 3256 	movw	r2, #854	; 0x356
 800528a:	f007 faf3 	bl	800c874 <iprintf>
  p->tot_len += t->tot_len;
 800528e:	892a      	ldrh	r2, [r5, #8]
 8005290:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8005292:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8005294:	4413      	add	r3, r2
 8005296:	8123      	strh	r3, [r4, #8]
}
 8005298:	bd70      	pop	{r4, r5, r6, pc}
 800529a:	bf00      	nop
 800529c:	0800e159 	.word	0x0800e159
 80052a0:	0800dfc0 	.word	0x0800dfc0
 80052a4:	0800d741 	.word	0x0800d741
 80052a8:	0800dff5 	.word	0x0800dff5
 80052ac:	0800e022 	.word	0x0800e022

080052b0 <pbuf_chain>:
{
 80052b0:	b510      	push	{r4, lr}
 80052b2:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80052b4:	f7ff ffc2 	bl	800523c <pbuf_cat>
  pbuf_ref(t);
 80052b8:	4620      	mov	r0, r4
}
 80052ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 80052be:	f7ff bfa1 	b.w	8005204 <pbuf_ref>
	...

080052c4 <pbuf_copy>:
{
 80052c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80052ca:	4605      	mov	r5, r0
 80052cc:	b120      	cbz	r0, 80052d8 <pbuf_copy+0x14>
 80052ce:	b119      	cbz	r1, 80052d8 <pbuf_copy+0x14>
 80052d0:	8902      	ldrh	r2, [r0, #8]
 80052d2:	890b      	ldrh	r3, [r1, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d20a      	bcs.n	80052ee <pbuf_copy+0x2a>
 80052d8:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <pbuf_copy+0xf0>)
 80052da:	4937      	ldr	r1, [pc, #220]	; (80053b8 <pbuf_copy+0xf4>)
 80052dc:	f240 32bd 	movw	r2, #957	; 0x3bd
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80052e0:	4836      	ldr	r0, [pc, #216]	; (80053bc <pbuf_copy+0xf8>)
 80052e2:	f007 fac7 	bl	800c874 <iprintf>
 80052e6:	f06f 000f 	mvn.w	r0, #15
}
 80052ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 80052ee:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80052f2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80053b4 <pbuf_copy+0xf0>
 80052f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053cc <pbuf_copy+0x108>
 80052fa:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80053bc <pbuf_copy+0xf8>
  u16_t offset_to=0, offset_from=0, len;
 80052fe:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005300:	896e      	ldrh	r6, [r5, #10]
 8005302:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005304:	6868      	ldr	r0, [r5, #4]
 8005306:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005308:	1bf6      	subs	r6, r6, r7
 800530a:	eba3 030b 	sub.w	r3, r3, fp
 800530e:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8005310:	bfac      	ite	ge
 8005312:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8005314:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005316:	4632      	mov	r2, r6
 8005318:	4459      	add	r1, fp
 800531a:	4438      	add	r0, r7
 800531c:	f007 f9e1 	bl	800c6e2 <memcpy>
    offset_to += len;
 8005320:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005322:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8005324:	b2bf      	uxth	r7, r7
    offset_from += len;
 8005326:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005328:	42bb      	cmp	r3, r7
    offset_from += len;
 800532a:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800532e:	d206      	bcs.n	800533e <pbuf_copy+0x7a>
 8005330:	4643      	mov	r3, r8
 8005332:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005336:	4651      	mov	r1, sl
 8005338:	4648      	mov	r0, r9
 800533a:	f007 fa9b 	bl	800c874 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800533e:	8963      	ldrh	r3, [r4, #10]
 8005340:	455b      	cmp	r3, fp
 8005342:	d206      	bcs.n	8005352 <pbuf_copy+0x8e>
 8005344:	4643      	mov	r3, r8
 8005346:	f240 32ce 	movw	r2, #974	; 0x3ce
 800534a:	491d      	ldr	r1, [pc, #116]	; (80053c0 <pbuf_copy+0xfc>)
 800534c:	4648      	mov	r0, r9
 800534e:	f007 fa91 	bl	800c874 <iprintf>
    if (offset_from >= p_from->len) {
 8005352:	8963      	ldrh	r3, [r4, #10]
 8005354:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8005356:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8005358:	bf9c      	itt	ls
 800535a:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800535c:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8005360:	42bb      	cmp	r3, r7
 8005362:	d108      	bne.n	8005376 <pbuf_copy+0xb2>
      p_to = p_to->next;
 8005364:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005366:	b92d      	cbnz	r5, 8005374 <pbuf_copy+0xb0>
 8005368:	b314      	cbz	r4, 80053b0 <pbuf_copy+0xec>
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <pbuf_copy+0xf0>)
 800536c:	4915      	ldr	r1, [pc, #84]	; (80053c4 <pbuf_copy+0x100>)
 800536e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005372:	e7b5      	b.n	80052e0 <pbuf_copy+0x1c>
      offset_to = 0;
 8005374:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005376:	b17c      	cbz	r4, 8005398 <pbuf_copy+0xd4>
 8005378:	8962      	ldrh	r2, [r4, #10]
 800537a:	8923      	ldrh	r3, [r4, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d10b      	bne.n	8005398 <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	b14b      	cbz	r3, 8005398 <pbuf_copy+0xd4>
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <pbuf_copy+0xf0>)
 8005386:	f240 32de 	movw	r2, #990	; 0x3de
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800538a:	490f      	ldr	r1, [pc, #60]	; (80053c8 <pbuf_copy+0x104>)
 800538c:	480b      	ldr	r0, [pc, #44]	; (80053bc <pbuf_copy+0xf8>)
 800538e:	f007 fa71 	bl	800c874 <iprintf>
 8005392:	f06f 0005 	mvn.w	r0, #5
 8005396:	e7a8      	b.n	80052ea <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005398:	896a      	ldrh	r2, [r5, #10]
 800539a:	892b      	ldrh	r3, [r5, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	d105      	bne.n	80053ac <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b11b      	cbz	r3, 80053ac <pbuf_copy+0xe8>
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <pbuf_copy+0xf0>)
 80053a6:	f240 32e3 	movw	r2, #995	; 0x3e3
 80053aa:	e7ee      	b.n	800538a <pbuf_copy+0xc6>
  } while (p_from);
 80053ac:	2c00      	cmp	r4, #0
 80053ae:	d1a7      	bne.n	8005300 <pbuf_copy+0x3c>
  return ERR_OK;
 80053b0:	4620      	mov	r0, r4
 80053b2:	e79a      	b.n	80052ea <pbuf_copy+0x26>
 80053b4:	0800e159 	.word	0x0800e159
 80053b8:	0800e032 	.word	0x0800e032
 80053bc:	0800d741 	.word	0x0800d741
 80053c0:	0800e079 	.word	0x0800e079
 80053c4:	0800e094 	.word	0x0800e094
 80053c8:	0800e0a1 	.word	0x0800e0a1
 80053cc:	0800e062 	.word	0x0800e062

080053d0 <pbuf_copy_partial>:
{
 80053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	460f      	mov	r7, r1
 80053d6:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80053d8:	4606      	mov	r6, r0
 80053da:	b950      	cbnz	r0, 80053f2 <pbuf_copy_partial+0x22>
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <pbuf_copy_partial+0x7c>)
 80053de:	491c      	ldr	r1, [pc, #112]	; (8005450 <pbuf_copy_partial+0x80>)
 80053e0:	481c      	ldr	r0, [pc, #112]	; (8005454 <pbuf_copy_partial+0x84>)
 80053e2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80053e6:	f007 fa45 	bl	800c874 <iprintf>
 80053ea:	4635      	mov	r5, r6
}
 80053ec:	4628      	mov	r0, r5
 80053ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80053f2:	bb41      	cbnz	r1, 8005446 <pbuf_copy_partial+0x76>
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <pbuf_copy_partial+0x7c>)
 80053f6:	4918      	ldr	r1, [pc, #96]	; (8005458 <pbuf_copy_partial+0x88>)
 80053f8:	4816      	ldr	r0, [pc, #88]	; (8005454 <pbuf_copy_partial+0x84>)
 80053fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80053fe:	f007 fa39 	bl	800c874 <iprintf>
 8005402:	463d      	mov	r5, r7
 8005404:	e7f2      	b.n	80053ec <pbuf_copy_partial+0x1c>
 8005406:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8005408:	b153      	cbz	r3, 8005420 <pbuf_copy_partial+0x50>
 800540a:	4293      	cmp	r3, r2
 800540c:	d308      	bcc.n	8005420 <pbuf_copy_partial+0x50>
      offset -= p->len;
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005412:	6836      	ldr	r6, [r6, #0]
 8005414:	f1b8 0f00 	cmp.w	r8, #0
 8005418:	d0e8      	beq.n	80053ec <pbuf_copy_partial+0x1c>
 800541a:	2e00      	cmp	r6, #0
 800541c:	d1f3      	bne.n	8005406 <pbuf_copy_partial+0x36>
 800541e:	e7e5      	b.n	80053ec <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	b294      	uxth	r4, r2
 8005424:	4544      	cmp	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005426:	6871      	ldr	r1, [r6, #4]
 8005428:	bf28      	it	cs
 800542a:	4644      	movcs	r4, r8
 800542c:	4622      	mov	r2, r4
 800542e:	4419      	add	r1, r3
 8005430:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8005432:	4425      	add	r5, r4
      len -= buf_copy_len;
 8005434:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005438:	f007 f953 	bl	800c6e2 <memcpy>
      copied_total += buf_copy_len;
 800543c:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 800543e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	e7e5      	b.n	8005412 <pbuf_copy_partial+0x42>
  left = 0;
 8005446:	2500      	movs	r5, #0
 8005448:	e7e4      	b.n	8005414 <pbuf_copy_partial+0x44>
 800544a:	bf00      	nop
 800544c:	0800e159 	.word	0x0800e159
 8005450:	0800e0cb 	.word	0x0800e0cb
 8005454:	0800d741 	.word	0x0800d741
 8005458:	0800e0ea 	.word	0x0800e0ea

0800545c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
 800545c:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
 800545e:	f10d 0206 	add.w	r2, sp, #6
 8005462:	f7ff fc45 	bl	8004cf0 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8005466:	b148      	cbz	r0, 800547c <pbuf_try_get_at+0x20>
 8005468:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800546c:	8942      	ldrh	r2, [r0, #10]
 800546e:	429a      	cmp	r2, r3
 8005470:	d904      	bls.n	800547c <pbuf_try_get_at+0x20>
    return ((u8_t*)q->payload)[q_idx];
 8005472:	6842      	ldr	r2, [r0, #4]
 8005474:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 8005476:	b003      	add	sp, #12
 8005478:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	e7f9      	b.n	8005476 <pbuf_try_get_at+0x1a>

08005482 <pbuf_get_at>:
{
 8005482:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 8005484:	f7ff ffea 	bl	800545c <pbuf_try_get_at>
 8005488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800548c:	b2c0      	uxtb	r0, r0
 800548e:	bd08      	pop	{r3, pc}

08005490 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005490:	4911      	ldr	r1, [pc, #68]	; (80054d8 <tcp_new_port+0x48>)
 8005492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005494:	880a      	ldrh	r2, [r1, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005496:	4f11      	ldr	r7, [pc, #68]	; (80054dc <tcp_new_port+0x4c>)
{
 8005498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800549c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80054a0:	42b2      	cmp	r2, r6
 80054a2:	bf1a      	itte	ne
 80054a4:	1c50      	addne	r0, r2, #1
 80054a6:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80054a8:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 80054ac:	2400      	movs	r4, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80054ae:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 80054b2:	6815      	ldr	r5, [r2, #0]
 80054b4:	b925      	cbnz	r5, 80054c0 <tcp_new_port+0x30>
 80054b6:	3401      	adds	r4, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80054b8:	2c04      	cmp	r4, #4
 80054ba:	d1f8      	bne.n	80054ae <tcp_new_port+0x1e>
 80054bc:	8008      	strh	r0, [r1, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80054be:	e008      	b.n	80054d2 <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 80054c0:	8aea      	ldrh	r2, [r5, #22]
 80054c2:	4282      	cmp	r2, r0
 80054c4:	d106      	bne.n	80054d4 <tcp_new_port+0x44>
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e8      	bne.n	80054a0 <tcp_new_port+0x10>
 80054ce:	8008      	strh	r0, [r1, #0]
          return 0;
 80054d0:	4618      	mov	r0, r3
}
 80054d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80054d4:	68ed      	ldr	r5, [r5, #12]
 80054d6:	e7ed      	b.n	80054b4 <tcp_new_port+0x24>
 80054d8:	2000000c 	.word	0x2000000c
 80054dc:	0800e350 	.word	0x0800e350

080054e0 <tcp_close_shutdown_fin>:
{
 80054e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80054e2:	4604      	mov	r4, r0
 80054e4:	b930      	cbnz	r0, 80054f4 <tcp_close_shutdown_fin+0x14>
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <tcp_close_shutdown_fin+0x54>)
 80054e8:	4913      	ldr	r1, [pc, #76]	; (8005538 <tcp_close_shutdown_fin+0x58>)
 80054ea:	4814      	ldr	r0, [pc, #80]	; (800553c <tcp_close_shutdown_fin+0x5c>)
 80054ec:	f240 124d 	movw	r2, #333	; 0x14d
 80054f0:	f007 f9c0 	bl	800c874 <iprintf>
  switch (pcb->state) {
 80054f4:	7d23      	ldrb	r3, [r4, #20]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d003      	beq.n	8005502 <tcp_close_shutdown_fin+0x22>
 80054fa:	2b07      	cmp	r3, #7
 80054fc:	d00c      	beq.n	8005518 <tcp_close_shutdown_fin+0x38>
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d108      	bne.n	8005514 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8005502:	4620      	mov	r0, r4
 8005504:	f002 fd72 	bl	8007fec <tcp_send_fin>
    if (err == ERR_OK) {
 8005508:	b960      	cbnz	r0, 8005524 <tcp_close_shutdown_fin+0x44>
      pcb->state = FIN_WAIT_1;
 800550a:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 800550c:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800550e:	4620      	mov	r0, r4
 8005510:	f002 fdc4 	bl	800809c <tcp_output>
    return ERR_OK;
 8005514:	2000      	movs	r0, #0
}
 8005516:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8005518:	4620      	mov	r0, r4
 800551a:	f002 fd67 	bl	8007fec <tcp_send_fin>
    if (err == ERR_OK) {
 800551e:	b908      	cbnz	r0, 8005524 <tcp_close_shutdown_fin+0x44>
      pcb->state = LAST_ACK;
 8005520:	2309      	movs	r3, #9
 8005522:	e7f3      	b.n	800550c <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d1f6      	bne.n	8005516 <tcp_close_shutdown_fin+0x36>
    pcb->flags |= TF_CLOSEPEND;
 8005528:	7ea3      	ldrb	r3, [r4, #26]
 800552a:	f043 0308 	orr.w	r3, r3, #8
 800552e:	76a3      	strb	r3, [r4, #26]
 8005530:	e7f0      	b.n	8005514 <tcp_close_shutdown_fin+0x34>
 8005532:	bf00      	nop
 8005534:	0800e2be 	.word	0x0800e2be
 8005538:	0800e2ed 	.word	0x0800e2ed
 800553c:	0800d741 	.word	0x0800d741

08005540 <tcp_init>:
}
 8005540:	4770      	bx	lr
	...

08005544 <tcp_bind>:
{
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8005546:	4d1e      	ldr	r5, [pc, #120]	; (80055c0 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005548:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800554a:	2900      	cmp	r1, #0
 800554c:	bf18      	it	ne
 800554e:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005550:	b140      	cbz	r0, 8005564 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005552:	7d03      	ldrb	r3, [r0, #20]
 8005554:	b14b      	cbz	r3, 800556a <tcp_bind+0x26>
 8005556:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <tcp_bind+0x80>)
 8005558:	491b      	ldr	r1, [pc, #108]	; (80055c8 <tcp_bind+0x84>)
 800555a:	481c      	ldr	r0, [pc, #112]	; (80055cc <tcp_bind+0x88>)
 800555c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8005560:	f007 f988 	bl	800c874 <iprintf>
    return ERR_VAL;
 8005564:	f06f 0005 	mvn.w	r0, #5
 8005568:	e01a      	b.n	80055a0 <tcp_bind+0x5c>
  if (port == 0) {
 800556a:	b932      	cbnz	r2, 800557a <tcp_bind+0x36>
    port = tcp_new_port();
 800556c:	f7ff ff90 	bl	8005490 <tcp_new_port>
    if (port == 0) {
 8005570:	4602      	mov	r2, r0
 8005572:	b950      	cbnz	r0, 800558a <tcp_bind+0x46>
      return ERR_BUF;
 8005574:	f06f 0001 	mvn.w	r0, #1
 8005578:	e012      	b.n	80055a0 <tcp_bind+0x5c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800557a:	4f15      	ldr	r7, [pc, #84]	; (80055d0 <tcp_bind+0x8c>)
 800557c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8005580:	6808      	ldr	r0, [r1, #0]
 8005582:	b970      	cbnz	r0, 80055a2 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8005584:	3301      	adds	r3, #1
 8005586:	2b04      	cmp	r3, #4
 8005588:	d1f8      	bne.n	800557c <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	b103      	cbz	r3, 8005590 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800558e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <tcp_bind+0x90>)
  pcb->local_port = port;
 8005592:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	60e2      	str	r2, [r4, #12]
 8005598:	601c      	str	r4, [r3, #0]
 800559a:	f003 f897 	bl	80086cc <tcp_timer_needed>
  return ERR_OK;
 800559e:	2000      	movs	r0, #0
}
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 80055a2:	8ac1      	ldrh	r1, [r0, #22]
 80055a4:	4291      	cmp	r1, r2
 80055a6:	d105      	bne.n	80055b4 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 80055a8:	6806      	ldr	r6, [r0, #0]
 80055aa:	b12e      	cbz	r6, 80055b8 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 80055ac:	6829      	ldr	r1, [r5, #0]
 80055ae:	b119      	cbz	r1, 80055b8 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80055b0:	428e      	cmp	r6, r1
 80055b2:	d001      	beq.n	80055b8 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80055b4:	68c0      	ldr	r0, [r0, #12]
 80055b6:	e7e4      	b.n	8005582 <tcp_bind+0x3e>
              return ERR_USE;
 80055b8:	f06f 0007 	mvn.w	r0, #7
 80055bc:	e7f0      	b.n	80055a0 <tcp_bind+0x5c>
 80055be:	bf00      	nop
 80055c0:	0800f54c 	.word	0x0800f54c
 80055c4:	0800e2be 	.word	0x0800e2be
 80055c8:	0800e27d 	.word	0x0800e27d
 80055cc:	0800d741 	.word	0x0800d741
 80055d0:	0800e350 	.word	0x0800e350
 80055d4:	200076d0 	.word	0x200076d0

080055d8 <tcp_update_rcv_ann_wnd>:
{
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80055dc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80055de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80055e0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80055e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055e4:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80055e6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80055ea:	4428      	add	r0, r5
 80055ec:	bf94      	ite	ls
 80055ee:	1a82      	subls	r2, r0, r2
 80055f0:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	db01      	blt.n	80055fc <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80055f8:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80055fc:	1aea      	subs	r2, r5, r3
 80055fe:	2a00      	cmp	r2, #0
 8005600:	dd02      	ble.n	8005608 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8005602:	2000      	movs	r0, #0
 8005604:	8560      	strh	r0, [r4, #42]	; 0x2a
 8005606:	e7f8      	b.n	80055fa <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005608:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800560a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800560e:	d306      	bcc.n	800561e <tcp_update_rcv_ann_wnd+0x46>
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <tcp_update_rcv_ann_wnd+0x4c>)
 8005612:	4905      	ldr	r1, [pc, #20]	; (8005628 <tcp_update_rcv_ann_wnd+0x50>)
 8005614:	4805      	ldr	r0, [pc, #20]	; (800562c <tcp_update_rcv_ann_wnd+0x54>)
 8005616:	f44f 7242 	mov.w	r2, #776	; 0x308
 800561a:	f007 f92b 	bl	800c874 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800561e:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8005620:	2000      	movs	r0, #0
 8005622:	e7ea      	b.n	80055fa <tcp_update_rcv_ann_wnd+0x22>
 8005624:	0800e2be 	.word	0x0800e2be
 8005628:	0800e5b4 	.word	0x0800e5b4
 800562c:	0800d741 	.word	0x0800d741

08005630 <tcp_recved>:
{
 8005630:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005632:	7d03      	ldrb	r3, [r0, #20]
 8005634:	2b01      	cmp	r3, #1
{
 8005636:	4604      	mov	r4, r0
 8005638:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800563a:	d106      	bne.n	800564a <tcp_recved+0x1a>
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <tcp_recved+0x6c>)
 800563e:	4918      	ldr	r1, [pc, #96]	; (80056a0 <tcp_recved+0x70>)
 8005640:	4818      	ldr	r0, [pc, #96]	; (80056a4 <tcp_recved+0x74>)
 8005642:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005646:	f007 f915 	bl	800c874 <iprintf>
  pcb->rcv_wnd += len;
 800564a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800564c:	4429      	add	r1, r5
 800564e:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005650:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8005654:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005656:	d911      	bls.n	800567c <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005658:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800565c:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ffba 	bl	80055d8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005664:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8005668:	db17      	blt.n	800569a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800566a:	7ea3      	ldrb	r3, [r4, #26]
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005672:	4620      	mov	r0, r4
}
 8005674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8005678:	f002 bd10 	b.w	800809c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 800567c:	2900      	cmp	r1, #0
 800567e:	d1ee      	bne.n	800565e <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005680:	7d23      	ldrb	r3, [r4, #20]
 8005682:	2b07      	cmp	r3, #7
 8005684:	d0e8      	beq.n	8005658 <tcp_recved+0x28>
 8005686:	2b09      	cmp	r3, #9
 8005688:	d0e6      	beq.n	8005658 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <tcp_recved+0x6c>)
 800568c:	4906      	ldr	r1, [pc, #24]	; (80056a8 <tcp_recved+0x78>)
 800568e:	4805      	ldr	r0, [pc, #20]	; (80056a4 <tcp_recved+0x74>)
 8005690:	f240 322d 	movw	r2, #813	; 0x32d
 8005694:	f007 f8ee 	bl	800c874 <iprintf>
 8005698:	e7e1      	b.n	800565e <tcp_recved+0x2e>
}
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	0800e2be 	.word	0x0800e2be
 80056a0:	0800e3f4 	.word	0x0800e3f4
 80056a4:	0800d741 	.word	0x0800d741
 80056a8:	0800e41a 	.word	0x0800e41a

080056ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80056ac:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80056ae:	4604      	mov	r4, r0
 80056b0:	b148      	cbz	r0, 80056c6 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80056b2:	6840      	ldr	r0, [r0, #4]
 80056b4:	b108      	cbz	r0, 80056ba <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80056b6:	f7ff fbe9 	bl	8004e8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80056ba:	4621      	mov	r1, r4
 80056bc:	2003      	movs	r0, #3
  }
}
 80056be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80056c2:	f7ff ba51 	b.w	8004b68 <memp_free>
}
 80056c6:	bd10      	pop	{r4, pc}

080056c8 <tcp_segs_free>:
{
 80056c8:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80056ca:	b900      	cbnz	r0, 80056ce <tcp_segs_free+0x6>
}
 80056cc:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80056ce:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80056d0:	f7ff ffec 	bl	80056ac <tcp_seg_free>
    seg = next;
 80056d4:	4620      	mov	r0, r4
 80056d6:	e7f8      	b.n	80056ca <tcp_segs_free+0x2>

080056d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80056dc:	2003      	movs	r0, #3
 80056de:	f7ff fa27 	bl	8004b30 <memp_malloc>
  if (cseg == NULL) {
 80056e2:	4605      	mov	r5, r0
 80056e4:	b160      	cbz	r0, 8005700 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80056e6:	4620      	mov	r0, r4
 80056e8:	462b      	mov	r3, r5
 80056ea:	f104 0210 	add.w	r2, r4, #16
 80056ee:	f850 1b04 	ldr.w	r1, [r0], #4
 80056f2:	f843 1b04 	str.w	r1, [r3], #4
 80056f6:	4290      	cmp	r0, r2
 80056f8:	d1f9      	bne.n	80056ee <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 80056fa:	6868      	ldr	r0, [r5, #4]
 80056fc:	f7ff fd82 	bl	8005204 <pbuf_ref>
  return cseg;
}
 8005700:	4628      	mov	r0, r5
 8005702:	bd38      	pop	{r3, r4, r5, pc}

08005704 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8005704:	b100      	cbz	r0, 8005708 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8005706:	6101      	str	r1, [r0, #16]
  }
}
 8005708:	4770      	bx	lr
	...

0800570c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8005710:	4604      	mov	r4, r0
 8005712:	b158      	cbz	r0, 800572c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8005714:	7d03      	ldrb	r3, [r0, #20]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d106      	bne.n	8005728 <tcp_recv+0x1c>
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <tcp_recv+0x24>)
 800571c:	4905      	ldr	r1, [pc, #20]	; (8005734 <tcp_recv+0x28>)
 800571e:	4806      	ldr	r0, [pc, #24]	; (8005738 <tcp_recv+0x2c>)
 8005720:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8005724:	f007 f8a6 	bl	800c874 <iprintf>
    pcb->recv = recv;
 8005728:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	0800e2be 	.word	0x0800e2be
 8005734:	0800e3cd 	.word	0x0800e3cd
 8005738:	0800d741 	.word	0x0800d741

0800573c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8005740:	4604      	mov	r4, r0
 8005742:	b150      	cbz	r0, 800575a <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8005744:	7d03      	ldrb	r3, [r0, #20]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d106      	bne.n	8005758 <tcp_sent+0x1c>
 800574a:	4b04      	ldr	r3, [pc, #16]	; (800575c <tcp_sent+0x20>)
 800574c:	4904      	ldr	r1, [pc, #16]	; (8005760 <tcp_sent+0x24>)
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <tcp_sent+0x28>)
 8005750:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8005754:	f007 f88e 	bl	800c874 <iprintf>
    pcb->sent = sent;
 8005758:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	0800e2be 	.word	0x0800e2be
 8005760:	0800e43b 	.word	0x0800e43b
 8005764:	0800d741 	.word	0x0800d741

08005768 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800576c:	4604      	mov	r4, r0
 800576e:	b158      	cbz	r0, 8005788 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8005770:	7d03      	ldrb	r3, [r0, #20]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d106      	bne.n	8005784 <tcp_err+0x1c>
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <tcp_err+0x24>)
 8005778:	4905      	ldr	r1, [pc, #20]	; (8005790 <tcp_err+0x28>)
 800577a:	4806      	ldr	r0, [pc, #24]	; (8005794 <tcp_err+0x2c>)
 800577c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8005780:	f007 f878 	bl	800c874 <iprintf>
    pcb->errf = err;
 8005784:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	bf00      	nop
 800578c:	0800e2be 	.word	0x0800e2be
 8005790:	0800e329 	.word	0x0800e329
 8005794:	0800d741 	.word	0x0800d741

08005798 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8005798:	7d03      	ldrb	r3, [r0, #20]
 800579a:	2b01      	cmp	r3, #1
{
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	460e      	mov	r6, r1
 80057a2:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80057a4:	d106      	bne.n	80057b4 <tcp_poll+0x1c>
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <tcp_poll+0x24>)
 80057a8:	4905      	ldr	r1, [pc, #20]	; (80057c0 <tcp_poll+0x28>)
 80057aa:	4806      	ldr	r0, [pc, #24]	; (80057c4 <tcp_poll+0x2c>)
 80057ac:	f240 7203 	movw	r2, #1795	; 0x703
 80057b0:	f007 f860 	bl	800c874 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80057b4:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80057b8:	7725      	strb	r5, [r4, #28]
}
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	0800e2be 	.word	0x0800e2be
 80057c0:	0800e3af 	.word	0x0800e3af
 80057c4:	0800d741 	.word	0x0800d741

080057c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80057c8:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 80057ca:	7d03      	ldrb	r3, [r0, #20]
 80057cc:	2b01      	cmp	r3, #1
{
 80057ce:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80057d0:	d919      	bls.n	8005806 <tcp_pcb_purge+0x3e>
 80057d2:	2b0a      	cmp	r3, #10
 80057d4:	d017      	beq.n	8005806 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80057d6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80057d8:	b118      	cbz	r0, 80057e2 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80057da:	f7ff fb57 	bl	8004e8c <pbuf_free>
      pcb->refused_data = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80057e2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80057e4:	f7ff ff70 	bl	80056c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80057e8:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80057ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057ee:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80057f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 80057f2:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 80057f4:	f7ff ff68 	bl	80056c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80057f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80057fa:	f7ff ff65 	bl	80056c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80057fe:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005802:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8005806:	bd38      	pop	{r3, r4, r5, pc}

08005808 <tcp_slowtmr>:
{
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800580c:	4eb0      	ldr	r6, [pc, #704]	; (8005ad0 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 800580e:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8005b04 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8005812:	6833      	ldr	r3, [r6, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8005818:	4bae      	ldr	r3, [pc, #696]	; (8005ad4 <tcp_slowtmr+0x2cc>)
 800581a:	781a      	ldrb	r2, [r3, #0]
{
 800581c:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 800581e:	3201      	adds	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8005824:	4fac      	ldr	r7, [pc, #688]	; (8005ad8 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005826:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8005b08 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 800582a:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 800582c:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8005830:	b96c      	cbnz	r4, 800584e <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8005832:	4faa      	ldr	r7, [pc, #680]	; (8005adc <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005834:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8005b08 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8005838:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800583a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8005b0c <tcp_slowtmr+0x304>
 800583e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8005ae4 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8005842:	2d00      	cmp	r5, #0
 8005844:	f040 8185 	bne.w	8005b52 <tcp_slowtmr+0x34a>
}
 8005848:	b005      	add	sp, #20
 800584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800584e:	7d23      	ldrb	r3, [r4, #20]
 8005850:	b933      	cbnz	r3, 8005860 <tcp_slowtmr+0x58>
 8005852:	464b      	mov	r3, r9
 8005854:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005858:	49a1      	ldr	r1, [pc, #644]	; (8005ae0 <tcp_slowtmr+0x2d8>)
 800585a:	48a2      	ldr	r0, [pc, #648]	; (8005ae4 <tcp_slowtmr+0x2dc>)
 800585c:	f007 f80a 	bl	800c874 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005860:	7d23      	ldrb	r3, [r4, #20]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d106      	bne.n	8005874 <tcp_slowtmr+0x6c>
 8005866:	464b      	mov	r3, r9
 8005868:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800586c:	499e      	ldr	r1, [pc, #632]	; (8005ae8 <tcp_slowtmr+0x2e0>)
 800586e:	489d      	ldr	r0, [pc, #628]	; (8005ae4 <tcp_slowtmr+0x2dc>)
 8005870:	f007 f800 	bl	800c874 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005874:	7d23      	ldrb	r3, [r4, #20]
 8005876:	2b0a      	cmp	r3, #10
 8005878:	d106      	bne.n	8005888 <tcp_slowtmr+0x80>
 800587a:	464b      	mov	r3, r9
 800587c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005880:	499a      	ldr	r1, [pc, #616]	; (8005aec <tcp_slowtmr+0x2e4>)
 8005882:	4898      	ldr	r0, [pc, #608]	; (8005ae4 <tcp_slowtmr+0x2dc>)
 8005884:	f006 fff6 	bl	800c874 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005888:	9b02      	ldr	r3, [sp, #8]
 800588a:	7f62      	ldrb	r2, [r4, #29]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d104      	bne.n	800589c <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8005892:	68e5      	ldr	r5, [r4, #12]
 8005894:	4644      	mov	r4, r8
 8005896:	46a0      	mov	r8, r4
 8005898:	462c      	mov	r4, r5
 800589a:	e7c9      	b.n	8005830 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800589c:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800589e:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80058a0:	2902      	cmp	r1, #2
 80058a2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80058a6:	f040 809e 	bne.w	80059e6 <tcp_slowtmr+0x1de>
 80058aa:	2a05      	cmp	r2, #5
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80058ac:	f200 80e5 	bhi.w	8005a7a <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 80058b0:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 80058b4:	f1bb 0f00 	cmp.w	fp, #0
 80058b8:	f000 80a8 	beq.w	8005a0c <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80058bc:	488c      	ldr	r0, [pc, #560]	; (8005af0 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 80058be:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80058c2:	4483      	add	fp, r0
 80058c4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80058c8:	4293      	cmp	r3, r2
          pcb->persist_cnt++;
 80058ca:	bf3c      	itt	cc
 80058cc:	3301      	addcc	r3, #1
 80058ce:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80058d2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f080 8087 	bcs.w	80059ea <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 80058dc:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 80058e0:	7d23      	ldrb	r3, [r4, #20]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d10b      	bne.n	80058fe <tcp_slowtmr+0xf6>
      if (pcb->flags & TF_RXCLOSED) {
 80058e6:	7ea2      	ldrb	r2, [r4, #26]
 80058e8:	06d2      	lsls	r2, r2, #27
 80058ea:	d508      	bpl.n	80058fe <tcp_slowtmr+0xf6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058ec:	6832      	ldr	r2, [r6, #0]
 80058ee:	6a21      	ldr	r1, [r4, #32]
 80058f0:	1a52      	subs	r2, r2, r1
 80058f2:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80058f4:	bf84      	itt	hi
 80058f6:	f10b 0b01 	addhi.w	fp, fp, #1
 80058fa:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80058fe:	7a25      	ldrb	r5, [r4, #8]
 8005900:	f015 0508 	ands.w	r5, r5, #8
 8005904:	d019      	beq.n	800593a <tcp_slowtmr+0x132>
 8005906:	2b04      	cmp	r3, #4
 8005908:	d002      	beq.n	8005910 <tcp_slowtmr+0x108>
       ((pcb->state == ESTABLISHED) ||
 800590a:	2b07      	cmp	r3, #7
 800590c:	f040 80ca 	bne.w	8005aa4 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005910:	6831      	ldr	r1, [r6, #0]
 8005912:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005914:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005918:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800591a:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 800591e:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8005922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005926:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800592a:	4291      	cmp	r1, r2
 800592c:	f240 80a8 	bls.w	8005a80 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8005930:	f10b 0b01 	add.w	fp, fp, #1
 8005934:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8005938:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 800593a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800593c:	b168      	cbz	r0, 800595a <tcp_slowtmr+0x152>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800593e:	6833      	ldr	r3, [r6, #0]
 8005940:	6a22      	ldr	r2, [r4, #32]
 8005942:	1a9a      	subs	r2, r3, r2
 8005944:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800594c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8005950:	d303      	bcc.n	800595a <tcp_slowtmr+0x152>
      tcp_segs_free(pcb->ooseq);
 8005952:	f7ff feb9 	bl	80056c8 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800595a:	7d23      	ldrb	r3, [r4, #20]
 800595c:	2b03      	cmp	r3, #3
 800595e:	f040 80a3 	bne.w	8005aa8 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005962:	6833      	ldr	r3, [r6, #0]
 8005964:	6a22      	ldr	r2, [r4, #32]
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800596a:	d803      	bhi.n	8005974 <tcp_slowtmr+0x16c>
    if (pcb_remove) {
 800596c:	f1bb 0f00 	cmp.w	fp, #0
 8005970:	f000 80ce 	beq.w	8005b10 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8005974:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8005976:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800597a:	f7ff ff25 	bl	80057c8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800597e:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8005980:	f1b8 0f00 	cmp.w	r8, #0
 8005984:	f000 8098 	beq.w	8005ab8 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005988:	42a3      	cmp	r3, r4
 800598a:	d106      	bne.n	800599a <tcp_slowtmr+0x192>
 800598c:	464b      	mov	r3, r9
 800598e:	f240 4289 	movw	r2, #1161	; 0x489
 8005992:	4958      	ldr	r1, [pc, #352]	; (8005af4 <tcp_slowtmr+0x2ec>)
 8005994:	4853      	ldr	r0, [pc, #332]	; (8005ae4 <tcp_slowtmr+0x2dc>)
 8005996:	f006 ff6d 	bl	800c874 <iprintf>
        prev->next = pcb->next;
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 80059a0:	b14d      	cbz	r5, 80059b6 <tcp_slowtmr+0x1ae>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80059a2:	8b23      	ldrh	r3, [r4, #24]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	8ae3      	ldrh	r3, [r4, #22]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	4622      	mov	r2, r4
 80059ac:	1d23      	adds	r3, r4, #4
 80059ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80059b2:	f002 fceb 	bl	800838c <tcp_rst>
      err_arg = pcb->callback_arg;
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80059ba:	4621      	mov	r1, r4
 80059bc:	2001      	movs	r0, #1
      pcb = pcb->next;
 80059be:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80059c0:	f7ff f8d2 	bl	8004b68 <memp_free>
      tcp_active_pcbs_changed = 0;
 80059c4:	2200      	movs	r2, #0
 80059c6:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80059ca:	f1bb 0f00 	cmp.w	fp, #0
 80059ce:	d004      	beq.n	80059da <tcp_slowtmr+0x1d2>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	f06f 010c 	mvn.w	r1, #12
 80059d6:	4618      	mov	r0, r3
 80059d8:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80059da:	f89a 3000 	ldrb.w	r3, [sl]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f43f af58 	beq.w	8005894 <tcp_slowtmr+0x8c>
tcp_slowtmr_start:
 80059e4:	e71e      	b.n	8005824 <tcp_slowtmr+0x1c>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80059e6:	2a0b      	cmp	r2, #11
 80059e8:	e760      	b.n	80058ac <tcp_slowtmr+0xa4>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80059ea:	4620      	mov	r0, r4
 80059ec:	f002 fdbe 	bl	800856c <tcp_zero_window_probe>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f47f af73 	bne.w	80058dc <tcp_slowtmr+0xd4>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80059f6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80059fa:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	f63f af6c 	bhi.w	80058dc <tcp_slowtmr+0xd4>
              pcb->persist_backoff++;
 8005a04:	3301      	adds	r3, #1
 8005a06:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8005a0a:	e767      	b.n	80058dc <tcp_slowtmr+0xd4>
        if (pcb->rtime >= 0) {
 8005a0c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8005a10:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8005a12:	bfa4      	itt	ge
 8005a14:	3301      	addge	r3, #1
 8005a16:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005a18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f43f af5e 	beq.w	80058dc <tcp_slowtmr+0xd4>
 8005a20:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8005a24:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005a28:	4298      	cmp	r0, r3
 8005a2a:	f6ff af57 	blt.w	80058dc <tcp_slowtmr+0xd4>
          if (pcb->state != SYN_SENT) {
 8005a2e:	2902      	cmp	r1, #2
 8005a30:	d00a      	beq.n	8005a48 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005a32:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8005a36:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8005a3a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8005a3e:	492e      	ldr	r1, [pc, #184]	; (8005af8 <tcp_slowtmr+0x2f0>)
 8005a40:	5c8a      	ldrb	r2, [r1, r2]
 8005a42:	4093      	lsls	r3, r2
 8005a44:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8005a48:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005a4a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8005a4e:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005a50:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a54:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8005a56:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bf28      	it	cs
 8005a5e:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a60:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8005a62:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a64:	b292      	uxth	r2, r2
 8005a66:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8005a68:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005a6c:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 8005a6e:	bf38      	it	cc
 8005a70:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005a74:	f002 fce4 	bl	8008440 <tcp_rexmit_rto>
 8005a78:	e732      	b.n	80058e0 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8005a7a:	f04f 0b01 	mov.w	fp, #1
 8005a7e:	e72f      	b.n	80058e0 <tcp_slowtmr+0xd8>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005a80:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <tcp_slowtmr+0x2f4>)
 8005a86:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8005a8a:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	d908      	bls.n	8005aa4 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8005a92:	4620      	mov	r0, r4
 8005a94:	f002 fd40 	bl	8008518 <tcp_keepalive>
        if (err == ERR_OK) {
 8005a98:	b920      	cbnz	r0, 8005aa4 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8005a9a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	e748      	b.n	800593a <tcp_slowtmr+0x132>
    if (pcb->state == LAST_ACK) {
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	f47f af5f 	bne.w	800596c <tcp_slowtmr+0x164>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005aae:	6833      	ldr	r3, [r6, #0]
 8005ab0:	6a22      	ldr	r2, [r4, #32]
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	2bf0      	cmp	r3, #240	; 0xf0
 8005ab6:	e758      	b.n	800596a <tcp_slowtmr+0x162>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d006      	beq.n	8005aca <tcp_slowtmr+0x2c2>
 8005abc:	464b      	mov	r3, r9
 8005abe:	f240 428d 	movw	r2, #1165	; 0x48d
 8005ac2:	490f      	ldr	r1, [pc, #60]	; (8005b00 <tcp_slowtmr+0x2f8>)
 8005ac4:	4807      	ldr	r0, [pc, #28]	; (8005ae4 <tcp_slowtmr+0x2dc>)
 8005ac6:	f006 fed5 	bl	800c874 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	e767      	b.n	80059a0 <tcp_slowtmr+0x198>
 8005ad0:	200076c8 	.word	0x200076c8
 8005ad4:	20003e32 	.word	0x20003e32
 8005ad8:	200076c4 	.word	0x200076c4
 8005adc:	200076d4 	.word	0x200076d4
 8005ae0:	0800e462 	.word	0x0800e462
 8005ae4:	0800d741 	.word	0x0800d741
 8005ae8:	0800e48c 	.word	0x0800e48c
 8005aec:	0800e4b6 	.word	0x0800e4b6
 8005af0:	0800e3a8 	.word	0x0800e3a8
 8005af4:	0800e4e3 	.word	0x0800e4e3
 8005af8:	0800e270 	.word	0x0800e270
 8005afc:	000124f8 	.word	0x000124f8
 8005b00:	0800e50e 	.word	0x0800e50e
 8005b04:	200076c0 	.word	0x200076c0
 8005b08:	0800e2be 	.word	0x0800e2be
 8005b0c:	0800e538 	.word	0x0800e538
      ++prev->polltmr;
 8005b10:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005b12:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8005b14:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8005b16:	3301      	adds	r3, #1
 8005b18:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8005b1a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8005b1c:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005b1e:	f63f aeba 	bhi.w	8005896 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8005b22:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8005b26:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8005b2a:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8005b2e:	b173      	cbz	r3, 8005b4e <tcp_slowtmr+0x346>
 8005b30:	4621      	mov	r1, r4
 8005b32:	6920      	ldr	r0, [r4, #16]
 8005b34:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8005b36:	f89a 3000 	ldrb.w	r3, [sl]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f47f ae72 	bne.w	8005824 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f47f aea8 	bne.w	8005896 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f002 faa8 	bl	800809c <tcp_output>
 8005b4c:	e6a3      	b.n	8005896 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8005b4e:	4658      	mov	r0, fp
 8005b50:	e7f1      	b.n	8005b36 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005b52:	7d2b      	ldrb	r3, [r5, #20]
 8005b54:	2b0a      	cmp	r3, #10
 8005b56:	d006      	beq.n	8005b66 <tcp_slowtmr+0x35e>
 8005b58:	4643      	mov	r3, r8
 8005b5a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005b5e:	4651      	mov	r1, sl
 8005b60:	4648      	mov	r0, r9
 8005b62:	f006 fe87 	bl	800c874 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005b66:	6833      	ldr	r3, [r6, #0]
 8005b68:	6a2a      	ldr	r2, [r5, #32]
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	2bf0      	cmp	r3, #240	; 0xf0
 8005b6e:	d802      	bhi.n	8005b76 <tcp_slowtmr+0x36e>
      pcb = pcb->next;
 8005b70:	462c      	mov	r4, r5
 8005b72:	68ed      	ldr	r5, [r5, #12]
 8005b74:	e665      	b.n	8005842 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7ff fe26 	bl	80057c8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005b7c:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8005b7e:	b194      	cbz	r4, 8005ba6 <tcp_slowtmr+0x39e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	d106      	bne.n	8005b92 <tcp_slowtmr+0x38a>
 8005b84:	4643      	mov	r3, r8
 8005b86:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005b8a:	490d      	ldr	r1, [pc, #52]	; (8005bc0 <tcp_slowtmr+0x3b8>)
 8005b8c:	4648      	mov	r0, r9
 8005b8e:	f006 fe71 	bl	800c874 <iprintf>
        prev->next = pcb->next;
 8005b92:	68eb      	ldr	r3, [r5, #12]
 8005b94:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8005b96:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fe ffe3 	bl	8004b68 <memp_free>
      pcb = pcb->next;
 8005ba2:	465d      	mov	r5, fp
 8005ba4:	e64d      	b.n	8005842 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005ba6:	42ab      	cmp	r3, r5
 8005ba8:	d006      	beq.n	8005bb8 <tcp_slowtmr+0x3b0>
 8005baa:	4643      	mov	r3, r8
 8005bac:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005bb0:	4904      	ldr	r1, [pc, #16]	; (8005bc4 <tcp_slowtmr+0x3bc>)
 8005bb2:	4648      	mov	r0, r9
 8005bb4:	f006 fe5e 	bl	800c874 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005bb8:	68eb      	ldr	r3, [r5, #12]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	e7eb      	b.n	8005b96 <tcp_slowtmr+0x38e>
 8005bbe:	bf00      	nop
 8005bc0:	0800e567 	.word	0x0800e567
 8005bc4:	0800e58e 	.word	0x0800e58e

08005bc8 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8005bc8:	6803      	ldr	r3, [r0, #0]
 8005bca:	428b      	cmp	r3, r1
{
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8005bd0:	d137      	bne.n	8005c42 <tcp_pcb_remove+0x7a>
 8005bd2:	68cb      	ldr	r3, [r1, #12]
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f7ff fdf4 	bl	80057c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005be0:	7d23      	ldrb	r3, [r4, #20]
 8005be2:	2b0a      	cmp	r3, #10
 8005be4:	d00a      	beq.n	8005bfc <tcp_pcb_remove+0x34>
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d008      	beq.n	8005bfc <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8005bea:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8005bec:	07da      	lsls	r2, r3, #31
 8005bee:	d505      	bpl.n	8005bfc <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f002 fa50 	bl	800809c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8005bfc:	7d23      	ldrb	r3, [r4, #20]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d01a      	beq.n	8005c38 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005c02:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005c04:	b133      	cbz	r3, 8005c14 <tcp_pcb_remove+0x4c>
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <tcp_pcb_remove+0x8c>)
 8005c08:	4913      	ldr	r1, [pc, #76]	; (8005c58 <tcp_pcb_remove+0x90>)
 8005c0a:	4814      	ldr	r0, [pc, #80]	; (8005c5c <tcp_pcb_remove+0x94>)
 8005c0c:	f240 7253 	movw	r2, #1875	; 0x753
 8005c10:	f006 fe30 	bl	800c874 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005c14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005c16:	b133      	cbz	r3, 8005c26 <tcp_pcb_remove+0x5e>
 8005c18:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <tcp_pcb_remove+0x8c>)
 8005c1a:	4911      	ldr	r1, [pc, #68]	; (8005c60 <tcp_pcb_remove+0x98>)
 8005c1c:	480f      	ldr	r0, [pc, #60]	; (8005c5c <tcp_pcb_remove+0x94>)
 8005c1e:	f240 7254 	movw	r2, #1876	; 0x754
 8005c22:	f006 fe27 	bl	800c874 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005c26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005c28:	b133      	cbz	r3, 8005c38 <tcp_pcb_remove+0x70>
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <tcp_pcb_remove+0x8c>)
 8005c2c:	490d      	ldr	r1, [pc, #52]	; (8005c64 <tcp_pcb_remove+0x9c>)
 8005c2e:	480b      	ldr	r0, [pc, #44]	; (8005c5c <tcp_pcb_remove+0x94>)
 8005c30:	f240 7256 	movw	r2, #1878	; 0x756
 8005c34:	f006 fe1e 	bl	800c874 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005c3c:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005c3e:	bd10      	pop	{r4, pc}
 8005c40:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c7      	beq.n	8005bd6 <tcp_pcb_remove+0xe>
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	42a2      	cmp	r2, r4
 8005c4a:	d1f9      	bne.n	8005c40 <tcp_pcb_remove+0x78>
 8005c4c:	68e2      	ldr	r2, [r4, #12]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e7c1      	b.n	8005bd6 <tcp_pcb_remove+0xe>
 8005c52:	bf00      	nop
 8005c54:	0800e2be 	.word	0x0800e2be
 8005c58:	0800e360 	.word	0x0800e360
 8005c5c:	0800d741 	.word	0x0800d741
 8005c60:	0800e378 	.word	0x0800e378
 8005c64:	0800e391 	.word	0x0800e391

08005c68 <tcp_close_shutdown>:
{
 8005c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c6a:	7d03      	ldrb	r3, [r0, #20]
 8005c6c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005c6e:	2900      	cmp	r1, #0
 8005c70:	d049      	beq.n	8005d06 <tcp_close_shutdown+0x9e>
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d001      	beq.n	8005c7a <tcp_close_shutdown+0x12>
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	d145      	bne.n	8005d06 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005c7a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005c7c:	b91a      	cbnz	r2, 8005c86 <tcp_close_shutdown+0x1e>
 8005c7e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005c80:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8005c84:	d03f      	beq.n	8005d06 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005c86:	7ea3      	ldrb	r3, [r4, #26]
 8005c88:	06db      	lsls	r3, r3, #27
 8005c8a:	d406      	bmi.n	8005c9a <tcp_close_shutdown+0x32>
 8005c8c:	4b3f      	ldr	r3, [pc, #252]	; (8005d8c <tcp_close_shutdown+0x124>)
 8005c8e:	4940      	ldr	r1, [pc, #256]	; (8005d90 <tcp_close_shutdown+0x128>)
 8005c90:	4840      	ldr	r0, [pc, #256]	; (8005d94 <tcp_close_shutdown+0x12c>)
 8005c92:	f240 120f 	movw	r2, #271	; 0x10f
 8005c96:	f006 fded 	bl	800c874 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c9a:	8b23      	ldrh	r3, [r4, #24]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	8ae3      	ldrh	r3, [r4, #22]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	1d23      	adds	r3, r4, #4
 8005ca6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ca8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005caa:	f002 fb6f 	bl	800838c <tcp_rst>
      tcp_pcb_purge(pcb);
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff fd8a 	bl	80057c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005cb4:	4a38      	ldr	r2, [pc, #224]	; (8005d98 <tcp_close_shutdown+0x130>)
 8005cb6:	6813      	ldr	r3, [r2, #0]
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d115      	bne.n	8005ce8 <tcp_close_shutdown+0x80>
 8005cbc:	68e3      	ldr	r3, [r4, #12]
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60e3      	str	r3, [r4, #12]
 8005cc4:	4b35      	ldr	r3, [pc, #212]	; (8005d9c <tcp_close_shutdown+0x134>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005cca:	7d23      	ldrb	r3, [r4, #20]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d113      	bne.n	8005cf8 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8005cd0:	230a      	movs	r3, #10
 8005cd2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005cd4:	4b32      	ldr	r3, [pc, #200]	; (8005da0 <tcp_close_shutdown+0x138>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	60e2      	str	r2, [r4, #12]
 8005cda:	601c      	str	r4, [r3, #0]
 8005cdc:	f002 fcf6 	bl	80086cc <tcp_timer_needed>
}
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	b003      	add	sp, #12
 8005ce4:	bd30      	pop	{r4, r5, pc}
 8005ce6:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0e9      	beq.n	8005cc0 <tcp_close_shutdown+0x58>
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	42a2      	cmp	r2, r4
 8005cf0:	d1f9      	bne.n	8005ce6 <tcp_close_shutdown+0x7e>
 8005cf2:	68e2      	ldr	r2, [r4, #12]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	e7e3      	b.n	8005cc0 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <tcp_close_shutdown+0x13c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d117      	bne.n	8005d30 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8005d00:	f001 fd7a 	bl	80077f8 <tcp_trigger_input_pcb_close>
 8005d04:	e7ec      	b.n	8005ce0 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d020      	beq.n	8005d4c <tcp_close_shutdown+0xe4>
 8005d0a:	d307      	bcc.n	8005d1c <tcp_close_shutdown+0xb4>
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d033      	beq.n	8005d78 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8005d10:	4620      	mov	r0, r4
}
 8005d12:	b003      	add	sp, #12
 8005d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8005d18:	f7ff bbe2 	b.w	80054e0 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8005d1c:	8ae3      	ldrh	r3, [r4, #22]
 8005d1e:	b13b      	cbz	r3, 8005d30 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d20:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <tcp_close_shutdown+0x140>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d109      	bne.n	8005d3c <tcp_close_shutdown+0xd4>
 8005d28:	68e3      	ldr	r3, [r4, #12]
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8005d30:	4621      	mov	r1, r4
 8005d32:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8005d34:	f7fe ff18 	bl	8004b68 <memp_free>
    break;
 8005d38:	e7d2      	b.n	8005ce0 <tcp_close_shutdown+0x78>
 8005d3a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f5      	beq.n	8005d2c <tcp_close_shutdown+0xc4>
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	42a2      	cmp	r2, r4
 8005d44:	d1f9      	bne.n	8005d3a <tcp_close_shutdown+0xd2>
 8005d46:	68e2      	ldr	r2, [r4, #12]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e7ef      	b.n	8005d2c <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005d4c:	4917      	ldr	r1, [pc, #92]	; (8005dac <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8005d4e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005d50:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005d54:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d56:	b94a      	cbnz	r2, 8005d6c <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d58:	3301      	adds	r3, #1
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d1f8      	bne.n	8005d50 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4813      	ldr	r0, [pc, #76]	; (8005db0 <tcp_close_shutdown+0x148>)
 8005d62:	f7ff ff31 	bl	8005bc8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005d66:	4621      	mov	r1, r4
 8005d68:	2002      	movs	r0, #2
 8005d6a:	e7e3      	b.n	8005d34 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8005d6c:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8005d6e:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8005d70:	bf08      	it	eq
 8005d72:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d74:	68d2      	ldr	r2, [r2, #12]
 8005d76:	e7ee      	b.n	8005d56 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4807      	ldr	r0, [pc, #28]	; (8005d98 <tcp_close_shutdown+0x130>)
 8005d7c:	f7ff ff24 	bl	8005bc8 <tcp_pcb_remove>
 8005d80:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <tcp_close_shutdown+0x134>)
 8005d82:	2001      	movs	r0, #1
 8005d84:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005d86:	4621      	mov	r1, r4
 8005d88:	e7d4      	b.n	8005d34 <tcp_close_shutdown+0xcc>
 8005d8a:	bf00      	nop
 8005d8c:	0800e2be 	.word	0x0800e2be
 8005d90:	0800e2a5 	.word	0x0800e2a5
 8005d94:	0800d741 	.word	0x0800d741
 8005d98:	200076c4 	.word	0x200076c4
 8005d9c:	200076c0 	.word	0x200076c0
 8005da0:	200076d4 	.word	0x200076d4
 8005da4:	200076d8 	.word	0x200076d8
 8005da8:	200076d0 	.word	0x200076d0
 8005dac:	0800e350 	.word	0x0800e350
 8005db0:	200076cc 	.word	0x200076cc

08005db4 <tcp_close>:
  if (pcb->state != LISTEN) {
 8005db4:	7d03      	ldrb	r3, [r0, #20]
 8005db6:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8005db8:	bf1e      	ittt	ne
 8005dba:	7e83      	ldrbne	r3, [r0, #26]
 8005dbc:	f043 0310 	orrne.w	r3, r3, #16
 8005dc0:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	f7ff bf50 	b.w	8005c68 <tcp_close_shutdown>

08005dc8 <tcp_recv_null>:
{
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4608      	mov	r0, r1
  if (p != NULL) {
 8005dcc:	4614      	mov	r4, r2
 8005dce:	b13a      	cbz	r2, 8005de0 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8005dd0:	8911      	ldrh	r1, [r2, #8]
 8005dd2:	f7ff fc2d 	bl	8005630 <tcp_recved>
    pbuf_free(p);
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f7ff f858 	bl	8004e8c <pbuf_free>
}
 8005ddc:	2000      	movs	r0, #0
 8005dde:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1fb      	bne.n	8005ddc <tcp_recv_null+0x14>
}
 8005de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8005de8:	f7ff bfe4 	b.w	8005db4 <tcp_close>

08005dec <tcp_process_refused_data>:
{
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8005dee:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005df0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8005df4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8005df6:	2300      	movs	r3, #0
{
 8005df8:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 8005dfa:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005dfc:	b1dd      	cbz	r5, 8005e36 <tcp_process_refused_data+0x4a>
 8005dfe:	4601      	mov	r1, r0
 8005e00:	4632      	mov	r2, r6
 8005e02:	6900      	ldr	r0, [r0, #16]
 8005e04:	47a8      	blx	r5
 8005e06:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8005e08:	b9e0      	cbnz	r0, 8005e44 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8005e0a:	06bb      	lsls	r3, r7, #26
 8005e0c:	d511      	bpl.n	8005e32 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005e0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8005e10:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005e14:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8005e18:	bf1c      	itt	ne
 8005e1a:	3301      	addne	r3, #1
 8005e1c:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8005e1e:	b146      	cbz	r6, 8005e32 <tcp_process_refused_data+0x46>
 8005e20:	2300      	movs	r3, #0
 8005e22:	461a      	mov	r2, r3
 8005e24:	4621      	mov	r1, r4
 8005e26:	6920      	ldr	r0, [r4, #16]
 8005e28:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8005e2a:	300d      	adds	r0, #13
 8005e2c:	d101      	bne.n	8005e32 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8005e2e:	f06f 050c 	mvn.w	r5, #12
}
 8005e32:	4628      	mov	r0, r5
 8005e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005e36:	4601      	mov	r1, r0
 8005e38:	462b      	mov	r3, r5
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f7ff ffc3 	bl	8005dc8 <tcp_recv_null>
 8005e42:	e7e0      	b.n	8005e06 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8005e44:	f110 050d 	adds.w	r5, r0, #13
 8005e48:	d0f1      	beq.n	8005e2e <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8005e4a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8005e4c:	f06f 0504 	mvn.w	r5, #4
 8005e50:	e7ef      	b.n	8005e32 <tcp_process_refused_data+0x46>
	...

08005e54 <tcp_fasttmr>:
{
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8005e58:	4d1b      	ldr	r5, [pc, #108]	; (8005ec8 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8005e5a:	4f1c      	ldr	r7, [pc, #112]	; (8005ecc <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8005e5c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8005e5e:	4e1c      	ldr	r6, [pc, #112]	; (8005ed0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8005e60:	3301      	adds	r3, #1
 8005e62:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8005e64:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8005e66:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8005e6a:	b90c      	cbnz	r4, 8005e70 <tcp_fasttmr+0x1c>
}
 8005e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8005e70:	782b      	ldrb	r3, [r5, #0]
 8005e72:	7f62      	ldrb	r2, [r4, #29]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d024      	beq.n	8005ec2 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8005e78:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8005e7a:	7ea3      	ldrb	r3, [r4, #26]
 8005e7c:	07d9      	lsls	r1, r3, #31
 8005e7e:	d509      	bpl.n	8005e94 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8005e80:	f043 0302 	orr.w	r3, r3, #2
 8005e84:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8005e86:	4620      	mov	r0, r4
 8005e88:	f002 f908 	bl	800809c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005e8c:	7ea3      	ldrb	r3, [r4, #26]
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8005e94:	7ea3      	ldrb	r3, [r4, #26]
 8005e96:	071a      	lsls	r2, r3, #28
 8005e98:	d505      	bpl.n	8005ea6 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8005e9a:	f023 0308 	bic.w	r3, r3, #8
 8005e9e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff fb1d 	bl	80054e0 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8005ea6:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8005ea8:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8005eac:	b13b      	cbz	r3, 8005ebe <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8005eae:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8005eb0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8005eb4:	f7ff ff9a 	bl	8005dec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005eb8:	7833      	ldrb	r3, [r6, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1d2      	bne.n	8005e64 <tcp_fasttmr+0x10>
{
 8005ebe:	464c      	mov	r4, r9
 8005ec0:	e7d3      	b.n	8005e6a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8005ec2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8005ec6:	e7fa      	b.n	8005ebe <tcp_fasttmr+0x6a>
 8005ec8:	20003e32 	.word	0x20003e32
 8005ecc:	200076c4 	.word	0x200076c4
 8005ed0:	200076c0 	.word	0x200076c0

08005ed4 <tcp_tmr>:
{
 8005ed4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8005ed6:	f7ff ffbd 	bl	8005e54 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8005eda:	4a06      	ldr	r2, [pc, #24]	; (8005ef4 <tcp_tmr+0x20>)
 8005edc:	7813      	ldrb	r3, [r2, #0]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	7013      	strb	r3, [r2, #0]
 8005ee4:	07db      	lsls	r3, r3, #31
 8005ee6:	d503      	bpl.n	8005ef0 <tcp_tmr+0x1c>
}
 8005ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8005eec:	f7ff bc8c 	b.w	8005808 <tcp_slowtmr>
}
 8005ef0:	bd08      	pop	{r3, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20003e31 	.word	0x20003e31

08005ef8 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005ef8:	7d03      	ldrb	r3, [r0, #20]
 8005efa:	2b01      	cmp	r3, #1
{
 8005efc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	4604      	mov	r4, r0
 8005f02:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005f04:	d106      	bne.n	8005f14 <tcp_abandon+0x1c>
 8005f06:	4b30      	ldr	r3, [pc, #192]	; (8005fc8 <tcp_abandon+0xd0>)
 8005f08:	4930      	ldr	r1, [pc, #192]	; (8005fcc <tcp_abandon+0xd4>)
 8005f0a:	4831      	ldr	r0, [pc, #196]	; (8005fd0 <tcp_abandon+0xd8>)
 8005f0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f10:	f006 fcb0 	bl	800c874 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8005f14:	7d23      	ldrb	r3, [r4, #20]
 8005f16:	2b0a      	cmp	r3, #10
 8005f18:	d10a      	bne.n	8005f30 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	482d      	ldr	r0, [pc, #180]	; (8005fd4 <tcp_abandon+0xdc>)
 8005f1e:	f7ff fe53 	bl	8005bc8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005f22:	4621      	mov	r1, r4
 8005f24:	2001      	movs	r0, #1
}
 8005f26:	b002      	add	sp, #8
 8005f28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8005f2c:	f7fe be1c 	b.w	8004b68 <memp_free>
    seqno = pcb->snd_nxt;
 8005f30:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8005f34:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8005f38:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8005f3c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8005f40:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8005f42:	b99b      	cbnz	r3, 8005f6c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8005f44:	b13d      	cbz	r5, 8005f56 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f46:	4a24      	ldr	r2, [pc, #144]	; (8005fd8 <tcp_abandon+0xe0>)
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	d106      	bne.n	8005f5c <tcp_abandon+0x64>
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	2500      	movs	r5, #0
 8005f54:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8005f56:	462e      	mov	r6, r5
 8005f58:	e00f      	b.n	8005f7a <tcp_abandon+0x82>
 8005f5a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f8      	beq.n	8005f52 <tcp_abandon+0x5a>
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	42a2      	cmp	r2, r4
 8005f64:	d1f9      	bne.n	8005f5a <tcp_abandon+0x62>
 8005f66:	68e2      	ldr	r2, [r4, #12]
 8005f68:	60da      	str	r2, [r3, #12]
 8005f6a:	e7f2      	b.n	8005f52 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	481b      	ldr	r0, [pc, #108]	; (8005fdc <tcp_abandon+0xe4>)
 8005f70:	f7ff fe2a 	bl	8005bc8 <tcp_pcb_remove>
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <tcp_abandon+0xe8>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005f7a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005f7c:	b108      	cbz	r0, 8005f82 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8005f7e:	f7ff fba3 	bl	80056c8 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005f82:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005f84:	b108      	cbz	r0, 8005f8a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8005f86:	f7ff fb9f 	bl	80056c8 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005f8a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005f8c:	b108      	cbz	r0, 8005f92 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8005f8e:	f7ff fb9b 	bl	80056c8 <tcp_segs_free>
    if (send_rst) {
 8005f92:	b146      	cbz	r6, 8005fa6 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005f94:	8b23      	ldrh	r3, [r4, #24]
 8005f96:	4622      	mov	r2, r4
 8005f98:	e9cd 5300 	strd	r5, r3, [sp]
 8005f9c:	4651      	mov	r1, sl
 8005f9e:	1d23      	adds	r3, r4, #4
 8005fa0:	4648      	mov	r0, r9
 8005fa2:	f002 f9f3 	bl	800838c <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	2001      	movs	r0, #1
 8005faa:	f7fe fddd 	bl	8004b68 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005fae:	b13f      	cbz	r7, 8005fc0 <tcp_abandon+0xc8>
 8005fb0:	f06f 010c 	mvn.w	r1, #12
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	463b      	mov	r3, r7
}
 8005fb8:	b002      	add	sp, #8
 8005fba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005fbe:	4718      	bx	r3
}
 8005fc0:	b002      	add	sp, #8
 8005fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc6:	bf00      	nop
 8005fc8:	0800e2be 	.word	0x0800e2be
 8005fcc:	0800e23f 	.word	0x0800e23f
 8005fd0:	0800d741 	.word	0x0800d741
 8005fd4:	200076d4 	.word	0x200076d4
 8005fd8:	200076d0 	.word	0x200076d0
 8005fdc:	200076c4 	.word	0x200076c4
 8005fe0:	200076c0 	.word	0x200076c0

08005fe4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	f7ff bf87 	b.w	8005ef8 <tcp_abandon>

08005fea <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8005fea:	b538      	push	{r3, r4, r5, lr}
 8005fec:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8005fee:	b901      	cbnz	r1, 8005ff2 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005ff2:	680a      	ldr	r2, [r1, #0]
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	68cd      	ldr	r5, [r1, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d102      	bne.n	8006002 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	f7ff fff1 	bl	8005fe4 <tcp_abort>
{
 8006002:	4629      	mov	r1, r5
 8006004:	e7f3      	b.n	8005fee <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08006008 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <tcp_kill_state+0x34>)
 800600a:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800600c:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <tcp_kill_state+0x38>)
{
 800600e:	b430      	push	{r4, r5}
  inactivity = 0;
 8006010:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006012:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8006014:	4622      	mov	r2, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006016:	b921      	cbnz	r1, 8006022 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8006018:	b172      	cbz	r2, 8006038 <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 800601a:	4610      	mov	r0, r2
}
 800601c:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800601e:	f7ff bf6b 	b.w	8005ef8 <tcp_abandon>
    if (pcb->state == state) {
 8006022:	7d0b      	ldrb	r3, [r1, #20]
 8006024:	4283      	cmp	r3, r0
 8006026:	d105      	bne.n	8006034 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006028:	6a0b      	ldr	r3, [r1, #32]
 800602a:	1aeb      	subs	r3, r5, r3
 800602c:	42a3      	cmp	r3, r4
 800602e:	bf24      	itt	cs
 8006030:	461c      	movcs	r4, r3
 8006032:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006034:	68c9      	ldr	r1, [r1, #12]
 8006036:	e7ee      	b.n	8006016 <tcp_kill_state+0xe>
}
 8006038:	bc30      	pop	{r4, r5}
 800603a:	4770      	bx	lr
 800603c:	200076c4 	.word	0x200076c4
 8006040:	200076c8 	.word	0x200076c8

08006044 <tcp_alloc>:
{
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006048:	2001      	movs	r0, #1
 800604a:	f7fe fd71 	bl	8004b30 <memp_malloc>
 800604e:	4c39      	ldr	r4, [pc, #228]	; (8006134 <tcp_alloc+0xf0>)
  if (pcb == NULL) {
 8006050:	4603      	mov	r3, r0
 8006052:	bb90      	cbnz	r0, 80060ba <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006054:	4a38      	ldr	r2, [pc, #224]	; (8006138 <tcp_alloc+0xf4>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006056:	6826      	ldr	r6, [r4, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	2a00      	cmp	r2, #0
 800605c:	d154      	bne.n	8006108 <tcp_alloc+0xc4>
  if (inactive != NULL) {
 800605e:	b113      	cbz	r3, 8006066 <tcp_alloc+0x22>
    tcp_abort(inactive);
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff ffbf 	bl	8005fe4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006066:	2001      	movs	r0, #1
 8006068:	f7fe fd62 	bl	8004b30 <memp_malloc>
    if (pcb == NULL) {
 800606c:	4603      	mov	r3, r0
 800606e:	bb20      	cbnz	r0, 80060ba <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8006070:	2009      	movs	r0, #9
 8006072:	f7ff ffc9 	bl	8006008 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006076:	2001      	movs	r0, #1
 8006078:	f7fe fd5a 	bl	8004b30 <memp_malloc>
      if (pcb == NULL) {
 800607c:	4603      	mov	r3, r0
 800607e:	b9e0      	cbnz	r0, 80060ba <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8006080:	2008      	movs	r0, #8
 8006082:	f7ff ffc1 	bl	8006008 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006086:	2001      	movs	r0, #1
 8006088:	f7fe fd52 	bl	8004b30 <memp_malloc>
        if (pcb == NULL) {
 800608c:	4603      	mov	r3, r0
 800608e:	b9a0      	cbnz	r0, 80060ba <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006090:	4a2a      	ldr	r2, [pc, #168]	; (800613c <tcp_alloc+0xf8>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006092:	f8d4 c000 	ldr.w	ip, [r4]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006096:	6812      	ldr	r2, [r2, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006098:	f015 0f80 	tst.w	r5, #128	; 0x80
 800609c:	bf0c      	ite	eq
 800609e:	4628      	moveq	r0, r5
 80060a0:	207f      	movne	r0, #127	; 0x7f
  inactivity = 0;
 80060a2:	461e      	mov	r6, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	d137      	bne.n	8006118 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 80060a8:	b113      	cbz	r3, 80060b0 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff ff9a 	bl	8005fe4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fe fd3d 	bl	8004b30 <memp_malloc>
  if (pcb != NULL) {
 80060b6:	4603      	mov	r3, r0
 80060b8:	b320      	cbz	r0, 8006104 <tcp_alloc+0xc0>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80060ba:	2298      	movs	r2, #152	; 0x98
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f006 fb1a 	bl	800c6f8 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80060c4:	491e      	ldr	r1, [pc, #120]	; (8006140 <tcp_alloc+0xfc>)
 80060c6:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80060c8:	21ff      	movs	r1, #255	; 0xff
 80060ca:	7281      	strb	r1, [r0, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80060cc:	2106      	movs	r1, #6
 80060ce:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80060d2:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 80060d4:	491b      	ldr	r1, [pc, #108]	; (8006144 <tcp_alloc+0x100>)
 80060d6:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 80060d8:	2101      	movs	r1, #1
 80060da:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	6201      	str	r1, [r0, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80060e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 80060e6:	4918      	ldr	r1, [pc, #96]	; (8006148 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 80060e8:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 80060ec:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80060f0:	4a16      	ldr	r2, [pc, #88]	; (800614c <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 80060f2:	7809      	ldrb	r1, [r1, #0]
    pcb->recv = tcp_recv_null;
 80060f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 80060fa:	7545      	strb	r5, [r0, #21]
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80060fc:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 80060fe:	7741      	strb	r1, [r0, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006100:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 8006104:	4618      	mov	r0, r3
 8006106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006108:	6a11      	ldr	r1, [r2, #32]
 800610a:	1a71      	subs	r1, r6, r1
 800610c:	4281      	cmp	r1, r0
 800610e:	bf24      	itt	cs
 8006110:	4613      	movcs	r3, r2
 8006112:	4608      	movcs	r0, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006114:	68d2      	ldr	r2, [r2, #12]
 8006116:	e7a0      	b.n	800605a <tcp_alloc+0x16>
    if (pcb->prio <= mprio &&
 8006118:	7d57      	ldrb	r7, [r2, #21]
 800611a:	4287      	cmp	r7, r0
 800611c:	d807      	bhi.n	800612e <tcp_alloc+0xea>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800611e:	6a11      	ldr	r1, [r2, #32]
 8006120:	ebac 0101 	sub.w	r1, ip, r1
    if (pcb->prio <= mprio &&
 8006124:	42b1      	cmp	r1, r6
 8006126:	bf22      	ittt	cs
 8006128:	4638      	movcs	r0, r7
 800612a:	460e      	movcs	r6, r1
 800612c:	4613      	movcs	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800612e:	68d2      	ldr	r2, [r2, #12]
 8006130:	e7b8      	b.n	80060a4 <tcp_alloc+0x60>
 8006132:	bf00      	nop
 8006134:	200076c8 	.word	0x200076c8
 8006138:	200076d4 	.word	0x200076d4
 800613c:	200076c4 	.word	0x200076c4
 8006140:	08600860 	.word	0x08600860
 8006144:	0218ffff 	.word	0x0218ffff
 8006148:	20003e32 	.word	0x20003e32
 800614c:	08005dc9 	.word	0x08005dc9
 8006150:	006ddd00 	.word	0x006ddd00

08006154 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006154:	2040      	movs	r0, #64	; 0x40
 8006156:	f7ff bf75 	b.w	8006044 <tcp_alloc>
	...

0800615c <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <tcp_next_iss+0x10>)
 800615e:	4a04      	ldr	r2, [pc, #16]	; (8006170 <tcp_next_iss+0x14>)
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	4410      	add	r0, r2
 8006166:	6018      	str	r0, [r3, #0]
}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000008 	.word	0x20000008
 8006170:	200076c8 	.word	0x200076c8

08006174 <tcp_eff_send_mss_impl>:
{
 8006174:	b510      	push	{r4, lr}
 8006176:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8006178:	4608      	mov	r0, r1
 800617a:	f004 fab1 	bl	800a6e0 <ip4_route>
    if (outif == NULL) {
 800617e:	b130      	cbz	r0, 800618e <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8006180:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8006182:	b123      	cbz	r3, 800618e <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006184:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006186:	b29b      	uxth	r3, r3
 8006188:	429c      	cmp	r4, r3
 800618a:	bf28      	it	cs
 800618c:	461c      	movcs	r4, r3
}
 800618e:	4620      	mov	r0, r4
 8006190:	bd10      	pop	{r4, pc}
	...

08006194 <tcp_connect>:
{
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	461d      	mov	r5, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006198:	4604      	mov	r4, r0
 800619a:	2800      	cmp	r0, #0
 800619c:	d068      	beq.n	8006270 <tcp_connect+0xdc>
 800619e:	2900      	cmp	r1, #0
 80061a0:	d066      	beq.n	8006270 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80061a2:	7d03      	ldrb	r3, [r0, #20]
 80061a4:	b153      	cbz	r3, 80061bc <tcp_connect+0x28>
 80061a6:	4b35      	ldr	r3, [pc, #212]	; (800627c <tcp_connect+0xe8>)
 80061a8:	4935      	ldr	r1, [pc, #212]	; (8006280 <tcp_connect+0xec>)
 80061aa:	4836      	ldr	r0, [pc, #216]	; (8006284 <tcp_connect+0xf0>)
 80061ac:	f44f 725e 	mov.w	r2, #888	; 0x378
 80061b0:	f006 fb60 	bl	800c874 <iprintf>
 80061b4:	f06f 0509 	mvn.w	r5, #9
}
 80061b8:	4628      	mov	r0, r5
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80061bc:	680b      	ldr	r3, [r1, #0]
 80061be:	6043      	str	r3, [r0, #4]
  if (ip_addr_isany(&pcb->local_ip)) {
 80061c0:	6803      	ldr	r3, [r0, #0]
  pcb->remote_port = port;
 80061c2:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 80061c4:	b933      	cbnz	r3, 80061d4 <tcp_connect+0x40>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 80061c6:	3004      	adds	r0, #4
 80061c8:	f004 fa8a 	bl	800a6e0 <ip4_route>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d052      	beq.n	8006276 <tcp_connect+0xe2>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80061d0:	6843      	ldr	r3, [r0, #4]
 80061d2:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 80061d4:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d039      	beq.n	800624e <tcp_connect+0xba>
  iss = tcp_next_iss(pcb);
 80061da:	4620      	mov	r0, r4
 80061dc:	f7ff ffbe 	bl	800615c <tcp_next_iss>
  pcb->rcv_nxt = 0;
 80061e0:	4a29      	ldr	r2, [pc, #164]	; (8006288 <tcp_connect+0xf4>)
  pcb->snd_nxt = iss;
 80061e2:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->rcv_nxt = 0;
 80061e4:	2300      	movs	r3, #0
  pcb->lastack = iss - 1;
 80061e6:	3801      	subs	r0, #1
  pcb->rcv_nxt = 0;
 80061e8:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
  pcb->lastack = iss - 1;
 80061ec:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_lbb = iss - 1;
 80061ee:	e9c4 0015 	strd	r0, r0, [r4, #84]	; 0x54
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80061f2:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->mss = INITIAL_MSS;
 80061f4:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->snd_wnd = TCP_WND;
 80061f8:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80061fc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006200:	1d21      	adds	r1, r4, #4
  pcb->mss = INITIAL_MSS;
 8006202:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006204:	f7ff ffb6 	bl	8006174 <tcp_eff_send_mss_impl>
  pcb->cwnd = 1;
 8006208:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800620a:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->connected = connected;
 800620c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  pcb->cwnd = 1;
 8006210:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8006214:	2102      	movs	r1, #2
 8006216:	4620      	mov	r0, r4
 8006218:	f001 fe58 	bl	8007ecc <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800621c:	4605      	mov	r5, r0
 800621e:	2800      	cmp	r0, #0
 8006220:	d1ca      	bne.n	80061b8 <tcp_connect+0x24>
    pcb->state = SYN_SENT;
 8006222:	2302      	movs	r3, #2
 8006224:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8006226:	b12e      	cbz	r6, 8006234 <tcp_connect+0xa0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006228:	4a18      	ldr	r2, [pc, #96]	; (800628c <tcp_connect+0xf8>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	42a3      	cmp	r3, r4
 800622e:	d117      	bne.n	8006260 <tcp_connect+0xcc>
 8006230:	68e3      	ldr	r3, [r4, #12]
 8006232:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <tcp_connect+0xfc>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	60e2      	str	r2, [r4, #12]
 800623a:	601c      	str	r4, [r3, #0]
 800623c:	f002 fa46 	bl	80086cc <tcp_timer_needed>
 8006240:	4b14      	ldr	r3, [pc, #80]	; (8006294 <tcp_connect+0x100>)
 8006242:	2201      	movs	r2, #1
    tcp_output(pcb);
 8006244:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8006246:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8006248:	f001 ff28 	bl	800809c <tcp_output>
 800624c:	e7b4      	b.n	80061b8 <tcp_connect+0x24>
    pcb->local_port = tcp_new_port();
 800624e:	f7ff f91f 	bl	8005490 <tcp_new_port>
 8006252:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8006254:	2800      	cmp	r0, #0
 8006256:	d1c0      	bne.n	80061da <tcp_connect+0x46>
      return ERR_BUF;
 8006258:	f06f 0501 	mvn.w	r5, #1
 800625c:	e7ac      	b.n	80061b8 <tcp_connect+0x24>
 800625e:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0e7      	beq.n	8006234 <tcp_connect+0xa0>
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	42a2      	cmp	r2, r4
 8006268:	d1f9      	bne.n	800625e <tcp_connect+0xca>
 800626a:	68e2      	ldr	r2, [r4, #12]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e7e1      	b.n	8006234 <tcp_connect+0xa0>
    return ERR_VAL;
 8006270:	f06f 0505 	mvn.w	r5, #5
 8006274:	e7a0      	b.n	80061b8 <tcp_connect+0x24>
      return ERR_RTE;
 8006276:	f06f 0503 	mvn.w	r5, #3
 800627a:	e79d      	b.n	80061b8 <tcp_connect+0x24>
 800627c:	0800e2be 	.word	0x0800e2be
 8006280:	0800e2f9 	.word	0x0800e2f9
 8006284:	0800d741 	.word	0x0800d741
 8006288:	08600860 	.word	0x08600860
 800628c:	200076d0 	.word	0x200076d0
 8006290:	200076c4 	.word	0x200076c4
 8006294:	200076c0 	.word	0x200076c0

08006298 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800629c:	4604      	mov	r4, r0
 800629e:	b180      	cbz	r0, 80062c2 <tcp_netif_ip_addr_changed+0x2a>
 80062a0:	6803      	ldr	r3, [r0, #0]
 80062a2:	b173      	cbz	r3, 80062c2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <tcp_netif_ip_addr_changed+0x40>)
 80062a6:	6819      	ldr	r1, [r3, #0]
 80062a8:	f7ff fe9f 	bl	8005fea <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <tcp_netif_ip_addr_changed+0x44>)
 80062ae:	4620      	mov	r0, r4
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	f7ff fe9a 	bl	8005fea <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80062b6:	b125      	cbz	r5, 80062c2 <tcp_netif_ip_addr_changed+0x2a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b113      	cbz	r3, 80062c2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80062bc:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <tcp_netif_ip_addr_changed+0x48>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	b903      	cbnz	r3, 80062c4 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80062c8:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80062ca:	4288      	cmp	r0, r1
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80062cc:	bf04      	itt	eq
 80062ce:	6829      	ldreq	r1, [r5, #0]
 80062d0:	6019      	streq	r1, [r3, #0]
{
 80062d2:	4613      	mov	r3, r2
 80062d4:	e7f4      	b.n	80062c0 <tcp_netif_ip_addr_changed+0x28>
 80062d6:	bf00      	nop
 80062d8:	200076c4 	.word	0x200076c4
 80062dc:	200076d0 	.word	0x200076d0
 80062e0:	200076cc 	.word	0x200076cc

080062e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80062e6:	68c3      	ldr	r3, [r0, #12]
{
 80062e8:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80062ea:	8998      	ldrh	r0, [r3, #12]
{
 80062ec:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80062ee:	f7fe f993 	bl	8004618 <lwip_htons>
 80062f2:	07c2      	lsls	r2, r0, #31
 80062f4:	d414      	bmi.n	8006320 <tcp_oos_insert_segment+0x3c>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 80062f6:	4e18      	ldr	r6, [pc, #96]	; (8006358 <tcp_oos_insert_segment+0x74>)
 80062f8:	68e7      	ldr	r7, [r4, #12]
 80062fa:	6830      	ldr	r0, [r6, #0]
 80062fc:	892b      	ldrh	r3, [r5, #8]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	8922      	ldrh	r2, [r4, #8]
 8006302:	4403      	add	r3, r0
 8006304:	440a      	add	r2, r1
 8006306:	1a9a      	subs	r2, r3, r2
    while (next &&
 8006308:	2a00      	cmp	r2, #0
 800630a:	da0f      	bge.n	800632c <tcp_oos_insert_segment+0x48>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800630c:	1a5b      	subs	r3, r3, r1
    if (next &&
 800630e:	2b00      	cmp	r3, #0
 8006310:	dd0a      	ble.n	8006328 <tcp_oos_insert_segment+0x44>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006312:	1a09      	subs	r1, r1, r0
 8006314:	b289      	uxth	r1, r1
 8006316:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006318:	6868      	ldr	r0, [r5, #4]
 800631a:	f7fe fefb 	bl	8005114 <pbuf_realloc>
 800631e:	e003      	b.n	8006328 <tcp_oos_insert_segment+0x44>
    tcp_segs_free(next);
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff f9d1 	bl	80056c8 <tcp_segs_free>
    next = NULL;
 8006326:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8006328:	602c      	str	r4, [r5, #0]
}
 800632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800632c:	89b8      	ldrh	r0, [r7, #12]
 800632e:	f7fe f973 	bl	8004618 <lwip_htons>
 8006332:	07c3      	lsls	r3, r0, #31
 8006334:	d507      	bpl.n	8006346 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006336:	68eb      	ldr	r3, [r5, #12]
 8006338:	2001      	movs	r0, #1
 800633a:	899f      	ldrh	r7, [r3, #12]
 800633c:	f7fe f96c 	bl	8004618 <lwip_htons>
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	4338      	orrs	r0, r7
 8006344:	8198      	strh	r0, [r3, #12]
      next = next->next;
 8006346:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff f9af 	bl	80056ac <tcp_seg_free>
 800634e:	463c      	mov	r4, r7
    while (next &&
 8006350:	2f00      	cmp	r7, #0
 8006352:	d1d1      	bne.n	80062f8 <tcp_oos_insert_segment+0x14>
 8006354:	e7e8      	b.n	8006328 <tcp_oos_insert_segment+0x44>
 8006356:	bf00      	nop
 8006358:	20003e58 	.word	0x20003e58

0800635c <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800635c:	7d03      	ldrb	r3, [r0, #20]
 800635e:	2b03      	cmp	r3, #3
{
 8006360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006366:	d806      	bhi.n	8006376 <tcp_receive+0x1a>
 8006368:	4b83      	ldr	r3, [pc, #524]	; (8006578 <tcp_receive+0x21c>)
 800636a:	4984      	ldr	r1, [pc, #528]	; (800657c <tcp_receive+0x220>)
 800636c:	4884      	ldr	r0, [pc, #528]	; (8006580 <tcp_receive+0x224>)
 800636e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006372:	f006 fa7f 	bl	800c874 <iprintf>

  if (flags & TCP_ACK) {
 8006376:	4b83      	ldr	r3, [pc, #524]	; (8006584 <tcp_receive+0x228>)
 8006378:	4e83      	ldr	r6, [pc, #524]	; (8006588 <tcp_receive+0x22c>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	f013 0f10 	tst.w	r3, #16
 8006380:	f000 8174 	beq.w	800666c <tcp_receive+0x310>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006384:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 8006388:	6831      	ldr	r1, [r6, #0]
 800638a:	4d80      	ldr	r5, [pc, #512]	; (800658c <tcp_receive+0x230>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800638c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8006390:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006392:	1a47      	subs	r7, r0, r1
 8006394:	2f00      	cmp	r7, #0
 8006396:	db0c      	blt.n	80063b2 <tcp_receive+0x56>
 8006398:	4288      	cmp	r0, r1
 800639a:	d103      	bne.n	80063a4 <tcp_receive+0x48>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800639c:	ebac 0003 	sub.w	r0, ip, r3
 80063a0:	2800      	cmp	r0, #0
 80063a2:	db06      	blt.n	80063b2 <tcp_receive+0x56>
 80063a4:	459c      	cmp	ip, r3
 80063a6:	d11a      	bne.n	80063de <tcp_receive+0x82>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80063a8:	4879      	ldr	r0, [pc, #484]	; (8006590 <tcp_receive+0x234>)
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	89c0      	ldrh	r0, [r0, #14]
 80063ae:	4290      	cmp	r0, r2
 80063b0:	d915      	bls.n	80063de <tcp_receive+0x82>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80063b2:	4877      	ldr	r0, [pc, #476]	; (8006590 <tcp_receive+0x234>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80063b4:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80063b8:	6800      	ldr	r0, [r0, #0]
 80063ba:	89c0      	ldrh	r0, [r0, #14]
 80063bc:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
 80063c0:	b287      	uxth	r7, r0
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80063c2:	45be      	cmp	lr, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 80063c4:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
        pcb->snd_wnd_max = pcb->snd_wnd;
 80063c8:	bf38      	it	cc
 80063ca:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
 80063ce:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80063d2:	bb97      	cbnz	r7, 800643a <tcp_receive+0xde>
        if (pcb->persist_backoff == 0) {
 80063d4:	b919      	cbnz	r1, 80063de <tcp_receive+0x82>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80063d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063da:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80063de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80063e0:	4f6c      	ldr	r7, [pc, #432]	; (8006594 <tcp_receive+0x238>)
 80063e2:	1a19      	subs	r1, r3, r0
 80063e4:	2900      	cmp	r1, #0
 80063e6:	dc37      	bgt.n	8006458 <tcp_receive+0xfc>
      /* Clause 2 */
      if (tcplen == 0) {
 80063e8:	496b      	ldr	r1, [pc, #428]	; (8006598 <tcp_receive+0x23c>)
 80063ea:	8809      	ldrh	r1, [r1, #0]
 80063ec:	bb81      	cbnz	r1, 8006450 <tcp_receive+0xf4>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80063ee:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
 80063f2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80063f4:	4462      	add	r2, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80063f6:	4471      	add	r1, lr
 80063f8:	4291      	cmp	r1, r2
 80063fa:	d129      	bne.n	8006450 <tcp_receive+0xf4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80063fc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006400:	2a00      	cmp	r2, #0
 8006402:	db25      	blt.n	8006450 <tcp_receive+0xf4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8006404:	4298      	cmp	r0, r3
 8006406:	d123      	bne.n	8006450 <tcp_receive+0xf4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006408:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800640c:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800640e:	bf1c      	itt	ne
 8006410:	3301      	addne	r3, #1
 8006412:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8006416:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800641a:	2b03      	cmp	r3, #3
 800641c:	d913      	bls.n	8006446 <tcp_receive+0xea>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800641e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006422:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006424:	4413      	add	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	429a      	cmp	r2, r3
 800642a:	d201      	bcs.n	8006430 <tcp_receive+0xd4>
                  pcb->cwnd += pcb->mss;
 800642c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006430:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006578 <tcp_receive+0x21c>
 8006434:	f8df a148 	ldr.w	sl, [pc, #328]	; 8006580 <tcp_receive+0x224>
 8006438:	e10b      	b.n	8006652 <tcp_receive+0x2f6>
      } else if (pcb->persist_backoff > 0) {
 800643a:	2900      	cmp	r1, #0
 800643c:	d0cf      	beq.n	80063de <tcp_receive+0x82>
          pcb->persist_backoff = 0;
 800643e:	2100      	movs	r1, #0
 8006440:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 8006444:	e7cb      	b.n	80063de <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8006446:	d1f3      	bne.n	8006430 <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
 8006448:	4620      	mov	r0, r4
 800644a:	f002 f83e 	bl	80084ca <tcp_rexmit_fast>
 800644e:	e7ef      	b.n	8006430 <tcp_receive+0xd4>
        pcb->dupacks = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006456:	e7eb      	b.n	8006430 <tcp_receive+0xd4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006458:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800645a:	1a9a      	subs	r2, r3, r2
 800645c:	2a00      	cmp	r2, #0
 800645e:	f300 8087 	bgt.w	8006570 <tcp_receive+0x214>
      if (pcb->flags & TF_INFR) {
 8006462:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006464:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8006468:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 800646a:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 800646c:	bf41      	itttt	mi
 800646e:	f022 0204 	bicmi.w	r2, r2, #4
 8006472:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8006474:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8006478:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800647c:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800647e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8006480:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006482:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8006486:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8006488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800648c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8006490:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8006494:	d90f      	bls.n	80064b6 <tcp_receive+0x15a>
        if (pcb->cwnd < pcb->ssthresh) {
 8006496:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800649a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800649e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80064a0:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80064a2:	bf9c      	itt	ls
 80064a4:	435b      	mulls	r3, r3
 80064a6:	fb93 f3f2 	sdivls	r3, r3, r2
 80064aa:	4413      	add	r3, r2
 80064ac:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d201      	bcs.n	80064b6 <tcp_receive+0x15a>
            pcb->cwnd = new_cwnd;
 80064b2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80064b6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006578 <tcp_receive+0x21c>
 80064ba:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006580 <tcp_receive+0x224>
 80064be:	e04a      	b.n	8006556 <tcp_receive+0x1fa>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	6858      	ldr	r0, [r3, #4]
 80064c4:	f7fe f8ab 	bl	800461e <lwip_htonl>
 80064c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064ca:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4683      	mov	fp, r0
 80064d2:	8998      	ldrh	r0, [r3, #12]
 80064d4:	f7fe f8a0 	bl	8004618 <lwip_htons>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	f010 0003 	ands.w	r0, r0, #3
 80064de:	eba8 0803 	sub.w	r8, r8, r3
 80064e2:	bf18      	it	ne
 80064e4:	2001      	movne	r0, #1
 80064e6:	44d8      	add	r8, fp
 80064e8:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80064ea:	f1b8 0f00 	cmp.w	r8, #0
 80064ee:	dc35      	bgt.n	800655c <tcp_receive+0x200>
        next = pcb->unacked;
 80064f0:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80064f4:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80064f8:	f8d8 3000 	ldr.w	r3, [r8]
 80064fc:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80064fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006502:	f7fe fe77 	bl	80051f4 <pbuf_clen>
 8006506:	4583      	cmp	fp, r0
 8006508:	d206      	bcs.n	8006518 <tcp_receive+0x1bc>
 800650a:	464b      	mov	r3, r9
 800650c:	f240 429e 	movw	r2, #1182	; 0x49e
 8006510:	4922      	ldr	r1, [pc, #136]	; (800659c <tcp_receive+0x240>)
 8006512:	4650      	mov	r0, sl
 8006514:	f006 f9ae 	bl	800c874 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006518:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800651c:	f7fe fe6a 	bl	80051f4 <pbuf_clen>
 8006520:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006524:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006526:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8006528:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800652c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006530:	4413      	add	r3, r2
        tcp_seg_free(next);
 8006532:	4640      	mov	r0, r8
        recv_acked += next->len;
 8006534:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8006536:	f7ff f8b9 	bl	80056ac <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800653a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800653e:	b153      	cbz	r3, 8006556 <tcp_receive+0x1fa>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8006540:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006542:	b943      	cbnz	r3, 8006556 <tcp_receive+0x1fa>
 8006544:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006546:	b933      	cbnz	r3, 8006556 <tcp_receive+0x1fa>
 8006548:	464b      	mov	r3, r9
 800654a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800654e:	4914      	ldr	r1, [pc, #80]	; (80065a0 <tcp_receive+0x244>)
 8006550:	4650      	mov	r0, sl
 8006552:	f006 f98f 	bl	800c874 <iprintf>
      while (pcb->unacked != NULL &&
 8006556:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1b1      	bne.n	80064c0 <tcp_receive+0x164>
      if (pcb->unacked == NULL) {
 800655c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800655e:	2300      	movs	r3, #0
 8006560:	b922      	cbnz	r2, 800656c <tcp_receive+0x210>
        pcb->rtime = -1;
 8006562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006566:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8006568:	76e3      	strb	r3, [r4, #27]
 800656a:	e761      	b.n	8006430 <tcp_receive+0xd4>
        pcb->rtime = 0;
 800656c:	8623      	strh	r3, [r4, #48]	; 0x30
 800656e:	e7fb      	b.n	8006568 <tcp_receive+0x20c>
      tcp_send_empty_ack(pcb);
 8006570:	4620      	mov	r0, r4
 8006572:	f001 fd5e 	bl	8008032 <tcp_send_empty_ack>
 8006576:	e75b      	b.n	8006430 <tcp_receive+0xd4>
 8006578:	0800e784 	.word	0x0800e784
 800657c:	0800e7b6 	.word	0x0800e7b6
 8006580:	0800d741 	.word	0x0800d741
 8006584:	20003e38 	.word	0x20003e38
 8006588:	20003e58 	.word	0x20003e58
 800658c:	20003e34 	.word	0x20003e34
 8006590:	20003e60 	.word	0x20003e60
 8006594:	20003e4c 	.word	0x20003e4c
 8006598:	20003e6e 	.word	0x20003e6e
 800659c:	0800e7cf 	.word	0x0800e7cf
 80065a0:	0800e7f7 	.word	0x0800e7f7
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80065a4:	682a      	ldr	r2, [r5, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	6858      	ldr	r0, [r3, #4]
 80065ac:	f7fe f837 	bl	800461e <lwip_htonl>
 80065b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80065b2:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4683      	mov	fp, r0
 80065ba:	8998      	ldrh	r0, [r3, #12]
 80065bc:	f7fe f82c 	bl	8004618 <lwip_htons>
 80065c0:	9a01      	ldr	r2, [sp, #4]
 80065c2:	f010 0003 	ands.w	r0, r0, #3
 80065c6:	eba2 0808 	sub.w	r8, r2, r8
 80065ca:	bf18      	it	ne
 80065cc:	2001      	movne	r0, #1
 80065ce:	eba8 080b 	sub.w	r8, r8, fp
 80065d2:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80065d6:	f1b8 0f00 	cmp.w	r8, #0
 80065da:	db3d      	blt.n	8006658 <tcp_receive+0x2fc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dc38      	bgt.n	8006658 <tcp_receive+0x2fc>
      next = pcb->unsent;
 80065e6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80065ea:	f8d8 3000 	ldr.w	r3, [r8]
 80065ee:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80065f0:	b90b      	cbnz	r3, 80065f6 <tcp_receive+0x29a>
        pcb->unsent_oversize = 0;
 80065f2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80065f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80065fa:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 80065fe:	f7fe fdf9 	bl	80051f4 <pbuf_clen>
 8006602:	4583      	cmp	fp, r0
 8006604:	d206      	bcs.n	8006614 <tcp_receive+0x2b8>
 8006606:	464b      	mov	r3, r9
 8006608:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800660c:	49b5      	ldr	r1, [pc, #724]	; (80068e4 <tcp_receive+0x588>)
 800660e:	4650      	mov	r0, sl
 8006610:	f006 f930 	bl	800c874 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006614:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006618:	f7fe fdec 	bl	80051f4 <pbuf_clen>
 800661c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006620:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006622:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8006624:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006628:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 800662c:	4413      	add	r3, r2
      tcp_seg_free(next);
 800662e:	4640      	mov	r0, r8
      recv_acked += next->len;
 8006630:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8006632:	f7ff f83b 	bl	80056ac <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8006636:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800663a:	b153      	cbz	r3, 8006652 <tcp_receive+0x2f6>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800663c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800663e:	b943      	cbnz	r3, 8006652 <tcp_receive+0x2f6>
 8006640:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006642:	b933      	cbnz	r3, 8006652 <tcp_receive+0x2f6>
 8006644:	464b      	mov	r3, r9
 8006646:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800664a:	49a7      	ldr	r1, [pc, #668]	; (80068e8 <tcp_receive+0x58c>)
 800664c:	4650      	mov	r0, sl
 800664e:	f006 f911 	bl	800c874 <iprintf>
    while (pcb->unsent != NULL &&
 8006652:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1a5      	bne.n	80065a4 <tcp_receive+0x248>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8006658:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800665c:	883a      	ldrh	r2, [r7, #0]
 800665e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006660:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8006662:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006666:	2a00      	cmp	r2, #0
 8006668:	f040 8118 	bne.w	800689c <tcp_receive+0x540>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800666c:	4f9f      	ldr	r7, [pc, #636]	; (80068ec <tcp_receive+0x590>)
 800666e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006670:	8838      	ldrh	r0, [r7, #0]
 8006672:	6833      	ldr	r3, [r6, #0]
 8006674:	2800      	cmp	r0, #0
 8006676:	f000 831b 	beq.w	8006cb0 <tcp_receive+0x954>
 800667a:	7d21      	ldrb	r1, [r4, #20]
 800667c:	2906      	cmp	r1, #6
 800667e:	f200 8317 	bhi.w	8006cb0 <tcp_receive+0x954>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006682:	eba2 0a03 	sub.w	sl, r2, r3
 8006686:	f1ba 0f01 	cmp.w	sl, #1
 800668a:	f100 815a 	bmi.w	8006942 <tcp_receive+0x5e6>
 800668e:	f1c3 0101 	rsb	r1, r3, #1
 8006692:	1a09      	subs	r1, r1, r0
 8006694:	4411      	add	r1, r2
 8006696:	2900      	cmp	r1, #0
 8006698:	f300 8153 	bgt.w	8006942 <tcp_receive+0x5e6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800669c:	4d94      	ldr	r5, [pc, #592]	; (80068f0 <tcp_receive+0x594>)
 800669e:	f8d5 8004 	ldr.w	r8, [r5, #4]
      off = pcb->rcv_nxt - seqno;
 80066a2:	46d1      	mov	r9, sl
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80066a4:	f1b8 0f00 	cmp.w	r8, #0
 80066a8:	d106      	bne.n	80066b8 <tcp_receive+0x35c>
 80066aa:	4b92      	ldr	r3, [pc, #584]	; (80068f4 <tcp_receive+0x598>)
 80066ac:	4992      	ldr	r1, [pc, #584]	; (80068f8 <tcp_receive+0x59c>)
 80066ae:	4893      	ldr	r0, [pc, #588]	; (80068fc <tcp_receive+0x5a0>)
 80066b0:	f240 523c 	movw	r2, #1340	; 0x53c
 80066b4:	f006 f8de 	bl	800c874 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80066b8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80066bc:	459a      	cmp	sl, r3
 80066be:	dd06      	ble.n	80066ce <tcp_receive+0x372>
 80066c0:	4b8c      	ldr	r3, [pc, #560]	; (80068f4 <tcp_receive+0x598>)
 80066c2:	498f      	ldr	r1, [pc, #572]	; (8006900 <tcp_receive+0x5a4>)
 80066c4:	488d      	ldr	r0, [pc, #564]	; (80068fc <tcp_receive+0x5a0>)
 80066c6:	f240 523d 	movw	r2, #1341	; 0x53d
 80066ca:	f006 f8d3 	bl	800c874 <iprintf>
      if (inseg.p->len < off) {
 80066ce:	6868      	ldr	r0, [r5, #4]
 80066d0:	8943      	ldrh	r3, [r0, #10]
 80066d2:	4553      	cmp	r3, sl
 80066d4:	fa1f fb8a 	uxth.w	fp, sl
 80066d8:	f280 8127 	bge.w	800692a <tcp_receive+0x5ce>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80066dc:	8903      	ldrh	r3, [r0, #8]
 80066de:	4553      	cmp	r3, sl
 80066e0:	da06      	bge.n	80066f0 <tcp_receive+0x394>
 80066e2:	4b84      	ldr	r3, [pc, #528]	; (80068f4 <tcp_receive+0x598>)
 80066e4:	4987      	ldr	r1, [pc, #540]	; (8006904 <tcp_receive+0x5a8>)
 80066e6:	4885      	ldr	r0, [pc, #532]	; (80068fc <tcp_receive+0x5a0>)
 80066e8:	f240 523f 	movw	r2, #1343	; 0x53f
 80066ec:	f006 f8c2 	bl	800c874 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80066f0:	686b      	ldr	r3, [r5, #4]
 80066f2:	8919      	ldrh	r1, [r3, #8]
 80066f4:	eba1 010b 	sub.w	r1, r1, fp
 80066f8:	b289      	uxth	r1, r1
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80066fa:	2200      	movs	r2, #0
        while (p->len < off) {
 80066fc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006700:	454b      	cmp	r3, r9
 8006702:	f2c0 8109 	blt.w	8006918 <tcp_receive+0x5bc>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8006706:	f1c9 0100 	rsb	r1, r9, #0
 800670a:	b209      	sxth	r1, r1
 800670c:	4640      	mov	r0, r8
 800670e:	f7fe fbb7 	bl	8004e80 <pbuf_header>
 8006712:	b130      	cbz	r0, 8006722 <tcp_receive+0x3c6>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006714:	4b77      	ldr	r3, [pc, #476]	; (80068f4 <tcp_receive+0x598>)
 8006716:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800671a:	497b      	ldr	r1, [pc, #492]	; (8006908 <tcp_receive+0x5ac>)
 800671c:	4877      	ldr	r0, [pc, #476]	; (80068fc <tcp_receive+0x5a0>)
 800671e:	f006 f8a9 	bl	800c874 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006722:	8929      	ldrh	r1, [r5, #8]
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006728:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800672a:	440b      	add	r3, r1
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006730:	68eb      	ldr	r3, [r5, #12]
 8006732:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006734:	6831      	ldr	r1, [r6, #0]
 8006736:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006738:	1a8b      	subs	r3, r1, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	f2c0 82b2 	blt.w	8006ca4 <tcp_receive+0x948>
 8006740:	1c4b      	adds	r3, r1, #1
 8006742:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	1a1b      	subs	r3, r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	f300 82ab 	bgt.w	8006ca4 <tcp_receive+0x948>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800674e:	4291      	cmp	r1, r2
 8006750:	f040 81c7 	bne.w	8006ae2 <tcp_receive+0x786>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006754:	4d66      	ldr	r5, [pc, #408]	; (80068f0 <tcp_receive+0x594>)
 8006756:	68eb      	ldr	r3, [r5, #12]
 8006758:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800675c:	8998      	ldrh	r0, [r3, #12]
 800675e:	f7fd ff5b 	bl	8004618 <lwip_htons>
 8006762:	f010 0003 	ands.w	r0, r0, #3
 8006766:	bf18      	it	ne
 8006768:	2001      	movne	r0, #1
 800676a:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 800676c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800676e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8006770:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8006772:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8006774:	d242      	bcs.n	80067fc <tcp_receive+0x4a0>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006776:	68eb      	ldr	r3, [r5, #12]
 8006778:	8998      	ldrh	r0, [r3, #12]
 800677a:	f7fd ff4d 	bl	8004618 <lwip_htons>
 800677e:	07c2      	lsls	r2, r0, #31
 8006780:	d510      	bpl.n	80067a4 <tcp_receive+0x448>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006782:	68eb      	ldr	r3, [r5, #12]
 8006784:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8006788:	4640      	mov	r0, r8
 800678a:	f7fd ff45 	bl	8004618 <lwip_htons>
 800678e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006792:	f7fd ff41 	bl	8004618 <lwip_htons>
 8006796:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800679a:	68eb      	ldr	r3, [r5, #12]
 800679c:	ea40 0808 	orr.w	r8, r0, r8
 80067a0:	f8a3 800c 	strh.w	r8, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80067a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067a6:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80067a8:	68eb      	ldr	r3, [r5, #12]
 80067aa:	8998      	ldrh	r0, [r3, #12]
 80067ac:	f7fd ff34 	bl	8004618 <lwip_htons>
 80067b0:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 80067b2:	bf48      	it	mi
 80067b4:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80067b6:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80067b8:	bf44      	itt	mi
 80067ba:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80067be:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80067c0:	8929      	ldrh	r1, [r5, #8]
 80067c2:	f7fe fca7 	bl	8005114 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80067c6:	68eb      	ldr	r3, [r5, #12]
 80067c8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80067cc:	8998      	ldrh	r0, [r3, #12]
 80067ce:	f7fd ff23 	bl	8004618 <lwip_htons>
 80067d2:	f010 0003 	ands.w	r0, r0, #3
 80067d6:	bf18      	it	ne
 80067d8:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80067da:	6833      	ldr	r3, [r6, #0]
 80067dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80067de:	4440      	add	r0, r8
 80067e0:	b280      	uxth	r0, r0
 80067e2:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80067e4:	4418      	add	r0, r3
 80067e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067e8:	4413      	add	r3, r2
 80067ea:	4298      	cmp	r0, r3
 80067ec:	d006      	beq.n	80067fc <tcp_receive+0x4a0>
 80067ee:	4b41      	ldr	r3, [pc, #260]	; (80068f4 <tcp_receive+0x598>)
 80067f0:	4946      	ldr	r1, [pc, #280]	; (800690c <tcp_receive+0x5b0>)
 80067f2:	4842      	ldr	r0, [pc, #264]	; (80068fc <tcp_receive+0x5a0>)
 80067f4:	f240 527f 	movw	r2, #1407	; 0x57f
 80067f8:	f006 f83c 	bl	800c874 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80067fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 80ae 	beq.w	8006960 <tcp_receive+0x604>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006804:	68eb      	ldr	r3, [r5, #12]
 8006806:	8998      	ldrh	r0, [r3, #12]
 8006808:	f7fd ff06 	bl	8004618 <lwip_htons>
 800680c:	07c0      	lsls	r0, r0, #31
 800680e:	f100 80a4 	bmi.w	800695a <tcp_receive+0x5fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8006812:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
 8006816:	6830      	ldr	r0, [r6, #0]
 8006818:	883b      	ldrh	r3, [r7, #0]
 800681a:	4403      	add	r3, r0
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800681c:	f1b8 0f00 	cmp.w	r8, #0
 8006820:	d039      	beq.n	8006896 <tcp_receive+0x53a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8006822:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8006826:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800682a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800682e:	4411      	add	r1, r2
 8006830:	1a59      	subs	r1, r3, r1
            while (next &&
 8006832:	2900      	cmp	r1, #0
 8006834:	f280 80c1 	bge.w	80069ba <tcp_receive+0x65e>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8006838:	1a9b      	subs	r3, r3, r2
            if (next &&
 800683a:	2b00      	cmp	r3, #0
 800683c:	dd2b      	ble.n	8006896 <tcp_receive+0x53a>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800683e:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8006840:	1a12      	subs	r2, r2, r0
 8006842:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006844:	8998      	ldrh	r0, [r3, #12]
 8006846:	f7fd fee7 	bl	8004618 <lwip_htons>
 800684a:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 800684c:	bf48      	it	mi
 800684e:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8006850:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8006852:	bf44      	itt	mi
 8006854:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8006858:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800685a:	8929      	ldrh	r1, [r5, #8]
 800685c:	f7fe fc5a 	bl	8005114 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8006860:	68eb      	ldr	r3, [r5, #12]
 8006862:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006866:	8998      	ldrh	r0, [r3, #12]
 8006868:	f7fd fed6 	bl	8004618 <lwip_htons>
 800686c:	f010 0003 	ands.w	r0, r0, #3
 8006870:	bf18      	it	ne
 8006872:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8006874:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8006876:	4448      	add	r0, r9
 8006878:	b280      	uxth	r0, r0
 800687a:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800687c:	4418      	add	r0, r3
 800687e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4298      	cmp	r0, r3
 8006886:	d006      	beq.n	8006896 <tcp_receive+0x53a>
 8006888:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <tcp_receive+0x598>)
 800688a:	4921      	ldr	r1, [pc, #132]	; (8006910 <tcp_receive+0x5b4>)
 800688c:	481b      	ldr	r0, [pc, #108]	; (80068fc <tcp_receive+0x5a0>)
 800688e:	f240 52af 	movw	r2, #1455	; 0x5af
 8006892:	f005 ffef 	bl	800c874 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8006896:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 800689a:	e061      	b.n	8006960 <tcp_receive+0x604>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800689c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800689e:	6829      	ldr	r1, [r5, #0]
 80068a0:	1a5b      	subs	r3, r3, r1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f6bf aee2 	bge.w	800666c <tcp_receive+0x310>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80068a8:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <tcp_receive+0x5b8>)
      m = m - (pcb->sa >> 3);
 80068aa:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 80068b2:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 80068b6:	b289      	uxth	r1, r1
 80068b8:	b20b      	sxth	r3, r1
      if (m < 0) {
 80068ba:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 80068bc:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 80068c0:	4408      	add	r0, r1
        m = -m;
 80068c2:	bfbc      	itt	lt
 80068c4:	4249      	neglt	r1, r1
 80068c6:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80068c8:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 80068cc:	4413      	add	r3, r2
      pcb->sa += m;
 80068ce:	b200      	sxth	r0, r0
      pcb->sv += m;
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80068d4:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80068d8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80068dc:	2300      	movs	r3, #0
      pcb->sa += m;
 80068de:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80068e0:	6363      	str	r3, [r4, #52]	; 0x34
 80068e2:	e6c3      	b.n	800666c <tcp_receive+0x310>
 80068e4:	0800e7cf 	.word	0x0800e7cf
 80068e8:	0800e7f7 	.word	0x0800e7f7
 80068ec:	20003e6e 	.word	0x20003e6e
 80068f0:	20003e3c 	.word	0x20003e3c
 80068f4:	0800e784 	.word	0x0800e784
 80068f8:	0800e817 	.word	0x0800e817
 80068fc:	0800d741 	.word	0x0800d741
 8006900:	0800e827 	.word	0x0800e827
 8006904:	0800e836 	.word	0x0800e836
 8006908:	0800e846 	.word	0x0800e846
 800690c:	0800e859 	.word	0x0800e859
 8006910:	0800e890 	.word	0x0800e890
 8006914:	200076c8 	.word	0x200076c8
          p->tot_len = new_tot_len;
 8006918:	f8a8 1008 	strh.w	r1, [r8, #8]
          p->len = 0;
 800691c:	f8a8 200a 	strh.w	r2, [r8, #10]
          off -= p->len;
 8006920:	eba9 0903 	sub.w	r9, r9, r3
          p = p->next;
 8006924:	f8d8 8000 	ldr.w	r8, [r8]
 8006928:	e6e8      	b.n	80066fc <tcp_receive+0x3a0>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800692a:	f1cb 0100 	rsb	r1, fp, #0
 800692e:	b209      	sxth	r1, r1
 8006930:	f7fe faa6 	bl	8004e80 <pbuf_header>
 8006934:	2800      	cmp	r0, #0
 8006936:	f43f aef4 	beq.w	8006722 <tcp_receive+0x3c6>
          LWIP_ASSERT("pbuf_header failed", 0);
 800693a:	4b9b      	ldr	r3, [pc, #620]	; (8006ba8 <tcp_receive+0x84c>)
 800693c:	f240 5251 	movw	r2, #1361	; 0x551
 8006940:	e6eb      	b.n	800671a <tcp_receive+0x3be>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8006946:	bfbe      	ittt	lt
 8006948:	7ea3      	ldrblt	r3, [r4, #26]
 800694a:	f043 0302 	orrlt.w	r3, r3, #2
 800694e:	76a3      	strblt	r3, [r4, #26]
 8006950:	e6f0      	b.n	8006734 <tcp_receive+0x3d8>
              pcb->ooseq = pcb->ooseq->next;
 8006952:	6803      	ldr	r3, [r0, #0]
 8006954:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8006956:	f7fe fea9 	bl	80056ac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800695a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800695c:	2800      	cmp	r0, #0
 800695e:	d1f8      	bne.n	8006952 <tcp_receive+0x5f6>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8006960:	883a      	ldrh	r2, [r7, #0]
 8006962:	6833      	ldr	r3, [r6, #0]
 8006964:	4413      	add	r3, r2
 8006966:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8006968:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800696a:	4293      	cmp	r3, r2
 800696c:	d206      	bcs.n	800697c <tcp_receive+0x620>
 800696e:	4b8e      	ldr	r3, [pc, #568]	; (8006ba8 <tcp_receive+0x84c>)
 8006970:	498e      	ldr	r1, [pc, #568]	; (8006bac <tcp_receive+0x850>)
 8006972:	488f      	ldr	r0, [pc, #572]	; (8006bb0 <tcp_receive+0x854>)
 8006974:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8006978:	f005 ff7c 	bl	800c874 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800697c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800697e:	883a      	ldrh	r2, [r7, #0]
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8006984:	4620      	mov	r0, r4
 8006986:	f7fe fe27 	bl	80055d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800698a:	686b      	ldr	r3, [r5, #4]
 800698c:	891a      	ldrh	r2, [r3, #8]
 800698e:	b11a      	cbz	r2, 8006998 <tcp_receive+0x63c>
          recv_data = inseg.p;
 8006990:	4a88      	ldr	r2, [pc, #544]	; (8006bb4 <tcp_receive+0x858>)
 8006992:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006998:	68eb      	ldr	r3, [r5, #12]
 800699a:	8998      	ldrh	r0, [r3, #12]
 800699c:	f7fd fe3c 	bl	8004618 <lwip_htons>
 80069a0:	07c5      	lsls	r5, r0, #31
 80069a2:	d504      	bpl.n	80069ae <tcp_receive+0x652>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80069a4:	4a84      	ldr	r2, [pc, #528]	; (8006bb8 <tcp_receive+0x85c>)
 80069a6:	7813      	ldrb	r3, [r2, #0]
 80069a8:	f043 0320 	orr.w	r3, r3, #32
 80069ac:	7013      	strb	r3, [r2, #0]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80069ae:	4f7e      	ldr	r7, [pc, #504]	; (8006ba8 <tcp_receive+0x84c>)
 80069b0:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8006bc0 <tcp_receive+0x864>
 80069b4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8006bb0 <tcp_receive+0x854>
 80069b8:	e07c      	b.n	8006ab4 <tcp_receive+0x758>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80069ba:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 80069be:	f7fd fe2b 	bl	8004618 <lwip_htons>
 80069c2:	07c1      	lsls	r1, r0, #31
 80069c4:	d51b      	bpl.n	80069fe <tcp_receive+0x6a2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80069c6:	68eb      	ldr	r3, [r5, #12]
 80069c8:	8998      	ldrh	r0, [r3, #12]
 80069ca:	f7fd fe25 	bl	8004618 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80069ce:	0782      	lsls	r2, r0, #30
 80069d0:	d415      	bmi.n	80069fe <tcp_receive+0x6a2>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80069d2:	68eb      	ldr	r3, [r5, #12]
 80069d4:	2001      	movs	r0, #1
 80069d6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80069da:	f7fd fe1d 	bl	8004618 <lwip_htons>
 80069de:	68eb      	ldr	r3, [r5, #12]
 80069e0:	ea49 0000 	orr.w	r0, r9, r0
 80069e4:	b280      	uxth	r0, r0
 80069e6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80069e8:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80069ec:	f7fd fe14 	bl	8004618 <lwip_htons>
 80069f0:	f010 0003 	ands.w	r0, r0, #3
 80069f4:	bf18      	it	ne
 80069f6:	2001      	movne	r0, #1
 80069f8:	4481      	add	r9, r0
 80069fa:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80069fe:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7fe fe52 	bl	80056ac <tcp_seg_free>
              next = next->next;
 8006a08:	46c8      	mov	r8, r9
 8006a0a:	e704      	b.n	8006816 <tcp_receive+0x4ba>
          seqno = pcb->ooseq->tcphdr->seqno;
 8006a0c:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006a0e:	8990      	ldrh	r0, [r2, #12]
 8006a10:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006a14:	f7fd fe00 	bl	8004618 <lwip_htons>
 8006a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006a1a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006a1e:	f010 0003 	ands.w	r0, r0, #3
 8006a22:	449a      	add	sl, r3
 8006a24:	bf18      	it	ne
 8006a26:	2001      	movne	r0, #1
 8006a28:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006a2a:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006a2c:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006a2e:	8998      	ldrh	r0, [r3, #12]
 8006a30:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8006a34:	f7fd fdf0 	bl	8004618 <lwip_htons>
 8006a38:	f010 0003 	ands.w	r0, r0, #3
 8006a3c:	bf18      	it	ne
 8006a3e:	2001      	movne	r0, #1
 8006a40:	4458      	add	r0, fp
 8006a42:	4582      	cmp	sl, r0
 8006a44:	d206      	bcs.n	8006a54 <tcp_receive+0x6f8>
 8006a46:	463b      	mov	r3, r7
 8006a48:	f240 52de 	movw	r2, #1502	; 0x5de
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	4648      	mov	r0, r9
 8006a50:	f005 ff10 	bl	800c874 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8006a54:	68eb      	ldr	r3, [r5, #12]
 8006a56:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006a5a:	8998      	ldrh	r0, [r3, #12]
 8006a5c:	f7fd fddc 	bl	8004618 <lwip_htons>
 8006a60:	f010 0003 	ands.w	r0, r0, #3
 8006a64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a66:	bf18      	it	ne
 8006a68:	2001      	movne	r0, #1
 8006a6a:	4450      	add	r0, sl
 8006a6c:	1a18      	subs	r0, r3, r0
 8006a6e:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7fe fdb1 	bl	80055d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8006a76:	6869      	ldr	r1, [r5, #4]
 8006a78:	890b      	ldrh	r3, [r1, #8]
 8006a7a:	b133      	cbz	r3, 8006a8a <tcp_receive+0x72e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8006a7c:	4b4d      	ldr	r3, [pc, #308]	; (8006bb4 <tcp_receive+0x858>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	b338      	cbz	r0, 8006ad2 <tcp_receive+0x776>
              pbuf_cat(recv_data, cseg->p);
 8006a82:	f7fe fbdb 	bl	800523c <pbuf_cat>
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006a8a:	68eb      	ldr	r3, [r5, #12]
 8006a8c:	8998      	ldrh	r0, [r3, #12]
 8006a8e:	f7fd fdc3 	bl	8004618 <lwip_htons>
 8006a92:	07c0      	lsls	r0, r0, #31
 8006a94:	d509      	bpl.n	8006aaa <tcp_receive+0x74e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8006a96:	4a48      	ldr	r2, [pc, #288]	; (8006bb8 <tcp_receive+0x85c>)
 8006a98:	7813      	ldrb	r3, [r2, #0]
 8006a9a:	f043 0320 	orr.w	r3, r3, #32
 8006a9e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8006aa0:	7d23      	ldrb	r3, [r4, #20]
 8006aa2:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8006aa4:	bf04      	itt	eq
 8006aa6:	2307      	moveq	r3, #7
 8006aa8:	7523      	strbeq	r3, [r4, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7fe fdfc 	bl	80056ac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8006ab4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006ab6:	b125      	cbz	r5, 8006ac2 <tcp_receive+0x766>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006ab8:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8006aba:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006abc:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8006abe:	428b      	cmp	r3, r1
 8006ac0:	d0a4      	beq.n	8006a0c <tcp_receive+0x6b0>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8006ac2:	7ea3      	ldrb	r3, [r4, #26]
 8006ac4:	07d9      	lsls	r1, r3, #31
 8006ac6:	d506      	bpl.n	8006ad6 <tcp_receive+0x77a>
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8006acc:	f043 0302 	orr.w	r3, r3, #2
 8006ad0:	e003      	b.n	8006ada <tcp_receive+0x77e>
              recv_data = cseg->p;
 8006ad2:	6019      	str	r1, [r3, #0]
 8006ad4:	e7d7      	b.n	8006a86 <tcp_receive+0x72a>
        tcp_ack(pcb);
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8006adc:	b003      	add	sp, #12
 8006ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f001 faa5 	bl	8008032 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8006ae8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006aea:	b925      	cbnz	r5, 8006af6 <tcp_receive+0x79a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8006aec:	4833      	ldr	r0, [pc, #204]	; (8006bbc <tcp_receive+0x860>)
 8006aee:	f7fe fdf3 	bl	80056d8 <tcp_seg_copy>
 8006af2:	6720      	str	r0, [r4, #112]	; 0x70
 8006af4:	e7f2      	b.n	8006adc <tcp_receive+0x780>
            if (seqno == next->tcphdr->seqno) {
 8006af6:	6833      	ldr	r3, [r6, #0]
          prev = NULL;
 8006af8:	f04f 0800 	mov.w	r8, #0
 8006afc:	f103 3eff 	add.w	lr, r3, #4294967295
 8006b00:	f103 0c01 	add.w	ip, r3, #1
            if (seqno == next->tcphdr->seqno) {
 8006b04:	68e8      	ldr	r0, [r5, #12]
 8006b06:	6842      	ldr	r2, [r0, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d117      	bne.n	8006b3c <tcp_receive+0x7e0>
              if (inseg.len > next->len) {
 8006b0c:	482b      	ldr	r0, [pc, #172]	; (8006bbc <tcp_receive+0x860>)
 8006b0e:	892b      	ldrh	r3, [r5, #8]
 8006b10:	8902      	ldrh	r2, [r0, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d9e2      	bls.n	8006adc <tcp_receive+0x780>
                cseg = tcp_seg_copy(&inseg);
 8006b16:	f7fe fddf 	bl	80056d8 <tcp_seg_copy>
                if (cseg != NULL) {
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0de      	beq.n	8006adc <tcp_receive+0x780>
                  if (prev != NULL) {
 8006b1e:	f1b8 0f00 	cmp.w	r8, #0
 8006b22:	d009      	beq.n	8006b38 <tcp_receive+0x7dc>
                    prev->next = cseg;
 8006b24:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006b28:	4629      	mov	r1, r5
}
 8006b2a:	b003      	add	sp, #12
 8006b2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8006b30:	f7ff bbd8 	b.w	80062e4 <tcp_oos_insert_segment>
 8006b34:	460d      	mov	r5, r1
 8006b36:	e7e5      	b.n	8006b04 <tcp_receive+0x7a8>
                    pcb->ooseq = cseg;
 8006b38:	6720      	str	r0, [r4, #112]	; 0x70
 8006b3a:	e7f5      	b.n	8006b28 <tcp_receive+0x7cc>
              if (prev == NULL) {
 8006b3c:	f1b8 0f00 	cmp.w	r8, #0
 8006b40:	d109      	bne.n	8006b56 <tcp_receive+0x7fa>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8006b42:	1a99      	subs	r1, r3, r2
 8006b44:	2900      	cmp	r1, #0
 8006b46:	da3d      	bge.n	8006bc4 <tcp_receive+0x868>
                  cseg = tcp_seg_copy(&inseg);
 8006b48:	481c      	ldr	r0, [pc, #112]	; (8006bbc <tcp_receive+0x860>)
 8006b4a:	f7fe fdc5 	bl	80056d8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d0c4      	beq.n	8006adc <tcp_receive+0x780>
                    pcb->ooseq = cseg;
 8006b52:	6720      	str	r0, [r4, #112]	; 0x70
 8006b54:	e7e8      	b.n	8006b28 <tcp_receive+0x7cc>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8006b56:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006b5a:	6849      	ldr	r1, [r1, #4]
 8006b5c:	ebae 0101 	sub.w	r1, lr, r1
 8006b60:	2900      	cmp	r1, #0
 8006b62:	db2f      	blt.n	8006bc4 <tcp_receive+0x868>
 8006b64:	ebac 0102 	sub.w	r1, ip, r2
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	dc2b      	bgt.n	8006bc4 <tcp_receive+0x868>
                  cseg = tcp_seg_copy(&inseg);
 8006b6c:	4813      	ldr	r0, [pc, #76]	; (8006bbc <tcp_receive+0x860>)
 8006b6e:	f7fe fdb3 	bl	80056d8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8006b72:	4604      	mov	r4, r0
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d0b1      	beq.n	8006adc <tcp_receive+0x780>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8006b78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b7c:	6831      	ldr	r1, [r6, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006b84:	4413      	add	r3, r2
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dd07      	ble.n	8006b9c <tcp_receive+0x840>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8006b8c:	1a89      	subs	r1, r1, r2
 8006b8e:	b289      	uxth	r1, r1
 8006b90:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8006b94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006b98:	f7fe fabc 	bl	8005114 <pbuf_realloc>
                    prev->next = cseg;
 8006b9c:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	e7c1      	b.n	8006b2a <tcp_receive+0x7ce>
 8006ba6:	bf00      	nop
 8006ba8:	0800e784 	.word	0x0800e784
 8006bac:	0800e8cb 	.word	0x0800e8cb
 8006bb0:	0800d741 	.word	0x0800d741
 8006bb4:	20003e50 	.word	0x20003e50
 8006bb8:	20003e54 	.word	0x20003e54
 8006bbc:	20003e3c 	.word	0x20003e3c
 8006bc0:	0800e8ea 	.word	0x0800e8ea
              if (next->next == NULL &&
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	46a8      	mov	r8, r5
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	d1b3      	bne.n	8006b34 <tcp_receive+0x7d8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8006bcc:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd84      	ble.n	8006adc <tcp_receive+0x780>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006bd2:	8980      	ldrh	r0, [r0, #12]
 8006bd4:	f7fd fd20 	bl	8004618 <lwip_htons>
 8006bd8:	07c2      	lsls	r2, r0, #31
 8006bda:	f53f af7f 	bmi.w	8006adc <tcp_receive+0x780>
                next->next = tcp_seg_copy(&inseg);
 8006bde:	483a      	ldr	r0, [pc, #232]	; (8006cc8 <tcp_receive+0x96c>)
 8006be0:	f7fe fd7a 	bl	80056d8 <tcp_seg_copy>
 8006be4:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f af78 	beq.w	8006adc <tcp_receive+0x780>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8006bec:	68eb      	ldr	r3, [r5, #12]
 8006bee:	6831      	ldr	r1, [r6, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	892b      	ldrh	r3, [r5, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	1a5b      	subs	r3, r3, r1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dd05      	ble.n	8006c08 <tcp_receive+0x8ac>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8006bfc:	1a89      	subs	r1, r1, r2
 8006bfe:	b289      	uxth	r1, r1
 8006c00:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8006c02:	6868      	ldr	r0, [r5, #4]
 8006c04:	f7fe fa86 	bl	8005114 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8006c08:	6832      	ldr	r2, [r6, #0]
 8006c0a:	883b      	ldrh	r3, [r7, #0]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f77f af60 	ble.w	8006adc <tcp_receive+0x780>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	8998      	ldrh	r0, [r3, #12]
 8006c22:	f7fd fcf9 	bl	8004618 <lwip_htons>
 8006c26:	07c3      	lsls	r3, r0, #31
 8006c28:	d512      	bpl.n	8006c50 <tcp_receive+0x8f4>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8006c32:	4640      	mov	r0, r8
 8006c34:	f7fd fcf0 	bl	8004618 <lwip_htons>
 8006c38:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006c3c:	f7fd fcec 	bl	8004618 <lwip_htons>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	ea40 0808 	orr.w	r8, r0, r8
 8006c4c:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	1a89      	subs	r1, r1, r2
 8006c58:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8006c5a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8006c5c:	4411      	add	r1, r2
 8006c5e:	b289      	uxth	r1, r1
 8006c60:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8006c62:	f7fe fa57 	bl	8005114 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	891d      	ldrh	r5, [r3, #8]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	8998      	ldrh	r0, [r3, #12]
 8006c6e:	f7fd fcd3 	bl	8004618 <lwip_htons>
 8006c72:	f010 0003 	ands.w	r0, r0, #3
 8006c76:	bf18      	it	ne
 8006c78:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006c7a:	6833      	ldr	r3, [r6, #0]
 8006c7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8006c7e:	4428      	add	r0, r5
 8006c80:	b280      	uxth	r0, r0
 8006c82:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006c84:	4418      	add	r0, r3
 8006c86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c88:	4413      	add	r3, r2
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	f43f af26 	beq.w	8006adc <tcp_receive+0x780>
 8006c90:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <tcp_receive+0x970>)
 8006c92:	490f      	ldr	r1, [pc, #60]	; (8006cd0 <tcp_receive+0x974>)
 8006c94:	480f      	ldr	r0, [pc, #60]	; (8006cd4 <tcp_receive+0x978>)
 8006c96:	f240 627b 	movw	r2, #1659	; 0x67b
}
 8006c9a:	b003      	add	sp, #12
 8006c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006ca0:	f005 bde8 	b.w	800c874 <iprintf>
      tcp_send_empty_ack(pcb);
 8006ca4:	4620      	mov	r0, r4
}
 8006ca6:	b003      	add	sp, #12
 8006ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8006cac:	f001 b9c1 	b.w	8008032 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8006cb0:	1a99      	subs	r1, r3, r2
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	db06      	blt.n	8006cc4 <tcp_receive+0x968>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f77f af0c 	ble.w	8006adc <tcp_receive+0x780>
      tcp_ack_now(pcb);
 8006cc4:	7ea3      	ldrb	r3, [r4, #26]
 8006cc6:	e701      	b.n	8006acc <tcp_receive+0x770>
 8006cc8:	20003e3c 	.word	0x20003e3c
 8006ccc:	0800e784 	.word	0x0800e784
 8006cd0:	0800e859 	.word	0x0800e859
 8006cd4:	0800d741 	.word	0x0800d741

08006cd8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <tcp_getoptbyte+0x30>)
 8006cda:	490c      	ldr	r1, [pc, #48]	; (8006d0c <tcp_getoptbyte+0x34>)
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	880b      	ldrh	r3, [r1, #0]
 8006ce0:	1c5a      	adds	r2, r3, #1
{
 8006ce2:	b530      	push	{r4, r5, lr}
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	460d      	mov	r5, r1
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8006ce8:	b118      	cbz	r0, 8006cf2 <tcp_getoptbyte+0x1a>
 8006cea:	4c09      	ldr	r4, [pc, #36]	; (8006d10 <tcp_getoptbyte+0x38>)
 8006cec:	8824      	ldrh	r4, [r4, #0]
 8006cee:	429c      	cmp	r4, r3
 8006cf0:	d905      	bls.n	8006cfe <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8006cf2:	4908      	ldr	r1, [pc, #32]	; (8006d14 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8006cf4:	802a      	strh	r2, [r5, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8006cf6:	6809      	ldr	r1, [r1, #0]
    return opts[tcp_optidx++];
 8006cf8:	440b      	add	r3, r1
 8006cfa:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 8006cfc:	bd30      	pop	{r4, r5, pc}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8006cfe:	1b1b      	subs	r3, r3, r4
    return tcphdr_opt2[idx];
 8006d00:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8006d02:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
 8006d04:	5cc0      	ldrb	r0, [r0, r3]
 8006d06:	e7f9      	b.n	8006cfc <tcp_getoptbyte+0x24>
 8006d08:	20003e68 	.word	0x20003e68
 8006d0c:	20003e5c 	.word	0x20003e5c
 8006d10:	20003e64 	.word	0x20003e64
 8006d14:	20003e60 	.word	0x20003e60

08006d18 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8006d1a:	4e1a      	ldr	r6, [pc, #104]	; (8006d84 <tcp_parseopt.isra.1+0x6c>)
 8006d1c:	8833      	ldrh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 8006d1e:	4607      	mov	r7, r0
  if (tcphdr_optlen != 0) {
 8006d20:	b133      	cbz	r3, 8006d30 <tcp_parseopt.isra.1+0x18>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8006d22:	4d19      	ldr	r5, [pc, #100]	; (8006d88 <tcp_parseopt.isra.1+0x70>)
 8006d24:	2300      	movs	r3, #0
 8006d26:	802b      	strh	r3, [r5, #0]
 8006d28:	8834      	ldrh	r4, [r6, #0]
 8006d2a:	882b      	ldrh	r3, [r5, #0]
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d300      	bcc.n	8006d32 <tcp_parseopt.isra.1+0x1a>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8006d32:	f7ff ffd1 	bl	8006cd8 <tcp_getoptbyte>
      switch (opt) {
 8006d36:	2801      	cmp	r0, #1
 8006d38:	d0f6      	beq.n	8006d28 <tcp_parseopt.isra.1+0x10>
 8006d3a:	d3f9      	bcc.n	8006d30 <tcp_parseopt.isra.1+0x18>
 8006d3c:	2802      	cmp	r0, #2
 8006d3e:	d117      	bne.n	8006d70 <tcp_parseopt.isra.1+0x58>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8006d40:	f7ff ffca 	bl	8006cd8 <tcp_getoptbyte>
 8006d44:	2804      	cmp	r0, #4
 8006d46:	d1f3      	bne.n	8006d30 <tcp_parseopt.isra.1+0x18>
 8006d48:	882b      	ldrh	r3, [r5, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	daef      	bge.n	8006d30 <tcp_parseopt.isra.1+0x18>
        mss = (tcp_getoptbyte() << 8);
 8006d50:	f7ff ffc2 	bl	8006cd8 <tcp_getoptbyte>
 8006d54:	0200      	lsls	r0, r0, #8
 8006d56:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8006d58:	f7ff ffbe 	bl	8006cd8 <tcp_getoptbyte>
 8006d5c:	4320      	orrs	r0, r4
 8006d5e:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8006d60:	1e43      	subs	r3, r0, #1
 8006d62:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006d66:	bf28      	it	cs
 8006d68:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8006d6c:	8038      	strh	r0, [r7, #0]
 8006d6e:	e7db      	b.n	8006d28 <tcp_parseopt.isra.1+0x10>
        data = tcp_getoptbyte();
 8006d70:	f7ff ffb2 	bl	8006cd8 <tcp_getoptbyte>
        if (data < 2) {
 8006d74:	2801      	cmp	r0, #1
 8006d76:	d9db      	bls.n	8006d30 <tcp_parseopt.isra.1+0x18>
        tcp_optidx += data - 2;
 8006d78:	882b      	ldrh	r3, [r5, #0]
 8006d7a:	3b02      	subs	r3, #2
 8006d7c:	4418      	add	r0, r3
 8006d7e:	8028      	strh	r0, [r5, #0]
 8006d80:	e7d2      	b.n	8006d28 <tcp_parseopt.isra.1+0x10>
 8006d82:	bf00      	nop
 8006d84:	20003e6c 	.word	0x20003e6c
 8006d88:	20003e5c 	.word	0x20003e5c

08006d8c <tcp_input_delayed_close>:
{
 8006d8c:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <tcp_input_delayed_close+0x38>)
{
 8006d90:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8006d92:	7818      	ldrb	r0, [r3, #0]
 8006d94:	f010 0010 	ands.w	r0, r0, #16
 8006d98:	d012      	beq.n	8006dc0 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006d9a:	7ea3      	ldrb	r3, [r4, #26]
 8006d9c:	06db      	lsls	r3, r3, #27
 8006d9e:	d406      	bmi.n	8006dae <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006da0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006da4:	b11b      	cbz	r3, 8006dae <tcp_input_delayed_close+0x22>
 8006da6:	f06f 010e 	mvn.w	r1, #14
 8006daa:	6920      	ldr	r0, [r4, #16]
 8006dac:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006dae:	4621      	mov	r1, r4
 8006db0:	4805      	ldr	r0, [pc, #20]	; (8006dc8 <tcp_input_delayed_close+0x3c>)
 8006db2:	f7fe ff09 	bl	8005bc8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006db6:	2001      	movs	r0, #1
 8006db8:	4621      	mov	r1, r4
 8006dba:	f7fd fed5 	bl	8004b68 <memp_free>
 8006dbe:	2001      	movs	r0, #1
}
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20003e54 	.word	0x20003e54
 8006dc8:	200076c4 	.word	0x200076c4

08006dcc <tcp_input>:
{
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8006dd0:	4ea3      	ldr	r6, [pc, #652]	; (8007060 <tcp_input+0x294>)
 8006dd2:	6843      	ldr	r3, [r0, #4]
 8006dd4:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8006dd6:	8943      	ldrh	r3, [r0, #10]
 8006dd8:	2b13      	cmp	r3, #19
{
 8006dda:	b089      	sub	sp, #36	; 0x24
 8006ddc:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8006dde:	f240 81b7 	bls.w	8007150 <tcp_input+0x384>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006de2:	4fa0      	ldr	r7, [pc, #640]	; (8007064 <tcp_input+0x298>)
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6978      	ldr	r0, [r7, #20]
 8006de8:	f003 fdfd 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 8006dec:	46b8      	mov	r8, r7
 8006dee:	4604      	mov	r4, r0
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f040 81ad 	bne.w	8007150 <tcp_input+0x384>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006dfc:	2be0      	cmp	r3, #224	; 0xe0
 8006dfe:	f000 81a7 	beq.w	8007150 <tcp_input+0x384>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006e02:	6833      	ldr	r3, [r6, #0]
 8006e04:	8998      	ldrh	r0, [r3, #12]
 8006e06:	f7fd fc07 	bl	8004618 <lwip_htons>
 8006e0a:	0a81      	lsrs	r1, r0, #10
 8006e0c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006e10:	2913      	cmp	r1, #19
 8006e12:	f240 819d 	bls.w	8007150 <tcp_input+0x384>
 8006e16:	892b      	ldrh	r3, [r5, #8]
 8006e18:	b289      	uxth	r1, r1
 8006e1a:	428b      	cmp	r3, r1
 8006e1c:	f0c0 8198 	bcc.w	8007150 <tcp_input+0x384>
  if (p->len >= hdrlen_bytes) {
 8006e20:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006e22:	4a91      	ldr	r2, [pc, #580]	; (8007068 <tcp_input+0x29c>)
  tcphdr_opt2 = NULL;
 8006e24:	4f91      	ldr	r7, [pc, #580]	; (800706c <tcp_input+0x2a0>)
 8006e26:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80070bc <tcp_input+0x2f0>
 8006e2a:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006e2c:	f1a1 0314 	sub.w	r3, r1, #20
 8006e30:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8006e32:	4288      	cmp	r0, r1
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006e34:	8013      	strh	r3, [r2, #0]
 8006e36:	4614      	mov	r4, r2
  if (p->len >= hdrlen_bytes) {
 8006e38:	d34a      	bcc.n	8006ed0 <tcp_input+0x104>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006e3a:	4249      	negs	r1, r1
 8006e3c:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8006e3e:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006e42:	f7fe f81d 	bl	8004e80 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006e46:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006e48:	f8df a274 	ldr.w	sl, [pc, #628]	; 80070c0 <tcp_input+0x2f4>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006e4c:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006e4e:	4f88      	ldr	r7, [pc, #544]	; (8007070 <tcp_input+0x2a4>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006e50:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007084 <tcp_input+0x2b8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006e54:	f7fd fbe0 	bl	8004618 <lwip_htons>
 8006e58:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006e5a:	6834      	ldr	r4, [r6, #0]
 8006e5c:	8860      	ldrh	r0, [r4, #2]
 8006e5e:	f7fd fbdb 	bl	8004618 <lwip_htons>
 8006e62:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006e64:	6834      	ldr	r4, [r6, #0]
 8006e66:	6860      	ldr	r0, [r4, #4]
 8006e68:	f7fd fbd9 	bl	800461e <lwip_htonl>
 8006e6c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006e6e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006e70:	f8ca 0000 	str.w	r0, [sl]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006e74:	68a0      	ldr	r0, [r4, #8]
 8006e76:	f7fd fbd2 	bl	800461e <lwip_htonl>
 8006e7a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006e7c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006e7e:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006e80:	89e0      	ldrh	r0, [r4, #14]
 8006e82:	f7fd fbc9 	bl	8004618 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8006e86:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006e88:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8006e8a:	8998      	ldrh	r0, [r3, #12]
 8006e8c:	f7fd fbc4 	bl	8004618 <lwip_htons>
 8006e90:	4a78      	ldr	r2, [pc, #480]	; (8007074 <tcp_input+0x2a8>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006e92:	8929      	ldrh	r1, [r5, #8]
 8006e94:	f8cd a00c 	str.w	sl, [sp, #12]
  flags = TCPH_FLAGS(tcphdr);
 8006e98:	b2c0      	uxtb	r0, r0
 8006e9a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006e9e:	f010 0003 	ands.w	r0, r0, #3
  flags = TCPH_FLAGS(tcphdr);
 8006ea2:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006ea4:	bf18      	it	ne
 8006ea6:	2001      	movne	r0, #1
 8006ea8:	4b73      	ldr	r3, [pc, #460]	; (8007078 <tcp_input+0x2ac>)
 8006eaa:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006eac:	4973      	ldr	r1, [pc, #460]	; (800707c <tcp_input+0x2b0>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006eae:	8018      	strh	r0, [r3, #0]
 8006eb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006eb4:	680c      	ldr	r4, [r1, #0]
 8006eb6:	46ba      	mov	sl, r7
  prev = NULL;
 8006eb8:	f04f 0900 	mov.w	r9, #0
 8006ebc:	460f      	mov	r7, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ebe:	2c00      	cmp	r4, #0
 8006ec0:	d140      	bne.n	8006f44 <tcp_input+0x178>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ec2:	4b6f      	ldr	r3, [pc, #444]	; (8007080 <tcp_input+0x2b4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006ec4:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8007084 <tcp_input+0x2b8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ec8:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006eca:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800708c <tcp_input+0x2c0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ece:	e146      	b.n	800715e <tcp_input+0x392>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b92b      	cbnz	r3, 8006ee0 <tcp_input+0x114>
 8006ed4:	4b6b      	ldr	r3, [pc, #428]	; (8007084 <tcp_input+0x2b8>)
 8006ed6:	496c      	ldr	r1, [pc, #432]	; (8007088 <tcp_input+0x2bc>)
 8006ed8:	486c      	ldr	r0, [pc, #432]	; (800708c <tcp_input+0x2c0>)
 8006eda:	22b2      	movs	r2, #178	; 0xb2
 8006edc:	f005 fcca 	bl	800c874 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8006ee0:	f06f 0113 	mvn.w	r1, #19
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f7fd ffcb 	bl	8004e80 <pbuf_header>
    tcphdr_opt1len = p->len;
 8006eea:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006eec:	8824      	ldrh	r4, [r4, #0]
    tcphdr_opt1len = p->len;
 8006eee:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006ef2:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006ef4:	4249      	negs	r1, r1
 8006ef6:	b209      	sxth	r1, r1
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7fd ffc1 	bl	8004e80 <pbuf_header>
    if (opt2len > p->next->len) {
 8006efe:	6828      	ldr	r0, [r5, #0]
 8006f00:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006f02:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	f0c0 8123 	bcc.w	8007150 <tcp_input+0x384>
    pbuf_header(p->next, -(s16_t)opt2len);
 8006f0a:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006f0c:	6843      	ldr	r3, [r0, #4]
 8006f0e:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8006f10:	b209      	sxth	r1, r1
 8006f12:	f7fd ffb5 	bl	8004e80 <pbuf_header>
    p->tot_len -= opt2len;
 8006f16:	892b      	ldrh	r3, [r5, #8]
 8006f18:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006f1a:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8006f1c:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006f1e:	b12b      	cbz	r3, 8006f2c <tcp_input+0x160>
 8006f20:	4b58      	ldr	r3, [pc, #352]	; (8007084 <tcp_input+0x2b8>)
 8006f22:	495b      	ldr	r1, [pc, #364]	; (8007090 <tcp_input+0x2c4>)
 8006f24:	4859      	ldr	r0, [pc, #356]	; (800708c <tcp_input+0x2c0>)
 8006f26:	22cf      	movs	r2, #207	; 0xcf
 8006f28:	f005 fca4 	bl	800c874 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	892a      	ldrh	r2, [r5, #8]
 8006f30:	891b      	ldrh	r3, [r3, #8]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d087      	beq.n	8006e46 <tcp_input+0x7a>
 8006f36:	4b53      	ldr	r3, [pc, #332]	; (8007084 <tcp_input+0x2b8>)
 8006f38:	4956      	ldr	r1, [pc, #344]	; (8007094 <tcp_input+0x2c8>)
 8006f3a:	4854      	ldr	r0, [pc, #336]	; (800708c <tcp_input+0x2c0>)
 8006f3c:	22d0      	movs	r2, #208	; 0xd0
 8006f3e:	f005 fc99 	bl	800c874 <iprintf>
 8006f42:	e780      	b.n	8006e46 <tcp_input+0x7a>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006f44:	7d23      	ldrb	r3, [r4, #20]
 8006f46:	b92b      	cbnz	r3, 8006f54 <tcp_input+0x188>
 8006f48:	465b      	mov	r3, fp
 8006f4a:	22e2      	movs	r2, #226	; 0xe2
 8006f4c:	4952      	ldr	r1, [pc, #328]	; (8007098 <tcp_input+0x2cc>)
 8006f4e:	484f      	ldr	r0, [pc, #316]	; (800708c <tcp_input+0x2c0>)
 8006f50:	f005 fc90 	bl	800c874 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006f54:	7d23      	ldrb	r3, [r4, #20]
 8006f56:	2b0a      	cmp	r3, #10
 8006f58:	d105      	bne.n	8006f66 <tcp_input+0x19a>
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	22e3      	movs	r2, #227	; 0xe3
 8006f5e:	494f      	ldr	r1, [pc, #316]	; (800709c <tcp_input+0x2d0>)
 8006f60:	484a      	ldr	r0, [pc, #296]	; (800708c <tcp_input+0x2c0>)
 8006f62:	f005 fc87 	bl	800c874 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006f66:	7d23      	ldrb	r3, [r4, #20]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d105      	bne.n	8006f78 <tcp_input+0x1ac>
 8006f6c:	465b      	mov	r3, fp
 8006f6e:	22e4      	movs	r2, #228	; 0xe4
 8006f70:	494b      	ldr	r1, [pc, #300]	; (80070a0 <tcp_input+0x2d4>)
 8006f72:	4846      	ldr	r0, [pc, #280]	; (800708c <tcp_input+0x2c0>)
 8006f74:	f005 fc7e 	bl	800c874 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006f78:	6832      	ldr	r2, [r6, #0]
 8006f7a:	8b21      	ldrh	r1, [r4, #24]
 8006f7c:	8813      	ldrh	r3, [r2, #0]
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	68e3      	ldr	r3, [r4, #12]
 8006f82:	d16a      	bne.n	800705a <tcp_input+0x28e>
 8006f84:	8ae1      	ldrh	r1, [r4, #22]
 8006f86:	8852      	ldrh	r2, [r2, #2]
 8006f88:	4291      	cmp	r1, r2
 8006f8a:	d166      	bne.n	800705a <tcp_input+0x28e>
        pcb->local_port == tcphdr->dest &&
 8006f8c:	6861      	ldr	r1, [r4, #4]
 8006f8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f92:	4291      	cmp	r1, r2
 8006f94:	d161      	bne.n	800705a <tcp_input+0x28e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006f9c:	4291      	cmp	r1, r2
 8006f9e:	d15c      	bne.n	800705a <tcp_input+0x28e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	f040 8416 	bne.w	80077d2 <tcp_input+0xa06>
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <tcp_input+0x2b8>)
 8006fa8:	493e      	ldr	r1, [pc, #248]	; (80070a4 <tcp_input+0x2d8>)
 8006faa:	4838      	ldr	r0, [pc, #224]	; (800708c <tcp_input+0x2c0>)
 8006fac:	22ec      	movs	r2, #236	; 0xec
 8006fae:	f005 fc61 	bl	800c874 <iprintf>
      if (prev != NULL) {
 8006fb2:	f1b9 0f00 	cmp.w	r9, #0
 8006fb6:	d005      	beq.n	8006fc4 <tcp_input+0x1f8>
        prev->next = pcb->next;
 8006fb8:	68e3      	ldr	r3, [r4, #12]
 8006fba:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8006fc2:	603c      	str	r4, [r7, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006fc4:	68e3      	ldr	r3, [r4, #12]
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	d105      	bne.n	8006fd6 <tcp_input+0x20a>
 8006fca:	4b2e      	ldr	r3, [pc, #184]	; (8007084 <tcp_input+0x2b8>)
 8006fcc:	4936      	ldr	r1, [pc, #216]	; (80070a8 <tcp_input+0x2dc>)
 8006fce:	482f      	ldr	r0, [pc, #188]	; (800708c <tcp_input+0x2c0>)
 8006fd0:	22f4      	movs	r2, #244	; 0xf4
 8006fd2:	f005 fc4f 	bl	800c874 <iprintf>
    inseg.next = NULL;
 8006fd6:	4b35      	ldr	r3, [pc, #212]	; (80070ac <tcp_input+0x2e0>)
    inseg.len = p->tot_len;
 8006fd8:	8929      	ldrh	r1, [r5, #8]
 8006fda:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8006fdc:	6831      	ldr	r1, [r6, #0]
    recv_acked = 0;
 8006fde:	4834      	ldr	r0, [pc, #208]	; (80070b0 <tcp_input+0x2e4>)
    inseg.tcphdr = tcphdr;
 8006fe0:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8006fe2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80070c4 <tcp_input+0x2f8>
    recv_data = NULL;
 8006fe6:	4933      	ldr	r1, [pc, #204]	; (80070b4 <tcp_input+0x2e8>)
    inseg.p = p;
 8006fe8:	605d      	str	r5, [r3, #4]
    inseg.next = NULL;
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006fee:	600a      	str	r2, [r1, #0]
    recv_flags = 0;
 8006ff0:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 8006ff4:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 8006ff6:	9a04      	ldr	r2, [sp, #16]
 8006ff8:	9306      	str	r3, [sp, #24]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	f012 0f08 	tst.w	r2, #8
 8007000:	4681      	mov	r9, r0
 8007002:	468b      	mov	fp, r1
 8007004:	d003      	beq.n	800700e <tcp_input+0x242>
      p->flags |= PBUF_FLAG_PUSH;
 8007006:	7b6b      	ldrb	r3, [r5, #13]
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800700e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 813e 	beq.w	8007292 <tcp_input+0x4c6>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007016:	4620      	mov	r0, r4
 8007018:	f7fe fee8 	bl	8005dec <tcp_process_refused_data>
 800701c:	300d      	adds	r0, #13
 800701e:	d008      	beq.n	8007032 <tcp_input+0x266>
 8007020:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8135 	beq.w	8007292 <tcp_input+0x4c6>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007028:	9b05      	ldr	r3, [sp, #20]
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8130 	beq.w	8007292 <tcp_input+0x4c6>
        if (pcb->rcv_ann_wnd == 0) {
 8007032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007034:	b913      	cbnz	r3, 800703c <tcp_input+0x270>
          tcp_send_empty_ack(pcb);
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fffb 	bl	8008032 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <tcp_input+0x2ec>)
 800703e:	2400      	movs	r4, #0
 8007040:	601c      	str	r4, [r3, #0]
    if (inseg.p != NULL)
 8007042:	9b06      	ldr	r3, [sp, #24]
    recv_data = NULL;
 8007044:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL)
 8007048:	6858      	ldr	r0, [r3, #4]
 800704a:	b118      	cbz	r0, 8007054 <tcp_input+0x288>
      pbuf_free(inseg.p);
 800704c:	f7fd ff1e 	bl	8004e8c <pbuf_free>
      inseg.p = NULL;
 8007050:	9b06      	ldr	r3, [sp, #24]
 8007052:	605c      	str	r4, [r3, #4]
}
 8007054:	b009      	add	sp, #36	; 0x24
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800705a:	46a1      	mov	r9, r4
 800705c:	461c      	mov	r4, r3
 800705e:	e72e      	b.n	8006ebe <tcp_input+0xf2>
 8007060:	20003e60 	.word	0x20003e60
 8007064:	20003fa0 	.word	0x20003fa0
 8007068:	20003e6c 	.word	0x20003e6c
 800706c:	20003e68 	.word	0x20003e68
 8007070:	20003e34 	.word	0x20003e34
 8007074:	20003e38 	.word	0x20003e38
 8007078:	20003e6e 	.word	0x20003e6e
 800707c:	200076c4 	.word	0x200076c4
 8007080:	200076d4 	.word	0x200076d4
 8007084:	0800e784 	.word	0x0800e784
 8007088:	0800e5ce 	.word	0x0800e5ce
 800708c:	0800d741 	.word	0x0800d741
 8007090:	0800e5de 	.word	0x0800e5de
 8007094:	0800e5ea 	.word	0x0800e5ea
 8007098:	0800e609 	.word	0x0800e609
 800709c:	0800e630 	.word	0x0800e630
 80070a0:	0800e65a 	.word	0x0800e65a
 80070a4:	0800e681 	.word	0x0800e681
 80070a8:	0800e6ac 	.word	0x0800e6ac
 80070ac:	20003e3c 	.word	0x20003e3c
 80070b0:	20003e4c 	.word	0x20003e4c
 80070b4:	20003e50 	.word	0x20003e50
 80070b8:	200076d8 	.word	0x200076d8
 80070bc:	20003e64 	.word	0x20003e64
 80070c0:	20003e58 	.word	0x20003e58
 80070c4:	20003e54 	.word	0x20003e54
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80070c8:	7d23      	ldrb	r3, [r4, #20]
 80070ca:	2b0a      	cmp	r3, #10
 80070cc:	d005      	beq.n	80070da <tcp_input+0x30e>
 80070ce:	464b      	mov	r3, r9
 80070d0:	22fe      	movs	r2, #254	; 0xfe
 80070d2:	49a6      	ldr	r1, [pc, #664]	; (800736c <tcp_input+0x5a0>)
 80070d4:	4658      	mov	r0, fp
 80070d6:	f005 fbcd 	bl	800c874 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80070da:	6833      	ldr	r3, [r6, #0]
 80070dc:	8b22      	ldrh	r2, [r4, #24]
 80070de:	8818      	ldrh	r0, [r3, #0]
 80070e0:	4290      	cmp	r0, r2
 80070e2:	d13b      	bne.n	800715c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 80070e4:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80070e6:	885a      	ldrh	r2, [r3, #2]
 80070e8:	428a      	cmp	r2, r1
 80070ea:	d137      	bne.n	800715c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80070f2:	4299      	cmp	r1, r3
 80070f4:	d132      	bne.n	800715c <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80070f6:	6821      	ldr	r1, [r4, #0]
 80070f8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d12d      	bne.n	800715c <tcp_input+0x390>
  if (flags & TCP_RST) {
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	075e      	lsls	r6, r3, #29
 8007106:	d423      	bmi.n	8007150 <tcp_input+0x384>
 8007108:	9905      	ldr	r1, [sp, #20]
 800710a:	880e      	ldrh	r6, [r1, #0]
  if (flags & TCP_SYN) {
 800710c:	0799      	lsls	r1, r3, #30
 800710e:	d512      	bpl.n	8007136 <tcp_input+0x36a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007110:	9b03      	ldr	r3, [sp, #12]
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007116:	1acb      	subs	r3, r1, r3
 8007118:	d412      	bmi.n	8007140 <tcp_input+0x374>
 800711a:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 800711c:	1bdb      	subs	r3, r3, r7
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc0e      	bgt.n	8007140 <tcp_input+0x374>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007122:	4b93      	ldr	r3, [pc, #588]	; (8007370 <tcp_input+0x5a4>)
 8007124:	e9cd 2000 	strd	r2, r0, [sp]
 8007128:	4431      	add	r1, r6
 800712a:	1d1a      	adds	r2, r3, #4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800712c:	f8da 0000 	ldr.w	r0, [sl]
 8007130:	f001 f92c 	bl	800838c <tcp_rst>
 8007134:	e00c      	b.n	8007150 <tcp_input+0x384>
  } else if (flags & TCP_FIN) {
 8007136:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
 8007138:	bf42      	ittt	mi
 800713a:	4b8e      	ldrmi	r3, [pc, #568]	; (8007374 <tcp_input+0x5a8>)
 800713c:	681b      	ldrmi	r3, [r3, #0]
 800713e:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8007140:	b136      	cbz	r6, 8007150 <tcp_input+0x384>
    pcb->flags |= TF_ACK_NOW;
 8007142:	7ea3      	ldrb	r3, [r4, #26]
 8007144:	f043 0302 	orr.w	r3, r3, #2
 8007148:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800714a:	4620      	mov	r0, r4
 800714c:	f000 ffa6 	bl	800809c <tcp_output>
  pbuf_free(p);
 8007150:	4628      	mov	r0, r5
}
 8007152:	b009      	add	sp, #36	; 0x24
 8007154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007158:	f7fd be98 	b.w	8004e8c <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800715c:	68e4      	ldr	r4, [r4, #12]
 800715e:	2c00      	cmp	r4, #0
 8007160:	d1b2      	bne.n	80070c8 <tcp_input+0x2fc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007162:	4b85      	ldr	r3, [pc, #532]	; (8007378 <tcp_input+0x5ac>)
      if (lpcb->local_port == tcphdr->dest) {
 8007164:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007166:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007168:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800716c:	4689      	mov	r9, r1
 800716e:	f1b9 0f00 	cmp.w	r9, #0
 8007172:	d111      	bne.n	8007198 <tcp_input+0x3cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007174:	8990      	ldrh	r0, [r2, #12]
 8007176:	f7fd fa4f 	bl	8004618 <lwip_htons>
 800717a:	0743      	lsls	r3, r0, #29
 800717c:	d4e8      	bmi.n	8007150 <tcp_input+0x384>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800717e:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007180:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007182:	8810      	ldrh	r0, [r2, #0]
 8007184:	9a03      	ldr	r2, [sp, #12]
 8007186:	6811      	ldr	r1, [r2, #0]
 8007188:	881a      	ldrh	r2, [r3, #0]
 800718a:	9201      	str	r2, [sp, #4]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	4b77      	ldr	r3, [pc, #476]	; (8007370 <tcp_input+0x5a4>)
 8007192:	4401      	add	r1, r0
 8007194:	1d1a      	adds	r2, r3, #4
 8007196:	e7c9      	b.n	800712c <tcp_input+0x360>
      if (lpcb->local_port == tcphdr->dest) {
 8007198:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800719c:	8853      	ldrh	r3, [r2, #2]
 800719e:	4283      	cmp	r3, r0
 80071a0:	d107      	bne.n	80071b2 <tcp_input+0x3e6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80071a2:	f8d9 3000 	ldr.w	r3, [r9]
 80071a6:	4563      	cmp	r3, ip
 80071a8:	f000 82f6 	beq.w	8007798 <tcp_input+0x9cc>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 82f3 	beq.w	8007798 <tcp_input+0x9cc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80071b2:	464c      	mov	r4, r9
 80071b4:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80071b8:	e7d9      	b.n	800716e <tcp_input+0x3a2>
  } else if (flags & TCP_SYN) {
 80071ba:	0799      	lsls	r1, r3, #30
 80071bc:	d5c8      	bpl.n	8007150 <tcp_input+0x384>
    npcb = tcp_alloc(pcb->prio);
 80071be:	f899 0015 	ldrb.w	r0, [r9, #21]
 80071c2:	f7fe ff3f 	bl	8006044 <tcp_alloc>
    if (npcb == NULL) {
 80071c6:	4682      	mov	sl, r0
 80071c8:	b950      	cbnz	r0, 80071e0 <tcp_input+0x414>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80071ca:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0be      	beq.n	8007150 <tcp_input+0x384>
 80071d2:	4601      	mov	r1, r0
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80071dc:	4798      	blx	r3
 80071de:	e7b7      	b.n	8007150 <tcp_input+0x384>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80071e0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80071e4:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80071e6:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80071e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80071ec:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80071ee:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80071f2:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80071f4:	7813      	ldrb	r3, [r2, #0]
 80071f6:	7852      	ldrb	r2, [r2, #1]
 80071f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071fc:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80071fe:	2303      	movs	r3, #3
 8007200:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8007202:	9b03      	ldr	r3, [sp, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800720a:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800720c:	f7fe ffa6 	bl	800615c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007210:	9b03      	ldr	r3, [sp, #12]
    npcb->snd_wl2 = iss;
 8007212:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007216:	681b      	ldr	r3, [r3, #0]
    npcb->snd_nxt = iss;
 8007218:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800721c:	3b01      	subs	r3, #1
 800721e:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007222:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->lastack = iss;
 8007226:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 800722a:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800722e:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 8007232:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007236:	f899 3008 	ldrb.w	r3, [r9, #8]
 800723a:	f003 030c 	and.w	r3, r3, #12
 800723e:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	f8ca 300c 	str.w	r3, [sl, #12]
 8007248:	f8c7 a000 	str.w	sl, [r7]
 800724c:	f001 fa3e 	bl	80086cc <tcp_timer_needed>
 8007250:	4b4a      	ldr	r3, [pc, #296]	; (800737c <tcp_input+0x5b0>)
 8007252:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 8007254:	f10a 0032 	add.w	r0, sl, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
 8007258:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800725a:	f7ff fd5d 	bl	8006d18 <tcp_parseopt.isra.1>
    npcb->snd_wnd = tcphdr->wnd;
 800725e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007260:	f8ba 0032 	ldrh.w	r0, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8007264:	89db      	ldrh	r3, [r3, #14]
 8007266:	f8aa 305c 	strh.w	r3, [sl, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800726a:	f10a 0104 	add.w	r1, sl, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800726e:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007272:	f7fe ff7f 	bl	8006174 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007276:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007278:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800727c:	4650      	mov	r0, sl
 800727e:	f000 fe25 	bl	8007ecc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007282:	b120      	cbz	r0, 800728e <tcp_input+0x4c2>
      tcp_abandon(npcb, 0);
 8007284:	4621      	mov	r1, r4
 8007286:	4650      	mov	r0, sl
 8007288:	f7fe fe36 	bl	8005ef8 <tcp_abandon>
 800728c:	e760      	b.n	8007150 <tcp_input+0x384>
    tcp_output(npcb);
 800728e:	4650      	mov	r0, sl
 8007290:	e75c      	b.n	800714c <tcp_input+0x380>
    tcp_input_pcb = pcb;
 8007292:	4b3b      	ldr	r3, [pc, #236]	; (8007380 <tcp_input+0x5b4>)
 8007294:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	781d      	ldrb	r5, [r3, #0]
 800729a:	076a      	lsls	r2, r5, #29
 800729c:	d53d      	bpl.n	800731a <tcp_input+0x54e>
    if (pcb->state == SYN_SENT) {
 800729e:	7d21      	ldrb	r1, [r4, #20]
 80072a0:	2902      	cmp	r1, #2
 80072a2:	d123      	bne.n	80072ec <tcp_input+0x520>
      if (ackno == pcb->snd_nxt) {
 80072a4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80072a6:	f8da 3000 	ldr.w	r3, [sl]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d109      	bne.n	80072c2 <tcp_input+0x4f6>
      recv_flags |= TF_RESET;
 80072ae:	f898 3000 	ldrb.w	r3, [r8]
 80072b2:	f043 0308 	orr.w	r3, r3, #8
 80072b6:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80072ba:	7ea3      	ldrb	r3, [r4, #26]
 80072bc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 80072c0:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80072c2:	f898 3000 	ldrb.w	r3, [r8]
 80072c6:	0719      	lsls	r1, r3, #28
 80072c8:	f140 81ff 	bpl.w	80076ca <tcp_input+0x8fe>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80072cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072d0:	b11b      	cbz	r3, 80072da <tcp_input+0x50e>
 80072d2:	f06f 010d 	mvn.w	r1, #13
 80072d6:	6920      	ldr	r0, [r4, #16]
 80072d8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80072da:	4621      	mov	r1, r4
 80072dc:	4829      	ldr	r0, [pc, #164]	; (8007384 <tcp_input+0x5b8>)
 80072de:	f7fe fc73 	bl	8005bc8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80072e2:	4621      	mov	r1, r4
 80072e4:	2001      	movs	r0, #1
 80072e6:	f7fd fc3f 	bl	8004b68 <memp_free>
 80072ea:	e6a7      	b.n	800703c <tcp_input+0x270>
      if (seqno == pcb->rcv_nxt) {
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d007      	beq.n	8007306 <tcp_input+0x53a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	d4e3      	bmi.n	80072c2 <tcp_input+0x4f6>
 80072fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dcdf      	bgt.n	80072c2 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8007302:	7ea3      	ldrb	r3, [r4, #26]
 8007304:	e011      	b.n	800732a <tcp_input+0x55e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007306:	2900      	cmp	r1, #0
 8007308:	d1d1      	bne.n	80072ae <tcp_input+0x4e2>
 800730a:	4b1f      	ldr	r3, [pc, #124]	; (8007388 <tcp_input+0x5bc>)
 800730c:	491f      	ldr	r1, [pc, #124]	; (800738c <tcp_input+0x5c0>)
 800730e:	4820      	ldr	r0, [pc, #128]	; (8007390 <tcp_input+0x5c4>)
 8007310:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007314:	f005 faae 	bl	800c874 <iprintf>
 8007318:	e7c9      	b.n	80072ae <tcp_input+0x4e2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800731a:	f015 0202 	ands.w	r2, r5, #2
 800731e:	7ea3      	ldrb	r3, [r4, #26]
 8007320:	d006      	beq.n	8007330 <tcp_input+0x564>
 8007322:	7d21      	ldrb	r1, [r4, #20]
 8007324:	3902      	subs	r1, #2
 8007326:	2901      	cmp	r1, #1
 8007328:	d902      	bls.n	8007330 <tcp_input+0x564>
      tcp_ack_now(pcb);
 800732a:	f043 0302 	orr.w	r3, r3, #2
 800732e:	e7c7      	b.n	80072c0 <tcp_input+0x4f4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007330:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 8007332:	bf58      	it	pl
 8007334:	4b0f      	ldrpl	r3, [pc, #60]	; (8007374 <tcp_input+0x5a8>)
 8007336:	9207      	str	r2, [sp, #28]
 8007338:	bf5c      	itt	pl
 800733a:	681b      	ldrpl	r3, [r3, #0]
 800733c:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8007344:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007348:	f7ff fce6 	bl	8006d18 <tcp_parseopt.isra.1>
  switch (pcb->state) {
 800734c:	7d23      	ldrb	r3, [r4, #20]
 800734e:	9a07      	ldr	r2, [sp, #28]
 8007350:	3b02      	subs	r3, #2
 8007352:	2b07      	cmp	r3, #7
 8007354:	d8b5      	bhi.n	80072c2 <tcp_input+0x4f6>
 8007356:	e8df f013 	tbh	[pc, r3, lsl #1]
 800735a:	001d      	.short	0x001d
 800735c:	0109009f 	.word	0x0109009f
 8007360:	0157010d 	.word	0x0157010d
 8007364:	01700109 	.word	0x01700109
 8007368:	019f      	.short	0x019f
 800736a:	bf00      	nop
 800736c:	0800e6d6 	.word	0x0800e6d6
 8007370:	20003fb0 	.word	0x20003fb0
 8007374:	200076c8 	.word	0x200076c8
 8007378:	200076cc 	.word	0x200076cc
 800737c:	200076c0 	.word	0x200076c0
 8007380:	200076d8 	.word	0x200076d8
 8007384:	200076c4 	.word	0x200076c4
 8007388:	0800e784 	.word	0x0800e784
 800738c:	0800e703 	.word	0x0800e703
 8007390:	0800d741 	.word	0x0800d741
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007394:	f005 0312 	and.w	r3, r5, #18
 8007398:	2b12      	cmp	r3, #18
 800739a:	d15f      	bne.n	800745c <tcp_input+0x690>
        && (ackno == pcb->lastack + 1)) {
 800739c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800739e:	f8da 3000 	ldr.w	r3, [sl]
 80073a2:	3201      	adds	r2, #1
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d159      	bne.n	800745c <tcp_input+0x690>
      pcb->rcv_nxt = seqno + 1;
 80073a8:	9b03      	ldr	r3, [sp, #12]
      pcb->lastack = ackno;
 80073aa:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 80073ac:	681b      	ldr	r3, [r3, #0]
      pcb->snd_wnd = tcphdr->wnd;
 80073ae:	6832      	ldr	r2, [r6, #0]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80073b0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80073b6:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80073b8:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 80073ba:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80073bc:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80073be:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 80073c0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80073c4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 80073c8:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80073ca:	18e1      	adds	r1, r4, r3
 80073cc:	f7fe fed2 	bl	8006174 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80073d0:	f241 121c 	movw	r2, #4380	; 0x111c
 80073d4:	0043      	lsls	r3, r0, #1
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bf38      	it	cc
 80073da:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80073dc:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80073de:	0080      	lsls	r0, r0, #2
 80073e0:	4283      	cmp	r3, r0
 80073e2:	bf28      	it	cs
 80073e4:	4603      	movcs	r3, r0
 80073e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80073ea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80073ee:	b933      	cbnz	r3, 80073fe <tcp_input+0x632>
 80073f0:	4ba1      	ldr	r3, [pc, #644]	; (8007678 <tcp_input+0x8ac>)
 80073f2:	49a2      	ldr	r1, [pc, #648]	; (800767c <tcp_input+0x8b0>)
 80073f4:	48a2      	ldr	r0, [pc, #648]	; (8007680 <tcp_input+0x8b4>)
 80073f6:	f240 321a 	movw	r2, #794	; 0x31a
 80073fa:	f005 fa3b 	bl	800c874 <iprintf>
      --pcb->snd_queuelen;
 80073fe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8007402:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8007404:	3b01      	subs	r3, #1
 8007406:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 800740a:	b9fd      	cbnz	r5, 800744c <tcp_input+0x680>
        rseg = pcb->unsent;
 800740c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800740e:	b935      	cbnz	r5, 800741e <tcp_input+0x652>
 8007410:	4b99      	ldr	r3, [pc, #612]	; (8007678 <tcp_input+0x8ac>)
 8007412:	499c      	ldr	r1, [pc, #624]	; (8007684 <tcp_input+0x8b8>)
 8007414:	489a      	ldr	r0, [pc, #616]	; (8007680 <tcp_input+0x8b4>)
 8007416:	f240 3222 	movw	r2, #802	; 0x322
 800741a:	f005 fa2b 	bl	800c874 <iprintf>
        pcb->unsent = rseg->next;
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8007422:	4628      	mov	r0, r5
 8007424:	f7fe f942 	bl	80056ac <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8007428:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800742a:	b993      	cbnz	r3, 8007452 <tcp_input+0x686>
        pcb->rtime = -1;
 800742c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007430:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007432:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007436:	2b00      	cmp	r3, #0
 8007438:	f43f af63 	beq.w	8007302 <tcp_input+0x536>
 800743c:	2200      	movs	r2, #0
 800743e:	4621      	mov	r1, r4
 8007440:	6920      	ldr	r0, [r4, #16]
 8007442:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8007444:	300d      	adds	r0, #13
 8007446:	f47f af5c 	bne.w	8007302 <tcp_input+0x536>
 800744a:	e5f7      	b.n	800703c <tcp_input+0x270>
        pcb->unacked = rseg->next;
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007450:	e7e7      	b.n	8007422 <tcp_input+0x656>
        pcb->rtime = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8007456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800745a:	e7ea      	b.n	8007432 <tcp_input+0x666>
    else if (flags & TCP_ACK) {
 800745c:	06e8      	lsls	r0, r5, #27
 800745e:	f57f af30 	bpl.w	80072c2 <tcp_input+0x4f6>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007462:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007464:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007466:	8810      	ldrh	r0, [r2, #0]
 8007468:	9a03      	ldr	r2, [sp, #12]
 800746a:	6811      	ldr	r1, [r2, #0]
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	9201      	str	r2, [sp, #4]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	4b84      	ldr	r3, [pc, #528]	; (8007688 <tcp_input+0x8bc>)
 8007476:	4401      	add	r1, r0
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	f8da 0000 	ldr.w	r0, [sl]
 800747e:	f000 ff85 	bl	800838c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007482:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007486:	2b05      	cmp	r3, #5
 8007488:	f63f af1b 	bhi.w	80072c2 <tcp_input+0x4f6>
        pcb->rtime = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007490:	4620      	mov	r0, r4
 8007492:	f000 ffd5 	bl	8008440 <tcp_rexmit_rto>
 8007496:	e714      	b.n	80072c2 <tcp_input+0x4f6>
    if (flags & TCP_ACK) {
 8007498:	06e9      	lsls	r1, r5, #27
 800749a:	d559      	bpl.n	8007550 <tcp_input+0x784>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800749c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800749e:	f8da 0000 	ldr.w	r0, [sl]
 80074a2:	43db      	mvns	r3, r3
 80074a4:	42c3      	cmn	r3, r0
 80074a6:	d444      	bmi.n	8007532 <tcp_input+0x766>
 80074a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80074aa:	1ac3      	subs	r3, r0, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dc40      	bgt.n	8007532 <tcp_input+0x766>
        pcb->state = ESTABLISHED;
 80074b0:	2304      	movs	r3, #4
 80074b2:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80074b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80074b6:	b143      	cbz	r3, 80074ca <tcp_input+0x6fe>
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	b933      	cbnz	r3, 80074ca <tcp_input+0x6fe>
 80074bc:	4b6e      	ldr	r3, [pc, #440]	; (8007678 <tcp_input+0x8ac>)
 80074be:	4973      	ldr	r1, [pc, #460]	; (800768c <tcp_input+0x8c0>)
 80074c0:	486f      	ldr	r0, [pc, #444]	; (8007680 <tcp_input+0x8b4>)
 80074c2:	f240 3251 	movw	r2, #849	; 0x351
 80074c6:	f005 f9d5 	bl	800c874 <iprintf>
        if (pcb->listener == NULL) {
 80074ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80074cc:	b91b      	cbnz	r3, 80074d6 <tcp_input+0x70a>
            tcp_abort(pcb);
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7fe fd88 	bl	8005fe4 <tcp_abort>
            goto aborted;
 80074d4:	e5b2      	b.n	800703c <tcp_input+0x270>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0f8      	beq.n	80074ce <tcp_input+0x702>
 80074dc:	2200      	movs	r2, #0
 80074de:	4621      	mov	r1, r4
 80074e0:	6920      	ldr	r0, [r4, #16]
 80074e2:	4798      	blx	r3
        if (err != ERR_OK) {
 80074e4:	b118      	cbz	r0, 80074ee <tcp_input+0x722>
          if (err != ERR_ABRT) {
 80074e6:	300d      	adds	r0, #13
 80074e8:	f43f ada8 	beq.w	800703c <tcp_input+0x270>
 80074ec:	e7ef      	b.n	80074ce <tcp_input+0x702>
        tcp_receive(pcb);
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7fe ff34 	bl	800635c <tcp_receive>
        if (recv_acked != 0) {
 80074f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80074f8:	b113      	cbz	r3, 8007500 <tcp_input+0x734>
          recv_acked--;
 80074fa:	3b01      	subs	r3, #1
 80074fc:	f8a9 3000 	strh.w	r3, [r9]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007500:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007502:	f241 111c 	movw	r1, #4380	; 0x111c
 8007506:	0053      	lsls	r3, r2, #1
 8007508:	428b      	cmp	r3, r1
 800750a:	bf38      	it	cc
 800750c:	460b      	movcc	r3, r1
 800750e:	0092      	lsls	r2, r2, #2
 8007510:	4293      	cmp	r3, r2
 8007512:	bf28      	it	cs
 8007514:	4613      	movcs	r3, r2
 8007516:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800751a:	f898 3000 	ldrb.w	r3, [r8]
 800751e:	069b      	lsls	r3, r3, #26
 8007520:	f57f aecf 	bpl.w	80072c2 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8007524:	7ea3      	ldrb	r3, [r4, #26]
 8007526:	f043 0302 	orr.w	r3, r3, #2
 800752a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800752c:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 800752e:	7523      	strb	r3, [r4, #20]
 8007530:	e6c7      	b.n	80072c2 <tcp_input+0x4f6>
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007532:	9a05      	ldr	r2, [sp, #20]
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007534:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007536:	8815      	ldrh	r5, [r2, #0]
 8007538:	9a03      	ldr	r2, [sp, #12]
 800753a:	6811      	ldr	r1, [r2, #0]
 800753c:	881a      	ldrh	r2, [r3, #0]
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	4b50      	ldr	r3, [pc, #320]	; (8007688 <tcp_input+0x8bc>)
 8007546:	4429      	add	r1, r5
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	f000 ff1f 	bl	800838c <tcp_rst>
 800754e:	e6b8      	b.n	80072c2 <tcp_input+0x4f6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007550:	2a00      	cmp	r2, #0
 8007552:	f43f aeb6 	beq.w	80072c2 <tcp_input+0x4f6>
 8007556:	9a03      	ldr	r2, [sp, #12]
 8007558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	4293      	cmp	r3, r2
 8007560:	f47f aeaf 	bne.w	80072c2 <tcp_input+0x4f6>
      tcp_rexmit(pcb);
 8007564:	4620      	mov	r0, r4
 8007566:	f000 ff87 	bl	8008478 <tcp_rexmit>
 800756a:	e6aa      	b.n	80072c2 <tcp_input+0x4f6>
    tcp_receive(pcb);
 800756c:	4620      	mov	r0, r4
 800756e:	f7fe fef5 	bl	800635c <tcp_receive>
 8007572:	e7d2      	b.n	800751a <tcp_input+0x74e>
    tcp_receive(pcb);
 8007574:	4620      	mov	r0, r4
 8007576:	f7fe fef1 	bl	800635c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800757a:	f898 3000 	ldrb.w	r3, [r8]
 800757e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8007586:	d030      	beq.n	80075ea <tcp_input+0x81e>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007588:	f013 0f10 	tst.w	r3, #16
 800758c:	7ea3      	ldrb	r3, [r4, #26]
 800758e:	d027      	beq.n	80075e0 <tcp_input+0x814>
 8007590:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007592:	f8da 2000 	ldr.w	r2, [sl]
 8007596:	4291      	cmp	r1, r2
 8007598:	d122      	bne.n	80075e0 <tcp_input+0x814>
 800759a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800759c:	bb02      	cbnz	r2, 80075e0 <tcp_input+0x814>
        tcp_ack_now(pcb);
 800759e:	f043 0302 	orr.w	r3, r3, #2
 80075a2:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7fe f90f 	bl	80057c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	429c      	cmp	r4, r3
 80075ae:	d109      	bne.n	80075c4 <tcp_input+0x7f8>
      TCP_RMV_ACTIVE(pcb);
 80075b0:	68e3      	ldr	r3, [r4, #12]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	e008      	b.n	80075c8 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	4294      	cmp	r4, r2
 80075ba:	d102      	bne.n	80075c2 <tcp_input+0x7f6>
      TCP_RMV_ACTIVE(pcb);
 80075bc:	68e2      	ldr	r2, [r4, #12]
 80075be:	60da      	str	r2, [r3, #12]
 80075c0:	e002      	b.n	80075c8 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 80075c2:	4613      	mov	r3, r2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f6      	bne.n	80075b6 <tcp_input+0x7ea>
      TCP_RMV_ACTIVE(pcb);
 80075c8:	4b31      	ldr	r3, [pc, #196]	; (8007690 <tcp_input+0x8c4>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80075ce:	230a      	movs	r3, #10
 80075d0:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80075d2:	4b30      	ldr	r3, [pc, #192]	; (8007694 <tcp_input+0x8c8>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	60e2      	str	r2, [r4, #12]
 80075d8:	601c      	str	r4, [r3, #0]
 80075da:	f001 f877 	bl	80086cc <tcp_timer_needed>
 80075de:	e670      	b.n	80072c2 <tcp_input+0x4f6>
        tcp_ack_now(pcb);
 80075e0:	f043 0302 	orr.w	r3, r3, #2
 80075e4:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80075e6:	2308      	movs	r3, #8
 80075e8:	e7a1      	b.n	800752e <tcp_input+0x762>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80075ea:	06df      	lsls	r7, r3, #27
 80075ec:	f57f ae69 	bpl.w	80072c2 <tcp_input+0x4f6>
 80075f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80075f2:	f8da 3000 	ldr.w	r3, [sl]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	f47f ae63 	bne.w	80072c2 <tcp_input+0x4f6>
 80075fc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f ae5f 	bne.w	80072c2 <tcp_input+0x4f6>
      pcb->state = FIN_WAIT_2;
 8007604:	2306      	movs	r3, #6
 8007606:	e792      	b.n	800752e <tcp_input+0x762>
    tcp_receive(pcb);
 8007608:	4620      	mov	r0, r4
 800760a:	f7fe fea7 	bl	800635c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800760e:	f898 3000 	ldrb.w	r3, [r8]
 8007612:	069e      	lsls	r6, r3, #26
 8007614:	f57f ae55 	bpl.w	80072c2 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8007618:	7ea3      	ldrb	r3, [r4, #26]
 800761a:	f043 0302 	orr.w	r3, r3, #2
 800761e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8007620:	4620      	mov	r0, r4
 8007622:	f7fe f8d1 	bl	80057c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	429c      	cmp	r4, r3
 800762a:	d0c1      	beq.n	80075b0 <tcp_input+0x7e4>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0cb      	beq.n	80075c8 <tcp_input+0x7fc>
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	4294      	cmp	r4, r2
 8007634:	d0c2      	beq.n	80075bc <tcp_input+0x7f0>
 8007636:	4613      	mov	r3, r2
 8007638:	e7f8      	b.n	800762c <tcp_input+0x860>
    tcp_receive(pcb);
 800763a:	4620      	mov	r0, r4
 800763c:	f7fe fe8e 	bl	800635c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	06dd      	lsls	r5, r3, #27
 8007646:	f57f ae3c 	bpl.w	80072c2 <tcp_input+0x4f6>
 800764a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800764c:	f8da 3000 	ldr.w	r3, [sl]
 8007650:	429a      	cmp	r2, r3
 8007652:	f47f ae36 	bne.w	80072c2 <tcp_input+0x4f6>
 8007656:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f ae32 	bne.w	80072c2 <tcp_input+0x4f6>
      tcp_pcb_purge(pcb);
 800765e:	4620      	mov	r0, r4
 8007660:	f7fe f8b2 	bl	80057c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	429c      	cmp	r4, r3
 8007668:	d0a2      	beq.n	80075b0 <tcp_input+0x7e4>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0ac      	beq.n	80075c8 <tcp_input+0x7fc>
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	4294      	cmp	r4, r2
 8007672:	d0a3      	beq.n	80075bc <tcp_input+0x7f0>
 8007674:	4613      	mov	r3, r2
 8007676:	e7f8      	b.n	800766a <tcp_input+0x89e>
 8007678:	0800e784 	.word	0x0800e784
 800767c:	0800e723 	.word	0x0800e723
 8007680:	0800d741 	.word	0x0800d741
 8007684:	0800e739 	.word	0x0800e739
 8007688:	20003fb0 	.word	0x20003fb0
 800768c:	0800e74c 	.word	0x0800e74c
 8007690:	200076c0 	.word	0x200076c0
 8007694:	200076d4 	.word	0x200076d4
    tcp_receive(pcb);
 8007698:	4620      	mov	r0, r4
 800769a:	f7fe fe5f 	bl	800635c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	06d8      	lsls	r0, r3, #27
 80076a4:	f57f ae0d 	bpl.w	80072c2 <tcp_input+0x4f6>
 80076a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076aa:	f8da 3000 	ldr.w	r3, [sl]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	f47f ae07 	bne.w	80072c2 <tcp_input+0x4f6>
 80076b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f47f ae03 	bne.w	80072c2 <tcp_input+0x4f6>
      recv_flags |= TF_CLOSED;
 80076bc:	f898 3000 	ldrb.w	r3, [r8]
 80076c0:	f043 0310 	orr.w	r3, r3, #16
 80076c4:	f888 3000 	strb.w	r3, [r8]
 80076c8:	e5fb      	b.n	80072c2 <tcp_input+0x4f6>
        if (recv_acked > 0) {
 80076ca:	f8b9 2000 	ldrh.w	r2, [r9]
 80076ce:	b122      	cbz	r2, 80076da <tcp_input+0x90e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80076d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80076d2:	b9f3      	cbnz	r3, 8007712 <tcp_input+0x946>
          recv_acked = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	f8a9 3000 	strh.w	r3, [r9]
        if (tcp_input_delayed_close(pcb)) {
 80076da:	4620      	mov	r0, r4
 80076dc:	f7ff fb56 	bl	8006d8c <tcp_input_delayed_close>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f47f acab 	bne.w	800703c <tcp_input+0x270>
        if (recv_data != NULL) {
 80076e6:	f8db 3000 	ldr.w	r3, [fp]
 80076ea:	b333      	cbz	r3, 800773a <tcp_input+0x96e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80076ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80076ee:	b133      	cbz	r3, 80076fe <tcp_input+0x932>
 80076f0:	4b3b      	ldr	r3, [pc, #236]	; (80077e0 <tcp_input+0xa14>)
 80076f2:	493c      	ldr	r1, [pc, #240]	; (80077e4 <tcp_input+0xa18>)
 80076f4:	483c      	ldr	r0, [pc, #240]	; (80077e8 <tcp_input+0xa1c>)
 80076f6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80076fa:	f005 f8bb 	bl	800c874 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80076fe:	7ea3      	ldrb	r3, [r4, #26]
 8007700:	f8db 2000 	ldr.w	r2, [fp]
 8007704:	f013 0310 	ands.w	r3, r3, #16
 8007708:	d009      	beq.n	800771e <tcp_input+0x952>
            pbuf_free(recv_data);
 800770a:	4610      	mov	r0, r2
 800770c:	f7fd fbbe 	bl	8004e8c <pbuf_free>
 8007710:	e6dd      	b.n	80074ce <tcp_input+0x702>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007712:	4621      	mov	r1, r4
 8007714:	6920      	ldr	r0, [r4, #16]
 8007716:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8007718:	300d      	adds	r0, #13
 800771a:	d1db      	bne.n	80076d4 <tcp_input+0x908>
 800771c:	e48e      	b.n	800703c <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800771e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8007722:	b30d      	cbz	r5, 8007768 <tcp_input+0x99c>
 8007724:	4621      	mov	r1, r4
 8007726:	6920      	ldr	r0, [r4, #16]
 8007728:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800772a:	f110 0f0d 	cmn.w	r0, #13
 800772e:	f43f ac85 	beq.w	800703c <tcp_input+0x270>
          if (err != ERR_OK) {
 8007732:	b110      	cbz	r0, 800773a <tcp_input+0x96e>
            pcb->refused_data = recv_data;
 8007734:	f8db 3000 	ldr.w	r3, [fp]
 8007738:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800773a:	f898 3000 	ldrb.w	r3, [r8]
 800773e:	069a      	lsls	r2, r3, #26
 8007740:	d505      	bpl.n	800774e <tcp_input+0x982>
          if (pcb->refused_data != NULL) {
 8007742:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007744:	b1b3      	cbz	r3, 8007774 <tcp_input+0x9a8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007746:	7b5a      	ldrb	r2, [r3, #13]
 8007748:	f042 0220 	orr.w	r2, r2, #32
 800774c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <tcp_input+0xa20>)
 8007750:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8007752:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8007754:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007756:	f7ff fb19 	bl	8006d8c <tcp_input_delayed_close>
 800775a:	2800      	cmp	r0, #0
 800775c:	f47f ac6e 	bne.w	800703c <tcp_input+0x270>
        tcp_output(pcb);
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fc9b 	bl	800809c <tcp_output>
 8007766:	e469      	b.n	800703c <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007768:	462b      	mov	r3, r5
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f7fe fb2b 	bl	8005dc8 <tcp_recv_null>
 8007772:	e7da      	b.n	800772a <tcp_input+0x95e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007774:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007776:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800777a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800777e:	bf1c      	itt	ne
 8007780:	3301      	addne	r3, #1
 8007782:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007784:	2d00      	cmp	r5, #0
 8007786:	d0e2      	beq.n	800774e <tcp_input+0x982>
 8007788:	2300      	movs	r3, #0
 800778a:	461a      	mov	r2, r3
 800778c:	4621      	mov	r1, r4
 800778e:	6920      	ldr	r0, [r4, #16]
 8007790:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8007792:	300d      	adds	r0, #13
 8007794:	d1db      	bne.n	800774e <tcp_input+0x982>
aborted:
 8007796:	e451      	b.n	800703c <tcp_input+0x270>
      if (prev != NULL) {
 8007798:	b13c      	cbz	r4, 80077aa <tcp_input+0x9de>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800779a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800779e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077a0:	4b13      	ldr	r3, [pc, #76]	; (80077f0 <tcp_input+0xa24>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80077a2:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077a6:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 80077aa:	9b04      	ldr	r3, [sp, #16]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	075c      	lsls	r4, r3, #29
 80077b0:	f53f acce 	bmi.w	8007150 <tcp_input+0x384>
  if (flags & TCP_ACK) {
 80077b4:	f013 0410 	ands.w	r4, r3, #16
 80077b8:	f43f acff 	beq.w	80071ba <tcp_input+0x3ee>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80077bc:	9b05      	ldr	r3, [sp, #20]
 80077be:	881c      	ldrh	r4, [r3, #0]
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	8813      	ldrh	r3, [r2, #0]
 80077c6:	e9cd 0300 	strd	r0, r3, [sp]
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <tcp_input+0xa28>)
 80077cc:	4421      	add	r1, r4
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	e4ac      	b.n	800712c <tcp_input+0x360>
      if (prev != NULL) {
 80077d2:	f1b9 0f00 	cmp.w	r9, #0
 80077d6:	f47f abef 	bne.w	8006fb8 <tcp_input+0x1ec>
 80077da:	f7ff bbfc 	b.w	8006fd6 <tcp_input+0x20a>
 80077de:	bf00      	nop
 80077e0:	0800e784 	.word	0x0800e784
 80077e4:	0800e76a 	.word	0x0800e76a
 80077e8:	0800d741 	.word	0x0800d741
 80077ec:	200076d8 	.word	0x200076d8
 80077f0:	200076cc 	.word	0x200076cc
 80077f4:	20003fb0 	.word	0x20003fb0

080077f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80077f8:	4a02      	ldr	r2, [pc, #8]	; (8007804 <tcp_trigger_input_pcb_close+0xc>)
 80077fa:	7813      	ldrb	r3, [r2, #0]
 80077fc:	f043 0310 	orr.w	r3, r3, #16
 8007800:	7013      	strb	r3, [r2, #0]
}
 8007802:	4770      	bx	lr
 8007804:	20003e54 	.word	0x20003e54

08007808 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800780c:	4294      	cmp	r4, r2
{
 800780e:	461e      	mov	r6, r3
 8007810:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8007814:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8007816:	d228      	bcs.n	800786a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8007818:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800781c:	07ad      	lsls	r5, r5, #30
 800781e:	d407      	bmi.n	8007830 <tcp_pbuf_prealloc+0x28>
 8007820:	7e9d      	ldrb	r5, [r3, #26]
 8007822:	066d      	lsls	r5, r5, #25
 8007824:	d421      	bmi.n	800786a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8007826:	b119      	cbz	r1, 8007830 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8007828:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800782a:	b909      	cbnz	r1, 8007830 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	b1e3      	cbz	r3, 800786a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8007830:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8007834:	f023 0103 	bic.w	r1, r3, #3
 8007838:	428a      	cmp	r2, r1
 800783a:	bf28      	it	cs
 800783c:	460a      	movcs	r2, r1
 800783e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8007840:	2200      	movs	r2, #0
 8007842:	f7fd fb8b 	bl	8004f5c <pbuf_alloc>
  if (p == NULL) {
 8007846:	4605      	mov	r5, r0
 8007848:	b168      	cbz	r0, 8007866 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800784a:	6803      	ldr	r3, [r0, #0]
 800784c:	b133      	cbz	r3, 800785c <tcp_pbuf_prealloc+0x54>
 800784e:	4b08      	ldr	r3, [pc, #32]	; (8007870 <tcp_pbuf_prealloc+0x68>)
 8007850:	4908      	ldr	r1, [pc, #32]	; (8007874 <tcp_pbuf_prealloc+0x6c>)
 8007852:	4809      	ldr	r0, [pc, #36]	; (8007878 <tcp_pbuf_prealloc+0x70>)
 8007854:	f44f 7288 	mov.w	r2, #272	; 0x110
 8007858:	f005 f80c 	bl	800c874 <iprintf>
  *oversize = p->len - length;
 800785c:	896b      	ldrh	r3, [r5, #10]
 800785e:	1b1b      	subs	r3, r3, r4
 8007860:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8007862:	812c      	strh	r4, [r5, #8]
 8007864:	816c      	strh	r4, [r5, #10]
  return p;
}
 8007866:	4628      	mov	r0, r5
 8007868:	bd70      	pop	{r4, r5, r6, pc}
 800786a:	4621      	mov	r1, r4
 800786c:	e7e8      	b.n	8007840 <tcp_pbuf_prealloc+0x38>
 800786e:	bf00      	nop
 8007870:	0800ea87 	.word	0x0800ea87
 8007874:	0800eaba 	.word	0x0800eaba
 8007878:	0800d741 	.word	0x0800d741

0800787c <tcp_create_segment>:
{
 800787c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	4681      	mov	r9, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007882:	2003      	movs	r0, #3
{
 8007884:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 8007888:	460e      	mov	r6, r1
 800788a:	4690      	mov	r8, r2
 800788c:	469a      	mov	sl, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800788e:	f7fd f94f 	bl	8004b30 <memp_malloc>
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007892:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8007896:	b2fd      	uxtb	r5, r7
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007898:	4604      	mov	r4, r0
 800789a:	b928      	cbnz	r0, 80078a8 <tcp_create_segment+0x2c>
    pbuf_free(p);
 800789c:	4630      	mov	r0, r6
 800789e:	f7fd faf5 	bl	8004e8c <pbuf_free>
}
 80078a2:	4620      	mov	r0, r4
 80078a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  seg->next = NULL;
 80078a8:	2300      	movs	r3, #0
  seg->flags = optflags;
 80078aa:	f880 b00a 	strb.w	fp, [r0, #10]
  seg->p = p;
 80078ae:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80078b2:	8933      	ldrh	r3, [r6, #8]
 80078b4:	b2bf      	uxth	r7, r7
 80078b6:	42bb      	cmp	r3, r7
 80078b8:	d205      	bcs.n	80078c6 <tcp_create_segment+0x4a>
 80078ba:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <tcp_create_segment+0xac>)
 80078bc:	491b      	ldr	r1, [pc, #108]	; (800792c <tcp_create_segment+0xb0>)
 80078be:	481c      	ldr	r0, [pc, #112]	; (8007930 <tcp_create_segment+0xb4>)
 80078c0:	22ba      	movs	r2, #186	; 0xba
 80078c2:	f004 ffd7 	bl	800c874 <iprintf>
  seg->len = p->tot_len - optlen;
 80078c6:	8933      	ldrh	r3, [r6, #8]
 80078c8:	1bdf      	subs	r7, r3, r7
 80078ca:	8127      	strh	r7, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80078cc:	2114      	movs	r1, #20
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7fd fad6 	bl	8004e80 <pbuf_header>
 80078d4:	4607      	mov	r7, r0
 80078d6:	b120      	cbz	r0, 80078e2 <tcp_create_segment+0x66>
    tcp_seg_free(seg);
 80078d8:	4620      	mov	r0, r4
 80078da:	f7fd fee7 	bl	80056ac <tcp_seg_free>
    return NULL;
 80078de:	2400      	movs	r4, #0
 80078e0:	e7df      	b.n	80078a2 <tcp_create_segment+0x26>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80078e2:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80078e4:	f8b9 0016 	ldrh.w	r0, [r9, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80078e8:	685e      	ldr	r6, [r3, #4]
 80078ea:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80078ec:	f7fc fe94 	bl	8004618 <lwip_htons>
 80078f0:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80078f2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 80078f6:	68e6      	ldr	r6, [r4, #12]
 80078f8:	f7fc fe8e 	bl	8004618 <lwip_htons>
 80078fc:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80078fe:	4650      	mov	r0, sl
 8007900:	68e6      	ldr	r6, [r4, #12]
 8007902:	f7fc fe8c 	bl	800461e <lwip_htonl>
 8007906:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007908:	02a8      	lsls	r0, r5, #10
 800790a:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 800790e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8007912:	ea40 0008 	orr.w	r0, r0, r8
 8007916:	68e6      	ldr	r6, [r4, #12]
 8007918:	f7fc fe7e 	bl	8004618 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800791c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800791e:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8007920:	749f      	strb	r7, [r3, #18]
 8007922:	74df      	strb	r7, [r3, #19]
  return seg;
 8007924:	e7bd      	b.n	80078a2 <tcp_create_segment+0x26>
 8007926:	bf00      	nop
 8007928:	0800ea87 	.word	0x0800ea87
 800792c:	0800e90f 	.word	0x0800e90f
 8007930:	0800d741 	.word	0x0800d741

08007934 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007934:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007938:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800793a:	4605      	mov	r5, r0
 800793c:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800793e:	2001      	movs	r0, #1
 8007940:	2200      	movs	r2, #0
 8007942:	f7fd fb0b 	bl	8004f5c <pbuf_alloc>
  if (p != NULL) {
 8007946:	4606      	mov	r6, r0
 8007948:	b340      	cbz	r0, 800799c <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800794a:	8943      	ldrh	r3, [r0, #10]
 800794c:	2b13      	cmp	r3, #19
 800794e:	d805      	bhi.n	800795c <tcp_output_alloc_header.constprop.0+0x28>
 8007950:	4b13      	ldr	r3, [pc, #76]	; (80079a0 <tcp_output_alloc_header.constprop.0+0x6c>)
 8007952:	4914      	ldr	r1, [pc, #80]	; (80079a4 <tcp_output_alloc_header.constprop.0+0x70>)
 8007954:	4814      	ldr	r0, [pc, #80]	; (80079a8 <tcp_output_alloc_header.constprop.0+0x74>)
 8007956:	2273      	movs	r2, #115	; 0x73
 8007958:	f004 ff8c 	bl	800c874 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 800795c:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800795e:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8007960:	f7fc fe5a 	bl	8004618 <lwip_htons>
 8007964:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007966:	8b28      	ldrh	r0, [r5, #24]
 8007968:	f7fc fe56 	bl	8004618 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800796c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800796e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007970:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007972:	f7fc fe54 	bl	800461e <lwip_htonl>
 8007976:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8007978:	f245 0010 	movw	r0, #20496	; 0x5010
 800797c:	f7fc fe4c 	bl	8004618 <lwip_htons>
 8007980:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007982:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8007984:	f7fc fe48 	bl	8004618 <lwip_htons>
    tcphdr->chksum = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	7423      	strb	r3, [r4, #16]
 800798c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800798e:	74a3      	strb	r3, [r4, #18]
 8007990:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007992:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8007994:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007996:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007998:	4413      	add	r3, r2
 800799a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800799c:	4630      	mov	r0, r6
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	0800ea87 	.word	0x0800ea87
 80079a4:	0800ea59 	.word	0x0800ea59
 80079a8:	0800d741 	.word	0x0800d741

080079ac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	b091      	sub	sp, #68	; 0x44
 80079b2:	4604      	mov	r4, r0
 80079b4:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80079bc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 80079c4:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80079c6:	9a07      	ldr	r2, [sp, #28]
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	4293      	cmp	r3, r2
 80079cc:	bf28      	it	cs
 80079ce:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bf18      	it	ne
 80079d4:	461a      	movne	r2, r3
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80079d6:	e9cd 2107 	strd	r2, r1, [sp, #28]
 80079da:	b959      	cbnz	r1, 80079f4 <tcp_write+0x48>
 80079dc:	4ba4      	ldr	r3, [pc, #656]	; (8007c70 <tcp_write+0x2c4>)
 80079de:	49a5      	ldr	r1, [pc, #660]	; (8007c74 <tcp_write+0x2c8>)
 80079e0:	48a5      	ldr	r0, [pc, #660]	; (8007c78 <tcp_write+0x2cc>)
 80079e2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80079e6:	f004 ff45 	bl	800c874 <iprintf>
 80079ea:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80079ee:	b011      	add	sp, #68	; 0x44
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80079f4:	7d03      	ldrb	r3, [r0, #20]
 80079f6:	2b07      	cmp	r3, #7
 80079f8:	d003      	beq.n	8007a02 <tcp_write+0x56>
      (pcb->state != CLOSE_WAIT) &&
 80079fa:	3b02      	subs	r3, #2
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	f200 824c 	bhi.w	8007e9a <tcp_write+0x4ee>
  } else if (len == 0) {
 8007a02:	9b05      	ldr	r3, [sp, #20]
 8007a04:	b1eb      	cbz	r3, 8007a42 <tcp_write+0x96>
  if (len > pcb->snd_buf) {
 8007a06:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007a0a:	9a05      	ldr	r2, [sp, #20]
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d206      	bcs.n	8007a1e <tcp_write+0x72>
    pcb->flags |= TF_NAGLEMEMERR;
 8007a10:	7ea3      	ldrb	r3, [r4, #26]
 8007a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a16:	76a3      	strb	r3, [r4, #26]
  return ERR_MEM;
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	e7e7      	b.n	80079ee <tcp_write+0x42>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8007a1e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8007a22:	2a08      	cmp	r2, #8
 8007a24:	d8f4      	bhi.n	8007a10 <tcp_write+0x64>
 8007a26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	f000 809f 	beq.w	8007b6c <tcp_write+0x1c0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8007a2e:	b943      	cbnz	r3, 8007a42 <tcp_write+0x96>
 8007a30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007a32:	b933      	cbnz	r3, 8007a42 <tcp_write+0x96>
 8007a34:	4b8e      	ldr	r3, [pc, #568]	; (8007c70 <tcp_write+0x2c4>)
 8007a36:	4991      	ldr	r1, [pc, #580]	; (8007c7c <tcp_write+0x2d0>)
 8007a38:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8007a3c:	488e      	ldr	r0, [pc, #568]	; (8007c78 <tcp_write+0x2cc>)
 8007a3e:	f004 ff19 	bl	800c874 <iprintf>
  if (pcb->unsent != NULL) {
 8007a42:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8007a46:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007a4a:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8007a4c:	f1b8 0f00 	cmp.w	r8, #0
 8007a50:	f000 80c2 	beq.w	8007bd8 <tcp_write+0x22c>
 8007a54:	4646      	mov	r6, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007a56:	f8d6 b000 	ldr.w	fp, [r6]
 8007a5a:	f1bb 0f00 	cmp.w	fp, #0
 8007a5e:	f040 808f 	bne.w	8007b80 <tcp_write+0x1d4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007a62:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8007a64:	8933      	ldrh	r3, [r6, #8]
 8007a66:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007a68:	00ad      	lsls	r5, r5, #2
 8007a6a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8007a6e:	442b      	add	r3, r5
 8007a70:	429a      	cmp	r2, r3
 8007a72:	da06      	bge.n	8007a82 <tcp_write+0xd6>
 8007a74:	4b7e      	ldr	r3, [pc, #504]	; (8007c70 <tcp_write+0x2c4>)
 8007a76:	4982      	ldr	r1, [pc, #520]	; (8007c80 <tcp_write+0x2d4>)
 8007a78:	487f      	ldr	r0, [pc, #508]	; (8007c78 <tcp_write+0x2cc>)
 8007a7a:	f240 12c7 	movw	r2, #455	; 0x1c7
 8007a7e:	f004 fef9 	bl	800c874 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007a82:	8937      	ldrh	r7, [r6, #8]
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	1bdf      	subs	r7, r3, r7
 8007a88:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 8007a8a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8007a8e:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007a92:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	d075      	beq.n	8007b84 <tcp_write+0x1d8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8007a98:	42bd      	cmp	r5, r7
 8007a9a:	d906      	bls.n	8007aaa <tcp_write+0xfe>
 8007a9c:	4b74      	ldr	r3, [pc, #464]	; (8007c70 <tcp_write+0x2c4>)
 8007a9e:	4979      	ldr	r1, [pc, #484]	; (8007c84 <tcp_write+0x2d8>)
 8007aa0:	4875      	ldr	r0, [pc, #468]	; (8007c78 <tcp_write+0x2cc>)
 8007aa2:	f240 12d9 	movw	r2, #473	; 0x1d9
 8007aa6:	f004 fee5 	bl	800c874 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8007aaa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007aae:	9a05      	ldr	r2, [sp, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	bf28      	it	cs
 8007ab4:	461a      	movcs	r2, r3
 8007ab6:	42ba      	cmp	r2, r7
 8007ab8:	4615      	mov	r5, r2
 8007aba:	bfa8      	it	ge
 8007abc:	463d      	movge	r5, r7
      oversize -= oversize_used;
 8007abe:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 8007ac0:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 8007ac2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8007ac6:	b2bf      	uxth	r7, r7
 8007ac8:	46b0      	mov	r8, r6
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8007aca:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007ace:	b153      	cbz	r3, 8007ae6 <tcp_write+0x13a>
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	f000 81e4 	beq.w	8007ea0 <tcp_write+0x4f4>
 8007ad8:	4b65      	ldr	r3, [pc, #404]	; (8007c70 <tcp_write+0x2c4>)
 8007ada:	496b      	ldr	r1, [pc, #428]	; (8007c88 <tcp_write+0x2dc>)
 8007adc:	4866      	ldr	r0, [pc, #408]	; (8007c78 <tcp_write+0x2cc>)
 8007ade:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007ae2:	f004 fec7 	bl	800c874 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8007ae6:	9b05      	ldr	r3, [sp, #20]
 8007ae8:	429d      	cmp	r5, r3
 8007aea:	f080 81d9 	bcs.w	8007ea0 <tcp_write+0x4f4>
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	f000 8162 	beq.w	8007db8 <tcp_write+0x40c>
 8007af4:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8007af8:	f1ba 0f00 	cmp.w	sl, #0
 8007afc:	f000 815d 	beq.w	8007dba <tcp_write+0x40e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8007b00:	eba3 0a05 	sub.w	sl, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8007b06:	45ba      	cmp	sl, r7
 8007b08:	bfa8      	it	ge
 8007b0a:	46ba      	movge	sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b0c:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8007b0e:	fa1f f88a 	uxth.w	r8, sl
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b12:	d539      	bpl.n	8007b88 <tcp_write+0x1dc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8007b14:	2301      	movs	r3, #1
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	e9cd 4300 	strd	r4, r3, [sp]
 8007b20:	4641      	mov	r1, r8
 8007b22:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8007b26:	2004      	movs	r0, #4
 8007b28:	f7ff fe6e 	bl	8007808 <tcp_pbuf_prealloc>
 8007b2c:	4681      	mov	r9, r0
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f000 81b0 	beq.w	8007e94 <tcp_write+0x4e8>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	6840      	ldr	r0, [r0, #4]
 8007b38:	4642      	mov	r2, r8
 8007b3a:	1959      	adds	r1, r3, r5
 8007b3c:	f004 fdd1 	bl	800c6e2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8007b40:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8007b42:	f7fd fb57 	bl	80051f4 <pbuf_clen>
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	4403      	add	r3, r0
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8007b4e:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8007b52:	eb05 0708 	add.w	r7, r5, r8
 8007b56:	b2bf      	uxth	r7, r7
 8007b58:	46b0      	mov	r8, r6
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      pos += seglen;
 8007b5c:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b60:	f003 0301 	and.w	r3, r3, #1
      pos += seglen;
 8007b64:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b68:	930c      	str	r3, [sp, #48]	; 0x30
 8007b6a:	e0fe      	b.n	8007d6a <tcp_write+0x3be>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8007b6c:	b91b      	cbnz	r3, 8007b76 <tcp_write+0x1ca>
 8007b6e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f43f af66 	beq.w	8007a42 <tcp_write+0x96>
 8007b76:	4b3e      	ldr	r3, [pc, #248]	; (8007c70 <tcp_write+0x2c4>)
 8007b78:	4944      	ldr	r1, [pc, #272]	; (8007c8c <tcp_write+0x2e0>)
 8007b7a:	f240 1259 	movw	r2, #345	; 0x159
 8007b7e:	e75d      	b.n	8007a3c <tcp_write+0x90>
 8007b80:	465e      	mov	r6, fp
 8007b82:	e768      	b.n	8007a56 <tcp_write+0xaa>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007b84:	46a8      	mov	r8, r5
 8007b86:	e7a0      	b.n	8007aca <tcp_write+0x11e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8007b88:	6873      	ldr	r3, [r6, #4]
 8007b8a:	f8d3 9000 	ldr.w	r9, [r3]
 8007b8e:	f1b9 0f00 	cmp.w	r9, #0
 8007b92:	d112      	bne.n	8007bba <tcp_write+0x20e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8007b94:	7b1a      	ldrb	r2, [r3, #12]
 8007b96:	2a01      	cmp	r2, #1
 8007b98:	d111      	bne.n	8007bbe <tcp_write+0x212>
 8007b9a:	895a      	ldrh	r2, [r3, #10]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	9a08      	ldr	r2, [sp, #32]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d10b      	bne.n	8007bbe <tcp_write+0x212>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8007ba6:	b135      	cbz	r5, 8007bb6 <tcp_write+0x20a>
 8007ba8:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <tcp_write+0x2c4>)
 8007baa:	4939      	ldr	r1, [pc, #228]	; (8007c90 <tcp_write+0x2e4>)
 8007bac:	4832      	ldr	r0, [pc, #200]	; (8007c78 <tcp_write+0x2cc>)
 8007bae:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007bb2:	f004 fe5f 	bl	800c874 <iprintf>
          extendlen = seglen;
 8007bb6:	46c2      	mov	sl, r8
 8007bb8:	e7cb      	b.n	8007b52 <tcp_write+0x1a6>
 8007bba:	464b      	mov	r3, r9
 8007bbc:	e7e5      	b.n	8007b8a <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	2004      	movs	r0, #4
 8007bc4:	f7fd f9ca 	bl	8004f5c <pbuf_alloc>
 8007bc8:	4681      	mov	r9, r0
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f000 8162 	beq.w	8007e94 <tcp_write+0x4e8>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	442b      	add	r3, r5
 8007bd4:	6043      	str	r3, [r0, #4]
 8007bd6:	e7b4      	b.n	8007b42 <tcp_write+0x196>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8007bd8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8007bdc:	2f00      	cmp	r7, #0
 8007bde:	f000 80ef 	beq.w	8007dc0 <tcp_write+0x414>
 8007be2:	4b23      	ldr	r3, [pc, #140]	; (8007c70 <tcp_write+0x2c4>)
 8007be4:	492b      	ldr	r1, [pc, #172]	; (8007c94 <tcp_write+0x2e8>)
 8007be6:	4824      	ldr	r0, [pc, #144]	; (8007c78 <tcp_write+0x2cc>)
 8007be8:	f240 2225 	movw	r2, #549	; 0x225
 8007bec:	f004 fe42 	bl	800c874 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007bf0:	4646      	mov	r6, r8
  u16_t extendlen = 0;
 8007bf2:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8007bf4:	4645      	mov	r5, r8
  u16_t pos = 0; /* position in 'arg' data */
 8007bf6:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8007bf8:	46c1      	mov	r9, r8
 8007bfa:	e7ae      	b.n	8007b5a <tcp_write+0x1ae>
    u16_t left = len - pos;
 8007bfc:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8007bfe:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8007c00:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4293      	cmp	r3, r2
 8007c06:	bf28      	it	cs
 8007c08:	4613      	movcs	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007c0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d043      	beq.n	8007c9c <tcp_write+0x2f0>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8007c14:	fabb f38b 	clz	r3, fp
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	9302      	str	r3, [sp, #8]
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c20:	e9cd 4300 	strd	r4, r3, [sp]
 8007c24:	2000      	movs	r0, #0
 8007c26:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8007c2a:	f7ff fded 	bl	8007808 <tcp_pbuf_prealloc>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d052      	beq.n	8007cda <tcp_write+0x32e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8007c34:	8943      	ldrh	r3, [r0, #10]
 8007c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d206      	bcs.n	8007c4a <tcp_write+0x29e>
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <tcp_write+0x2c4>)
 8007c3e:	4916      	ldr	r1, [pc, #88]	; (8007c98 <tcp_write+0x2ec>)
 8007c40:	480d      	ldr	r0, [pc, #52]	; (8007c78 <tcp_write+0x2cc>)
 8007c42:	f240 2241 	movw	r2, #577	; 0x241
 8007c46:	f004 fe15 	bl	800c874 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8007c4a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8007c4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c52:	19d9      	adds	r1, r3, r7
 8007c54:	f004 fd45 	bl	800c6e2 <memcpy>
    queuelen += pbuf_clen(p);
 8007c58:	4640      	mov	r0, r8
 8007c5a:	f7fd facb 	bl	80051f4 <pbuf_clen>
 8007c5e:	9b06      	ldr	r3, [sp, #24]
 8007c60:	4403      	add	r3, r0
 8007c62:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8007c64:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8007c66:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8007c68:	d960      	bls.n	8007d2c <tcp_write+0x380>
      pbuf_free(p);
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	e033      	b.n	8007cd6 <tcp_write+0x32a>
 8007c6e:	bf00      	nop
 8007c70:	0800ea87 	.word	0x0800ea87
 8007c74:	0800eace 	.word	0x0800eace
 8007c78:	0800d741 	.word	0x0800d741
 8007c7c:	0800eaff 	.word	0x0800eaff
 8007c80:	0800eb6b 	.word	0x0800eb6b
 8007c84:	0800eb82 	.word	0x0800eb82
 8007c88:	0800eba2 	.word	0x0800eba2
 8007c8c:	0800eb39 	.word	0x0800eb39
 8007c90:	0800ebc0 	.word	0x0800ebc0
 8007c94:	0800ebe9 	.word	0x0800ebe9
 8007c98:	0800ec18 	.word	0x0800ec18
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8007c9c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007ca0:	b133      	cbz	r3, 8007cb0 <tcp_write+0x304>
 8007ca2:	4b83      	ldr	r3, [pc, #524]	; (8007eb0 <tcp_write+0x504>)
 8007ca4:	4983      	ldr	r1, [pc, #524]	; (8007eb4 <tcp_write+0x508>)
 8007ca6:	4884      	ldr	r0, [pc, #528]	; (8007eb8 <tcp_write+0x50c>)
 8007ca8:	f240 224b 	movw	r2, #587	; 0x24b
 8007cac:	f004 fde2 	bl	800c874 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7fd f951 	bl	8004f5c <pbuf_alloc>
 8007cba:	b170      	cbz	r0, 8007cda <tcp_write+0x32e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8007cbc:	9a08      	ldr	r2, [sp, #32]
 8007cbe:	900d      	str	r0, [sp, #52]	; 0x34
 8007cc0:	443a      	add	r2, r7
 8007cc2:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7fd f947 	bl	8004f5c <pbuf_alloc>
 8007cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	bb38      	cbnz	r0, 8007d24 <tcp_write+0x378>
        pbuf_free(p2);
 8007cd4:	4618      	mov	r0, r3
      pbuf_free(p);
 8007cd6:	f7fd f8d9 	bl	8004e8c <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8007cda:	7ea3      	ldrb	r3, [r4, #26]
 8007cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ce0:	76a3      	strb	r3, [r4, #26]
  if (concat_p != NULL) {
 8007ce2:	f1b9 0f00 	cmp.w	r9, #0
 8007ce6:	d002      	beq.n	8007cee <tcp_write+0x342>
    pbuf_free(concat_p);
 8007ce8:	4648      	mov	r0, r9
 8007cea:	f7fd f8cf 	bl	8004e8c <pbuf_free>
  if (queue != NULL) {
 8007cee:	f1bb 0f00 	cmp.w	fp, #0
 8007cf2:	d002      	beq.n	8007cfa <tcp_write+0x34e>
    tcp_segs_free(queue);
 8007cf4:	4658      	mov	r0, fp
 8007cf6:	f7fd fce7 	bl	80056c8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8007cfa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f43f ae8a 	beq.w	8007a18 <tcp_write+0x6c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8007d04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f47f ae86 	bne.w	8007a18 <tcp_write+0x6c>
 8007d0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f47f ae82 	bne.w	8007a18 <tcp_write+0x6c>
 8007d14:	4b66      	ldr	r3, [pc, #408]	; (8007eb0 <tcp_write+0x504>)
 8007d16:	4969      	ldr	r1, [pc, #420]	; (8007ebc <tcp_write+0x510>)
 8007d18:	4867      	ldr	r0, [pc, #412]	; (8007eb8 <tcp_write+0x50c>)
 8007d1a:	f240 3202 	movw	r2, #770	; 0x302
 8007d1e:	f004 fda9 	bl	800c874 <iprintf>
 8007d22:	e679      	b.n	8007a18 <tcp_write+0x6c>
      pbuf_cat(p/*header*/, p2/*data*/);
 8007d24:	4619      	mov	r1, r3
 8007d26:	f7fd fa89 	bl	800523c <pbuf_cat>
 8007d2a:	e795      	b.n	8007c58 <tcp_write+0x2ac>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8007d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4641      	mov	r1, r8
 8007d32:	9200      	str	r2, [sp, #0]
 8007d34:	443b      	add	r3, r7
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff fda0 	bl	800787c <tcp_create_segment>
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d0cb      	beq.n	8007cda <tcp_write+0x32e>
    if (queue == NULL) {
 8007d42:	f1bb 0f00 	cmp.w	fp, #0
 8007d46:	d035      	beq.n	8007db4 <tcp_write+0x408>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8007d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4a:	b933      	cbnz	r3, 8007d5a <tcp_write+0x3ae>
 8007d4c:	4b58      	ldr	r3, [pc, #352]	; (8007eb0 <tcp_write+0x504>)
 8007d4e:	495c      	ldr	r1, [pc, #368]	; (8007ec0 <tcp_write+0x514>)
 8007d50:	4859      	ldr	r0, [pc, #356]	; (8007eb8 <tcp_write+0x50c>)
 8007d52:	f240 2285 	movw	r2, #645	; 0x285
 8007d56:	f004 fd8d 	bl	800c874 <iprintf>
      prev_seg->next = seg;
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 8007d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d62:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007d66:	441f      	add	r7, r3
 8007d68:	b2bf      	uxth	r7, r7
  while (pos < len) {
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	429f      	cmp	r7, r3
 8007d6e:	f4ff af45 	bcc.w	8007bfc <tcp_write+0x250>
  if (oversize_used > 0) {
 8007d72:	b125      	cbz	r5, 8007d7e <tcp_write+0x3d2>
    for (p = last_unsent->p; p; p = p->next) {
 8007d74:	6877      	ldr	r7, [r6, #4]
 8007d76:	bb67      	cbnz	r7, 8007dd2 <tcp_write+0x426>
    last_unsent->len += oversize_used;
 8007d78:	8933      	ldrh	r3, [r6, #8]
 8007d7a:	441d      	add	r5, r3
 8007d7c:	8135      	strh	r5, [r6, #8]
  pcb->unsent_oversize = oversize;
 8007d7e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007d82:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if (concat_p != NULL) {
 8007d86:	f1b9 0f00 	cmp.w	r9, #0
 8007d8a:	d033      	beq.n	8007df4 <tcp_write+0x448>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8007d8c:	b936      	cbnz	r6, 8007d9c <tcp_write+0x3f0>
 8007d8e:	4b48      	ldr	r3, [pc, #288]	; (8007eb0 <tcp_write+0x504>)
 8007d90:	494c      	ldr	r1, [pc, #304]	; (8007ec4 <tcp_write+0x518>)
 8007d92:	4849      	ldr	r0, [pc, #292]	; (8007eb8 <tcp_write+0x50c>)
 8007d94:	f240 22bb 	movw	r2, #699	; 0x2bb
 8007d98:	f004 fd6c 	bl	800c874 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	6870      	ldr	r0, [r6, #4]
 8007da0:	f7fd fa4c 	bl	800523c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8007da4:	8933      	ldrh	r3, [r6, #8]
 8007da6:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8007daa:	4413      	add	r3, r2
 8007dac:	8133      	strh	r3, [r6, #8]
    last_unsent->next = queue;
 8007dae:	f8c6 b000 	str.w	fp, [r6]
 8007db2:	e041      	b.n	8007e38 <tcp_write+0x48c>
 8007db4:	4683      	mov	fp, r0
 8007db6:	e7d3      	b.n	8007d60 <tcp_write+0x3b4>
  u16_t extendlen = 0;
 8007db8:	46ba      	mov	sl, r7
 8007dba:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 8007dbc:	46d1      	mov	r9, sl
 8007dbe:	e6cc      	b.n	8007b5a <tcp_write+0x1ae>
  u16_t extendlen = 0;
 8007dc0:	46ba      	mov	sl, r7
  u16_t oversize_used = 0;
 8007dc2:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007dc4:	463e      	mov	r6, r7
  struct pbuf *concat_p = NULL;
 8007dc6:	46b9      	mov	r9, r7
 8007dc8:	e6c7      	b.n	8007b5a <tcp_write+0x1ae>
  if (oversize_used > 0) {
 8007dca:	f04f 0a00 	mov.w	sl, #0
 8007dce:	46d1      	mov	r9, sl
 8007dd0:	e7d0      	b.n	8007d74 <tcp_write+0x3c8>
      p->tot_len += oversize_used;
 8007dd2:	893b      	ldrh	r3, [r7, #8]
 8007dd4:	442b      	add	r3, r5
 8007dd6:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	b94b      	cbnz	r3, 8007df0 <tcp_write+0x444>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8978      	ldrh	r0, [r7, #10]
 8007de0:	9908      	ldr	r1, [sp, #32]
 8007de2:	4418      	add	r0, r3
 8007de4:	462a      	mov	r2, r5
 8007de6:	f004 fc7c 	bl	800c6e2 <memcpy>
        p->len += oversize_used;
 8007dea:	897b      	ldrh	r3, [r7, #10]
 8007dec:	442b      	add	r3, r5
 8007dee:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8007df0:	683f      	ldr	r7, [r7, #0]
 8007df2:	e7c0      	b.n	8007d76 <tcp_write+0x3ca>
  } else if (extendlen > 0) {
 8007df4:	f1ba 0f00 	cmp.w	sl, #0
 8007df8:	d01a      	beq.n	8007e30 <tcp_write+0x484>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8007dfa:	b10e      	cbz	r6, 8007e00 <tcp_write+0x454>
 8007dfc:	6873      	ldr	r3, [r6, #4]
 8007dfe:	b933      	cbnz	r3, 8007e0e <tcp_write+0x462>
 8007e00:	4b2b      	ldr	r3, [pc, #172]	; (8007eb0 <tcp_write+0x504>)
 8007e02:	4931      	ldr	r1, [pc, #196]	; (8007ec8 <tcp_write+0x51c>)
 8007e04:	482c      	ldr	r0, [pc, #176]	; (8007eb8 <tcp_write+0x50c>)
 8007e06:	f240 22c1 	movw	r2, #705	; 0x2c1
 8007e0a:	f004 fd33 	bl	800c874 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007e0e:	6873      	ldr	r3, [r6, #4]
 8007e10:	891a      	ldrh	r2, [r3, #8]
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	4452      	add	r2, sl
 8007e16:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 8007e18:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007e1a:	b939      	cbnz	r1, 8007e2c <tcp_write+0x480>
    p->len += extendlen;
 8007e1c:	895a      	ldrh	r2, [r3, #10]
 8007e1e:	4452      	add	r2, sl
 8007e20:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8007e22:	8933      	ldrh	r3, [r6, #8]
 8007e24:	449a      	add	sl, r3
 8007e26:	f8a6 a008 	strh.w	sl, [r6, #8]
 8007e2a:	e7c0      	b.n	8007dae <tcp_write+0x402>
      p->tot_len += extendlen;
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e7ef      	b.n	8007e10 <tcp_write+0x464>
  if (last_unsent == NULL) {
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	d1bc      	bne.n	8007dae <tcp_write+0x402>
    pcb->unsent = queue;
 8007e34:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
  pcb->snd_lbb += len;
 8007e38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e3a:	9a05      	ldr	r2, [sp, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_buf -= len;
 8007e40:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8007e4a:	9b06      	ldr	r3, [sp, #24]
 8007e4c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8007e50:	b153      	cbz	r3, 8007e68 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: valid queue length",
 8007e52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007e54:	b943      	cbnz	r3, 8007e68 <tcp_write+0x4bc>
 8007e56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007e58:	b933      	cbnz	r3, 8007e68 <tcp_write+0x4bc>
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <tcp_write+0x504>)
 8007e5c:	4917      	ldr	r1, [pc, #92]	; (8007ebc <tcp_write+0x510>)
 8007e5e:	4816      	ldr	r0, [pc, #88]	; (8007eb8 <tcp_write+0x50c>)
 8007e60:	f240 22ed 	movw	r2, #749	; 0x2ed
 8007e64:	f004 fd06 	bl	800c874 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8007e68:	f1b8 0f00 	cmp.w	r8, #0
 8007e6c:	d010      	beq.n	8007e90 <tcp_write+0x4e4>
 8007e6e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f43f adbb 	beq.w	80079ee <tcp_write+0x42>
 8007e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e7a:	f013 0502 	ands.w	r5, r3, #2
 8007e7e:	d107      	bne.n	8007e90 <tcp_write+0x4e4>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8007e80:	8984      	ldrh	r4, [r0, #12]
 8007e82:	2008      	movs	r0, #8
 8007e84:	f7fc fbc8 	bl	8004618 <lwip_htons>
 8007e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e8c:	4320      	orrs	r0, r4
 8007e8e:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 8007e90:	2000      	movs	r0, #0
 8007e92:	e5ac      	b.n	80079ee <tcp_write+0x42>
      p->tot_len += extendlen;
 8007e94:	f04f 0900 	mov.w	r9, #0
 8007e98:	e71f      	b.n	8007cda <tcp_write+0x32e>
    return ERR_CONN;
 8007e9a:	f06f 000a 	mvn.w	r0, #10
 8007e9e:	e5a6      	b.n	80079ee <tcp_write+0x42>
  if (oversize_used > 0) {
 8007ea0:	2d00      	cmp	r5, #0
 8007ea2:	d192      	bne.n	8007dca <tcp_write+0x41e>
  pcb->unsent_oversize = oversize;
 8007ea4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007ea8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8007eac:	e77f      	b.n	8007dae <tcp_write+0x402>
 8007eae:	bf00      	nop
 8007eb0:	0800ea87 	.word	0x0800ea87
 8007eb4:	0800ec56 	.word	0x0800ec56
 8007eb8:	0800d741 	.word	0x0800d741
 8007ebc:	0800ece2 	.word	0x0800ece2
 8007ec0:	0800ec64 	.word	0x0800ec64
 8007ec4:	0800ec75 	.word	0x0800ec75
 8007ec8:	0800ecad 	.word	0x0800ecad

08007ecc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8007ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007ed0:	f011 0803 	ands.w	r8, r1, #3
{
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007ed8:	d106      	bne.n	8007ee8 <tcp_enqueue_flags+0x1c>
 8007eda:	4b3d      	ldr	r3, [pc, #244]	; (8007fd0 <tcp_enqueue_flags+0x104>)
 8007edc:	493d      	ldr	r1, [pc, #244]	; (8007fd4 <tcp_enqueue_flags+0x108>)
 8007ede:	483e      	ldr	r0, [pc, #248]	; (8007fd8 <tcp_enqueue_flags+0x10c>)
 8007ee0:	f240 321b 	movw	r2, #795	; 0x31b
 8007ee4:	f004 fcc6 	bl	800c874 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8007ee8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d90a      	bls.n	8007f06 <tcp_enqueue_flags+0x3a>
 8007ef0:	07f1      	lsls	r1, r6, #31
 8007ef2:	d408      	bmi.n	8007f06 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8007ef4:	7ea3      	ldrb	r3, [r4, #26]
 8007ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007efa:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8007f00:	b003      	add	sp, #12
 8007f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (flags & TCP_SYN) {
 8007f06:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8007f10:	4649      	mov	r1, r9
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7fd f822 	bl	8004f5c <pbuf_alloc>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0ea      	beq.n	8007ef4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007f1e:	8943      	ldrh	r3, [r0, #10]
 8007f20:	454b      	cmp	r3, r9
 8007f22:	d206      	bcs.n	8007f32 <tcp_enqueue_flags+0x66>
 8007f24:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <tcp_enqueue_flags+0x104>)
 8007f26:	492d      	ldr	r1, [pc, #180]	; (8007fdc <tcp_enqueue_flags+0x110>)
 8007f28:	482b      	ldr	r0, [pc, #172]	; (8007fd8 <tcp_enqueue_flags+0x10c>)
 8007f2a:	f240 3241 	movw	r2, #833	; 0x341
 8007f2e:	f004 fca1 	bl	800c874 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007f32:	9700      	str	r7, [sp, #0]
 8007f34:	4629      	mov	r1, r5
 8007f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f38:	4632      	mov	r2, r6
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f7ff fc9e 	bl	800787c <tcp_create_segment>
 8007f40:	4605      	mov	r5, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0d6      	beq.n	8007ef4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8007f46:	68c3      	ldr	r3, [r0, #12]
 8007f48:	079a      	lsls	r2, r3, #30
 8007f4a:	d006      	beq.n	8007f5a <tcp_enqueue_flags+0x8e>
 8007f4c:	4b20      	ldr	r3, [pc, #128]	; (8007fd0 <tcp_enqueue_flags+0x104>)
 8007f4e:	4924      	ldr	r1, [pc, #144]	; (8007fe0 <tcp_enqueue_flags+0x114>)
 8007f50:	4821      	ldr	r0, [pc, #132]	; (8007fd8 <tcp_enqueue_flags+0x10c>)
 8007f52:	f240 3249 	movw	r2, #841	; 0x349
 8007f56:	f004 fc8d 	bl	800c874 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007f5a:	892b      	ldrh	r3, [r5, #8]
 8007f5c:	b133      	cbz	r3, 8007f6c <tcp_enqueue_flags+0xa0>
 8007f5e:	4b1c      	ldr	r3, [pc, #112]	; (8007fd0 <tcp_enqueue_flags+0x104>)
 8007f60:	4920      	ldr	r1, [pc, #128]	; (8007fe4 <tcp_enqueue_flags+0x118>)
 8007f62:	481d      	ldr	r0, [pc, #116]	; (8007fd8 <tcp_enqueue_flags+0x10c>)
 8007f64:	f240 324a 	movw	r2, #842	; 0x34a
 8007f68:	f004 fc84 	bl	800c874 <iprintf>
  if (pcb->unsent == NULL) {
 8007f6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007f6e:	bb4b      	cbnz	r3, 8007fc4 <tcp_enqueue_flags+0xf8>
    pcb->unsent = seg;
 8007f70:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007f78:	f1b8 0f00 	cmp.w	r8, #0
 8007f7c:	d002      	beq.n	8007f84 <tcp_enqueue_flags+0xb8>
    pcb->snd_lbb++;
 8007f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f80:	3301      	adds	r3, #1
 8007f82:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8007f84:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8007f86:	bf42      	ittt	mi
 8007f88:	7ea3      	ldrbmi	r3, [r4, #26]
 8007f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f8e:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007f90:	6868      	ldr	r0, [r5, #4]
 8007f92:	f7fd f92f 	bl	80051f4 <pbuf_clen>
 8007f96:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007f9a:	4418      	add	r0, r3
 8007f9c:	b280      	uxth	r0, r0
 8007f9e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d0ac      	beq.n	8007f00 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007fa6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007fa8:	b948      	cbnz	r0, 8007fbe <tcp_enqueue_flags+0xf2>
 8007faa:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8007fac:	2c00      	cmp	r4, #0
 8007fae:	d1a7      	bne.n	8007f00 <tcp_enqueue_flags+0x34>
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <tcp_enqueue_flags+0x104>)
 8007fb2:	490d      	ldr	r1, [pc, #52]	; (8007fe8 <tcp_enqueue_flags+0x11c>)
 8007fb4:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <tcp_enqueue_flags+0x10c>)
 8007fb6:	f240 326d 	movw	r2, #877	; 0x36d
 8007fba:	f004 fc5b 	bl	800c874 <iprintf>
  return ERR_OK;
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e79e      	b.n	8007f00 <tcp_enqueue_flags+0x34>
 8007fc2:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	d1fb      	bne.n	8007fc2 <tcp_enqueue_flags+0xf6>
    useg->next = seg;
 8007fca:	601d      	str	r5, [r3, #0]
 8007fcc:	e7d1      	b.n	8007f72 <tcp_enqueue_flags+0xa6>
 8007fce:	bf00      	nop
 8007fd0:	0800ea87 	.word	0x0800ea87
 8007fd4:	0800e924 	.word	0x0800e924
 8007fd8:	0800d741 	.word	0x0800d741
 8007fdc:	0800e979 	.word	0x0800e979
 8007fe0:	0800e9b2 	.word	0x0800e9b2
 8007fe4:	0800e9ca 	.word	0x0800e9ca
 8007fe8:	0800e9f4 	.word	0x0800e9f4

08007fec <tcp_send_fin>:
{
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8007fee:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8007ff0:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8007ff2:	b934      	cbnz	r4, 8008002 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	2101      	movs	r1, #1
}
 8007ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007ffc:	f7ff bf66 	b.w	8007ecc <tcp_enqueue_flags>
 8008000:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1fb      	bne.n	8008000 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008008:	68e3      	ldr	r3, [r4, #12]
 800800a:	8998      	ldrh	r0, [r3, #12]
 800800c:	f7fc fb04 	bl	8004618 <lwip_htons>
 8008010:	f010 0707 	ands.w	r7, r0, #7
 8008014:	d1ee      	bne.n	8007ff4 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008016:	68e3      	ldr	r3, [r4, #12]
 8008018:	2001      	movs	r0, #1
 800801a:	899e      	ldrh	r6, [r3, #12]
 800801c:	f7fc fafc 	bl	8004618 <lwip_htons>
 8008020:	68e3      	ldr	r3, [r4, #12]
 8008022:	4330      	orrs	r0, r6
 8008024:	8198      	strh	r0, [r3, #12]
      pcb->flags |= TF_FIN;
 8008026:	7eab      	ldrb	r3, [r5, #26]
 8008028:	f043 0320 	orr.w	r3, r3, #32
 800802c:	76ab      	strb	r3, [r5, #26]
}
 800802e:	4638      	mov	r0, r7
 8008030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008032 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008032:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008034:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008036:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008038:	f7fc faf1 	bl	800461e <lwip_htonl>
 800803c:	2100      	movs	r1, #0
 800803e:	4602      	mov	r2, r0
 8008040:	4620      	mov	r0, r4
 8008042:	f7ff fc77 	bl	8007934 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008046:	4606      	mov	r6, r0
 8008048:	b940      	cbnz	r0, 800805c <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800804a:	7ea3      	ldrb	r3, [r4, #26]
 800804c:	f043 0303 	orr.w	r3, r3, #3
 8008050:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008052:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8008056:	4628      	mov	r0, r5
 8008058:	b004      	add	sp, #16
 800805a:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800805c:	1d25      	adds	r5, r4, #4
 800805e:	4628      	mov	r0, r5
 8008060:	f002 fb3e 	bl	800a6e0 <ip4_route>
  if (netif == NULL) {
 8008064:	b1a0      	cbz	r0, 8008090 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008066:	2206      	movs	r2, #6
 8008068:	9201      	str	r2, [sp, #4]
 800806a:	7a62      	ldrb	r2, [r4, #9]
 800806c:	9002      	str	r0, [sp, #8]
 800806e:	9200      	str	r2, [sp, #0]
 8008070:	7aa3      	ldrb	r3, [r4, #10]
 8008072:	462a      	mov	r2, r5
 8008074:	4621      	mov	r1, r4
 8008076:	4630      	mov	r0, r6
 8008078:	f002 fca4 	bl	800a9c4 <ip4_output_if>
 800807c:	4605      	mov	r5, r0
  pbuf_free(p);
 800807e:	4630      	mov	r0, r6
 8008080:	f7fc ff04 	bl	8004e8c <pbuf_free>
 8008084:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8008086:	b135      	cbz	r5, 8008096 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008088:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800808c:	76a3      	strb	r3, [r4, #26]
 800808e:	e7e2      	b.n	8008056 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8008090:	f06f 0503 	mvn.w	r5, #3
 8008094:	e7f3      	b.n	800807e <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	e7f7      	b.n	800808c <tcp_send_empty_ack+0x5a>

0800809c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80080a0:	7d03      	ldrb	r3, [r0, #20]
 80080a2:	2b01      	cmp	r3, #1
{
 80080a4:	b087      	sub	sp, #28
 80080a6:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80080a8:	d106      	bne.n	80080b8 <tcp_output+0x1c>
 80080aa:	4ba4      	ldr	r3, [pc, #656]	; (800833c <tcp_output+0x2a0>)
 80080ac:	49a4      	ldr	r1, [pc, #656]	; (8008340 <tcp_output+0x2a4>)
 80080ae:	48a5      	ldr	r0, [pc, #660]	; (8008344 <tcp_output+0x2a8>)
 80080b0:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80080b4:	f004 fbde 	bl	800c874 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80080b8:	4ba3      	ldr	r3, [pc, #652]	; (8008348 <tcp_output+0x2ac>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d04f      	beq.n	8008160 <tcp_output+0xc4>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80080c0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80080c4:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 80080c8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80080ca:	429e      	cmp	r6, r3
 80080cc:	bf28      	it	cs
 80080ce:	461e      	movcs	r6, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80080d0:	7ea3      	ldrb	r3, [r4, #26]
 80080d2:	0799      	lsls	r1, r3, #30
 80080d4:	d510      	bpl.n	80080f8 <tcp_output+0x5c>
 80080d6:	b92d      	cbnz	r5, 80080e4 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 80080d8:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 80080da:	b007      	add	sp, #28
 80080dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 80080e0:	f7ff bfa7 	b.w	8008032 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80080e4:	68eb      	ldr	r3, [r5, #12]
 80080e6:	6858      	ldr	r0, [r3, #4]
 80080e8:	f7fc fa99 	bl	800461e <lwip_htonl>
 80080ec:	892b      	ldrh	r3, [r5, #8]
 80080ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80080f0:	1a9b      	subs	r3, r3, r2
 80080f2:	4418      	add	r0, r3
     (seg == NULL ||
 80080f4:	42b0      	cmp	r0, r6
 80080f6:	d8ef      	bhi.n	80080d8 <tcp_output+0x3c>
  useg = pcb->unacked;
 80080f8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  if (useg != NULL) {
 80080fa:	2f00      	cmp	r7, #0
 80080fc:	d133      	bne.n	8008166 <tcp_output+0xca>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80080fe:	f104 0804 	add.w	r8, r4, #4
 8008102:	4640      	mov	r0, r8
 8008104:	f002 faec 	bl	800a6e0 <ip4_route>
  if (netif == NULL) {
 8008108:	4681      	mov	r9, r0
 800810a:	2800      	cmp	r0, #0
 800810c:	f000 813a 	beq.w	8008384 <tcp_output+0x2e8>
  if (ip_addr_isany(&pcb->local_ip)) {
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	b90b      	cbnz	r3, 8008118 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008114:	6843      	ldr	r3, [r0, #4]
 8008116:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8008118:	b1cd      	cbz	r5, 800814e <tcp_output+0xb2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800811a:	68eb      	ldr	r3, [r5, #12]
 800811c:	6858      	ldr	r0, [r3, #4]
 800811e:	f7fc fa7e 	bl	800461e <lwip_htonl>
 8008122:	892b      	ldrh	r3, [r5, #8]
 8008124:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	4418      	add	r0, r3
  if (seg != NULL &&
 800812a:	42b0      	cmp	r0, r6
 800812c:	d96e      	bls.n	800820c <tcp_output+0x170>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800812e:	2e00      	cmp	r6, #0
 8008130:	d06c      	beq.n	800820c <tcp_output+0x170>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008132:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008136:	42b3      	cmp	r3, r6
 8008138:	d168      	bne.n	800820c <tcp_output+0x170>
 800813a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d165      	bne.n	800820c <tcp_output+0x170>
    if (pcb->persist_backoff == 0) {
 8008140:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008144:	b91b      	cbnz	r3, 800814e <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 8008146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800814a:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
  if (pcb->unsent == NULL) {
 800814e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008150:	b913      	cbnz	r3, 8008158 <tcp_output+0xbc>
    pcb->unsent_oversize = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008158:	7ea3      	ldrb	r3, [r4, #26]
 800815a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800815e:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8008160:	2000      	movs	r0, #0
 8008162:	e0e8      	b.n	8008336 <tcp_output+0x29a>
 8008164:	461f      	mov	r7, r3
    for (; useg->next != NULL; useg = useg->next);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1fb      	bne.n	8008164 <tcp_output+0xc8>
 800816c:	e7c7      	b.n	80080fe <tcp_output+0x62>
    pcb->unsent = seg->next;
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008172:	7d23      	ldrb	r3, [r4, #20]
 8008174:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008176:	bf1e      	ittt	ne
 8008178:	7ea3      	ldrbne	r3, [r4, #26]
 800817a:	f023 0303 	bicne.w	r3, r3, #3
 800817e:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008180:	68eb      	ldr	r3, [r5, #12]
 8008182:	6858      	ldr	r0, [r3, #4]
 8008184:	f7fc fa4b 	bl	800461e <lwip_htonl>
 8008188:	68e9      	ldr	r1, [r5, #12]
 800818a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800818e:	4683      	mov	fp, r0
 8008190:	8988      	ldrh	r0, [r1, #12]
 8008192:	f7fc fa41 	bl	8004618 <lwip_htons>
 8008196:	f010 0003 	ands.w	r0, r0, #3
 800819a:	eb0b 030a 	add.w	r3, fp, sl
 800819e:	bf18      	it	ne
 80081a0:	2001      	movne	r0, #1
 80081a2:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80081a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80081a6:	68ea      	ldr	r2, [r5, #12]
 80081a8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80081ac:	1a1b      	subs	r3, r3, r0
 80081ae:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 80081b0:	bfb8      	it	lt
 80081b2:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80081b4:	8990      	ldrh	r0, [r2, #12]
 80081b6:	f7fc fa2f 	bl	8004618 <lwip_htons>
 80081ba:	f010 0003 	ands.w	r0, r0, #3
 80081be:	bf18      	it	ne
 80081c0:	2001      	movne	r0, #1
 80081c2:	eb10 0f0a 	cmn.w	r0, sl
 80081c6:	f000 80d9 	beq.w	800837c <tcp_output+0x2e0>
      seg->next = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 80081ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081d0:	b913      	cbnz	r3, 80081d8 <tcp_output+0x13c>
        pcb->unacked = seg;
 80081d2:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 80081d4:	462f      	mov	r7, r5
 80081d6:	e016      	b.n	8008206 <tcp_output+0x16a>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80081d8:	68eb      	ldr	r3, [r5, #12]
 80081da:	6858      	ldr	r0, [r3, #4]
 80081dc:	f7fc fa1f 	bl	800461e <lwip_htonl>
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4682      	mov	sl, r0
 80081e4:	6850      	ldr	r0, [r2, #4]
 80081e6:	f7fc fa1a 	bl	800461e <lwip_htonl>
 80081ea:	ebaa 0000 	sub.w	r0, sl, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f280 80c2 	bge.w	8008378 <tcp_output+0x2dc>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80081f4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	f040 80aa 	bne.w	8008354 <tcp_output+0x2b8>
          seg->next = (*cur_seg);
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8008204:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8008206:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8008208:	2d00      	cmp	r5, #0
 800820a:	d0a2      	beq.n	8008152 <tcp_output+0xb6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800820c:	68eb      	ldr	r3, [r5, #12]
 800820e:	6858      	ldr	r0, [r3, #4]
 8008210:	f7fc fa05 	bl	800461e <lwip_htonl>
 8008214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008216:	1ac0      	subs	r0, r0, r3
 8008218:	892b      	ldrh	r3, [r5, #8]
 800821a:	4418      	add	r0, r3
  while (seg != NULL &&
 800821c:	42b0      	cmp	r0, r6
 800821e:	d896      	bhi.n	800814e <tcp_output+0xb2>
    LWIP_ASSERT("RST not expected here!",
 8008220:	68eb      	ldr	r3, [r5, #12]
 8008222:	8998      	ldrh	r0, [r3, #12]
 8008224:	f7fc f9f8 	bl	8004618 <lwip_htons>
 8008228:	0742      	lsls	r2, r0, #29
 800822a:	d506      	bpl.n	800823a <tcp_output+0x19e>
 800822c:	4b43      	ldr	r3, [pc, #268]	; (800833c <tcp_output+0x2a0>)
 800822e:	4947      	ldr	r1, [pc, #284]	; (800834c <tcp_output+0x2b0>)
 8008230:	4844      	ldr	r0, [pc, #272]	; (8008344 <tcp_output+0x2a8>)
 8008232:	f240 4246 	movw	r2, #1094	; 0x446
 8008236:	f004 fb1d 	bl	800c874 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800823a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800823c:	b1b3      	cbz	r3, 800826c <tcp_output+0x1d0>
 800823e:	7ea2      	ldrb	r2, [r4, #26]
 8008240:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008244:	d112      	bne.n	800826c <tcp_output+0x1d0>
 8008246:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008248:	b12b      	cbz	r3, 8008256 <tcp_output+0x1ba>
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	b971      	cbnz	r1, 800826c <tcp_output+0x1d0>
 800824e:	8919      	ldrh	r1, [r3, #8]
 8008250:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008252:	4299      	cmp	r1, r3
 8008254:	d20a      	bcs.n	800826c <tcp_output+0x1d0>
 8008256:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800825a:	b13b      	cbz	r3, 800826c <tcp_output+0x1d0>
 800825c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008260:	2b08      	cmp	r3, #8
 8008262:	d803      	bhi.n	800826c <tcp_output+0x1d0>
 8008264:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8008268:	f43f af71 	beq.w	800814e <tcp_output+0xb2>
    if (pcb->state != SYN_SENT) {
 800826c:	7d23      	ldrb	r3, [r4, #20]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d009      	beq.n	8008286 <tcp_output+0x1ea>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008272:	68eb      	ldr	r3, [r5, #12]
 8008274:	2010      	movs	r0, #16
 8008276:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800827a:	f7fc f9cd 	bl	8004618 <lwip_htons>
 800827e:	68ea      	ldr	r2, [r5, #12]
 8008280:	ea4a 0000 	orr.w	r0, sl, r0
 8008284:	8190      	strh	r0, [r2, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008286:	686b      	ldr	r3, [r5, #4]
 8008288:	89db      	ldrh	r3, [r3, #14]
 800828a:	2b01      	cmp	r3, #1
 800828c:	f47f af6f 	bne.w	800816e <tcp_output+0xd2>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008290:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008292:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008296:	f7fc f9c2 	bl	800461e <lwip_htonl>
 800829a:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800829e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80082a0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80082a4:	f7fc f9b8 	bl	8004618 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80082aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80082ac:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082b0:	4413      	add	r3, r2
 80082b2:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80082b4:	7aab      	ldrb	r3, [r5, #10]
 80082b6:	07db      	lsls	r3, r3, #31
 80082b8:	d50c      	bpl.n	80082d4 <tcp_output+0x238>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80082ba:	4641      	mov	r1, r8
 80082bc:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80082c0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80082c4:	f7fd ff56 	bl	8006174 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80082c8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80082cc:	f7fc f9a7 	bl	800461e <lwip_htonl>
 80082d0:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80082d4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80082d8:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 80082da:	bfbc      	itt	lt
 80082dc:	2300      	movlt	r3, #0
 80082de:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80082e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082e2:	b93b      	cbnz	r3, 80082f4 <tcp_output+0x258>
    pcb->rttest = tcp_ticks;
 80082e4:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <tcp_output+0x2b4>)
 80082e6:	68eb      	ldr	r3, [r5, #12]
 80082e8:	6812      	ldr	r2, [r2, #0]
 80082ea:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80082ec:	6858      	ldr	r0, [r3, #4]
 80082ee:	f7fc f996 	bl	800461e <lwip_htonl>
 80082f2:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80082f4:	6868      	ldr	r0, [r5, #4]
 80082f6:	68ea      	ldr	r2, [r5, #12]
 80082f8:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80082fa:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 80082fc:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8008302:	1ac9      	subs	r1, r1, r3
 8008304:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8008306:	8901      	ldrh	r1, [r0, #8]
 8008308:	1acb      	subs	r3, r1, r3
 800830a:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	7413      	strb	r3, [r2, #16]
 8008310:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008312:	2206      	movs	r2, #6
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	7a62      	ldrb	r2, [r4, #9]
 8008318:	9200      	str	r2, [sp, #0]
 800831a:	7aa3      	ldrb	r3, [r4, #10]
 800831c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008320:	4642      	mov	r2, r8
 8008322:	4621      	mov	r1, r4
 8008324:	f002 fb4e 	bl	800a9c4 <ip4_output_if>
    if (err != ERR_OK) {
 8008328:	2800      	cmp	r0, #0
 800832a:	f43f af20 	beq.w	800816e <tcp_output+0xd2>
      pcb->flags |= TF_NAGLEMEMERR;
 800832e:	7ea3      	ldrb	r3, [r4, #26]
 8008330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008334:	76a3      	strb	r3, [r4, #26]
}
 8008336:	b007      	add	sp, #28
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	0800ea87 	.word	0x0800ea87
 8008340:	0800ea1c 	.word	0x0800ea1c
 8008344:	0800d741 	.word	0x0800d741
 8008348:	200076d8 	.word	0x200076d8
 800834c:	0800ea42 	.word	0x0800ea42
 8008350:	200076c8 	.word	0x200076c8
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008354:	68d2      	ldr	r2, [r2, #12]
 8008356:	9305      	str	r3, [sp, #20]
 8008358:	6850      	ldr	r0, [r2, #4]
 800835a:	f7fc f960 	bl	800461e <lwip_htonl>
 800835e:	68e9      	ldr	r1, [r5, #12]
 8008360:	4682      	mov	sl, r0
 8008362:	6848      	ldr	r0, [r1, #4]
 8008364:	f7fc f95b 	bl	800461e <lwip_htonl>
 8008368:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800836c:	2800      	cmp	r0, #0
 800836e:	9b05      	ldr	r3, [sp, #20]
 8008370:	f6bf af46 	bge.w	8008200 <tcp_output+0x164>
              cur_seg = &((*cur_seg)->next );
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	e73f      	b.n	80081f8 <tcp_output+0x15c>
          useg->next = seg;
 8008378:	603d      	str	r5, [r7, #0]
 800837a:	e72b      	b.n	80081d4 <tcp_output+0x138>
      tcp_seg_free(seg);
 800837c:	4628      	mov	r0, r5
 800837e:	f7fd f995 	bl	80056ac <tcp_seg_free>
 8008382:	e740      	b.n	8008206 <tcp_output+0x16a>
    return ERR_RTE;
 8008384:	f06f 0003 	mvn.w	r0, #3
 8008388:	e7d5      	b.n	8008336 <tcp_output+0x29a>
 800838a:	bf00      	nop

0800838c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	b085      	sub	sp, #20
 8008392:	4681      	mov	r9, r0
 8008394:	460e      	mov	r6, r1
 8008396:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008398:	2114      	movs	r1, #20
 800839a:	2200      	movs	r2, #0
 800839c:	2001      	movs	r0, #1
{
 800839e:	461f      	mov	r7, r3
 80083a0:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 80083a4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80083a8:	f7fc fdd8 	bl	8004f5c <pbuf_alloc>
  if (p == NULL) {
 80083ac:	4605      	mov	r5, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d03c      	beq.n	800842c <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80083b2:	8943      	ldrh	r3, [r0, #10]
 80083b4:	2b13      	cmp	r3, #19
 80083b6:	d806      	bhi.n	80083c6 <tcp_rst+0x3a>
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <tcp_rst+0xa8>)
 80083ba:	491f      	ldr	r1, [pc, #124]	; (8008438 <tcp_rst+0xac>)
 80083bc:	481f      	ldr	r0, [pc, #124]	; (800843c <tcp_rst+0xb0>)
 80083be:	f240 524d 	movw	r2, #1357	; 0x54d
 80083c2:	f004 fa57 	bl	800c874 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 80083c6:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 80083c8:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 80083ca:	f7fc f925 	bl	8004618 <lwip_htons>
 80083ce:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80083d0:	4650      	mov	r0, sl
 80083d2:	f7fc f921 	bl	8004618 <lwip_htons>
 80083d6:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80083d8:	4648      	mov	r0, r9
 80083da:	f7fc f920 	bl	800461e <lwip_htonl>
 80083de:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7fc f91c 	bl	800461e <lwip_htonl>
 80083e6:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80083e8:	f245 0014 	movw	r0, #20500	; 0x5014
 80083ec:	f7fc f914 	bl	8004618 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80083f0:	2308      	movs	r3, #8
 80083f2:	2600      	movs	r6, #0
 80083f4:	73a3      	strb	r3, [r4, #14]
 80083f6:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80083f8:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80083fa:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 80083fc:	7426      	strb	r6, [r4, #16]
 80083fe:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8008400:	74a6      	strb	r6, [r4, #18]
 8008402:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008404:	4638      	mov	r0, r7
 8008406:	f002 f96b 	bl	800a6e0 <ip4_route>
  if (netif != NULL) {
 800840a:	b148      	cbz	r0, 8008420 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800840c:	2306      	movs	r3, #6
 800840e:	9002      	str	r0, [sp, #8]
 8008410:	e9cd 6300 	strd	r6, r3, [sp]
 8008414:	463a      	mov	r2, r7
 8008416:	23ff      	movs	r3, #255	; 0xff
 8008418:	4641      	mov	r1, r8
 800841a:	4628      	mov	r0, r5
 800841c:	f002 fad2 	bl	800a9c4 <ip4_output_if>
  }
  pbuf_free(p);
 8008420:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008422:	b005      	add	sp, #20
 8008424:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8008428:	f7fc bd30 	b.w	8004e8c <pbuf_free>
}
 800842c:	b005      	add	sp, #20
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008432:	bf00      	nop
 8008434:	0800ea87 	.word	0x0800ea87
 8008438:	0800ea59 	.word	0x0800ea59
 800843c:	0800d741 	.word	0x0800d741

08008440 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008440:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8008442:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8008444:	b1aa      	cbz	r2, 8008472 <tcp_rexmit_rto+0x32>
 8008446:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008448:	680b      	ldr	r3, [r1, #0]
 800844a:	b983      	cbnz	r3, 800846e <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800844c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800844e:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008450:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008454:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008458:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800845a:	bf1c      	itt	ne
 800845c:	3301      	addne	r3, #1
 800845e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8008466:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800846a:	f7ff be17 	b.w	800809c <tcp_output>
 800846e:	4619      	mov	r1, r3
 8008470:	e7ea      	b.n	8008448 <tcp_rexmit_rto+0x8>
}
 8008472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008476:	4770      	bx	lr

08008478 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800847a:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800847c:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800847e:	b1ad      	cbz	r5, 80084ac <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008484:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	b983      	cbnz	r3, 80084ae <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800848c:	6833      	ldr	r3, [r6, #0]
 800848e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8008490:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008492:	682b      	ldr	r3, [r5, #0]
 8008494:	b90b      	cbnz	r3, 800849a <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008496:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800849a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800849e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80084a0:	bf1c      	itt	ne
 80084a2:	3301      	addne	r3, #1
 80084a4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	6363      	str	r3, [r4, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80084ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	6858      	ldr	r0, [r3, #4]
 80084b2:	f7fc f8b4 	bl	800461e <lwip_htonl>
 80084b6:	68eb      	ldr	r3, [r5, #12]
 80084b8:	4607      	mov	r7, r0
 80084ba:	6858      	ldr	r0, [r3, #4]
 80084bc:	f7fc f8af 	bl	800461e <lwip_htonl>
 80084c0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 80084c2:	2800      	cmp	r0, #0
 80084c4:	dae2      	bge.n	800848c <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 80084c6:	6836      	ldr	r6, [r6, #0]
 80084c8:	e7de      	b.n	8008488 <tcp_rexmit+0x10>

080084ca <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80084ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80084d0:	b30b      	cbz	r3, 8008516 <tcp_rexmit_fast+0x4c>
 80084d2:	7e83      	ldrb	r3, [r0, #26]
 80084d4:	075b      	lsls	r3, r3, #29
 80084d6:	d41e      	bmi.n	8008516 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80084d8:	f7ff ffce 	bl	8008478 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80084dc:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80084e0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80084e4:	4293      	cmp	r3, r2
 80084e6:	bf38      	it	cc
 80084e8:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80084ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80084ec:	bf28      	it	cs
 80084ee:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80084f0:	0059      	lsls	r1, r3, #1
 80084f2:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80084f4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80084f8:	bf38      	it	cc
 80084fa:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80084fe:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008502:	440b      	add	r3, r1
 8008504:	4413      	add	r3, r2
 8008506:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800850a:	7ea3      	ldrb	r3, [r4, #26]
 800850c:	f043 0304 	orr.w	r3, r3, #4
 8008510:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	8623      	strh	r3, [r4, #48]	; 0x30
  }
}
 8008516:	bd10      	pop	{r4, pc}

08008518 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800851a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800851c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800851e:	3801      	subs	r0, #1
 8008520:	f7fc f87d 	bl	800461e <lwip_htonl>
 8008524:	2100      	movs	r1, #0
 8008526:	4602      	mov	r2, r0
 8008528:	4620      	mov	r0, r4
 800852a:	f7ff fa03 	bl	8007934 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800852e:	4605      	mov	r5, r0
 8008530:	b1c8      	cbz	r0, 8008566 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008532:	1d26      	adds	r6, r4, #4
 8008534:	4630      	mov	r0, r6
 8008536:	f002 f8d3 	bl	800a6e0 <ip4_route>
  if (netif == NULL) {
 800853a:	b188      	cbz	r0, 8008560 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800853c:	2200      	movs	r2, #0
 800853e:	2106      	movs	r1, #6
 8008540:	7aa3      	ldrb	r3, [r4, #10]
 8008542:	9002      	str	r0, [sp, #8]
 8008544:	e9cd 2100 	strd	r2, r1, [sp]
 8008548:	4628      	mov	r0, r5
 800854a:	4621      	mov	r1, r4
 800854c:	4632      	mov	r2, r6
 800854e:	f002 fa39 	bl	800a9c4 <ip4_output_if>
 8008552:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008554:	4628      	mov	r0, r5
 8008556:	f7fc fc99 	bl	8004e8c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800855a:	4620      	mov	r0, r4
 800855c:	b004      	add	sp, #16
 800855e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8008560:	f06f 0403 	mvn.w	r4, #3
 8008564:	e7f6      	b.n	8008554 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8008566:	f04f 34ff 	mov.w	r4, #4294967295
 800856a:	e7f6      	b.n	800855a <tcp_keepalive+0x42>

0800856c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800856c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008570:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8008572:	4606      	mov	r6, r0

  if (seg == NULL) {
 8008574:	b914      	cbnz	r4, 800857c <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8008576:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8008578:	2c00      	cmp	r4, #0
 800857a:	d042      	beq.n	8008602 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800857c:	68e3      	ldr	r3, [r4, #12]
 800857e:	8998      	ldrh	r0, [r3, #12]
 8008580:	f7fc f84a 	bl	8004618 <lwip_htons>
 8008584:	f010 0501 	ands.w	r5, r0, #1
 8008588:	bf18      	it	ne
 800858a:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800858c:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800858e:	bf1c      	itt	ne
 8008590:	fab5 f585 	clzne	r5, r5
 8008594:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	f085 0101 	eor.w	r1, r5, #1
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff f9c9 	bl	8007934 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80085a2:	4607      	mov	r7, r0
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d03e      	beq.n	8008626 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80085a8:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80085ac:	b36d      	cbz	r5, 800860a <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80085ae:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 80085b2:	2011      	movs	r0, #17
 80085b4:	f7fc f830 	bl	8004618 <lwip_htons>
 80085b8:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80085bc:	b2ad      	uxth	r5, r5
 80085be:	4328      	orrs	r0, r5
 80085c0:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80085c4:	68e3      	ldr	r3, [r4, #12]
 80085c6:	6858      	ldr	r0, [r3, #4]
 80085c8:	f7fc f829 	bl	800461e <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80085cc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80085ce:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80085d0:	1a1b      	subs	r3, r3, r0
 80085d2:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80085d4:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 80085d8:	bfb8      	it	lt
 80085da:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80085dc:	4620      	mov	r0, r4
 80085de:	f002 f87f 	bl	800a6e0 <ip4_route>
  if (netif == NULL) {
 80085e2:	b1e8      	cbz	r0, 8008620 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80085e4:	2200      	movs	r2, #0
 80085e6:	2106      	movs	r1, #6
 80085e8:	e9cd 2100 	strd	r2, r1, [sp]
 80085ec:	9002      	str	r0, [sp, #8]
 80085ee:	4622      	mov	r2, r4
 80085f0:	7ab3      	ldrb	r3, [r6, #10]
 80085f2:	4631      	mov	r1, r6
 80085f4:	4638      	mov	r0, r7
 80085f6:	f002 f9e5 	bl	800a9c4 <ip4_output_if>
 80085fa:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7fc fc45 	bl	8004e8c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008602:	4620      	mov	r0, r4
 8008604:	b004      	add	sp, #16
 8008606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800860a:	6860      	ldr	r0, [r4, #4]
 800860c:	8922      	ldrh	r2, [r4, #8]
 800860e:	8903      	ldrh	r3, [r0, #8]
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	b29b      	uxth	r3, r3
 8008614:	2201      	movs	r2, #1
 8008616:	f108 0114 	add.w	r1, r8, #20
 800861a:	f7fc fed9 	bl	80053d0 <pbuf_copy_partial>
 800861e:	e7d1      	b.n	80085c4 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8008620:	f06f 0403 	mvn.w	r4, #3
 8008624:	e7ea      	b.n	80085fc <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 8008626:	f04f 34ff 	mov.w	r4, #4294967295
 800862a:	e7ea      	b.n	8008602 <tcp_zero_window_probe+0x96>

0800862c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008632:	200a      	movs	r0, #10
{
 8008634:	460f      	mov	r7, r1
 8008636:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008638:	f7fc fa7a 	bl	8004b30 <memp_malloc>
  if (timeout == NULL) {
 800863c:	4604      	mov	r4, r0
 800863e:	b938      	cbnz	r0, 8008650 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008640:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <sys_timeout+0x8c>)
 8008642:	491e      	ldr	r1, [pc, #120]	; (80086bc <sys_timeout+0x90>)
 8008644:	481e      	ldr	r0, [pc, #120]	; (80086c0 <sys_timeout+0x94>)
 8008646:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8008648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800864c:	f004 b912 	b.w	800c874 <iprintf>
  now = sys_now();
 8008650:	f003 f880 	bl	800b754 <sys_now>
  if (next_timeout == NULL) {
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <sys_timeout+0x98>)
 8008656:	491c      	ldr	r1, [pc, #112]	; (80086c8 <sys_timeout+0x9c>)
 8008658:	6813      	ldr	r3, [r2, #0]
 800865a:	b95b      	cbnz	r3, 8008674 <sys_timeout+0x48>
    timeouts_last_time = now;
 800865c:	6008      	str	r0, [r1, #0]
    diff = 0;
 800865e:	4618      	mov	r0, r3
  timeout->next = NULL;
 8008660:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8008662:	4428      	add	r0, r5
  timeout->next = NULL;
 8008664:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8008666:	e9c4 7602 	strd	r7, r6, [r4, #8]
  timeout->time = msecs + diff;
 800866a:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800866c:	b92b      	cbnz	r3, 800867a <sys_timeout+0x4e>
    next_timeout = timeout;
 800866e:	6014      	str	r4, [r2, #0]
}
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8008674:	6809      	ldr	r1, [r1, #0]
 8008676:	1a40      	subs	r0, r0, r1
 8008678:	e7f2      	b.n	8008660 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800867a:	6859      	ldr	r1, [r3, #4]
 800867c:	42a9      	cmp	r1, r5
 800867e:	d903      	bls.n	8008688 <sys_timeout+0x5c>
    next_timeout->time -= msecs;
 8008680:	1b4d      	subs	r5, r1, r5
 8008682:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	e7f2      	b.n	800866e <sys_timeout+0x42>
 8008688:	4618      	mov	r0, r3
      timeout->time -= t->time;
 800868a:	6841      	ldr	r1, [r0, #4]
 800868c:	6862      	ldr	r2, [r4, #4]
 800868e:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8008690:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8008692:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8008694:	b139      	cbz	r1, 80086a6 <sys_timeout+0x7a>
 8008696:	684e      	ldr	r6, [r1, #4]
 8008698:	42b2      	cmp	r2, r6
 800869a:	d301      	bcc.n	80086a0 <sys_timeout+0x74>
 800869c:	4608      	mov	r0, r1
 800869e:	e7f4      	b.n	800868a <sys_timeout+0x5e>
          t->next->time -= timeout->time;
 80086a0:	1ab2      	subs	r2, r6, r2
 80086a2:	604a      	str	r2, [r1, #4]
 80086a4:	e004      	b.n	80086b0 <sys_timeout+0x84>
        } else if (timeout->time > msecs) {
 80086a6:	42aa      	cmp	r2, r5
 80086a8:	d902      	bls.n	80086b0 <sys_timeout+0x84>
          timeout->time = msecs + next_timeout->time;
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	441d      	add	r5, r3
 80086ae:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 80086b0:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 80086b2:	6004      	str	r4, [r0, #0]
        break;
 80086b4:	e7dc      	b.n	8008670 <sys_timeout+0x44>
 80086b6:	bf00      	nop
 80086b8:	0800ed28 	.word	0x0800ed28
 80086bc:	0800ed5c 	.word	0x0800ed5c
 80086c0:	0800d741 	.word	0x0800d741
 80086c4:	20003e70 	.word	0x20003e70
 80086c8:	20003e78 	.word	0x20003e78

080086cc <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80086cc:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <tcp_timer_needed+0x24>)
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	b962      	cbnz	r2, 80086ec <tcp_timer_needed+0x20>
 80086d2:	4a08      	ldr	r2, [pc, #32]	; (80086f4 <tcp_timer_needed+0x28>)
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	b912      	cbnz	r2, 80086de <tcp_timer_needed+0x12>
 80086d8:	4a07      	ldr	r2, [pc, #28]	; (80086f8 <tcp_timer_needed+0x2c>)
 80086da:	6812      	ldr	r2, [r2, #0]
 80086dc:	b132      	cbz	r2, 80086ec <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80086e2:	4906      	ldr	r1, [pc, #24]	; (80086fc <tcp_timer_needed+0x30>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	20fa      	movs	r0, #250	; 0xfa
 80086e8:	f7ff bfa0 	b.w	800862c <sys_timeout>
}
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20003e74 	.word	0x20003e74
 80086f4:	200076c4 	.word	0x200076c4
 80086f8:	200076d4 	.word	0x200076d4
 80086fc:	08008701 	.word	0x08008701

08008700 <tcpip_tcp_timer>:
{
 8008700:	b508      	push	{r3, lr}
  tcp_tmr();
 8008702:	f7fd fbe7 	bl	8005ed4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008706:	4b08      	ldr	r3, [pc, #32]	; (8008728 <tcpip_tcp_timer+0x28>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	b913      	cbnz	r3, 8008712 <tcpip_tcp_timer+0x12>
 800870c:	4b07      	ldr	r3, [pc, #28]	; (800872c <tcpip_tcp_timer+0x2c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	b133      	cbz	r3, 8008720 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008712:	2200      	movs	r2, #0
 8008714:	4906      	ldr	r1, [pc, #24]	; (8008730 <tcpip_tcp_timer+0x30>)
 8008716:	20fa      	movs	r0, #250	; 0xfa
}
 8008718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800871c:	f7ff bf86 	b.w	800862c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8008720:	4a04      	ldr	r2, [pc, #16]	; (8008734 <tcpip_tcp_timer+0x34>)
 8008722:	6013      	str	r3, [r2, #0]
}
 8008724:	bd08      	pop	{r3, pc}
 8008726:	bf00      	nop
 8008728:	200076c4 	.word	0x200076c4
 800872c:	200076d4 	.word	0x200076d4
 8008730:	08008701 	.word	0x08008701
 8008734:	20003e74 	.word	0x20003e74

08008738 <sys_timeouts_init>:
{
 8008738:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800873a:	4d11      	ldr	r5, [pc, #68]	; (8008780 <sys_timeouts_init+0x48>)
 800873c:	4c11      	ldr	r4, [pc, #68]	; (8008784 <sys_timeouts_init+0x4c>)
 800873e:	f105 0208 	add.w	r2, r5, #8
 8008742:	4621      	mov	r1, r4
 8008744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008748:	f7ff ff70 	bl	800862c <sys_timeout>
 800874c:	f105 0210 	add.w	r2, r5, #16
 8008750:	4621      	mov	r1, r4
 8008752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008756:	f7ff ff69 	bl	800862c <sys_timeout>
 800875a:	f105 0218 	add.w	r2, r5, #24
 800875e:	4621      	mov	r1, r4
 8008760:	f64e 2060 	movw	r0, #60000	; 0xea60
 8008764:	f7ff ff62 	bl	800862c <sys_timeout>
 8008768:	f105 0220 	add.w	r2, r5, #32
 800876c:	4621      	mov	r1, r4
 800876e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008772:	f7ff ff5b 	bl	800862c <sys_timeout>
  timeouts_last_time = sys_now();
 8008776:	f002 ffed 	bl	800b754 <sys_now>
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <sys_timeouts_init+0x50>)
 800877c:	6018      	str	r0, [r3, #0]
}
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	0800ed00 	.word	0x0800ed00
 8008784:	0800878d 	.word	0x0800878d
 8008788:	20003e78 	.word	0x20003e78

0800878c <cyclic_timer>:
{
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
  cyclic->handler();
 8008790:	6843      	ldr	r3, [r0, #4]
 8008792:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8008794:	4622      	mov	r2, r4
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	4902      	ldr	r1, [pc, #8]	; (80087a4 <cyclic_timer+0x18>)
}
 800879a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800879e:	f7ff bf45 	b.w	800862c <sys_timeout>
 80087a2:	bf00      	nop
 80087a4:	0800878d 	.word	0x0800878d

080087a8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80087a8:	b470      	push	{r4, r5, r6}
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 80087aa:	4c10      	ldr	r4, [pc, #64]	; (80087ec <sys_untimeout+0x44>)
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	b1db      	cbz	r3, 80087e8 <sys_untimeout+0x40>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80087b0:	2500      	movs	r5, #0
    if ((t->h == handler) && (t->arg == arg)) {
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	4282      	cmp	r2, r0
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	d113      	bne.n	80087e2 <sys_untimeout+0x3a>
 80087ba:	68de      	ldr	r6, [r3, #12]
 80087bc:	428e      	cmp	r6, r1
 80087be:	d110      	bne.n	80087e2 <sys_untimeout+0x3a>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80087c0:	b96d      	cbnz	r5, 80087de <sys_untimeout+0x36>
        next_timeout = t->next;
 80087c2:	6022      	str	r2, [r4, #0]
      } else {
        prev_t->next = t->next;
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	b11a      	cbz	r2, 80087d0 <sys_untimeout+0x28>
        t->next->time += t->time;
 80087c8:	6851      	ldr	r1, [r2, #4]
 80087ca:	6858      	ldr	r0, [r3, #4]
 80087cc:	4401      	add	r1, r0
 80087ce:	6051      	str	r1, [r2, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80087d0:	4619      	mov	r1, r3
 80087d2:	200a      	movs	r0, #10
      return;
    }
  }
  return;
}
 80087d4:	bc70      	pop	{r4, r5, r6}
      memp_free(MEMP_SYS_TIMEOUT, t);
 80087d6:	f7fc b9c7 	b.w	8004b68 <memp_free>
 80087da:	4613      	mov	r3, r2
 80087dc:	e7e9      	b.n	80087b2 <sys_untimeout+0xa>
        prev_t->next = t->next;
 80087de:	602a      	str	r2, [r5, #0]
 80087e0:	e7f0      	b.n	80087c4 <sys_untimeout+0x1c>
 80087e2:	461d      	mov	r5, r3
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	d1f8      	bne.n	80087da <sys_untimeout+0x32>
}
 80087e8:	bc70      	pop	{r4, r5, r6}
 80087ea:	4770      	bx	lr
 80087ec:	20003e70 	.word	0x20003e70

080087f0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80087f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80087f4:	4d24      	ldr	r5, [pc, #144]	; (8008888 <sys_timeouts_mbox_fetch+0x98>)
  diff = sys_now() - timeouts_last_time;
 80087f6:	4c25      	ldr	r4, [pc, #148]	; (800888c <sys_timeouts_mbox_fetch+0x9c>)
{
 80087f8:	4681      	mov	r9, r0
 80087fa:	468a      	mov	sl, r1
 80087fc:	462e      	mov	r6, r5
  if (!next_timeout) {
 80087fe:	682a      	ldr	r2, [r5, #0]
 8008800:	b932      	cbnz	r2, 8008810 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008802:	4651      	mov	r1, sl
 8008804:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 8008806:	b003      	add	sp, #12
 8008808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800880c:	f002 bd4a 	b.w	800b2a4 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 8008810:	f002 ffa0 	bl	800b754 <sys_now>
 8008814:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 8008816:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 8008818:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4290      	cmp	r0, r2
 800881e:	d927      	bls.n	8008870 <sys_timeouts_mbox_fetch+0x80>
  if (next_timeout) {
 8008820:	6833      	ldr	r3, [r6, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0eb      	beq.n	80087fe <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 8008826:	f002 ff95 	bl	800b754 <sys_now>
    diff = now - timeouts_last_time;
 800882a:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 800882c:	4f18      	ldr	r7, [pc, #96]	; (8008890 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 800882e:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 8008832:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8008834:	2900      	cmp	r1, #0
 8008836:	d0e2      	beq.n	80087fe <sys_timeouts_mbox_fetch+0xe>
 8008838:	684a      	ldr	r2, [r1, #4]
 800883a:	455a      	cmp	r2, fp
 800883c:	d8df      	bhi.n	80087fe <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 800883e:	6820      	ldr	r0, [r4, #0]
        arg = tmptimeout->arg;
 8008840:	e9d1 8302 	ldrd	r8, r3, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 8008844:	4410      	add	r0, r2
 8008846:	6020      	str	r0, [r4, #0]
        diff -= tmptimeout->time;
 8008848:	ebab 0b02 	sub.w	fp, fp, r2
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800884c:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800884e:	680a      	ldr	r2, [r1, #0]
 8008850:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 8008852:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008854:	f7fc f988 	bl	8004b68 <memp_free>
        if (handler != NULL) {
 8008858:	f1b8 0f00 	cmp.w	r8, #0
 800885c:	d0e9      	beq.n	8008832 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 800885e:	4638      	mov	r0, r7
 8008860:	f002 fd63 	bl	800b32a <sys_mutex_lock>
          handler(arg);
 8008864:	9801      	ldr	r0, [sp, #4]
 8008866:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 8008868:	4638      	mov	r0, r7
 800886a:	f002 fd63 	bl	800b334 <sys_mutex_unlock>
 800886e:	e7e0      	b.n	8008832 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8008870:	1a12      	subs	r2, r2, r0
 8008872:	d0d5      	beq.n	8008820 <sys_timeouts_mbox_fetch+0x30>
 8008874:	4651      	mov	r1, sl
 8008876:	4648      	mov	r0, r9
 8008878:	f002 fd14 	bl	800b2a4 <sys_arch_mbox_fetch>
 800887c:	3001      	adds	r0, #1
 800887e:	d0cf      	beq.n	8008820 <sys_timeouts_mbox_fetch+0x30>
}
 8008880:	b003      	add	sp, #12
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	bf00      	nop
 8008888:	20003e70 	.word	0x20003e70
 800888c:	20003e78 	.word	0x20003e78
 8008890:	20003f9c 	.word	0x20003f9c

08008894 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008894:	4770      	bx	lr
	...

08008898 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800889c:	8943      	ldrh	r3, [r0, #10]
 800889e:	2b07      	cmp	r3, #7
{
 80088a0:	b085      	sub	sp, #20
 80088a2:	4605      	mov	r5, r0
 80088a4:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 80088a6:	d805      	bhi.n	80088b4 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80088a8:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80088aa:	b005      	add	sp, #20
 80088ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80088b0:	f7fc baec 	b.w	8004e8c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80088b4:	4e3d      	ldr	r6, [pc, #244]	; (80089ac <udp_input+0x114>)
  udphdr = (struct udp_hdr *)p->payload;
 80088b6:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80088b8:	6831      	ldr	r1, [r6, #0]
 80088ba:	6970      	ldr	r0, [r6, #20]
 80088bc:	f002 f893 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 80088c0:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 80088c2:	8820      	ldrh	r0, [r4, #0]
 80088c4:	f7fb fea8 	bl	8004618 <lwip_htons>
 80088c8:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 80088ca:	8860      	ldrh	r0, [r4, #2]
 80088cc:	f7fb fea4 	bl	8004618 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80088d0:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <udp_input+0x118>)
 80088d2:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 80088d4:	4682      	mov	sl, r0
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80088d6:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80088da:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 80088dc:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80088de:	4603      	mov	r3, r0
  prev = NULL;
 80088e0:	46a6      	mov	lr, r4
 80088e2:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80088e4:	b99b      	cbnz	r3, 800890e <udp_input+0x76>
  if (pcb != NULL) {
 80088e6:	b91c      	cbnz	r4, 80088f0 <udp_input+0x58>
  if (for_us) {
 80088e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80088ec:	428b      	cmp	r3, r1
 80088ee:	d1db      	bne.n	80088a8 <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 80088f0:	f06f 0107 	mvn.w	r1, #7
 80088f4:	4628      	mov	r0, r5
 80088f6:	f7fc fac3 	bl	8004e80 <pbuf_header>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d034      	beq.n	8008968 <udp_input+0xd0>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80088fe:	4b2d      	ldr	r3, [pc, #180]	; (80089b4 <udp_input+0x11c>)
 8008900:	492d      	ldr	r1, [pc, #180]	; (80089b8 <udp_input+0x120>)
 8008902:	482e      	ldr	r0, [pc, #184]	; (80089bc <udp_input+0x124>)
 8008904:	f240 1255 	movw	r2, #341	; 0x155
 8008908:	f003 ffb4 	bl	800c874 <iprintf>
 800890c:	e7cc      	b.n	80088a8 <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 800890e:	8a5a      	ldrh	r2, [r3, #18]
 8008910:	4552      	cmp	r2, sl
 8008912:	d126      	bne.n	8008962 <udp_input+0xca>
 8008914:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8008916:	b307      	cbz	r7, 800895a <udp_input+0xc2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008918:	b13a      	cbz	r2, 800892a <udp_input+0x92>
 800891a:	1c4e      	adds	r6, r1, #1
 800891c:	d005      	beq.n	800892a <udp_input+0x92>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800891e:	404a      	eors	r2, r1
 8008920:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008922:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8008926:	4216      	tst	r6, r2
 8008928:	d11b      	bne.n	8008962 <udp_input+0xca>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800892a:	7c1a      	ldrb	r2, [r3, #16]
 800892c:	0752      	lsls	r2, r2, #29
 800892e:	d402      	bmi.n	8008936 <udp_input+0x9e>
 8008930:	2c00      	cmp	r4, #0
 8008932:	bf08      	it	eq
 8008934:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8008936:	8a9a      	ldrh	r2, [r3, #20]
 8008938:	4542      	cmp	r2, r8
 800893a:	d112      	bne.n	8008962 <udp_input+0xca>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800893c:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800893e:	b10a      	cbz	r2, 8008944 <udp_input+0xac>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008940:	4562      	cmp	r2, ip
 8008942:	d10e      	bne.n	8008962 <udp_input+0xca>
        if (prev != NULL) {
 8008944:	f1be 0f00 	cmp.w	lr, #0
 8008948:	d005      	beq.n	8008956 <udp_input+0xbe>
          prev->next = pcb->next;
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	f8ce 200c 	str.w	r2, [lr, #12]
          udp_pcbs = pcb;
 8008950:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8008954:	60d8      	str	r0, [r3, #12]
 8008956:	461c      	mov	r4, r3
 8008958:	e7ca      	b.n	80088f0 <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800895a:	2a00      	cmp	r2, #0
 800895c:	d0e5      	beq.n	800892a <udp_input+0x92>
 800895e:	428a      	cmp	r2, r1
 8008960:	d0e3      	beq.n	800892a <udp_input+0x92>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008962:	469e      	mov	lr, r3
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	e7bd      	b.n	80088e4 <udp_input+0x4c>
    if (pcb != NULL) {
 8008968:	b164      	cbz	r4, 8008984 <udp_input+0xec>
      if (pcb->recv != NULL) {
 800896a:	69a6      	ldr	r6, [r4, #24]
 800896c:	2e00      	cmp	r6, #0
 800896e:	d09b      	beq.n	80088a8 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008970:	f8cd 8000 	str.w	r8, [sp]
 8008974:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <udp_input+0x128>)
 8008976:	69e0      	ldr	r0, [r4, #28]
 8008978:	462a      	mov	r2, r5
 800897a:	4621      	mov	r1, r4
 800897c:	47b0      	blx	r6
}
 800897e:	b005      	add	sp, #20
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008984:	2f00      	cmp	r7, #0
 8008986:	d18f      	bne.n	80088a8 <udp_input+0x10>
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008990:	2be0      	cmp	r3, #224	; 0xe0
 8008992:	d089      	beq.n	80088a8 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	8999      	ldrh	r1, [r3, #12]
 8008998:	3108      	adds	r1, #8
 800899a:	b209      	sxth	r1, r1
 800899c:	4628      	mov	r0, r5
 800899e:	f7fc fa72 	bl	8004e86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80089a2:	2103      	movs	r1, #3
 80089a4:	4628      	mov	r0, r5
 80089a6:	f001 fe91 	bl	800a6cc <icmp_dest_unreach>
 80089aa:	e77d      	b.n	80088a8 <udp_input+0x10>
 80089ac:	20003fa0 	.word	0x20003fa0
 80089b0:	200076dc 	.word	0x200076dc
 80089b4:	0800ed99 	.word	0x0800ed99
 80089b8:	0800edc8 	.word	0x0800edc8
 80089bc:	0800d741 	.word	0x0800d741
 80089c0:	20003fb0 	.word	0x20003fb0

080089c4 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 80089c4:	4b26      	ldr	r3, [pc, #152]	; (8008a60 <udp_bind+0x9c>)
{
 80089c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 80089ca:	2900      	cmp	r1, #0
 80089cc:	bf08      	it	eq
 80089ce:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d042      	beq.n	8008a5a <udp_bind+0x96>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80089d4:	4e23      	ldr	r6, [pc, #140]	; (8008a64 <udp_bind+0xa0>)
 80089d6:	f8d6 c000 	ldr.w	ip, [r6]
 80089da:	4665      	mov	r5, ip
 80089dc:	b9cd      	cbnz	r5, 8008a12 <udp_bind+0x4e>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 80089de:	2a00      	cmp	r2, #0
 80089e0:	d139      	bne.n	8008a56 <udp_bind+0x92>
 80089e2:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <udp_bind+0xa4>)
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80089ea:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80089ee:	4572      	cmp	r2, lr
 80089f0:	bf1a      	itte	ne
 80089f2:	3201      	addne	r2, #1
 80089f4:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80089f6:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80089fa:	4667      	mov	r7, ip
 80089fc:	b97f      	cbnz	r7, 8008a1e <udp_bind+0x5a>
 80089fe:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008a00:	680b      	ldr	r3, [r1, #0]
 8008a02:	6003      	str	r3, [r0, #0]

  pcb->local_port = port;
 8008a04:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008a06:	b915      	cbnz	r5, 8008a0e <udp_bind+0x4a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008a08:	f8c0 c00c 	str.w	ip, [r0, #12]
    udp_pcbs = pcb;
 8008a0c:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e010      	b.n	8008a34 <udp_bind+0x70>
    if (pcb == ipcb) {
 8008a12:	4285      	cmp	r5, r0
 8008a14:	d001      	beq.n	8008a1a <udp_bind+0x56>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008a16:	68ed      	ldr	r5, [r5, #12]
 8008a18:	e7e0      	b.n	80089dc <udp_bind+0x18>
      rebind = 1;
 8008a1a:	2501      	movs	r5, #1
 8008a1c:	e7df      	b.n	80089de <udp_bind+0x1a>
    if (pcb->local_port == udp_port) {
 8008a1e:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8008a22:	4590      	cmp	r8, r2
 8008a24:	d108      	bne.n	8008a38 <udp_bind+0x74>
 8008a26:	3c01      	subs	r4, #1
 8008a28:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8008a2a:	2c00      	cmp	r4, #0
 8008a2c:	d1df      	bne.n	80089ee <udp_bind+0x2a>
 8008a2e:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8008a30:	f06f 0007 	mvn.w	r0, #7
}
 8008a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a38:	68ff      	ldr	r7, [r7, #12]
 8008a3a:	e7df      	b.n	80089fc <udp_bind+0x38>
      if (pcb != ipcb) {
 8008a3c:	4283      	cmp	r3, r0
 8008a3e:	d006      	beq.n	8008a4e <udp_bind+0x8a>
          if ((ipcb->local_port == port) &&
 8008a40:	8a5c      	ldrh	r4, [r3, #18]
 8008a42:	4294      	cmp	r4, r2
 8008a44:	d103      	bne.n	8008a4e <udp_bind+0x8a>
 8008a46:	681f      	ldr	r7, [r3, #0]
 8008a48:	680c      	ldr	r4, [r1, #0]
 8008a4a:	42a7      	cmp	r7, r4
 8008a4c:	d0f0      	beq.n	8008a30 <udp_bind+0x6c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f3      	bne.n	8008a3c <udp_bind+0x78>
 8008a54:	e7d4      	b.n	8008a00 <udp_bind+0x3c>
 8008a56:	4663      	mov	r3, ip
 8008a58:	e7fa      	b.n	8008a50 <udp_bind+0x8c>
    return ERR_VAL;
 8008a5a:	f06f 0005 	mvn.w	r0, #5
 8008a5e:	e7e9      	b.n	8008a34 <udp_bind+0x70>
 8008a60:	0800f54c 	.word	0x0800f54c
 8008a64:	200076dc 	.word	0x200076dc
 8008a68:	2000000e 	.word	0x2000000e

08008a6c <udp_sendto_if_src>:
{
 8008a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a70:	460e      	mov	r6, r1
 8008a72:	b085      	sub	sp, #20
 8008a74:	4690      	mov	r8, r2
 8008a76:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8008a78:	4607      	mov	r7, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d050      	beq.n	8008b20 <udp_sendto_if_src+0xb4>
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	d04e      	beq.n	8008b20 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 8008a82:	8a42      	ldrh	r2, [r0, #18]
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d033      	beq.n	8008af0 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 8008a88:	2108      	movs	r1, #8
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7fc f9f8 	bl	8004e80 <pbuf_header>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d137      	bne.n	8008b04 <udp_sendto_if_src+0x98>
 8008a94:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008a96:	8963      	ldrh	r3, [r4, #10]
 8008a98:	2b07      	cmp	r3, #7
 8008a9a:	d806      	bhi.n	8008aaa <udp_sendto_if_src+0x3e>
 8008a9c:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <udp_sendto_if_src+0xc0>)
 8008a9e:	4924      	ldr	r1, [pc, #144]	; (8008b30 <udp_sendto_if_src+0xc4>)
 8008aa0:	4824      	ldr	r0, [pc, #144]	; (8008b34 <udp_sendto_if_src+0xc8>)
 8008aa2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008aa6:	f003 fee5 	bl	800c874 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 8008aaa:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 8008aac:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8008aae:	f7fb fdb3 	bl	8004618 <lwip_htons>
 8008ab2:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f7fb fdaf 	bl	8004618 <lwip_htons>
  udphdr->chksum = 0x0000;
 8008aba:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8008abc:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 8008abe:	71ab      	strb	r3, [r5, #6]
 8008ac0:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8008ac2:	8920      	ldrh	r0, [r4, #8]
 8008ac4:	f7fb fda8 	bl	8004618 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8008aca:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008acc:	7abb      	ldrb	r3, [r7, #10]
 8008ace:	9202      	str	r2, [sp, #8]
 8008ad0:	2211      	movs	r2, #17
 8008ad2:	9201      	str	r2, [sp, #4]
 8008ad4:	7a7a      	ldrb	r2, [r7, #9]
 8008ad6:	9200      	str	r2, [sp, #0]
 8008ad8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ada:	4642      	mov	r2, r8
 8008adc:	4620      	mov	r0, r4
 8008ade:	f001 fef9 	bl	800a8d4 <ip4_output_if_src>
  if (q != p) {
 8008ae2:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008ae4:	4605      	mov	r5, r0
  if (q != p) {
 8008ae6:	d009      	beq.n	8008afc <udp_sendto_if_src+0x90>
    pbuf_free(q);
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7fc f9cf 	bl	8004e8c <pbuf_free>
 8008aee:	e005      	b.n	8008afc <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008af0:	4601      	mov	r1, r0
 8008af2:	f7ff ff67 	bl	80089c4 <udp_bind>
    if (err != ERR_OK) {
 8008af6:	4605      	mov	r5, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0c5      	beq.n	8008a88 <udp_sendto_if_src+0x1c>
}
 8008afc:	4628      	mov	r0, r5
 8008afe:	b005      	add	sp, #20
 8008b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8008b04:	2200      	movs	r2, #0
 8008b06:	2108      	movs	r1, #8
 8008b08:	2001      	movs	r0, #1
 8008b0a:	f7fc fa27 	bl	8004f5c <pbuf_alloc>
    if (q == NULL) {
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b148      	cbz	r0, 8008b26 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 8008b12:	8933      	ldrh	r3, [r6, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0be      	beq.n	8008a96 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 8008b18:	4631      	mov	r1, r6
 8008b1a:	f7fc fbc9 	bl	80052b0 <pbuf_chain>
 8008b1e:	e7ba      	b.n	8008a96 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 8008b20:	f06f 0505 	mvn.w	r5, #5
 8008b24:	e7ea      	b.n	8008afc <udp_sendto_if_src+0x90>
      return ERR_MEM;
 8008b26:	f04f 35ff 	mov.w	r5, #4294967295
 8008b2a:	e7e7      	b.n	8008afc <udp_sendto_if_src+0x90>
 8008b2c:	0800ed99 	.word	0x0800ed99
 8008b30:	0800eddc 	.word	0x0800eddc
 8008b34:	0800d741 	.word	0x0800d741

08008b38 <udp_sendto_if>:
{
 8008b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b3a:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8008b3c:	b190      	cbz	r0, 8008b64 <udp_sendto_if+0x2c>
 8008b3e:	b18a      	cbz	r2, 8008b64 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b40:	6805      	ldr	r5, [r0, #0]
 8008b42:	b11d      	cbz	r5, 8008b4c <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008b44:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b48:	2ee0      	cmp	r6, #224	; 0xe0
 8008b4a:	d106      	bne.n	8008b5a <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 8008b4c:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008b4e:	e9cd 4500 	strd	r4, r5, [sp]
 8008b52:	f7ff ff8b 	bl	8008a6c <udp_sendto_if_src>
}
 8008b56:	b002      	add	sp, #8
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8008b5a:	6866      	ldr	r6, [r4, #4]
 8008b5c:	42b5      	cmp	r5, r6
 8008b5e:	d104      	bne.n	8008b6a <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b60:	4605      	mov	r5, r0
 8008b62:	e7f4      	b.n	8008b4e <udp_sendto_if+0x16>
    return ERR_VAL;
 8008b64:	f06f 0005 	mvn.w	r0, #5
 8008b68:	e7f5      	b.n	8008b56 <udp_sendto_if+0x1e>
      return ERR_RTE;
 8008b6a:	f06f 0003 	mvn.w	r0, #3
 8008b6e:	e7f2      	b.n	8008b56 <udp_sendto_if+0x1e>

08008b70 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	460d      	mov	r5, r1
 8008b74:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008b76:	4604      	mov	r4, r0
 8008b78:	b1d0      	cbz	r0, 8008bb0 <udp_connect+0x40>
 8008b7a:	b1c9      	cbz	r1, 8008bb0 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8008b7c:	8a42      	ldrh	r2, [r0, #18]
 8008b7e:	b16a      	cbz	r2, 8008b9c <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008b84:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 8008b86:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008b88:	f043 0304 	orr.w	r3, r3, #4
 8008b8c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <udp_connect+0x4c>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4610      	mov	r0, r2
 8008b94:	b940      	cbnz	r0, 8008ba8 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8008b96:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8008b98:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8008b9a:	e004      	b.n	8008ba6 <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008b9c:	4601      	mov	r1, r0
 8008b9e:	f7ff ff11 	bl	80089c4 <udp_bind>
    if (err != ERR_OK) {
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d0ec      	beq.n	8008b80 <udp_connect+0x10>
}
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d004      	beq.n	8008bb6 <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008bac:	68c0      	ldr	r0, [r0, #12]
 8008bae:	e7f1      	b.n	8008b94 <udp_connect+0x24>
    return ERR_VAL;
 8008bb0:	f06f 0005 	mvn.w	r0, #5
 8008bb4:	e7f7      	b.n	8008ba6 <udp_connect+0x36>
      return ERR_OK;
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	e7f5      	b.n	8008ba6 <udp_connect+0x36>
 8008bba:	bf00      	nop
 8008bbc:	200076dc 	.word	0x200076dc

08008bc0 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8008bc0:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 8008bc4:	4770      	bx	lr
	...

08008bc8 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8008bc8:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <udp_remove+0x2c>)
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	4283      	cmp	r3, r0
{
 8008bce:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 8008bd0:	d105      	bne.n	8008bde <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8008bd2:	68c3      	ldr	r3, [r0, #12]
 8008bd4:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f7fb bfc6 	b.w	8004b68 <memp_free>
 8008bdc:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f9      	beq.n	8008bd6 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	d0f6      	beq.n	8008bd6 <udp_remove+0xe>
 8008be8:	428a      	cmp	r2, r1
 8008bea:	d1f7      	bne.n	8008bdc <udp_remove+0x14>
        pcb2->next = pcb->next;
 8008bec:	68ca      	ldr	r2, [r1, #12]
 8008bee:	60da      	str	r2, [r3, #12]
        break;
 8008bf0:	e7f1      	b.n	8008bd6 <udp_remove+0xe>
 8008bf2:	bf00      	nop
 8008bf4:	200076dc 	.word	0x200076dc

08008bf8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008bf8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7fb ff98 	bl	8004b30 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8008c00:	4604      	mov	r4, r0
 8008c02:	b128      	cbz	r0, 8008c10 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008c04:	2220      	movs	r2, #32
 8008c06:	2100      	movs	r1, #0
 8008c08:	f003 fd76 	bl	800c6f8 <memset>
    pcb->ttl = UDP_TTL;
 8008c0c:	23ff      	movs	r3, #255	; 0xff
 8008c0e:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8008c10:	4620      	mov	r0, r4
 8008c12:	bd10      	pop	{r4, pc}

08008c14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008c14:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008c16:	b138      	cbz	r0, 8008c28 <udp_netif_ip_addr_changed+0x14>
 8008c18:	6803      	ldr	r3, [r0, #0]
 8008c1a:	b12b      	cbz	r3, 8008c28 <udp_netif_ip_addr_changed+0x14>
 8008c1c:	b121      	cbz	r1, 8008c28 <udp_netif_ip_addr_changed+0x14>
 8008c1e:	680b      	ldr	r3, [r1, #0]
 8008c20:	b113      	cbz	r3, 8008c28 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <udp_netif_ip_addr_changed+0x28>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	b903      	cbnz	r3, 8008c2a <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8008c28:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008c2a:	681c      	ldr	r4, [r3, #0]
 8008c2c:	6802      	ldr	r2, [r0, #0]
 8008c2e:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008c30:	bf04      	itt	eq
 8008c32:	680a      	ldreq	r2, [r1, #0]
 8008c34:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	e7f5      	b.n	8008c26 <udp_netif_ip_addr_changed+0x12>
 8008c3a:	bf00      	nop
 8008c3c:	200076dc 	.word	0x200076dc

08008c40 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8008c40:	7a43      	ldrb	r3, [r0, #9]
 8008c42:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8008c44:	bf1f      	itttt	ne
 8008c46:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8008c48:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 8008c4a:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 8008c4c:	82c3      	strhne	r3, [r0, #22]
  }
}
 8008c4e:	4770      	bx	lr

08008c50 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8008c50:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008c52:	8a83      	ldrh	r3, [r0, #20]
 8008c54:	3302      	adds	r3, #2
 8008c56:	2b44      	cmp	r3, #68	; 0x44
{
 8008c58:	4604      	mov	r4, r0
 8008c5a:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008c5c:	d906      	bls.n	8008c6c <dhcp_option_short+0x1c>
 8008c5e:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <dhcp_option_short+0x38>)
 8008c60:	490a      	ldr	r1, [pc, #40]	; (8008c8c <dhcp_option_short+0x3c>)
 8008c62:	480b      	ldr	r0, [pc, #44]	; (8008c90 <dhcp_option_short+0x40>)
 8008c64:	f240 5282 	movw	r2, #1410	; 0x582
 8008c68:	f003 fe04 	bl	800c874 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008c6c:	8aa3      	ldrh	r3, [r4, #20]
 8008c6e:	6922      	ldr	r2, [r4, #16]
 8008c70:	18d1      	adds	r1, r2, r3
 8008c72:	0a28      	lsrs	r0, r5, #8
 8008c74:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8008c78:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008c7a:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8008c7c:	fa12 f383 	uxtah	r3, r2, r3
 8008c80:	82a1      	strh	r1, [r4, #20]
 8008c82:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	0800f07a 	.word	0x0800f07a
 8008c8c:	0800f0af 	.word	0x0800f0af
 8008c90:	0800d741 	.word	0x0800d741

08008c94 <dhcp_option>:
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008c94:	8a83      	ldrh	r3, [r0, #20]
{
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008c9a:	3202      	adds	r2, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	2b44      	cmp	r3, #68	; 0x44
{
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008ca4:	d906      	bls.n	8008cb4 <dhcp_option+0x20>
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <dhcp_option+0x3c>)
 8008ca8:	490a      	ldr	r1, [pc, #40]	; (8008cd4 <dhcp_option+0x40>)
 8008caa:	480b      	ldr	r0, [pc, #44]	; (8008cd8 <dhcp_option+0x44>)
 8008cac:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8008cb0:	f003 fde0 	bl	800c874 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8008cb4:	8aa3      	ldrh	r3, [r4, #20]
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	18d1      	adds	r1, r2, r3
 8008cba:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8008cbe:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8008cc0:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8008cc2:	fa12 f383 	uxtah	r3, r2, r3
 8008cc6:	82a1      	strh	r1, [r4, #20]
 8008cc8:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	bf00      	nop
 8008cd0:	0800f07a 	.word	0x0800f07a
 8008cd4:	0800efb7 	.word	0x0800efb7
 8008cd8:	0800d741 	.word	0x0800d741

08008cdc <dhcp_option_byte>:
{
 8008cdc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008cde:	8a83      	ldrh	r3, [r0, #20]
 8008ce0:	2b43      	cmp	r3, #67	; 0x43
{
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008ce6:	d906      	bls.n	8008cf6 <dhcp_option_byte+0x1a>
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <dhcp_option_byte+0x2c>)
 8008cea:	4908      	ldr	r1, [pc, #32]	; (8008d0c <dhcp_option_byte+0x30>)
 8008cec:	4808      	ldr	r0, [pc, #32]	; (8008d10 <dhcp_option_byte+0x34>)
 8008cee:	f240 527b 	movw	r2, #1403	; 0x57b
 8008cf2:	f003 fdbf 	bl	800c874 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8008cf6:	8aa2      	ldrh	r2, [r4, #20]
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	1c51      	adds	r1, r2, #1
 8008cfe:	82a1      	strh	r1, [r4, #20]
 8008d00:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	0800f07a 	.word	0x0800f07a
 8008d0c:	0800efff 	.word	0x0800efff
 8008d10:	0800d741 	.word	0x0800d741

08008d14 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8008d14:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008d16:	8a83      	ldrh	r3, [r0, #20]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	2b44      	cmp	r3, #68	; 0x44
{
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008d20:	d906      	bls.n	8008d30 <dhcp_option_long+0x1c>
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <dhcp_option_long+0x50>)
 8008d24:	4910      	ldr	r1, [pc, #64]	; (8008d68 <dhcp_option_long+0x54>)
 8008d26:	4811      	ldr	r0, [pc, #68]	; (8008d6c <dhcp_option_long+0x58>)
 8008d28:	f240 528a 	movw	r2, #1418	; 0x58a
 8008d2c:	f003 fda2 	bl	800c874 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008d30:	8aab      	ldrh	r3, [r5, #20]
 8008d32:	692a      	ldr	r2, [r5, #16]
 8008d34:	18d1      	adds	r1, r2, r3
 8008d36:	0e20      	lsrs	r0, r4, #24
 8008d38:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8008d3c:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8008d3e:	fa12 f181 	uxtah	r1, r2, r1
 8008d42:	0c20      	lsrs	r0, r4, #16
 8008d44:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8008d48:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008d4a:	fa12 f181 	uxtah	r1, r2, r1
 8008d4e:	0a20      	lsrs	r0, r4, #8
 8008d50:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008d54:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008d56:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008d58:	fa12 f383 	uxtah	r3, r2, r3
 8008d5c:	82a9      	strh	r1, [r5, #20]
 8008d5e:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
}
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	0800f07a 	.word	0x0800f07a
 8008d68:	0800f03a 	.word	0x0800f03a
 8008d6c:	0800d741 	.word	0x0800d741

08008d70 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	460c      	mov	r4, r1
 8008d76:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8008d78:	4680      	mov	r8, r0
 8008d7a:	b950      	cbnz	r0, 8008d92 <dhcp_create_msg+0x22>
 8008d7c:	4b61      	ldr	r3, [pc, #388]	; (8008f04 <dhcp_create_msg+0x194>)
 8008d7e:	4962      	ldr	r1, [pc, #392]	; (8008f08 <dhcp_create_msg+0x198>)
 8008d80:	4862      	ldr	r0, [pc, #392]	; (8008f0c <dhcp_create_msg+0x19c>)
 8008d82:	f240 721d 	movw	r2, #1821	; 0x71d
 8008d86:	f003 fd75 	bl	800c874 <iprintf>
 8008d8a:	f06f 000f 	mvn.w	r0, #15
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 8008d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8008d92:	b949      	cbnz	r1, 8008da8 <dhcp_create_msg+0x38>
 8008d94:	4b5b      	ldr	r3, [pc, #364]	; (8008f04 <dhcp_create_msg+0x194>)
 8008d96:	495e      	ldr	r1, [pc, #376]	; (8008f10 <dhcp_create_msg+0x1a0>)
 8008d98:	485c      	ldr	r0, [pc, #368]	; (8008f0c <dhcp_create_msg+0x19c>)
 8008d9a:	f240 721e 	movw	r2, #1822	; 0x71e
 8008d9e:	f003 fd69 	bl	800c874 <iprintf>
 8008da2:	f06f 0005 	mvn.w	r0, #5
 8008da6:	e7f2      	b.n	8008d8e <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8008da8:	68cb      	ldr	r3, [r1, #12]
 8008daa:	b133      	cbz	r3, 8008dba <dhcp_create_msg+0x4a>
 8008dac:	4b55      	ldr	r3, [pc, #340]	; (8008f04 <dhcp_create_msg+0x194>)
 8008dae:	4959      	ldr	r1, [pc, #356]	; (8008f14 <dhcp_create_msg+0x1a4>)
 8008db0:	4856      	ldr	r0, [pc, #344]	; (8008f0c <dhcp_create_msg+0x19c>)
 8008db2:	f240 721f 	movw	r2, #1823	; 0x71f
 8008db6:	f003 fd5d 	bl	800c874 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	b133      	cbz	r3, 8008dcc <dhcp_create_msg+0x5c>
 8008dbe:	4b51      	ldr	r3, [pc, #324]	; (8008f04 <dhcp_create_msg+0x194>)
 8008dc0:	4955      	ldr	r1, [pc, #340]	; (8008f18 <dhcp_create_msg+0x1a8>)
 8008dc2:	4852      	ldr	r0, [pc, #328]	; (8008f0c <dhcp_create_msg+0x19c>)
 8008dc4:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8008dc8:	f003 fd54 	bl	800c874 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f44f 719a 	mov.w	r1, #308	; 0x134
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f7fc f8c2 	bl	8004f5c <pbuf_alloc>
 8008dd8:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	f000 808e 	beq.w	8008efc <dhcp_create_msg+0x18c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8008de0:	8943      	ldrh	r3, [r0, #10]
 8008de2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8008de6:	d206      	bcs.n	8008df6 <dhcp_create_msg+0x86>
 8008de8:	4b46      	ldr	r3, [pc, #280]	; (8008f04 <dhcp_create_msg+0x194>)
 8008dea:	494c      	ldr	r1, [pc, #304]	; (8008f1c <dhcp_create_msg+0x1ac>)
 8008dec:	4847      	ldr	r0, [pc, #284]	; (8008f0c <dhcp_create_msg+0x19c>)
 8008dee:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8008df2:	f003 fd3f 	bl	800c874 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8008df6:	2e03      	cmp	r6, #3
 8008df8:	d102      	bne.n	8008e00 <dhcp_create_msg+0x90>
 8008dfa:	7a63      	ldrb	r3, [r4, #9]
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d107      	bne.n	8008e10 <dhcp_create_msg+0xa0>
    if (dhcp->tries == 0) {
 8008e00:	7aa3      	ldrb	r3, [r4, #10]
 8008e02:	4d47      	ldr	r5, [pc, #284]	; (8008f20 <dhcp_create_msg+0x1b0>)
 8008e04:	b913      	cbnz	r3, 8008e0c <dhcp_create_msg+0x9c>
      xid = LWIP_RAND();
 8008e06:	f003 fdb1 	bl	800c96c <rand>
 8008e0a:	6028      	str	r0, [r5, #0]
    dhcp->xid = xid;
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	6023      	str	r3, [r4, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8008e10:	68e3      	ldr	r3, [r4, #12]
 8008e12:	685f      	ldr	r7, [r3, #4]
 8008e14:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8008e16:	2301      	movs	r3, #1
 8008e18:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8008e1a:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hops = 0;
 8008e1c:	2500      	movs	r5, #0
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8008e1e:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8008e22:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->hops = 0;
 8008e24:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	f7fb fbf9 	bl	800461e <lwip_htonl>
  dhcp->msg_out->secs = 0;
 8008e2c:	6923      	ldr	r3, [r4, #16]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8008e2e:	6078      	str	r0, [r7, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8008e30:	2e04      	cmp	r6, #4
  dhcp->msg_out->secs = 0;
 8008e32:	721d      	strb	r5, [r3, #8]
 8008e34:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 8008e36:	729d      	strb	r5, [r3, #10]
 8008e38:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8008e3a:	731d      	strb	r5, [r3, #12]
 8008e3c:	735d      	strb	r5, [r3, #13]
 8008e3e:	739d      	strb	r5, [r3, #14]
 8008e40:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8008e42:	d008      	beq.n	8008e56 <dhcp_create_msg+0xe6>
 8008e44:	1ff2      	subs	r2, r6, #7
 8008e46:	2a01      	cmp	r2, #1
 8008e48:	d905      	bls.n	8008e56 <dhcp_create_msg+0xe6>
 8008e4a:	2e03      	cmp	r6, #3
 8008e4c:	d106      	bne.n	8008e5c <dhcp_create_msg+0xec>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8008e4e:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8008e50:	3a04      	subs	r2, #4
 8008e52:	2a01      	cmp	r2, #1
 8008e54:	d802      	bhi.n	8008e5c <dhcp_create_msg+0xec>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8008e56:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008e5a:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	741a      	strb	r2, [r3, #16]
 8008e60:	745a      	strb	r2, [r3, #17]
 8008e62:	749a      	strb	r2, [r3, #18]
 8008e64:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8008e66:	751a      	strb	r2, [r3, #20]
 8008e68:	755a      	strb	r2, [r3, #21]
 8008e6a:	759a      	strb	r2, [r3, #22]
 8008e6c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8008e6e:	761a      	strb	r2, [r3, #24]
 8008e70:	765a      	strb	r2, [r3, #25]
 8008e72:	769a      	strb	r2, [r3, #26]
 8008e74:	76da      	strb	r2, [r3, #27]
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8008e76:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 8008e7a:	f103 001c 	add.w	r0, r3, #28
 8008e7e:	b291      	uxth	r1, r2
 8008e80:	428d      	cmp	r5, r1
 8008e82:	d939      	bls.n	8008ef8 <dhcp_create_msg+0x188>
 8008e84:	2905      	cmp	r1, #5
 8008e86:	d837      	bhi.n	8008ef8 <dhcp_create_msg+0x188>
 8008e88:	eb08 0102 	add.w	r1, r8, r2
 8008e8c:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8008e90:	f800 1b01 	strb.w	r1, [r0], #1
 8008e94:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8008e96:	2a10      	cmp	r2, #16
 8008e98:	d1f1      	bne.n	8008e7e <dhcp_create_msg+0x10e>
 8008e9a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008e9e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    dhcp->msg_out->sname[i] = 0;
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8008ea8:	428a      	cmp	r2, r1
 8008eaa:	d1fb      	bne.n	8008ea4 <dhcp_create_msg+0x134>
 8008eac:	f103 00ec 	add.w	r0, r3, #236	; 0xec
    dhcp->msg_out->file[i] = 0;
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8008eb6:	4290      	cmp	r0, r2
 8008eb8:	d1fb      	bne.n	8008eb2 <dhcp_create_msg+0x142>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8008eba:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008ebe:	2263      	movs	r2, #99	; 0x63
 8008ec0:	f883 00ed 	strb.w	r0, [r3, #237]	; 0xed
 8008ec4:	2053      	movs	r0, #83	; 0x53
 8008ec6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8008eca:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8008ece:	f883 00ee 	strb.w	r0, [r3, #238]	; 0xee
  dhcp->options_out_len = 0;
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	82a1      	strh	r1, [r4, #20]
 8008ed6:	33f0      	adds	r3, #240	; 0xf0
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8008ed8:	f803 2b01 	strb.w	r2, [r3], #1
 8008edc:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8008ede:	2a44      	cmp	r2, #68	; 0x44
 8008ee0:	d1fa      	bne.n	8008ed8 <dhcp_create_msg+0x168>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	2135      	movs	r1, #53	; 0x35
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff fed4 	bl	8008c94 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8008eec:	4620      	mov	r0, r4
 8008eee:	4631      	mov	r1, r6
 8008ef0:	f7ff fef4 	bl	8008cdc <dhcp_option_byte>
  return ERR_OK;
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e74a      	b.n	8008d8e <dhcp_create_msg+0x1e>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8008ef8:	2100      	movs	r1, #0
 8008efa:	e7c9      	b.n	8008e90 <dhcp_create_msg+0x120>
    return ERR_MEM;
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	e745      	b.n	8008d8e <dhcp_create_msg+0x1e>
 8008f02:	bf00      	nop
 8008f04:	0800f07a 	.word	0x0800f07a
 8008f08:	0800ee3b 	.word	0x0800ee3b
 8008f0c:	0800d741 	.word	0x0800d741
 8008f10:	0800ee5a 	.word	0x0800ee5a
 8008f14:	0800ee78 	.word	0x0800ee78
 8008f18:	0800ee9d 	.word	0x0800ee9d
 8008f1c:	0800eec4 	.word	0x0800eec4
 8008f20:	20003e84 	.word	0x20003e84

08008f24 <dhcp_check>:
{
 8008f24:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008f26:	6a04      	ldr	r4, [r0, #32]
{
 8008f28:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8008f2a:	2108      	movs	r1, #8
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7ff fe87 	bl	8008c40 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8008f32:	2200      	movs	r2, #0
 8008f34:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f001 f9af 	bl	800a29c <etharp_query>
  if (dhcp->tries < 255) {
 8008f3e:	7aa3      	ldrb	r3, [r4, #10]
 8008f40:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008f42:	bf1c      	itt	ne
 8008f44:	3301      	addne	r3, #1
 8008f46:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	82e3      	strh	r3, [r4, #22]
}
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008f50 <dhcp_bind>:
{
 8008f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8008f52:	4605      	mov	r5, r0
 8008f54:	b940      	cbnz	r0, 8008f68 <dhcp_bind+0x18>
 8008f56:	4b3a      	ldr	r3, [pc, #232]	; (8009040 <dhcp_bind+0xf0>)
 8008f58:	493a      	ldr	r1, [pc, #232]	; (8009044 <dhcp_bind+0xf4>)
 8008f5a:	f240 32fe 	movw	r2, #1022	; 0x3fe
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008f5e:	483a      	ldr	r0, [pc, #232]	; (8009048 <dhcp_bind+0xf8>)
 8008f60:	f003 fc88 	bl	800c874 <iprintf>
}
 8008f64:	b003      	add	sp, #12
 8008f66:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8008f68:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008f6a:	b924      	cbnz	r4, 8008f76 <dhcp_bind+0x26>
 8008f6c:	4b34      	ldr	r3, [pc, #208]	; (8009040 <dhcp_bind+0xf0>)
 8008f6e:	4937      	ldr	r1, [pc, #220]	; (800904c <dhcp_bind+0xfc>)
 8008f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f74:	e7f3      	b.n	8008f5e <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	d00b      	beq.n	8008f98 <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008f80:	331e      	adds	r3, #30
 8008f82:	223c      	movs	r2, #60	; 0x3c
 8008f84:	fbb3 f3f2 	udiv	r3, r3, r2
     if (dhcp->t0_timeout == 0) {
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d046      	beq.n	800901a <dhcp_bind+0xca>
     dhcp->t0_timeout = (u16_t)timeout;
 8008f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f90:	4293      	cmp	r3, r2
 8008f92:	bf28      	it	cs
 8008f94:	4613      	movcs	r3, r2
       dhcp->t0_timeout = 1;
 8008f96:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8008f98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f9a:	1c58      	adds	r0, r3, #1
 8008f9c:	d00d      	beq.n	8008fba <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008f9e:	331e      	adds	r3, #30
 8008fa0:	223c      	movs	r2, #60	; 0x3c
 8008fa2:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t1_timeout == 0) {
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d039      	beq.n	800901e <dhcp_bind+0xce>
    dhcp->t1_timeout = (u16_t)timeout;
 8008faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	bf28      	it	cs
 8008fb2:	4613      	movcs	r3, r2
      dhcp->t1_timeout = 1;
 8008fb4:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008fb6:	8b23      	ldrh	r3, [r4, #24]
 8008fb8:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fbc:	1c59      	adds	r1, r3, #1
 8008fbe:	d00c      	beq.n	8008fda <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008fc0:	331e      	adds	r3, #30
 8008fc2:	223c      	movs	r2, #60	; 0x3c
 8008fc4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t2_timeout == 0) {
 8008fc8:	b35b      	cbz	r3, 8009022 <dhcp_bind+0xd2>
    dhcp->t2_timeout = (u16_t)timeout;
 8008fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	bf28      	it	cs
 8008fd2:	4613      	movcs	r3, r2
      dhcp->t2_timeout = 1;
 8008fd4:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8008fd6:	8b63      	ldrh	r3, [r4, #26]
 8008fd8:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8008fda:	8b63      	ldrh	r3, [r4, #26]
 8008fdc:	8b22      	ldrh	r2, [r4, #24]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <dhcp_bind+0x98>
 8008fe2:	b10b      	cbz	r3, 8008fe8 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 8008fe8:	7ae3      	ldrb	r3, [r4, #11]
 8008fea:	b1e3      	cbz	r3, 8009026 <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008fec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008fee:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8008ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ff2:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8008ff4:	b92b      	cbnz	r3, 8009002 <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8008ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ff8:	9a00      	ldr	r2, [sp, #0]
 8008ffa:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008ffc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009000:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8009002:	4620      	mov	r0, r4
 8009004:	210a      	movs	r1, #10
 8009006:	f7ff fe1b 	bl	8008c40 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800900a:	ab01      	add	r3, sp, #4
 800900c:	466a      	mov	r2, sp
 800900e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8009012:	4628      	mov	r0, r5
 8009014:	f7fb fdf0 	bl	8004bf8 <netif_set_addr>
 8009018:	e7a4      	b.n	8008f64 <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 800901a:	2301      	movs	r3, #1
 800901c:	e7bb      	b.n	8008f96 <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 800901e:	2301      	movs	r3, #1
 8009020:	e7c8      	b.n	8008fb4 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 8009022:	2301      	movs	r3, #1
 8009024:	e7d6      	b.n	8008fd4 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8009026:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 800902a:	061a      	lsls	r2, r3, #24
 800902c:	d401      	bmi.n	8009032 <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800902e:	23ff      	movs	r3, #255	; 0xff
 8009030:	e7dd      	b.n	8008fee <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8009032:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009034:	bf8c      	ite	hi
 8009036:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800903a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800903e:	e7d6      	b.n	8008fee <dhcp_bind+0x9e>
 8009040:	0800f07a 	.word	0x0800f07a
 8009044:	0800ee0a 	.word	0x0800ee0a
 8009048:	0800d741 	.word	0x0800d741
 800904c:	0800ee23 	.word	0x0800ee23

08009050 <dhcp_inc_pcb_refcount>:
{
 8009050:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8009052:	4d15      	ldr	r5, [pc, #84]	; (80090a8 <dhcp_inc_pcb_refcount+0x58>)
 8009054:	782b      	ldrb	r3, [r5, #0]
 8009056:	b9f3      	cbnz	r3, 8009096 <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8009058:	4c14      	ldr	r4, [pc, #80]	; (80090ac <dhcp_inc_pcb_refcount+0x5c>)
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	b12b      	cbz	r3, 800906a <dhcp_inc_pcb_refcount+0x1a>
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <dhcp_inc_pcb_refcount+0x60>)
 8009060:	4914      	ldr	r1, [pc, #80]	; (80090b4 <dhcp_inc_pcb_refcount+0x64>)
 8009062:	4815      	ldr	r0, [pc, #84]	; (80090b8 <dhcp_inc_pcb_refcount+0x68>)
 8009064:	22d9      	movs	r2, #217	; 0xd9
 8009066:	f003 fc05 	bl	800c874 <iprintf>
    dhcp_pcb = udp_new();
 800906a:	f7ff fdc5 	bl	8008bf8 <udp_new>
 800906e:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 8009070:	b1b0      	cbz	r0, 80090a0 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009072:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8009074:	4911      	ldr	r1, [pc, #68]	; (80090bc <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009076:	f042 0220 	orr.w	r2, r2, #32
 800907a:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800907c:	2244      	movs	r2, #68	; 0x44
 800907e:	f7ff fca1 	bl	80089c4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8009082:	2243      	movs	r2, #67	; 0x43
 8009084:	490d      	ldr	r1, [pc, #52]	; (80090bc <dhcp_inc_pcb_refcount+0x6c>)
 8009086:	6820      	ldr	r0, [r4, #0]
 8009088:	f7ff fd72 	bl	8008b70 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800908c:	2200      	movs	r2, #0
 800908e:	490c      	ldr	r1, [pc, #48]	; (80090c0 <dhcp_inc_pcb_refcount+0x70>)
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	f7ff fd95 	bl	8008bc0 <udp_recv>
  dhcp_pcb_refcount++;
 8009096:	782b      	ldrb	r3, [r5, #0]
 8009098:	3301      	adds	r3, #1
 800909a:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 800909c:	2000      	movs	r0, #0
}
 800909e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	e7fb      	b.n	800909e <dhcp_inc_pcb_refcount+0x4e>
 80090a6:	bf00      	nop
 80090a8:	20003e80 	.word	0x20003e80
 80090ac:	20003e7c 	.word	0x20003e7c
 80090b0:	0800f07a 	.word	0x0800f07a
 80090b4:	0800ef92 	.word	0x0800ef92
 80090b8:	0800d741 	.word	0x0800d741
 80090bc:	0800f54c 	.word	0x0800f54c
 80090c0:	080094c5 	.word	0x080094c5

080090c4 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80090c4:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80090c6:	4604      	mov	r4, r0
 80090c8:	b940      	cbnz	r0, 80090dc <dhcp_option_trailer+0x18>
 80090ca:	4b17      	ldr	r3, [pc, #92]	; (8009128 <dhcp_option_trailer+0x64>)
 80090cc:	4917      	ldr	r1, [pc, #92]	; (800912c <dhcp_option_trailer+0x68>)
 80090ce:	4818      	ldr	r0, [pc, #96]	; (8009130 <dhcp_option_trailer+0x6c>)
 80090d0:	f240 7282 	movw	r2, #1922	; 0x782
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80090d8:	f003 bbcc 	b.w	800c874 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80090dc:	6903      	ldr	r3, [r0, #16]
 80090de:	b933      	cbnz	r3, 80090ee <dhcp_option_trailer+0x2a>
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <dhcp_option_trailer+0x64>)
 80090e2:	4914      	ldr	r1, [pc, #80]	; (8009134 <dhcp_option_trailer+0x70>)
 80090e4:	4812      	ldr	r0, [pc, #72]	; (8009130 <dhcp_option_trailer+0x6c>)
 80090e6:	f240 7283 	movw	r2, #1923	; 0x783
 80090ea:	f003 fbc3 	bl	800c874 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80090ee:	8aa3      	ldrh	r3, [r4, #20]
 80090f0:	2b43      	cmp	r3, #67	; 0x43
 80090f2:	d906      	bls.n	8009102 <dhcp_option_trailer+0x3e>
 80090f4:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <dhcp_option_trailer+0x64>)
 80090f6:	4910      	ldr	r1, [pc, #64]	; (8009138 <dhcp_option_trailer+0x74>)
 80090f8:	480d      	ldr	r0, [pc, #52]	; (8009130 <dhcp_option_trailer+0x6c>)
 80090fa:	f240 7284 	movw	r2, #1924	; 0x784
 80090fe:	f003 fbb9 	bl	800c874 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8009102:	8aa3      	ldrh	r3, [r4, #20]
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	82a1      	strh	r1, [r4, #20]
 800910c:	21ff      	movs	r1, #255	; 0xff
 800910e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8009112:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8009114:	8aa3      	ldrh	r3, [r4, #20]
 8009116:	2b43      	cmp	r3, #67	; 0x43
 8009118:	d900      	bls.n	800911c <dhcp_option_trailer+0x58>
}
 800911a:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800911c:	1c58      	adds	r0, r3, #1
 800911e:	4413      	add	r3, r2
 8009120:	82a0      	strh	r0, [r4, #20]
 8009122:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8009126:	e7f5      	b.n	8009114 <dhcp_option_trailer+0x50>
 8009128:	0800f07a 	.word	0x0800f07a
 800912c:	0800f0f0 	.word	0x0800f0f0
 8009130:	0800d741 	.word	0x0800d741
 8009134:	0800f112 	.word	0x0800f112
 8009138:	0800f13e 	.word	0x0800f13e

0800913c <dhcp_handle_ack.isra.1>:
dhcp_handle_ack(struct netif *netif)
 800913c:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800913e:	4d18      	ldr	r5, [pc, #96]	; (80091a0 <dhcp_handle_ack.isra.1+0x64>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009140:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009142:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009146:	78eb      	ldrb	r3, [r5, #3]
dhcp_handle_ack(struct netif *netif)
 8009148:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800914a:	b113      	cbz	r3, 8009152 <dhcp_handle_ack.isra.1+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800914c:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <dhcp_handle_ack.isra.1+0x68>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009152:	792b      	ldrb	r3, [r5, #4]
 8009154:	b1db      	cbz	r3, 800918e <dhcp_handle_ack.isra.1+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009156:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <dhcp_handle_ack.isra.1+0x68>)
 8009158:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800915a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800915c:	796b      	ldrb	r3, [r5, #5]
 800915e:	b1cb      	cbz	r3, 8009194 <dhcp_handle_ack.isra.1+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009160:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <dhcp_handle_ack.isra.1+0x68>)
 8009162:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009164:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800916c:	79ab      	ldrb	r3, [r5, #6]
 800916e:	b12b      	cbz	r3, 800917c <dhcp_handle_ack.isra.1+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <dhcp_handle_ack.isra.1+0x68>)
 8009172:	6998      	ldr	r0, [r3, #24]
 8009174:	f7fb fa53 	bl	800461e <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8009178:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800917a:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 800917c:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800917e:	79eb      	ldrb	r3, [r5, #7]
 8009180:	b123      	cbz	r3, 800918c <dhcp_handle_ack.isra.1+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8009182:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <dhcp_handle_ack.isra.1+0x68>)
 8009184:	69d8      	ldr	r0, [r3, #28]
 8009186:	f7fb fa4a 	bl	800461e <lwip_htonl>
 800918a:	6320      	str	r0, [r4, #48]	; 0x30
}
 800918c:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800918e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	e7e2      	b.n	800915a <dhcp_handle_ack.isra.1+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009196:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800919a:	08db      	lsrs	r3, r3, #3
 800919c:	e7e2      	b.n	8009164 <dhcp_handle_ack.isra.1+0x28>
 800919e:	bf00      	nop
 80091a0:	200076e0 	.word	0x200076e0
 80091a4:	200076e8 	.word	0x200076e8

080091a8 <dhcp_delete_msg>:
{
 80091a8:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80091aa:	4604      	mov	r4, r0
 80091ac:	b940      	cbnz	r0, 80091c0 <dhcp_delete_msg+0x18>
 80091ae:	4b11      	ldr	r3, [pc, #68]	; (80091f4 <dhcp_delete_msg+0x4c>)
 80091b0:	4911      	ldr	r1, [pc, #68]	; (80091f8 <dhcp_delete_msg+0x50>)
 80091b2:	4812      	ldr	r0, [pc, #72]	; (80091fc <dhcp_delete_msg+0x54>)
 80091b4:	f240 726d 	movw	r2, #1901	; 0x76d
}
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80091bc:	f003 bb5a 	b.w	800c874 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80091c0:	68c3      	ldr	r3, [r0, #12]
 80091c2:	b933      	cbnz	r3, 80091d2 <dhcp_delete_msg+0x2a>
 80091c4:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <dhcp_delete_msg+0x4c>)
 80091c6:	490e      	ldr	r1, [pc, #56]	; (8009200 <dhcp_delete_msg+0x58>)
 80091c8:	480c      	ldr	r0, [pc, #48]	; (80091fc <dhcp_delete_msg+0x54>)
 80091ca:	f240 726e 	movw	r2, #1902	; 0x76e
 80091ce:	f003 fb51 	bl	800c874 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	b933      	cbnz	r3, 80091e4 <dhcp_delete_msg+0x3c>
 80091d6:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <dhcp_delete_msg+0x4c>)
 80091d8:	490a      	ldr	r1, [pc, #40]	; (8009204 <dhcp_delete_msg+0x5c>)
 80091da:	4808      	ldr	r0, [pc, #32]	; (80091fc <dhcp_delete_msg+0x54>)
 80091dc:	f240 726f 	movw	r2, #1903	; 0x76f
 80091e0:	f003 fb48 	bl	800c874 <iprintf>
  if (dhcp->p_out != NULL) {
 80091e4:	68e0      	ldr	r0, [r4, #12]
 80091e6:	b108      	cbz	r0, 80091ec <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 80091e8:	f7fb fe50 	bl	8004e8c <pbuf_free>
  dhcp->p_out = NULL;
 80091ec:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 80091ee:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 80091f2:	bd10      	pop	{r4, pc}
 80091f4:	0800f07a 	.word	0x0800f07a
 80091f8:	0800ef28 	.word	0x0800ef28
 80091fc:	0800d741 	.word	0x0800d741
 8009200:	0800ef46 	.word	0x0800ef46
 8009204:	0800ef6b 	.word	0x0800ef6b

08009208 <dhcp_discover>:
{
 8009208:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800920a:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800920c:	2300      	movs	r3, #0
{
 800920e:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009210:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009212:	2106      	movs	r1, #6
 8009214:	4620      	mov	r0, r4
 8009216:	f7ff fd13 	bl	8008c40 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800921a:	2201      	movs	r2, #1
 800921c:	4621      	mov	r1, r4
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff fda6 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009224:	4605      	mov	r5, r0
 8009226:	bb78      	cbnz	r0, 8009288 <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009228:	2202      	movs	r2, #2
 800922a:	2139      	movs	r1, #57	; 0x39
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff fd31 	bl	8008c94 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009232:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8009234:	4620      	mov	r0, r4
 8009236:	f7ff fd0b 	bl	8008c50 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800923a:	2203      	movs	r2, #3
 800923c:	2137      	movs	r1, #55	; 0x37
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff fd28 	bl	8008c94 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009244:	2101      	movs	r1, #1
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff fd48 	bl	8008cdc <dhcp_option_byte>
 800924c:	2103      	movs	r1, #3
 800924e:	4620      	mov	r0, r4
 8009250:	f7ff fd44 	bl	8008cdc <dhcp_option_byte>
 8009254:	211c      	movs	r1, #28
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fd40 	bl	8008cdc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800925c:	4620      	mov	r0, r4
 800925e:	f7ff ff31 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009262:	8aa1      	ldrh	r1, [r4, #20]
 8009264:	68e0      	ldr	r0, [r4, #12]
 8009266:	31f0      	adds	r1, #240	; 0xf0
 8009268:	b289      	uxth	r1, r1
 800926a:	f7fb ff53 	bl	8005114 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <dhcp_discover+0xb0>)
 8009270:	4812      	ldr	r0, [pc, #72]	; (80092bc <dhcp_discover+0xb4>)
 8009272:	4a13      	ldr	r2, [pc, #76]	; (80092c0 <dhcp_discover+0xb8>)
 8009274:	e9cd 6300 	strd	r6, r3, [sp]
 8009278:	2343      	movs	r3, #67	; 0x43
 800927a:	68e1      	ldr	r1, [r4, #12]
 800927c:	6800      	ldr	r0, [r0, #0]
 800927e:	f7ff fbf5 	bl	8008a6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009282:	4620      	mov	r0, r4
 8009284:	f7ff ff90 	bl	80091a8 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009288:	7aa3      	ldrb	r3, [r4, #10]
 800928a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800928c:	bf1c      	itt	ne
 800928e:	3301      	addne	r3, #1
 8009290:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009292:	7aa2      	ldrb	r2, [r4, #10]
 8009294:	2a05      	cmp	r2, #5
 8009296:	bf9d      	ittte	ls
 8009298:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 800929c:	4093      	lslls	r3, r2
 800929e:	b29b      	uxthls	r3, r3
 80092a0:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80092a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 80092a8:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80092aa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80092ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80092b2:	82e3      	strh	r3, [r4, #22]
}
 80092b4:	b002      	add	sp, #8
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	0800f54c 	.word	0x0800f54c
 80092bc:	20003e7c 	.word	0x20003e7c
 80092c0:	0800f550 	.word	0x0800f550

080092c4 <dhcp_select>:
{
 80092c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80092c6:	6a04      	ldr	r4, [r0, #32]
{
 80092c8:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80092ca:	2101      	movs	r1, #1
 80092cc:	4620      	mov	r0, r4
 80092ce:	f7ff fcb7 	bl	8008c40 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80092d2:	2203      	movs	r2, #3
 80092d4:	4621      	mov	r1, r4
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff fd4a 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 80092dc:	4605      	mov	r5, r0
 80092de:	2800      	cmp	r0, #0
 80092e0:	d147      	bne.n	8009372 <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80092e2:	2202      	movs	r2, #2
 80092e4:	2139      	movs	r1, #57	; 0x39
 80092e6:	4620      	mov	r0, r4
 80092e8:	f7ff fcd4 	bl	8008c94 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80092ec:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff fcae 	bl	8008c50 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80092f4:	2204      	movs	r2, #4
 80092f6:	2132      	movs	r1, #50	; 0x32
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7ff fccb 	bl	8008c94 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80092fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009300:	f7fb f98d 	bl	800461e <lwip_htonl>
 8009304:	4601      	mov	r1, r0
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff fd04 	bl	8008d14 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800930c:	2204      	movs	r2, #4
 800930e:	2136      	movs	r1, #54	; 0x36
 8009310:	4620      	mov	r0, r4
 8009312:	f7ff fcbf 	bl	8008c94 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8009316:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009318:	f7fb f981 	bl	800461e <lwip_htonl>
 800931c:	4601      	mov	r1, r0
 800931e:	4620      	mov	r0, r4
 8009320:	f7ff fcf8 	bl	8008d14 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009324:	2203      	movs	r2, #3
 8009326:	2137      	movs	r1, #55	; 0x37
 8009328:	4620      	mov	r0, r4
 800932a:	f7ff fcb3 	bl	8008c94 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800932e:	2101      	movs	r1, #1
 8009330:	4620      	mov	r0, r4
 8009332:	f7ff fcd3 	bl	8008cdc <dhcp_option_byte>
 8009336:	2103      	movs	r1, #3
 8009338:	4620      	mov	r0, r4
 800933a:	f7ff fccf 	bl	8008cdc <dhcp_option_byte>
 800933e:	211c      	movs	r1, #28
 8009340:	4620      	mov	r0, r4
 8009342:	f7ff fccb 	bl	8008cdc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8009346:	4620      	mov	r0, r4
 8009348:	f7ff febc 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800934c:	8aa1      	ldrh	r1, [r4, #20]
 800934e:	68e0      	ldr	r0, [r4, #12]
 8009350:	31f0      	adds	r1, #240	; 0xf0
 8009352:	b289      	uxth	r1, r1
 8009354:	f7fb fede 	bl	8005114 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009358:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <dhcp_select+0xe0>)
 800935a:	4813      	ldr	r0, [pc, #76]	; (80093a8 <dhcp_select+0xe4>)
 800935c:	4a13      	ldr	r2, [pc, #76]	; (80093ac <dhcp_select+0xe8>)
 800935e:	e9cd 6300 	strd	r6, r3, [sp]
 8009362:	2343      	movs	r3, #67	; 0x43
 8009364:	68e1      	ldr	r1, [r4, #12]
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	f7ff fb80 	bl	8008a6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800936c:	4620      	mov	r0, r4
 800936e:	f7ff ff1b 	bl	80091a8 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009372:	7aa3      	ldrb	r3, [r4, #10]
 8009374:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009376:	bf1c      	itt	ne
 8009378:	3301      	addne	r3, #1
 800937a:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800937c:	7aa2      	ldrb	r2, [r4, #10]
 800937e:	2a05      	cmp	r2, #5
 8009380:	bf9d      	ittte	ls
 8009382:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8009386:	4093      	lslls	r3, r2
 8009388:	b29b      	uxthls	r3, r3
 800938a:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800938e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8009392:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009394:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009398:	fb93 f3f2 	sdiv	r3, r3, r2
 800939c:	82e3      	strh	r3, [r4, #22]
}
 800939e:	b002      	add	sp, #8
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
 80093a2:	bf00      	nop
 80093a4:	0800f54c 	.word	0x0800f54c
 80093a8:	20003e7c 	.word	0x20003e7c
 80093ac:	0800f550 	.word	0x0800f550

080093b0 <dhcp_reboot>:
{
 80093b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80093b2:	6a04      	ldr	r4, [r0, #32]
{
 80093b4:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80093b6:	2103      	movs	r1, #3
 80093b8:	4620      	mov	r0, r4
 80093ba:	f7ff fc41 	bl	8008c40 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80093be:	2203      	movs	r2, #3
 80093c0:	4621      	mov	r1, r4
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7ff fcd4 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 80093c8:	4605      	mov	r5, r0
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d13a      	bne.n	8009444 <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80093ce:	2202      	movs	r2, #2
 80093d0:	2139      	movs	r1, #57	; 0x39
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7ff fc5e 	bl	8008c94 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80093d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093dc:	4620      	mov	r0, r4
 80093de:	f7ff fc37 	bl	8008c50 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80093e2:	2204      	movs	r2, #4
 80093e4:	2132      	movs	r1, #50	; 0x32
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7ff fc54 	bl	8008c94 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80093ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80093ee:	f7fb f916 	bl	800461e <lwip_htonl>
 80093f2:	4601      	mov	r1, r0
 80093f4:	4620      	mov	r0, r4
 80093f6:	f7ff fc8d 	bl	8008d14 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80093fa:	2203      	movs	r2, #3
 80093fc:	2137      	movs	r1, #55	; 0x37
 80093fe:	4620      	mov	r0, r4
 8009400:	f7ff fc48 	bl	8008c94 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009404:	2101      	movs	r1, #1
 8009406:	4620      	mov	r0, r4
 8009408:	f7ff fc68 	bl	8008cdc <dhcp_option_byte>
 800940c:	2103      	movs	r1, #3
 800940e:	4620      	mov	r0, r4
 8009410:	f7ff fc64 	bl	8008cdc <dhcp_option_byte>
 8009414:	211c      	movs	r1, #28
 8009416:	4620      	mov	r0, r4
 8009418:	f7ff fc60 	bl	8008cdc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800941c:	4620      	mov	r0, r4
 800941e:	f7ff fe51 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009422:	8aa1      	ldrh	r1, [r4, #20]
 8009424:	68e0      	ldr	r0, [r4, #12]
 8009426:	31f0      	adds	r1, #240	; 0xf0
 8009428:	b289      	uxth	r1, r1
 800942a:	f7fb fe73 	bl	8005114 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800942e:	4813      	ldr	r0, [pc, #76]	; (800947c <dhcp_reboot+0xcc>)
 8009430:	9600      	str	r6, [sp, #0]
 8009432:	2343      	movs	r3, #67	; 0x43
 8009434:	4a12      	ldr	r2, [pc, #72]	; (8009480 <dhcp_reboot+0xd0>)
 8009436:	68e1      	ldr	r1, [r4, #12]
 8009438:	6800      	ldr	r0, [r0, #0]
 800943a:	f7ff fb7d 	bl	8008b38 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800943e:	4620      	mov	r0, r4
 8009440:	f7ff feb2 	bl	80091a8 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009444:	7aa3      	ldrb	r3, [r4, #10]
 8009446:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009448:	bf1c      	itt	ne
 800944a:	3301      	addne	r3, #1
 800944c:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800944e:	7aa3      	ldrb	r3, [r4, #10]
 8009450:	2b09      	cmp	r3, #9
 8009452:	bf9f      	itttt	ls
 8009454:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009458:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 800945c:	00db      	lslls	r3, r3, #3
 800945e:	b29b      	uxthls	r3, r3
 8009460:	bf88      	it	hi
 8009462:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009466:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 800946a:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800946c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009470:	fb93 f3f2 	sdiv	r3, r3, r2
 8009474:	82e3      	strh	r3, [r4, #22]
}
 8009476:	b002      	add	sp, #8
 8009478:	bd70      	pop	{r4, r5, r6, pc}
 800947a:	bf00      	nop
 800947c:	20003e7c 	.word	0x20003e7c
 8009480:	0800f550 	.word	0x0800f550

08009484 <dhcp_dec_pcb_refcount>:
{
 8009484:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8009486:	4d0a      	ldr	r5, [pc, #40]	; (80094b0 <dhcp_dec_pcb_refcount+0x2c>)
 8009488:	782b      	ldrb	r3, [r5, #0]
 800948a:	b92b      	cbnz	r3, 8009498 <dhcp_dec_pcb_refcount+0x14>
 800948c:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <dhcp_dec_pcb_refcount+0x30>)
 800948e:	490a      	ldr	r1, [pc, #40]	; (80094b8 <dhcp_dec_pcb_refcount+0x34>)
 8009490:	480a      	ldr	r0, [pc, #40]	; (80094bc <dhcp_dec_pcb_refcount+0x38>)
 8009492:	22f3      	movs	r2, #243	; 0xf3
 8009494:	f003 f9ee 	bl	800c874 <iprintf>
  dhcp_pcb_refcount--;
 8009498:	782c      	ldrb	r4, [r5, #0]
 800949a:	3c01      	subs	r4, #1
 800949c:	b2e4      	uxtb	r4, r4
 800949e:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 80094a0:	b924      	cbnz	r4, 80094ac <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 80094a2:	4d07      	ldr	r5, [pc, #28]	; (80094c0 <dhcp_dec_pcb_refcount+0x3c>)
 80094a4:	6828      	ldr	r0, [r5, #0]
 80094a6:	f7ff fb8f 	bl	8008bc8 <udp_remove>
    dhcp_pcb = NULL;
 80094aa:	602c      	str	r4, [r5, #0]
}
 80094ac:	bd38      	pop	{r3, r4, r5, pc}
 80094ae:	bf00      	nop
 80094b0:	20003e80 	.word	0x20003e80
 80094b4:	0800f07a 	.word	0x0800f07a
 80094b8:	0800ef04 	.word	0x0800ef04
 80094bc:	0800d741 	.word	0x0800d741
 80094c0:	20003e7c 	.word	0x20003e7c

080094c4 <dhcp_recv>:
{
 80094c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80094c8:	4bab      	ldr	r3, [pc, #684]	; (8009778 <dhcp_recv+0x2b4>)
 80094ca:	685d      	ldr	r5, [r3, #4]
{
 80094cc:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80094ce:	f8d5 9020 	ldr.w	r9, [r5, #32]
{
 80094d2:	9201      	str	r2, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	d04a      	beq.n	8009570 <dhcp_recv+0xac>
 80094da:	f899 3008 	ldrb.w	r3, [r9, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d043      	beq.n	800956a <dhcp_recv+0xa6>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80094e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80094e6:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80094e8:	b133      	cbz	r3, 80094f8 <dhcp_recv+0x34>
 80094ea:	4ba4      	ldr	r3, [pc, #656]	; (800977c <dhcp_recv+0x2b8>)
 80094ec:	49a4      	ldr	r1, [pc, #656]	; (8009780 <dhcp_recv+0x2bc>)
 80094ee:	48a5      	ldr	r0, [pc, #660]	; (8009784 <dhcp_recv+0x2c0>)
 80094f0:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 80094f4:	f003 f9be 	bl	800c874 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80094f8:	9b01      	ldr	r3, [sp, #4]
 80094fa:	895b      	ldrh	r3, [r3, #10]
 80094fc:	2b2b      	cmp	r3, #43	; 0x2b
 80094fe:	d934      	bls.n	800956a <dhcp_recv+0xa6>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009500:	7823      	ldrb	r3, [r4, #0]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d131      	bne.n	800956a <dhcp_recv+0xa6>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009506:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800950a:	2300      	movs	r3, #0
 800950c:	b2d9      	uxtb	r1, r3
 800950e:	428a      	cmp	r2, r1
 8009510:	d901      	bls.n	8009516 <dhcp_recv+0x52>
 8009512:	2b06      	cmp	r3, #6
 8009514:	d121      	bne.n	800955a <dhcp_recv+0x96>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8009516:	6860      	ldr	r0, [r4, #4]
 8009518:	f7fb f881 	bl	800461e <lwip_htonl>
 800951c:	f8d9 3000 	ldr.w	r3, [r9]
 8009520:	4298      	cmp	r0, r3
 8009522:	d122      	bne.n	800956a <dhcp_recv+0xa6>
  dhcp_clear_all_options(dhcp);
 8009524:	4b98      	ldr	r3, [pc, #608]	; (8009788 <dhcp_recv+0x2c4>)
  if (p->len < DHCP_SNAME_OFS) {
 8009526:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8009528:	2200      	movs	r2, #0
 800952a:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 800952c:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 800952e:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8009530:	292b      	cmp	r1, #43	; 0x2b
 8009532:	d91a      	bls.n	800956a <dhcp_recv+0xa6>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009534:	9901      	ldr	r1, [sp, #4]
  int parse_sname_as_options = 0;
 8009536:	9203      	str	r2, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009538:	6849      	ldr	r1, [r1, #4]
 800953a:	f8c9 1004 	str.w	r1, [r9, #4]
  options_idx_max = p->tot_len;
 800953e:	9901      	ldr	r1, [sp, #4]
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8009540:	9302      	str	r3, [sp, #8]
  options_idx_max = p->tot_len;
 8009542:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8009546:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
 800954a:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 800954c:	8973      	ldrh	r3, [r6, #10]
 800954e:	455b      	cmp	r3, fp
 8009550:	d914      	bls.n	800957c <dhcp_recv+0xb8>
  options = (u8_t*)q->payload;
 8009552:	6873      	ldr	r3, [r6, #4]
 8009554:	9304      	str	r3, [sp, #16]
 8009556:	465c      	mov	r4, fp
 8009558:	e0e7      	b.n	800972a <dhcp_recv+0x266>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800955a:	18e9      	adds	r1, r5, r3
 800955c:	3301      	adds	r3, #1
 800955e:	18e0      	adds	r0, r4, r3
 8009560:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8009564:	7ec0      	ldrb	r0, [r0, #27]
 8009566:	4288      	cmp	r0, r1
 8009568:	d0d0      	beq.n	800950c <dhcp_recv+0x48>
    dhcp->msg_in = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 8009570:	9801      	ldr	r0, [sp, #4]
 8009572:	f7fb fc8b 	bl	8004e8c <pbuf_free>
}
 8009576:	b009      	add	sp, #36	; 0x24
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = q->next;
 800957c:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 800957e:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max -= q->len;
 8009582:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx -= q->len;
 8009586:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max -= q->len;
 800958a:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 800958e:	2e00      	cmp	r6, #0
 8009590:	d1dc      	bne.n	800954c <dhcp_recv+0x88>
 8009592:	e7ea      	b.n	800956a <dhcp_recv+0xa6>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8172 	beq.w	8009880 <dhcp_recv+0x3bc>
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	e0d6      	b.n	8009750 <dhcp_recv+0x28c>
        offset--;
 80095a2:	3c01      	subs	r4, #1
        decode_len = len = 0;
 80095a4:	2700      	movs	r7, #0
        offset--;
 80095a6:	b2a4      	uxth	r4, r4
    int decode_idx = -1;
 80095a8:	f04f 38ff 	mov.w	r8, #4294967295
        decode_len = len = 0;
 80095ac:	463b      	mov	r3, r7
 80095ae:	3402      	adds	r4, #2
    offset += len + 2;
 80095b0:	fa13 f484 	uxtah	r4, r3, r4
 80095b4:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 80095b6:	b347      	cbz	r7, 800960a <dhcp_recv+0x146>
      u32_t value = 0;
 80095b8:	2300      	movs	r3, #0
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80095ba:	f1b8 0f07 	cmp.w	r8, #7
      u32_t value = 0;
 80095be:	9307      	str	r3, [sp, #28]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80095c0:	d906      	bls.n	80095d0 <dhcp_recv+0x10c>
 80095c2:	4b6e      	ldr	r3, [pc, #440]	; (800977c <dhcp_recv+0x2b8>)
 80095c4:	4971      	ldr	r1, [pc, #452]	; (800978c <dhcp_recv+0x2c8>)
 80095c6:	486f      	ldr	r0, [pc, #444]	; (8009784 <dhcp_recv+0x2c0>)
 80095c8:	f240 6236 	movw	r2, #1590	; 0x636
 80095cc:	f003 f952 	bl	800c874 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	f813 3008 	ldrb.w	r3, [r3, r8]
 80095d6:	b9c3      	cbnz	r3, 800960a <dhcp_recv+0x146>
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80095d8:	9b05      	ldr	r3, [sp, #20]
        copy_len = LWIP_MIN(decode_len, 4);
 80095da:	b2ba      	uxth	r2, r7
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80095dc:	a907      	add	r1, sp, #28
 80095de:	4630      	mov	r0, r6
 80095e0:	9205      	str	r2, [sp, #20]
 80095e2:	f7fb fef5 	bl	80053d0 <pbuf_copy_partial>
 80095e6:	9b05      	ldr	r3, [sp, #20]
 80095e8:	4283      	cmp	r3, r0
 80095ea:	d1be      	bne.n	800956a <dhcp_recv+0xa6>
        } else if (decode_len == 4) {
 80095ec:	2f04      	cmp	r7, #4
 80095ee:	f040 8088 	bne.w	8009702 <dhcp_recv+0x23e>
          value = lwip_ntohl(value);
 80095f2:	9807      	ldr	r0, [sp, #28]
 80095f4:	f7fb f813 	bl	800461e <lwip_htonl>
 80095f8:	9007      	str	r0, [sp, #28]
        dhcp_got_option(dhcp, decode_idx);
 80095fa:	9a02      	ldr	r2, [sp, #8]
 80095fc:	2301      	movs	r3, #1
 80095fe:	f802 3008 	strb.w	r3, [r2, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8009602:	4a63      	ldr	r2, [pc, #396]	; (8009790 <dhcp_recv+0x2cc>)
 8009604:	9b07      	ldr	r3, [sp, #28]
 8009606:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
    if (offset >= q->len) {
 800960a:	8973      	ldrh	r3, [r6, #10]
 800960c:	42a3      	cmp	r3, r4
 800960e:	f200 808c 	bhi.w	800972a <dhcp_recv+0x266>
      offset -= q->len;
 8009612:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8009614:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 8009618:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 800961a:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 800961e:	4554      	cmp	r4, sl
 8009620:	d37a      	bcc.n	8009718 <dhcp_recv+0x254>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009622:	9b02      	ldr	r3, [sp, #8]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f040 80c0 	bne.w	80097ac <dhcp_recv+0x2e8>
  } else if (parse_sname_as_options) {
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 80c5 	bne.w	80097be <dhcp_recv+0x2fa>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009634:	9b02      	ldr	r3, [sp, #8]
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d096      	beq.n	800956a <dhcp_recv+0xa6>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800963c:	4a54      	ldr	r2, [pc, #336]	; (8009790 <dhcp_recv+0x2cc>)
 800963e:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8009640:	2b05      	cmp	r3, #5
 8009642:	f040 80d8 	bne.w	80097f6 <dhcp_recv+0x332>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009646:	f899 3009 	ldrb.w	r3, [r9, #9]
 800964a:	2b01      	cmp	r3, #1
 800964c:	f040 80c8 	bne.w	80097e0 <dhcp_recv+0x31c>
      dhcp_handle_ack(netif);
 8009650:	6a28      	ldr	r0, [r5, #32]
 8009652:	f7ff fd73 	bl	800913c <dhcp_handle_ack.isra.1>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009656:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800965a:	071b      	lsls	r3, r3, #28
        dhcp_check(netif);
 800965c:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800965e:	f140 80c7 	bpl.w	80097f0 <dhcp_recv+0x32c>
        dhcp_check(netif);
 8009662:	f7ff fc5f 	bl	8008f24 <dhcp_check>
 8009666:	e780      	b.n	800956a <dhcp_recv+0xa6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009668:	2b04      	cmp	r3, #4
 800966a:	d02f      	beq.n	80096cc <dhcp_recv+0x208>
 800966c:	4b43      	ldr	r3, [pc, #268]	; (800977c <dhcp_recv+0x2b8>)
 800966e:	f240 52f6 	movw	r2, #1526	; 0x5f6
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009672:	4948      	ldr	r1, [pc, #288]	; (8009794 <dhcp_recv+0x2d0>)
 8009674:	e005      	b.n	8009682 <dhcp_recv+0x1be>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009676:	2b03      	cmp	r3, #3
 8009678:	d82c      	bhi.n	80096d4 <dhcp_recv+0x210>
 800967a:	4b40      	ldr	r3, [pc, #256]	; (800977c <dhcp_recv+0x2b8>)
 800967c:	4946      	ldr	r1, [pc, #280]	; (8009798 <dhcp_recv+0x2d4>)
 800967e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8009682:	4840      	ldr	r0, [pc, #256]	; (8009784 <dhcp_recv+0x2c0>)
 8009684:	f003 f8f6 	bl	800c874 <iprintf>
 8009688:	e76f      	b.n	800956a <dhcp_recv+0xa6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800968a:	2b01      	cmp	r3, #1
 800968c:	d004      	beq.n	8009698 <dhcp_recv+0x1d4>
 800968e:	4b3b      	ldr	r3, [pc, #236]	; (800977c <dhcp_recv+0x2b8>)
 8009690:	f240 6217 	movw	r2, #1559	; 0x617
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009694:	4941      	ldr	r1, [pc, #260]	; (800979c <dhcp_recv+0x2d8>)
 8009696:	e7f4      	b.n	8009682 <dhcp_recv+0x1be>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009698:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800969c:	d022      	beq.n	80096e4 <dhcp_recv+0x220>
 800969e:	4b37      	ldr	r3, [pc, #220]	; (800977c <dhcp_recv+0x2b8>)
 80096a0:	493f      	ldr	r1, [pc, #252]	; (80097a0 <dhcp_recv+0x2dc>)
 80096a2:	f240 6219 	movw	r2, #1561	; 0x619
 80096a6:	e7ec      	b.n	8009682 <dhcp_recv+0x1be>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d023      	beq.n	80096f4 <dhcp_recv+0x230>
 80096ac:	4b33      	ldr	r3, [pc, #204]	; (800977c <dhcp_recv+0x2b8>)
 80096ae:	f240 621d 	movw	r2, #1565	; 0x61d
 80096b2:	e7ef      	b.n	8009694 <dhcp_recv+0x1d0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d019      	beq.n	80096ec <dhcp_recv+0x228>
 80096b8:	4b30      	ldr	r3, [pc, #192]	; (800977c <dhcp_recv+0x2b8>)
 80096ba:	f240 6221 	movw	r2, #1569	; 0x621
 80096be:	e7d8      	b.n	8009672 <dhcp_recv+0x1ae>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d017      	beq.n	80096f4 <dhcp_recv+0x230>
 80096c4:	4b2d      	ldr	r3, [pc, #180]	; (800977c <dhcp_recv+0x2b8>)
 80096c6:	f240 6225 	movw	r2, #1573	; 0x625
 80096ca:	e7d2      	b.n	8009672 <dhcp_recv+0x1ae>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096cc:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80096ce:	f04f 0806 	mov.w	r8, #6
 80096d2:	e76c      	b.n	80095ae <dhcp_recv+0xea>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80096d4:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 80096d8:	2704      	movs	r7, #4
 80096da:	e768      	b.n	80095ae <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096dc:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80096de:	f04f 0803 	mov.w	r8, #3
 80096e2:	e764      	b.n	80095ae <dhcp_recv+0xea>
    decode_len = len;
 80096e4:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80096e6:	f04f 0800 	mov.w	r8, #0
 80096ea:	e760      	b.n	80095ae <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096ec:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80096ee:	f04f 0802 	mov.w	r8, #2
 80096f2:	e75c      	b.n	80095ae <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096f4:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 80096f6:	4698      	mov	r8, r3
 80096f8:	e759      	b.n	80095ae <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80096fa:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 80096fc:	f04f 0805 	mov.w	r8, #5
 8009700:	e755      	b.n	80095ae <dhcp_recv+0xea>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8009702:	2f01      	cmp	r7, #1
 8009704:	d004      	beq.n	8009710 <dhcp_recv+0x24c>
 8009706:	4b1d      	ldr	r3, [pc, #116]	; (800977c <dhcp_recv+0x2b8>)
 8009708:	4926      	ldr	r1, [pc, #152]	; (80097a4 <dhcp_recv+0x2e0>)
 800970a:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800970e:	e7b8      	b.n	8009682 <dhcp_recv+0x1be>
          value = ((u8_t*)&value)[0];
 8009710:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8009714:	9307      	str	r3, [sp, #28]
 8009716:	e770      	b.n	80095fa <dhcp_recv+0x136>
        q = q->next;
 8009718:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800971a:	b926      	cbnz	r6, 8009726 <dhcp_recv+0x262>
 800971c:	4b17      	ldr	r3, [pc, #92]	; (800977c <dhcp_recv+0x2b8>)
 800971e:	4922      	ldr	r1, [pc, #136]	; (80097a8 <dhcp_recv+0x2e4>)
 8009720:	f240 6254 	movw	r2, #1620	; 0x654
 8009724:	e7ad      	b.n	8009682 <dhcp_recv+0x1be>
        options = (u8_t*)q->payload;
 8009726:	6873      	ldr	r3, [r6, #4]
 8009728:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800972a:	4554      	cmp	r4, sl
 800972c:	f4bf af79 	bcs.w	8009622 <dhcp_recv+0x15e>
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	5d1a      	ldrb	r2, [r3, r4]
 8009734:	2aff      	cmp	r2, #255	; 0xff
 8009736:	f43f af74 	beq.w	8009622 <dhcp_recv+0x15e>
    u16_t val_offset = offset + 2;
 800973a:	1ca3      	adds	r3, r4, #2
 800973c:	b29b      	uxth	r3, r3
    if ((offset + 1) < q->len) {
 800973e:	8971      	ldrh	r1, [r6, #10]
    u16_t val_offset = offset + 2;
 8009740:	9305      	str	r3, [sp, #20]
    if ((offset + 1) < q->len) {
 8009742:	1c63      	adds	r3, r4, #1
 8009744:	428b      	cmp	r3, r1
 8009746:	f6bf af25 	bge.w	8009594 <dhcp_recv+0xd0>
      len = options[offset + 1];
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	4423      	add	r3, r4
 800974e:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 8009750:	2a34      	cmp	r2, #52	; 0x34
 8009752:	d09a      	beq.n	800968a <dhcp_recv+0x1c6>
 8009754:	f200 8083 	bhi.w	800985e <dhcp_recv+0x39a>
 8009758:	2a01      	cmp	r2, #1
 800975a:	d085      	beq.n	8009668 <dhcp_recv+0x1a4>
 800975c:	f4ff af21 	bcc.w	80095a2 <dhcp_recv+0xde>
 8009760:	2a03      	cmp	r2, #3
 8009762:	d088      	beq.n	8009676 <dhcp_recv+0x1b2>
 8009764:	2a33      	cmp	r2, #51	; 0x33
 8009766:	f040 809b 	bne.w	80098a0 <dhcp_recv+0x3dc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800976a:	2b04      	cmp	r3, #4
 800976c:	d0b6      	beq.n	80096dc <dhcp_recv+0x218>
 800976e:	4b03      	ldr	r3, [pc, #12]	; (800977c <dhcp_recv+0x2b8>)
 8009770:	f240 6209 	movw	r2, #1545	; 0x609
 8009774:	e77d      	b.n	8009672 <dhcp_recv+0x1ae>
 8009776:	bf00      	nop
 8009778:	20003fa0 	.word	0x20003fa0
 800977c:	0800f07a 	.word	0x0800f07a
 8009780:	0800f17d 	.word	0x0800f17d
 8009784:	0800d741 	.word	0x0800d741
 8009788:	200076e0 	.word	0x200076e0
 800978c:	0800f1cb 	.word	0x0800f1cb
 8009790:	200076e8 	.word	0x200076e8
 8009794:	0800f190 	.word	0x0800f190
 8009798:	0800f199 	.word	0x0800f199
 800979c:	0800f1ab 	.word	0x0800f1ab
 80097a0:	0800f1b4 	.word	0x0800f1b4
 80097a4:	0800f1dc 	.word	0x0800f1dc
 80097a8:	0800f1ef 	.word	0x0800f1ef
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80097ac:	4b44      	ldr	r3, [pc, #272]	; (80098c0 <dhcp_recv+0x3fc>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80097ae:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80097b0:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80097b2:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 80097b4:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80097b6:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80097b8:	d00d      	beq.n	80097d6 <dhcp_recv+0x312>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d106      	bne.n	80097cc <dhcp_recv+0x308>
    parse_sname_as_options = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80097c2:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 80097c6:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80097ca:	e6be      	b.n	800954a <dhcp_recv+0x86>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	f47f af2d 	bne.w	800962c <dhcp_recv+0x168>
      parse_sname_as_options = 1;
 80097d2:	2301      	movs	r3, #1
 80097d4:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80097d6:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80097da:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 80097de:	e6b4      	b.n	800954a <dhcp_recv+0x86>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80097e0:	3b03      	subs	r3, #3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	f63f aec1 	bhi.w	800956a <dhcp_recv+0xa6>
      dhcp_handle_ack(netif);
 80097e8:	6a28      	ldr	r0, [r5, #32]
 80097ea:	f7ff fca7 	bl	800913c <dhcp_handle_ack.isra.1>
      dhcp_bind(netif);
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff fbae 	bl	8008f50 <dhcp_bind>
 80097f4:	e6b9      	b.n	800956a <dhcp_recv+0xa6>
  else if ((msg_type == DHCP_NAK) &&
 80097f6:	2b06      	cmp	r3, #6
 80097f8:	d115      	bne.n	8009826 <dhcp_recv+0x362>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80097fa:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 80097fe:	1eda      	subs	r2, r3, #3
 8009800:	2a02      	cmp	r2, #2
 8009802:	d902      	bls.n	800980a <dhcp_recv+0x346>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009804:	2b01      	cmp	r3, #1
 8009806:	f47f aeb0 	bne.w	800956a <dhcp_recv+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800980a:	6a28      	ldr	r0, [r5, #32]
 800980c:	210c      	movs	r1, #12
 800980e:	f7ff fa17 	bl	8008c40 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8009812:	4b2c      	ldr	r3, [pc, #176]	; (80098c4 <dhcp_recv+0x400>)
 8009814:	4628      	mov	r0, r5
 8009816:	461a      	mov	r2, r3
 8009818:	4619      	mov	r1, r3
 800981a:	f7fb f9ed 	bl	8004bf8 <netif_set_addr>
  dhcp_discover(netif);
 800981e:	4628      	mov	r0, r5
 8009820:	f7ff fcf2 	bl	8009208 <dhcp_discover>
 8009824:	e6a1      	b.n	800956a <dhcp_recv+0xa6>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8009826:	2b02      	cmp	r3, #2
 8009828:	f47f ae9f 	bne.w	800956a <dhcp_recv+0xa6>
 800982c:	f899 3009 	ldrb.w	r3, [r9, #9]
 8009830:	2b06      	cmp	r3, #6
 8009832:	f47f ae9a 	bne.w	800956a <dhcp_recv+0xa6>
    dhcp->request_timeout = 0;
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800983c:	9b02      	ldr	r3, [sp, #8]
 800983e:	789b      	ldrb	r3, [r3, #2]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f43f ae92 	beq.w	800956a <dhcp_recv+0xa6>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009846:	6890      	ldr	r0, [r2, #8]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009848:	6a2c      	ldr	r4, [r5, #32]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800984a:	f7fa fee8 	bl	800461e <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800984e:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009850:	6260      	str	r0, [r4, #36]	; 0x24
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 8009856:	4628      	mov	r0, r5
 8009858:	f7ff fd34 	bl	80092c4 <dhcp_select>
 800985c:	e685      	b.n	800956a <dhcp_recv+0xa6>
    switch(op) {
 800985e:	2a36      	cmp	r2, #54	; 0x36
 8009860:	f43f af28 	beq.w	80096b4 <dhcp_recv+0x1f0>
 8009864:	f4ff af20 	bcc.w	80096a8 <dhcp_recv+0x1e4>
 8009868:	2a3a      	cmp	r2, #58	; 0x3a
 800986a:	f43f af29 	beq.w	80096c0 <dhcp_recv+0x1fc>
 800986e:	2a3b      	cmp	r2, #59	; 0x3b
 8009870:	d116      	bne.n	80098a0 <dhcp_recv+0x3dc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009872:	2b04      	cmp	r3, #4
 8009874:	f43f af41 	beq.w	80096fa <dhcp_recv+0x236>
 8009878:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <dhcp_recv+0x404>)
 800987a:	f240 6229 	movw	r2, #1577	; 0x629
 800987e:	e6f8      	b.n	8009672 <dhcp_recv+0x1ae>
    switch(op) {
 8009880:	2a34      	cmp	r2, #52	; 0x34
 8009882:	f43f af04 	beq.w	800968e <dhcp_recv+0x1ca>
 8009886:	d80f      	bhi.n	80098a8 <dhcp_recv+0x3e4>
 8009888:	2a01      	cmp	r2, #1
 800988a:	f43f aeef 	beq.w	800966c <dhcp_recv+0x1a8>
 800988e:	f4ff ae88 	bcc.w	80095a2 <dhcp_recv+0xde>
 8009892:	2a03      	cmp	r2, #3
 8009894:	f43f aef1 	beq.w	800967a <dhcp_recv+0x1b6>
 8009898:	2a33      	cmp	r2, #51	; 0x33
 800989a:	f43f af68 	beq.w	800976e <dhcp_recv+0x2aa>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800989e:	2300      	movs	r3, #0
    offset += len + 2;
 80098a0:	9a05      	ldr	r2, [sp, #20]
 80098a2:	441a      	add	r2, r3
 80098a4:	b294      	uxth	r4, r2
 80098a6:	e6b0      	b.n	800960a <dhcp_recv+0x146>
    switch(op) {
 80098a8:	2a36      	cmp	r2, #54	; 0x36
 80098aa:	f43f af05 	beq.w	80096b8 <dhcp_recv+0x1f4>
 80098ae:	f4ff aefd 	bcc.w	80096ac <dhcp_recv+0x1e8>
 80098b2:	2a3a      	cmp	r2, #58	; 0x3a
 80098b4:	f43f af06 	beq.w	80096c4 <dhcp_recv+0x200>
 80098b8:	2a3b      	cmp	r2, #59	; 0x3b
 80098ba:	d0dd      	beq.n	8009878 <dhcp_recv+0x3b4>
 80098bc:	e7ef      	b.n	800989e <dhcp_recv+0x3da>
 80098be:	bf00      	nop
 80098c0:	200076e8 	.word	0x200076e8
 80098c4:	0800f54c 	.word	0x0800f54c
 80098c8:	0800f07a 	.word	0x0800f07a

080098cc <dhcp_arp_reply>:
{
 80098cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80098ce:	4605      	mov	r5, r0
 80098d0:	b948      	cbnz	r0, 80098e6 <dhcp_arp_reply+0x1a>
 80098d2:	4b24      	ldr	r3, [pc, #144]	; (8009964 <dhcp_arp_reply+0x98>)
 80098d4:	4924      	ldr	r1, [pc, #144]	; (8009968 <dhcp_arp_reply+0x9c>)
 80098d6:	4825      	ldr	r0, [pc, #148]	; (800996c <dhcp_arp_reply+0xa0>)
 80098d8:	f240 327b 	movw	r2, #891	; 0x37b
}
 80098dc:	b003      	add	sp, #12
 80098de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80098e2:	f002 bfc7 	b.w	800c874 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80098e6:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	d039      	beq.n	8009960 <dhcp_arp_reply+0x94>
 80098ec:	7a63      	ldrb	r3, [r4, #9]
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d136      	bne.n	8009960 <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80098f2:	680a      	ldr	r2, [r1, #0]
 80098f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d132      	bne.n	8009960 <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80098fa:	210c      	movs	r1, #12
 80098fc:	4620      	mov	r0, r4
 80098fe:	f7ff f99f 	bl	8008c40 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8009902:	2204      	movs	r2, #4
 8009904:	4621      	mov	r1, r4
 8009906:	4628      	mov	r0, r5
 8009908:	f7ff fa32 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 800990c:	bb08      	cbnz	r0, 8009952 <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800990e:	2204      	movs	r2, #4
 8009910:	2132      	movs	r1, #50	; 0x32
 8009912:	4620      	mov	r0, r4
 8009914:	f7ff f9be 	bl	8008c94 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009918:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800991a:	f7fa fe80 	bl	800461e <lwip_htonl>
 800991e:	4601      	mov	r1, r0
 8009920:	4620      	mov	r0, r4
 8009922:	f7ff f9f7 	bl	8008d14 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff fbcc 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800992c:	8aa1      	ldrh	r1, [r4, #20]
 800992e:	68e0      	ldr	r0, [r4, #12]
 8009930:	31f0      	adds	r1, #240	; 0xf0
 8009932:	b289      	uxth	r1, r1
 8009934:	f7fb fbee 	bl	8005114 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <dhcp_arp_reply+0xa4>)
 800993a:	480e      	ldr	r0, [pc, #56]	; (8009974 <dhcp_arp_reply+0xa8>)
 800993c:	4a0e      	ldr	r2, [pc, #56]	; (8009978 <dhcp_arp_reply+0xac>)
 800993e:	e9cd 5300 	strd	r5, r3, [sp]
 8009942:	2343      	movs	r3, #67	; 0x43
 8009944:	68e1      	ldr	r1, [r4, #12]
 8009946:	6800      	ldr	r0, [r0, #0]
 8009948:	f7ff f890 	bl	8008a6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800994c:	4620      	mov	r0, r4
 800994e:	f7ff fc2b 	bl	80091a8 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009952:	7aa3      	ldrb	r3, [r4, #10]
 8009954:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009956:	bf1c      	itt	ne
 8009958:	3301      	addne	r3, #1
 800995a:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800995c:	2314      	movs	r3, #20
 800995e:	82e3      	strh	r3, [r4, #22]
}
 8009960:	b003      	add	sp, #12
 8009962:	bd30      	pop	{r4, r5, pc}
 8009964:	0800f07a 	.word	0x0800f07a
 8009968:	0800ee15 	.word	0x0800ee15
 800996c:	0800d741 	.word	0x0800d741
 8009970:	0800f54c 	.word	0x0800f54c
 8009974:	20003e7c 	.word	0x20003e7c
 8009978:	0800f550 	.word	0x0800f550

0800997c <dhcp_renew>:
{
 800997c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800997e:	6a04      	ldr	r4, [r0, #32]
{
 8009980:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8009982:	2105      	movs	r1, #5
 8009984:	4620      	mov	r0, r4
 8009986:	f7ff f95b 	bl	8008c40 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800998a:	2203      	movs	r2, #3
 800998c:	4621      	mov	r1, r4
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff f9ee 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009994:	4605      	mov	r5, r0
 8009996:	bb70      	cbnz	r0, 80099f6 <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009998:	2202      	movs	r2, #2
 800999a:	2139      	movs	r1, #57	; 0x39
 800999c:	4620      	mov	r0, r4
 800999e:	f7ff f979 	bl	8008c94 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80099a2:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff f953 	bl	8008c50 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80099aa:	2203      	movs	r2, #3
 80099ac:	2137      	movs	r1, #55	; 0x37
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff f970 	bl	8008c94 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80099b4:	2101      	movs	r1, #1
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff f990 	bl	8008cdc <dhcp_option_byte>
 80099bc:	2103      	movs	r1, #3
 80099be:	4620      	mov	r0, r4
 80099c0:	f7ff f98c 	bl	8008cdc <dhcp_option_byte>
 80099c4:	211c      	movs	r1, #28
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7ff f988 	bl	8008cdc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff fb79 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80099d2:	8aa1      	ldrh	r1, [r4, #20]
 80099d4:	68e0      	ldr	r0, [r4, #12]
 80099d6:	31f0      	adds	r1, #240	; 0xf0
 80099d8:	b289      	uxth	r1, r1
 80099da:	f7fb fb9b 	bl	8005114 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80099de:	4813      	ldr	r0, [pc, #76]	; (8009a2c <dhcp_renew+0xb0>)
 80099e0:	9600      	str	r6, [sp, #0]
 80099e2:	2343      	movs	r3, #67	; 0x43
 80099e4:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80099e8:	68e1      	ldr	r1, [r4, #12]
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	f7ff f8a4 	bl	8008b38 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80099f0:	4620      	mov	r0, r4
 80099f2:	f7ff fbd9 	bl	80091a8 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80099f6:	7aa3      	ldrb	r3, [r4, #10]
 80099f8:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80099fa:	bf1c      	itt	ne
 80099fc:	3301      	addne	r3, #1
 80099fe:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8009a00:	7aa3      	ldrb	r3, [r4, #10]
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	bf9f      	itttt	ls
 8009a06:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009a0a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8009a0e:	011b      	lslls	r3, r3, #4
 8009a10:	b29b      	uxthls	r3, r3
 8009a12:	bf88      	it	hi
 8009a14:	f644 6320 	movwhi	r3, #20000	; 0x4e20
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009a18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8009a1c:	4628      	mov	r0, r5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009a1e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a26:	82e3      	strh	r3, [r4, #22]
}
 8009a28:	b002      	add	sp, #8
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	20003e7c 	.word	0x20003e7c

08009a30 <dhcp_stop>:
{
 8009a30:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8009a32:	b940      	cbnz	r0, 8009a46 <dhcp_stop+0x16>
 8009a34:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <dhcp_stop+0x44>)
 8009a36:	4910      	ldr	r1, [pc, #64]	; (8009a78 <dhcp_stop+0x48>)
 8009a38:	4810      	ldr	r0, [pc, #64]	; (8009a7c <dhcp_stop+0x4c>)
 8009a3a:	f240 5242 	movw	r2, #1346	; 0x542
}
 8009a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8009a42:	f002 bf17 	b.w	800c874 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8009a46:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 8009a48:	b194      	cbz	r4, 8009a70 <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	b133      	cbz	r3, 8009a5c <dhcp_stop+0x2c>
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <dhcp_stop+0x44>)
 8009a50:	490b      	ldr	r1, [pc, #44]	; (8009a80 <dhcp_stop+0x50>)
 8009a52:	480a      	ldr	r0, [pc, #40]	; (8009a7c <dhcp_stop+0x4c>)
 8009a54:	f240 524f 	movw	r2, #1359	; 0x54f
 8009a58:	f002 ff0c 	bl	800c874 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff f8ee 	bl	8008c40 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 8009a64:	7a23      	ldrb	r3, [r4, #8]
 8009a66:	b11b      	cbz	r3, 8009a70 <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009a68:	f7ff fd0c 	bl	8009484 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	7223      	strb	r3, [r4, #8]
}
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	bf00      	nop
 8009a74:	0800f07a 	.word	0x0800f07a
 8009a78:	0800f25f 	.word	0x0800f25f
 8009a7c:	0800d741 	.word	0x0800d741
 8009a80:	0800f17d 	.word	0x0800f17d

08009a84 <dhcp_start>:
{
 8009a84:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8009a86:	4605      	mov	r5, r0
 8009a88:	b948      	cbnz	r0, 8009a9e <dhcp_start+0x1a>
 8009a8a:	4b27      	ldr	r3, [pc, #156]	; (8009b28 <dhcp_start+0xa4>)
 8009a8c:	4927      	ldr	r1, [pc, #156]	; (8009b2c <dhcp_start+0xa8>)
 8009a8e:	f240 22d6 	movw	r2, #726	; 0x2d6
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8009a92:	4827      	ldr	r0, [pc, #156]	; (8009b30 <dhcp_start+0xac>)
 8009a94:	f002 feee 	bl	800c874 <iprintf>
 8009a98:	f06f 000f 	mvn.w	r0, #15
}
 8009a9c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8009a9e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009aa2:	07db      	lsls	r3, r3, #31
 8009aa4:	d404      	bmi.n	8009ab0 <dhcp_start+0x2c>
 8009aa6:	4b20      	ldr	r3, [pc, #128]	; (8009b28 <dhcp_start+0xa4>)
 8009aa8:	4922      	ldr	r1, [pc, #136]	; (8009b34 <dhcp_start+0xb0>)
 8009aaa:	f240 22d7 	movw	r2, #727	; 0x2d7
 8009aae:	e7f0      	b.n	8009a92 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009ab0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 8009ab2:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009ab4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8009ab8:	d202      	bcs.n	8009ac0 <dhcp_start+0x3c>
    return ERR_MEM;
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	e7ed      	b.n	8009a9c <dhcp_start+0x18>
  if (dhcp == NULL) {
 8009ac0:	b9d4      	cbnz	r4, 8009af8 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8009ac2:	2040      	movs	r0, #64	; 0x40
 8009ac4:	f7fa ff3a 	bl	800493c <mem_malloc>
    if (dhcp == NULL) {
 8009ac8:	4604      	mov	r4, r0
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0f5      	beq.n	8009aba <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8009ace:	6228      	str	r0, [r5, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 8009ad0:	2240      	movs	r2, #64	; 0x40
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f002 fe0f 	bl	800c6f8 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8009ada:	f7ff fab9 	bl	8009050 <dhcp_inc_pcb_refcount>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d1eb      	bne.n	8009aba <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f7ff fb8e 	bl	8009208 <dhcp_discover>
  if (result != ERR_OK) {
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0d5      	beq.n	8009a9c <dhcp_start+0x18>
    dhcp_stop(netif);
 8009af0:	4628      	mov	r0, r5
 8009af2:	f7ff ff9d 	bl	8009a30 <dhcp_stop>
 8009af6:	e7e0      	b.n	8009aba <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8009af8:	68e3      	ldr	r3, [r4, #12]
 8009afa:	b133      	cbz	r3, 8009b0a <dhcp_start+0x86>
 8009afc:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <dhcp_start+0xa4>)
 8009afe:	490e      	ldr	r1, [pc, #56]	; (8009b38 <dhcp_start+0xb4>)
 8009b00:	480b      	ldr	r0, [pc, #44]	; (8009b30 <dhcp_start+0xac>)
 8009b02:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8009b06:	f002 feb5 	bl	800c874 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8009b0a:	6863      	ldr	r3, [r4, #4]
 8009b0c:	b133      	cbz	r3, 8009b1c <dhcp_start+0x98>
 8009b0e:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <dhcp_start+0xa4>)
 8009b10:	490a      	ldr	r1, [pc, #40]	; (8009b3c <dhcp_start+0xb8>)
 8009b12:	4807      	ldr	r0, [pc, #28]	; (8009b30 <dhcp_start+0xac>)
 8009b14:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009b18:	f002 feac 	bl	800c874 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 8009b1c:	7a23      	ldrb	r3, [r4, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0d6      	beq.n	8009ad0 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009b22:	f7ff fcaf 	bl	8009484 <dhcp_dec_pcb_refcount>
 8009b26:	e7d3      	b.n	8009ad0 <dhcp_start+0x4c>
 8009b28:	0800f07a 	.word	0x0800f07a
 8009b2c:	0800ee15 	.word	0x0800ee15
 8009b30:	0800d741 	.word	0x0800d741
 8009b34:	0800f226 	.word	0x0800f226
 8009b38:	0800f247 	.word	0x0800f247
 8009b3c:	0800f17d 	.word	0x0800f17d

08009b40 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8009b40:	b150      	cbz	r0, 8009b58 <dhcp_supplied_address+0x18>
 8009b42:	6a00      	ldr	r0, [r0, #32]
 8009b44:	b140      	cbz	r0, 8009b58 <dhcp_supplied_address+0x18>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009b46:	7a40      	ldrb	r0, [r0, #9]
 8009b48:	280a      	cmp	r0, #10
 8009b4a:	d006      	beq.n	8009b5a <dhcp_supplied_address+0x1a>
 8009b4c:	3804      	subs	r0, #4
 8009b4e:	2801      	cmp	r0, #1
 8009b50:	bf8c      	ite	hi
 8009b52:	2000      	movhi	r0, #0
 8009b54:	2001      	movls	r0, #1
 8009b56:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8009b58:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	e7fb      	b.n	8009b56 <dhcp_supplied_address+0x16>
	...

08009b60 <dhcp_release>:
{
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009b62:	6a04      	ldr	r4, [r0, #32]
{
 8009b64:	b085      	sub	sp, #20
 8009b66:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	d045      	beq.n	8009bf8 <dhcp_release+0x98>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8009b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6e:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8009b70:	f7ff ffe6 	bl	8009b40 <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8009b74:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8009b76:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff f861 	bl	8008c40 <dhcp_set_state>
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8009b84:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009b88:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8009b8c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8009b90:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!is_dhcp_supplied_address) {
 8009b92:	b375      	cbz	r5, 8009bf2 <dhcp_release+0x92>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8009b94:	2207      	movs	r2, #7
 8009b96:	4621      	mov	r1, r4
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7ff f8e9 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	bb08      	cbnz	r0, 8009be6 <dhcp_release+0x86>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8009ba2:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	2136      	movs	r1, #54	; 0x36
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f7ff f873 	bl	8008c94 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8009bae:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 8009bb2:	f7fa fd34 	bl	800461e <lwip_htonl>
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff f8ab 	bl	8008d14 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f7ff fa80 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009bc4:	8aa1      	ldrh	r1, [r4, #20]
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	31f0      	adds	r1, #240	; 0xf0
 8009bca:	b289      	uxth	r1, r1
 8009bcc:	f7fb faa2 	bl	8005114 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8009bd0:	480b      	ldr	r0, [pc, #44]	; (8009c00 <dhcp_release+0xa0>)
 8009bd2:	9600      	str	r6, [sp, #0]
 8009bd4:	2343      	movs	r3, #67	; 0x43
 8009bd6:	463a      	mov	r2, r7
 8009bd8:	68e1      	ldr	r1, [r4, #12]
 8009bda:	6800      	ldr	r0, [r0, #0]
 8009bdc:	f7fe ffac 	bl	8008b38 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff fae1 	bl	80091a8 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8009be6:	4b07      	ldr	r3, [pc, #28]	; (8009c04 <dhcp_release+0xa4>)
 8009be8:	4630      	mov	r0, r6
 8009bea:	461a      	mov	r2, r3
 8009bec:	4619      	mov	r1, r3
 8009bee:	f7fb f803 	bl	8004bf8 <netif_set_addr>
}
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	b005      	add	sp, #20
 8009bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 8009bf8:	f06f 050f 	mvn.w	r5, #15
 8009bfc:	e7f9      	b.n	8009bf2 <dhcp_release+0x92>
 8009bfe:	bf00      	nop
 8009c00:	20003e7c 	.word	0x20003e7c
 8009c04:	0800f54c 	.word	0x0800f54c

08009c08 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 8009c08:	4b51      	ldr	r3, [pc, #324]	; (8009d50 <dhcp_coarse_tmr+0x148>)
{
 8009c0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 8009c0e:	681d      	ldr	r5, [r3, #0]
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009c10:	4f50      	ldr	r7, [pc, #320]	; (8009d54 <dhcp_coarse_tmr+0x14c>)
 8009c12:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8009d58 <dhcp_coarse_tmr+0x150>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009c16:	f240 2619 	movw	r6, #537	; 0x219
  while (netif != NULL) {
 8009c1a:	b915      	cbnz	r5, 8009c22 <dhcp_coarse_tmr+0x1a>
}
 8009c1c:	b003      	add	sp, #12
 8009c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009c22:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8009c24:	b17c      	cbz	r4, 8009c46 <dhcp_coarse_tmr+0x3e>
 8009c26:	7a63      	ldrb	r3, [r4, #9]
 8009c28:	b16b      	cbz	r3, 8009c46 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8009c2a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8009c2c:	b169      	cbz	r1, 8009c4a <dhcp_coarse_tmr+0x42>
 8009c2e:	8c22      	ldrh	r2, [r4, #32]
 8009c30:	3201      	adds	r2, #1
 8009c32:	b292      	uxth	r2, r2
 8009c34:	4291      	cmp	r1, r2
 8009c36:	8422      	strh	r2, [r4, #32]
 8009c38:	d107      	bne.n	8009c4a <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f7ff ff90 	bl	8009b60 <dhcp_release>
        dhcp_discover(netif);
 8009c40:	4628      	mov	r0, r5
 8009c42:	f7ff fae1 	bl	8009208 <dhcp_discover>
    netif = netif->next;
 8009c46:	682d      	ldr	r5, [r5, #0]
 8009c48:	e7e7      	b.n	8009c1a <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009c4a:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 8009c4e:	f1b9 0f00 	cmp.w	r9, #0
 8009c52:	d064      	beq.n	8009d1e <dhcp_coarse_tmr+0x116>
 8009c54:	f109 32ff 	add.w	r2, r9, #4294967295
 8009c58:	f1b9 0f01 	cmp.w	r9, #1
 8009c5c:	83e2      	strh	r2, [r4, #30]
 8009c5e:	d15e      	bne.n	8009d1e <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009c60:	3b01      	subs	r3, #1
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b09      	cmp	r3, #9
 8009c66:	d8ee      	bhi.n	8009c46 <dhcp_coarse_tmr+0x3e>
 8009c68:	fa26 f303 	lsr.w	r3, r6, r3
 8009c6c:	07db      	lsls	r3, r3, #31
 8009c6e:	d5ea      	bpl.n	8009c46 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8009c70:	2104      	movs	r1, #4
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7fe ffe4 	bl	8008c40 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009c78:	2203      	movs	r2, #3
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f7ff f877 	bl	8008d70 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009c82:	bb60      	cbnz	r0, 8009cde <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009c84:	2202      	movs	r2, #2
 8009c86:	2139      	movs	r1, #57	; 0x39
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff f803 	bl	8008c94 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009c8e:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7fe ffdd 	bl	8008c50 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009c96:	2203      	movs	r2, #3
 8009c98:	2137      	movs	r1, #55	; 0x37
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7fe fffa 	bl	8008c94 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7ff f81a 	bl	8008cdc <dhcp_option_byte>
 8009ca8:	2103      	movs	r1, #3
 8009caa:	4620      	mov	r0, r4
 8009cac:	f7ff f816 	bl	8008cdc <dhcp_option_byte>
 8009cb0:	211c      	movs	r1, #28
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7ff f812 	bl	8008cdc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f7ff fa03 	bl	80090c4 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009cbe:	8aa1      	ldrh	r1, [r4, #20]
 8009cc0:	68e0      	ldr	r0, [r4, #12]
 8009cc2:	31f0      	adds	r1, #240	; 0xf0
 8009cc4:	b289      	uxth	r1, r1
 8009cc6:	f7fb fa25 	bl	8005114 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009cca:	9500      	str	r5, [sp, #0]
 8009ccc:	2343      	movs	r3, #67	; 0x43
 8009cce:	4642      	mov	r2, r8
 8009cd0:	68e1      	ldr	r1, [r4, #12]
 8009cd2:	6838      	ldr	r0, [r7, #0]
 8009cd4:	f7fe ff30 	bl	8008b38 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff fa65 	bl	80091a8 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009cde:	7aa3      	ldrb	r3, [r4, #10]
 8009ce0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009ce2:	bf1c      	itt	ne
 8009ce4:	3301      	addne	r3, #1
 8009ce6:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009ce8:	7aa3      	ldrb	r3, [r4, #10]
 8009cea:	2b09      	cmp	r3, #9
 8009cec:	bf9f      	itttt	ls
 8009cee:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009cf2:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8009cf6:	00db      	lslls	r3, r3, #3
 8009cf8:	b29b      	uxthls	r3, r3
 8009cfa:	bf88      	it	hi
 8009cfc:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009d00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009d04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009d08:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009d0c:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009d0e:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009d10:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	dd96      	ble.n	8009c46 <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8009d18:	105b      	asrs	r3, r3, #1
 8009d1a:	83e3      	strh	r3, [r4, #30]
 8009d1c:	e793      	b.n	8009c46 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009d1e:	8ba2      	ldrh	r2, [r4, #28]
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d090      	beq.n	8009c46 <dhcp_coarse_tmr+0x3e>
 8009d24:	1e51      	subs	r1, r2, #1
 8009d26:	2a01      	cmp	r2, #1
 8009d28:	83a1      	strh	r1, [r4, #28]
 8009d2a:	d18c      	bne.n	8009c46 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009d2c:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8009d30:	2a01      	cmp	r2, #1
 8009d32:	d001      	beq.n	8009d38 <dhcp_coarse_tmr+0x130>
 8009d34:	2b0a      	cmp	r3, #10
 8009d36:	d186      	bne.n	8009c46 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f7ff fe1f 	bl	800997c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009d3e:	8b63      	ldrh	r3, [r4, #26]
 8009d40:	8c22      	ldrh	r2, [r4, #32]
 8009d42:	1a9b      	subs	r3, r3, r2
 8009d44:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009d46:	bfc4      	itt	gt
 8009d48:	105b      	asrgt	r3, r3, #1
 8009d4a:	83a3      	strhgt	r3, [r4, #28]
 8009d4c:	e77b      	b.n	8009c46 <dhcp_coarse_tmr+0x3e>
 8009d4e:	bf00      	nop
 8009d50:	200076b4 	.word	0x200076b4
 8009d54:	20003e7c 	.word	0x20003e7c
 8009d58:	0800f550 	.word	0x0800f550

08009d5c <dhcp_fine_tmr>:
{
 8009d5c:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 8009d5e:	4b1d      	ldr	r3, [pc, #116]	; (8009dd4 <dhcp_fine_tmr+0x78>)
 8009d60:	681c      	ldr	r4, [r3, #0]
        dhcp->request_timeout--;
 8009d62:	2500      	movs	r5, #0
  while (netif != NULL) {
 8009d64:	b904      	cbnz	r4, 8009d68 <dhcp_fine_tmr+0xc>
}
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009d68:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 8009d6a:	b123      	cbz	r3, 8009d76 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8009d6c:	8ada      	ldrh	r2, [r3, #22]
 8009d6e:	2a01      	cmp	r2, #1
 8009d70:	d903      	bls.n	8009d7a <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8009d72:	3a01      	subs	r2, #1
 8009d74:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 8009d76:	6824      	ldr	r4, [r4, #0]
 8009d78:	e7f4      	b.n	8009d64 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 8009d7a:	d1fc      	bne.n	8009d76 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009d7c:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 8009d7e:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009d80:	2a0c      	cmp	r2, #12
 8009d82:	d001      	beq.n	8009d88 <dhcp_fine_tmr+0x2c>
 8009d84:	2a06      	cmp	r2, #6
 8009d86:	d103      	bne.n	8009d90 <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8009d88:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8009d8a:	f7ff fa3d 	bl	8009208 <dhcp_discover>
 8009d8e:	e7f2      	b.n	8009d76 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009d90:	2a01      	cmp	r2, #1
 8009d92:	d109      	bne.n	8009da8 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 8009d94:	7a9b      	ldrb	r3, [r3, #10]
 8009d96:	2b05      	cmp	r3, #5
      dhcp_select(netif);
 8009d98:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8009d9a:	d802      	bhi.n	8009da2 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8009d9c:	f7ff fa92 	bl	80092c4 <dhcp_select>
 8009da0:	e7e9      	b.n	8009d76 <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 8009da2:	f7ff fedd 	bl	8009b60 <dhcp_release>
 8009da6:	e7ef      	b.n	8009d88 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009da8:	2a08      	cmp	r2, #8
 8009daa:	d109      	bne.n	8009dc0 <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 8009dac:	7a9b      	ldrb	r3, [r3, #10]
 8009dae:	2b01      	cmp	r3, #1
      dhcp_check(netif);
 8009db0:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8009db2:	d802      	bhi.n	8009dba <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 8009db4:	f7ff f8b6 	bl	8008f24 <dhcp_check>
 8009db8:	e7dd      	b.n	8009d76 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8009dba:	f7ff f8c9 	bl	8008f50 <dhcp_bind>
 8009dbe:	e7da      	b.n	8009d76 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8009dc0:	2a03      	cmp	r2, #3
 8009dc2:	d1d8      	bne.n	8009d76 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8009dc4:	7a9b      	ldrb	r3, [r3, #10]
 8009dc6:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
 8009dc8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8009dca:	d8de      	bhi.n	8009d8a <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8009dcc:	f7ff faf0 	bl	80093b0 <dhcp_reboot>
 8009dd0:	e7d1      	b.n	8009d76 <dhcp_fine_tmr+0x1a>
 8009dd2:	bf00      	nop
 8009dd4:	200076b4 	.word	0x200076b4

08009dd8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009dd8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009dda:	2618      	movs	r6, #24
 8009ddc:	4c07      	ldr	r4, [pc, #28]	; (8009dfc <etharp_free_entry+0x24>)
 8009dde:	4346      	muls	r6, r0
{
 8009de0:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8009de2:	59a0      	ldr	r0, [r4, r6]
 8009de4:	b118      	cbz	r0, 8009dee <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009de6:	f7fb f851 	bl	8004e8c <pbuf_free>
    arp_table[i].q = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009dee:	2318      	movs	r3, #24
 8009df0:	fb03 4405 	mla	r4, r3, r5, r4
 8009df4:	2300      	movs	r3, #0
 8009df6:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009df8:	bd70      	pop	{r4, r5, r6, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20003e88 	.word	0x20003e88

08009e00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009e00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009e06:	4689      	mov	r9, r1
 8009e08:	4692      	mov	sl, r2
 8009e0a:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	b930      	cbnz	r0, 8009e1e <etharp_raw+0x1e>
 8009e10:	4b2c      	ldr	r3, [pc, #176]	; (8009ec4 <etharp_raw+0xc4>)
 8009e12:	492d      	ldr	r1, [pc, #180]	; (8009ec8 <etharp_raw+0xc8>)
 8009e14:	482d      	ldr	r0, [pc, #180]	; (8009ecc <etharp_raw+0xcc>)
 8009e16:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8009e1a:	f002 fd2b 	bl	800c874 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009e1e:	2200      	movs	r2, #0
 8009e20:	211c      	movs	r1, #28
 8009e22:	2002      	movs	r0, #2
 8009e24:	f7fb f89a 	bl	8004f5c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009e28:	4606      	mov	r6, r0
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d047      	beq.n	8009ebe <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009e2e:	8943      	ldrh	r3, [r0, #10]
 8009e30:	2b1b      	cmp	r3, #27
 8009e32:	d806      	bhi.n	8009e42 <etharp_raw+0x42>
 8009e34:	4b23      	ldr	r3, [pc, #140]	; (8009ec4 <etharp_raw+0xc4>)
 8009e36:	4926      	ldr	r1, [pc, #152]	; (8009ed0 <etharp_raw+0xd0>)
 8009e38:	4824      	ldr	r0, [pc, #144]	; (8009ecc <etharp_raw+0xcc>)
 8009e3a:	f240 4264 	movw	r2, #1124	; 0x464
 8009e3e:	f002 fd19 	bl	800c874 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009e42:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8009e46:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8009e48:	f7fa fbe6 	bl	8004618 <lwip_htons>
 8009e4c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e52:	2b06      	cmp	r3, #6
 8009e54:	d006      	beq.n	8009e64 <etharp_raw+0x64>
 8009e56:	4b1b      	ldr	r3, [pc, #108]	; (8009ec4 <etharp_raw+0xc4>)
 8009e58:	491e      	ldr	r1, [pc, #120]	; (8009ed4 <etharp_raw+0xd4>)
 8009e5a:	481c      	ldr	r0, [pc, #112]	; (8009ecc <etharp_raw+0xcc>)
 8009e5c:	f240 426b 	movw	r2, #1131	; 0x46b
 8009e60:	f002 fd08 	bl	800c874 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009e64:	f8d8 3000 	ldr.w	r3, [r8]
 8009e68:	60a3      	str	r3, [r4, #8]
 8009e6a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009e6e:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	f8c4 3012 	str.w	r3, [r4, #18]
 8009e76:	88ab      	ldrh	r3, [r5, #4]
 8009e78:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8009e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009e88:	2301      	movs	r3, #1
 8009e8a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009e90:	2306      	movs	r3, #6
 8009e92:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009e94:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009e96:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8009e98:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009e9a:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009e9e:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009ea0:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009ea2:	464a      	mov	r2, r9
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4653      	mov	r3, sl
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f001 f99c 	bl	800b1e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f7fa ffeb 	bl	8004e8c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8009eb6:	4628      	mov	r0, r5
}
 8009eb8:	b002      	add	sp, #8
 8009eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec2:	e7f9      	b.n	8009eb8 <etharp_raw+0xb8>
 8009ec4:	0800f36d 	.word	0x0800f36d
 8009ec8:	0800ee15 	.word	0x0800ee15
 8009ecc:	0800d741 	.word	0x0800d741
 8009ed0:	0800f3a4 	.word	0x0800f3a4
 8009ed4:	0800f3d5 	.word	0x0800f3d5

08009ed8 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8009ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	4b3e      	ldr	r3, [pc, #248]	; (8009fd8 <etharp_find_entry.isra.0+0x100>)
 8009ede:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8009ee0:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4696      	mov	lr, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009eea:	4682      	mov	sl, r0
 8009eec:	4681      	mov	r9, r0
 8009eee:	4680      	mov	r8, r0
  s8_t empty = ARP_TABLE_SIZE;
 8009ef0:	4694      	mov	ip, r2
 8009ef2:	461d      	mov	r5, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009ef4:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 8009ef8:	f893 b014 	ldrb.w	fp, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009efc:	d12a      	bne.n	8009f54 <etharp_find_entry.isra.0+0x7c>
 8009efe:	f1bb 0f00 	cmp.w	fp, #0
 8009f02:	d12a      	bne.n	8009f5a <etharp_find_entry.isra.0+0x82>
      empty = i;
 8009f04:	fa4f fc80 	sxtb.w	ip, r0
 8009f08:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009f0a:	280a      	cmp	r0, #10
 8009f0c:	f103 0318 	add.w	r3, r3, #24
 8009f10:	d1f0      	bne.n	8009ef4 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d15b      	bne.n	8009fd0 <etharp_find_entry.isra.0+0xf8>
 8009f18:	f1bc 0f0a 	cmp.w	ip, #10
 8009f1c:	d03c      	beq.n	8009f98 <etharp_find_entry.isra.0+0xc0>
    i = empty;
 8009f1e:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009f22:	2318      	movs	r3, #24
 8009f24:	fb03 5306 	mla	r3, r3, r6, r5
 8009f28:	7d1b      	ldrb	r3, [r3, #20]
 8009f2a:	b133      	cbz	r3, 8009f3a <etharp_find_entry.isra.0+0x62>
 8009f2c:	4b2b      	ldr	r3, [pc, #172]	; (8009fdc <etharp_find_entry.isra.0+0x104>)
 8009f2e:	492c      	ldr	r1, [pc, #176]	; (8009fe0 <etharp_find_entry.isra.0+0x108>)
 8009f30:	482c      	ldr	r0, [pc, #176]	; (8009fe4 <etharp_find_entry.isra.0+0x10c>)
 8009f32:	f240 1287 	movw	r2, #391	; 0x187
 8009f36:	f002 fc9d 	bl	800c874 <iprintf>
  if (ipaddr != NULL) {
 8009f3a:	b124      	cbz	r4, 8009f46 <etharp_find_entry.isra.0+0x6e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009f3c:	2318      	movs	r3, #24
 8009f3e:	fb03 5306 	mla	r3, r3, r6, r5
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8009f46:	2318      	movs	r3, #24
 8009f48:	fb03 5506 	mla	r5, r3, r6, r5
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	826b      	strh	r3, [r5, #18]
  return (err_t)i;
 8009f50:	b270      	sxtb	r0, r6
 8009f52:	e008      	b.n	8009f66 <etharp_find_entry.isra.0+0x8e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009f54:	f1bb 0f00 	cmp.w	fp, #0
 8009f58:	d0d6      	beq.n	8009f08 <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009f5a:	b13c      	cbz	r4, 8009f6c <etharp_find_entry.isra.0+0x94>
 8009f5c:	6827      	ldr	r7, [r4, #0]
 8009f5e:	685e      	ldr	r6, [r3, #4]
 8009f60:	42b7      	cmp	r7, r6
 8009f62:	d103      	bne.n	8009f6c <etharp_find_entry.isra.0+0x94>
        return i;
 8009f64:	b240      	sxtb	r0, r0
}
 8009f66:	b003      	add	sp, #12
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 8009f6c:	f1bb 0f01 	cmp.w	fp, #1
 8009f70:	8a5f      	ldrh	r7, [r3, #18]
 8009f72:	d10c      	bne.n	8009f8e <etharp_find_entry.isra.0+0xb6>
        if (arp_table[i].q != NULL) {
 8009f74:	681e      	ldr	r6, [r3, #0]
 8009f76:	b126      	cbz	r6, 8009f82 <etharp_find_entry.isra.0+0xaa>
          if (arp_table[i].ctime >= age_queue) {
 8009f78:	4547      	cmp	r7, r8
 8009f7a:	d3c5      	bcc.n	8009f08 <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 8009f7c:	b242      	sxtb	r2, r0
 8009f7e:	46b8      	mov	r8, r7
 8009f80:	e7c2      	b.n	8009f08 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 8009f82:	454f      	cmp	r7, r9
 8009f84:	d3c0      	bcc.n	8009f08 <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 8009f86:	fa4f fe80 	sxtb.w	lr, r0
 8009f8a:	46b9      	mov	r9, r7
 8009f8c:	e7bc      	b.n	8009f08 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 8009f8e:	4557      	cmp	r7, sl
            old_stable = i;
 8009f90:	bf24      	itt	cs
 8009f92:	b241      	sxtbcs	r1, r0
 8009f94:	46ba      	movcs	sl, r7
 8009f96:	e7b7      	b.n	8009f08 <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 8009f98:	290a      	cmp	r1, #10
 8009f9a:	d00f      	beq.n	8009fbc <etharp_find_entry.isra.0+0xe4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009f9c:	2318      	movs	r3, #24
      i = old_stable;
 8009f9e:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009fa0:	4359      	muls	r1, r3
 8009fa2:	586b      	ldr	r3, [r5, r1]
 8009fa4:	b133      	cbz	r3, 8009fb4 <etharp_find_entry.isra.0+0xdc>
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <etharp_find_entry.isra.0+0x104>)
 8009fa8:	490f      	ldr	r1, [pc, #60]	; (8009fe8 <etharp_find_entry.isra.0+0x110>)
 8009faa:	480e      	ldr	r0, [pc, #56]	; (8009fe4 <etharp_find_entry.isra.0+0x10c>)
 8009fac:	f240 126f 	movw	r2, #367	; 0x16f
 8009fb0:	f002 fc60 	bl	800c874 <iprintf>
    etharp_free_entry(i);
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ff0f 	bl	8009dd8 <etharp_free_entry>
 8009fba:	e7b2      	b.n	8009f22 <etharp_find_entry.isra.0+0x4a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009fbc:	f1be 0f0a 	cmp.w	lr, #10
 8009fc0:	d002      	beq.n	8009fc8 <etharp_find_entry.isra.0+0xf0>
      i = old_pending;
 8009fc2:	fa5f f68e 	uxtb.w	r6, lr
 8009fc6:	e7f5      	b.n	8009fb4 <etharp_find_entry.isra.0+0xdc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009fc8:	2a0a      	cmp	r2, #10
 8009fca:	d001      	beq.n	8009fd0 <etharp_find_entry.isra.0+0xf8>
      i = old_queue;
 8009fcc:	b2d6      	uxtb	r6, r2
 8009fce:	e7f1      	b.n	8009fb4 <etharp_find_entry.isra.0+0xdc>
    return (s8_t)ERR_MEM;
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	e7c7      	b.n	8009f66 <etharp_find_entry.isra.0+0x8e>
 8009fd6:	bf00      	nop
 8009fd8:	20003e88 	.word	0x20003e88
 8009fdc:	0800f36d 	.word	0x0800f36d
 8009fe0:	0800f28f 	.word	0x0800f28f
 8009fe4:	0800d741 	.word	0x0800d741
 8009fe8:	0800f278 	.word	0x0800f278

08009fec <etharp_cleanup_netif>:
{
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	4e09      	ldr	r6, [pc, #36]	; (800a014 <etharp_cleanup_netif+0x28>)
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	2400      	movs	r4, #0
 8009ff4:	2718      	movs	r7, #24
 8009ff6:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009ffa:	7d1a      	ldrb	r2, [r3, #20]
 8009ffc:	b12a      	cbz	r2, 800a00a <etharp_cleanup_netif+0x1e>
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	42ab      	cmp	r3, r5
 800a002:	d102      	bne.n	800a00a <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 800a004:	4620      	mov	r0, r4
 800a006:	f7ff fee7 	bl	8009dd8 <etharp_free_entry>
 800a00a:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a00c:	2c0a      	cmp	r4, #10
 800a00e:	d1f2      	bne.n	8009ff6 <etharp_cleanup_netif+0xa>
}
 800a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a012:	bf00      	nop
 800a014:	20003e88 	.word	0x20003e88

0800a018 <etharp_input>:
{
 800a018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	4680      	mov	r8, r0
 800a01e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a020:	460c      	mov	r4, r1
 800a022:	b949      	cbnz	r1, 800a038 <etharp_input+0x20>
 800a024:	4b49      	ldr	r3, [pc, #292]	; (800a14c <etharp_input+0x134>)
 800a026:	494a      	ldr	r1, [pc, #296]	; (800a150 <etharp_input+0x138>)
 800a028:	484a      	ldr	r0, [pc, #296]	; (800a154 <etharp_input+0x13c>)
 800a02a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a02e:	f002 fc21 	bl	800c874 <iprintf>
}
 800a032:	b006      	add	sp, #24
 800a034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800a038:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a03a:	8833      	ldrh	r3, [r6, #0]
 800a03c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a040:	d108      	bne.n	800a054 <etharp_input+0x3c>
 800a042:	7933      	ldrb	r3, [r6, #4]
 800a044:	2b06      	cmp	r3, #6
 800a046:	d105      	bne.n	800a054 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a048:	7973      	ldrb	r3, [r6, #5]
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	d102      	bne.n	800a054 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a04e:	8873      	ldrh	r3, [r6, #2]
 800a050:	2b08      	cmp	r3, #8
 800a052:	d003      	beq.n	800a05c <etharp_input+0x44>
  pbuf_free(p);
 800a054:	4640      	mov	r0, r8
 800a056:	f7fa ff19 	bl	8004e8c <pbuf_free>
 800a05a:	e7ea      	b.n	800a032 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a05c:	684d      	ldr	r5, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a05e:	f8d6 300e 	ldr.w	r3, [r6, #14]
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	f106 0708 	add.w	r7, r6, #8
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a068:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a06a:	b115      	cbz	r5, 800a072 <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a06c:	429d      	cmp	r5, r3
 800a06e:	d059      	beq.n	800a124 <etharp_input+0x10c>
    for_us = 0;
 800a070:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a072:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a076:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a07a:	2b06      	cmp	r3, #6
 800a07c:	d006      	beq.n	800a08c <etharp_input+0x74>
 800a07e:	4b33      	ldr	r3, [pc, #204]	; (800a14c <etharp_input+0x134>)
 800a080:	4935      	ldr	r1, [pc, #212]	; (800a158 <etharp_input+0x140>)
 800a082:	4834      	ldr	r0, [pc, #208]	; (800a154 <etharp_input+0x13c>)
 800a084:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a088:	f002 fbf4 	bl	800c874 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800a08c:	9805      	ldr	r0, [sp, #20]
 800a08e:	2800      	cmp	r0, #0
 800a090:	d03c      	beq.n	800a10c <etharp_input+0xf4>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a092:	4621      	mov	r1, r4
 800a094:	f000 fca7 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800a098:	4682      	mov	sl, r0
 800a09a:	bbb8      	cbnz	r0, 800a10c <etharp_input+0xf4>
      ip4_addr_ismulticast(ipaddr)) {
 800a09c:	9b05      	ldr	r3, [sp, #20]
 800a09e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a0a2:	2be0      	cmp	r3, #224	; 0xe0
 800a0a4:	d032      	beq.n	800a10c <etharp_input+0xf4>
  i = etharp_find_entry(ipaddr, flags, netif);
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	a805      	add	r0, sp, #20
 800a0aa:	f7ff ff15 	bl	8009ed8 <etharp_find_entry.isra.0>
  if (i < 0) {
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	db2c      	blt.n	800a10c <etharp_input+0xf4>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a0b2:	4b2a      	ldr	r3, [pc, #168]	; (800a15c <etharp_input+0x144>)
 800a0b4:	2218      	movs	r2, #24
 800a0b6:	fb02 f100 	mul.w	r1, r2, r0
 800a0ba:	eb03 0c01 	add.w	ip, r3, r1
 800a0be:	f04f 0e02 	mov.w	lr, #2
 800a0c2:	f88c e014 	strb.w	lr, [ip, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a0c6:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 800a0ca:	f8cc 4008 	str.w	r4, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a0ce:	fb12 e200 	smlabb	r2, r2, r0, lr
 800a0d2:	6838      	ldr	r0, [r7, #0]
 800a0d4:	5098      	str	r0, [r3, r2]
 800a0d6:	eb03 0e02 	add.w	lr, r3, r2
 800a0da:	88ba      	ldrh	r2, [r7, #4]
 800a0dc:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 800a0e0:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 800a0e4:	f8ac a012 	strh.w	sl, [ip, #18]
  if (arp_table[i].q != NULL) {
 800a0e8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ec:	d00e      	beq.n	800a10c <etharp_input+0xf4>
    arp_table[i].q = NULL;
 800a0ee:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a0f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	4649      	mov	r1, r9
 800a100:	4620      	mov	r0, r4
 800a102:	f001 f871 	bl	800b1e8 <ethernet_output>
    pbuf_free(p);
 800a106:	4648      	mov	r0, r9
 800a108:	f7fa fec0 	bl	8004e8c <pbuf_free>
  switch (hdr->opcode) {
 800a10c:	88f3      	ldrh	r3, [r6, #6]
 800a10e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a112:	d00a      	beq.n	800a12a <etharp_input+0x112>
 800a114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a118:	d19c      	bne.n	800a054 <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 800a11a:	a905      	add	r1, sp, #20
 800a11c:	4620      	mov	r0, r4
 800a11e:	f7ff fbd5 	bl	80098cc <dhcp_arp_reply>
    break;
 800a122:	e797      	b.n	800a054 <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a124:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a126:	46a9      	mov	r9, r5
 800a128:	e7a5      	b.n	800a076 <etharp_input+0x5e>
    if (for_us) {
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	d092      	beq.n	800a054 <etharp_input+0x3c>
      etharp_raw(netif,
 800a12e:	2202      	movs	r2, #2
 800a130:	9203      	str	r2, [sp, #12]
 800a132:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a134:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 800a138:	e9cd 7201 	strd	r7, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a13c:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800a13e:	9200      	str	r2, [sp, #0]
 800a140:	4619      	mov	r1, r3
 800a142:	463a      	mov	r2, r7
 800a144:	4620      	mov	r0, r4
 800a146:	f7ff fe5b 	bl	8009e00 <etharp_raw>
 800a14a:	e783      	b.n	800a054 <etharp_input+0x3c>
 800a14c:	0800f36d 	.word	0x0800f36d
 800a150:	0800ee15 	.word	0x0800ee15
 800a154:	0800d741 	.word	0x0800d741
 800a158:	0800f2d7 	.word	0x0800f2d7
 800a15c:	20003e88 	.word	0x20003e88

0800a160 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a162:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a164:	2401      	movs	r4, #1
 800a166:	f100 0329 	add.w	r3, r0, #41	; 0x29
 800a16a:	e9cd 1402 	strd	r1, r4, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a16e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a170:	4904      	ldr	r1, [pc, #16]	; (800a184 <etharp_request+0x24>)
 800a172:	9101      	str	r1, [sp, #4]
 800a174:	9200      	str	r2, [sp, #0]
 800a176:	4619      	mov	r1, r3
 800a178:	4a03      	ldr	r2, [pc, #12]	; (800a188 <etharp_request+0x28>)
 800a17a:	f7ff fe41 	bl	8009e00 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800a17e:	b004      	add	sp, #16
 800a180:	bd10      	pop	{r4, pc}
 800a182:	bf00      	nop
 800a184:	0800f759 	.word	0x0800f759
 800a188:	0800f6ed 	.word	0x0800f6ed

0800a18c <etharp_tmr>:
{
 800a18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a190:	4c15      	ldr	r4, [pc, #84]	; (800a1e8 <etharp_tmr+0x5c>)
 800a192:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a194:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a196:	2704      	movs	r7, #4
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a198:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 800a19c:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 800a19e:	b16a      	cbz	r2, 800a1bc <etharp_tmr+0x30>
      arp_table[i].ctime++;
 800a1a0:	8963      	ldrh	r3, [r4, #10]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a1a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800a1aa:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a1ac:	d203      	bcs.n	800a1b6 <etharp_tmr+0x2a>
 800a1ae:	2a01      	cmp	r2, #1
 800a1b0:	d10b      	bne.n	800a1ca <etharp_tmr+0x3e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	d90d      	bls.n	800a1d2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f7ff fe0e 	bl	8009dd8 <etharp_free_entry>
 800a1bc:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a1be:	2d0a      	cmp	r5, #10
 800a1c0:	f104 0418 	add.w	r4, r4, #24
 800a1c4:	d1ea      	bne.n	800a19c <etharp_tmr+0x10>
}
 800a1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a1ca:	2a03      	cmp	r2, #3
 800a1cc:	d108      	bne.n	800a1e0 <etharp_tmr+0x54>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a1ce:	7327      	strb	r7, [r4, #12]
 800a1d0:	e7f4      	b.n	800a1bc <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a1d2:	2118      	movs	r1, #24
 800a1d4:	fb01 8105 	mla	r1, r1, r5, r8
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	f7ff ffc1 	bl	800a160 <etharp_request>
 800a1de:	e7ed      	b.n	800a1bc <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a1e0:	2a04      	cmp	r2, #4
 800a1e2:	d1eb      	bne.n	800a1bc <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a1e4:	7326      	strb	r6, [r4, #12]
 800a1e6:	e7e9      	b.n	800a1bc <etharp_tmr+0x30>
 800a1e8:	20003e90 	.word	0x20003e90

0800a1ec <etharp_output_to_arp_index>:
{
 800a1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a1f0:	4d25      	ldr	r5, [pc, #148]	; (800a288 <etharp_output_to_arp_index+0x9c>)
 800a1f2:	2318      	movs	r3, #24
 800a1f4:	fb03 5302 	mla	r3, r3, r2, r5
{
 800a1f8:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a1fa:	7d1b      	ldrb	r3, [r3, #20]
 800a1fc:	2b01      	cmp	r3, #1
{
 800a1fe:	4606      	mov	r6, r0
 800a200:	4689      	mov	r9, r1
 800a202:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a204:	d806      	bhi.n	800a214 <etharp_output_to_arp_index+0x28>
 800a206:	4b21      	ldr	r3, [pc, #132]	; (800a28c <etharp_output_to_arp_index+0xa0>)
 800a208:	4921      	ldr	r1, [pc, #132]	; (800a290 <etharp_output_to_arp_index+0xa4>)
 800a20a:	4822      	ldr	r0, [pc, #136]	; (800a294 <etharp_output_to_arp_index+0xa8>)
 800a20c:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a210:	f002 fb30 	bl	800c874 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a214:	2318      	movs	r3, #24
 800a216:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a21a:	fb03 5404 	mla	r4, r3, r4, r5
 800a21e:	00c9      	lsls	r1, r1, #3
 800a220:	7d23      	ldrb	r3, [r4, #20]
 800a222:	f101 070c 	add.w	r7, r1, #12
 800a226:	2b02      	cmp	r3, #2
 800a228:	442f      	add	r7, r5
 800a22a:	f106 0829 	add.w	r8, r6, #41	; 0x29
 800a22e:	d10b      	bne.n	800a248 <etharp_output_to_arp_index+0x5c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a230:	8a63      	ldrh	r3, [r4, #18]
 800a232:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a236:	d913      	bls.n	800a260 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a238:	3104      	adds	r1, #4
 800a23a:	4429      	add	r1, r5
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff ff8f 	bl	800a160 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a242:	b908      	cbnz	r0, 800a248 <etharp_output_to_arp_index+0x5c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a244:	2303      	movs	r3, #3
 800a246:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	4642      	mov	r2, r8
 800a250:	463b      	mov	r3, r7
 800a252:	4649      	mov	r1, r9
 800a254:	4630      	mov	r0, r6
 800a256:	f000 ffc7 	bl	800b1e8 <ethernet_output>
}
 800a25a:	b005      	add	sp, #20
 800a25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a260:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a264:	d3f0      	bcc.n	800a248 <etharp_output_to_arp_index+0x5c>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a266:	2301      	movs	r3, #1
 800a268:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a26a:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <etharp_output_to_arp_index+0xac>)
 800a26e:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a270:	4429      	add	r1, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a272:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a274:	9102      	str	r1, [sp, #8]
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	463a      	mov	r2, r7
 800a27a:	4643      	mov	r3, r8
 800a27c:	4641      	mov	r1, r8
 800a27e:	4630      	mov	r0, r6
 800a280:	f7ff fdbe 	bl	8009e00 <etharp_raw>
 800a284:	e7dd      	b.n	800a242 <etharp_output_to_arp_index+0x56>
 800a286:	bf00      	nop
 800a288:	20003e88 	.word	0x20003e88
 800a28c:	0800f36d 	.word	0x0800f36d
 800a290:	0800f2fb 	.word	0x0800f2fb
 800a294:	0800d741 	.word	0x0800d741
 800a298:	0800f759 	.word	0x0800f759

0800a29c <etharp_query>:
{
 800a29c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	4689      	mov	r9, r1
 800a2a2:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a2a4:	4601      	mov	r1, r0
 800a2a6:	f8d9 0000 	ldr.w	r0, [r9]
{
 800a2aa:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a2ac:	f000 fb9b 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d15b      	bne.n	800a36e <etharp_query+0xd2>
      ip4_addr_ismulticast(ipaddr) ||
 800a2b6:	f8d9 3000 	ldr.w	r3, [r9]
 800a2ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a2be:	2ae0      	cmp	r2, #224	; 0xe0
 800a2c0:	d055      	beq.n	800a36e <etharp_query+0xd2>
      ip4_addr_isany(ipaddr)) {
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d053      	beq.n	800a36e <etharp_query+0xd2>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	f7ff fe05 	bl	8009ed8 <etharp_find_entry.isra.0>
  if (i < 0) {
 800a2ce:	1e04      	subs	r4, r0, #0
 800a2d0:	db50      	blt.n	800a374 <etharp_query+0xd8>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a2d2:	4d3e      	ldr	r5, [pc, #248]	; (800a3cc <etharp_query+0x130>)
 800a2d4:	2318      	movs	r3, #24
 800a2d6:	fb03 5304 	mla	r3, r3, r4, r5
 800a2da:	7d1a      	ldrb	r2, [r3, #20]
 800a2dc:	b91a      	cbnz	r2, 800a2e6 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a2de:	2601      	movs	r6, #1
 800a2e0:	751e      	strb	r6, [r3, #20]
    arp_table[i].netif = netif;
 800a2e2:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a2e6:	2318      	movs	r3, #24
 800a2e8:	fb03 5304 	mla	r3, r3, r4, r5
 800a2ec:	7d1b      	ldrb	r3, [r3, #20]
 800a2ee:	b933      	cbnz	r3, 800a2fe <etharp_query+0x62>
 800a2f0:	4b37      	ldr	r3, [pc, #220]	; (800a3d0 <etharp_query+0x134>)
 800a2f2:	4938      	ldr	r1, [pc, #224]	; (800a3d4 <etharp_query+0x138>)
 800a2f4:	4838      	ldr	r0, [pc, #224]	; (800a3d8 <etharp_query+0x13c>)
 800a2f6:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a2fa:	f002 fabb 	bl	800c874 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800a2fe:	b90e      	cbnz	r6, 800a304 <etharp_query+0x68>
 800a300:	2f00      	cmp	r7, #0
 800a302:	d139      	bne.n	800a378 <etharp_query+0xdc>
    result = etharp_request(netif, ipaddr);
 800a304:	4649      	mov	r1, r9
 800a306:	4640      	mov	r0, r8
 800a308:	f7ff ff2a 	bl	800a160 <etharp_request>
    if (q == NULL) {
 800a30c:	bbb7      	cbnz	r7, 800a37c <etharp_query+0xe0>
}
 800a30e:	b002      	add	sp, #8
 800a310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a314:	d1fb      	bne.n	800a30e <etharp_query+0x72>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a316:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800a3d0 <etharp_query+0x134>
 800a31a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a3e0 <etharp_query+0x144>
 800a31e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a3d8 <etharp_query+0x13c>
 800a322:	463e      	mov	r6, r7
 800a324:	8972      	ldrh	r2, [r6, #10]
 800a326:	8933      	ldrh	r3, [r6, #8]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d108      	bne.n	800a33e <etharp_query+0xa2>
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	b133      	cbz	r3, 800a33e <etharp_query+0xa2>
 800a330:	4643      	mov	r3, r8
 800a332:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a336:	4649      	mov	r1, r9
 800a338:	4650      	mov	r0, sl
 800a33a:	f002 fa9b 	bl	800c874 <iprintf>
      if (p->type != PBUF_ROM) {
 800a33e:	7b33      	ldrb	r3, [r6, #12]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d131      	bne.n	800a3a8 <etharp_query+0x10c>
      p = p->next;
 800a344:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800a346:	2e00      	cmp	r6, #0
 800a348:	d1ec      	bne.n	800a324 <etharp_query+0x88>
      pbuf_ref(p);
 800a34a:	4638      	mov	r0, r7
 800a34c:	f7fa ff5a 	bl	8005204 <pbuf_ref>
 800a350:	46b8      	mov	r8, r7
      if (arp_table[i].q != NULL) {
 800a352:	2318      	movs	r3, #24
 800a354:	fb03 f204 	mul.w	r2, r3, r4
 800a358:	461e      	mov	r6, r3
 800a35a:	58a8      	ldr	r0, [r5, r2]
 800a35c:	b108      	cbz	r0, 800a362 <etharp_query+0xc6>
        pbuf_free(arp_table[i].q);
 800a35e:	f7fa fd95 	bl	8004e8c <pbuf_free>
      arp_table[i].q = p;
 800a362:	fb06 f304 	mul.w	r3, r6, r4
      result = ERR_OK;
 800a366:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800a368:	f845 8003 	str.w	r8, [r5, r3]
 800a36c:	e7cf      	b.n	800a30e <etharp_query+0x72>
    return ERR_ARG;
 800a36e:	f06f 000f 	mvn.w	r0, #15
 800a372:	e7cc      	b.n	800a30e <etharp_query+0x72>
 800a374:	4620      	mov	r0, r4
 800a376:	e7ca      	b.n	800a30e <etharp_query+0x72>
  err_t result = ERR_MEM;
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a37c:	2318      	movs	r3, #24
 800a37e:	fb03 5204 	mla	r2, r3, r4, r5
 800a382:	7d12      	ldrb	r2, [r2, #20]
 800a384:	2a01      	cmp	r2, #1
 800a386:	d9c5      	bls.n	800a314 <etharp_query+0x78>
    ETHARP_SET_HINT(netif, i);
 800a388:	4a14      	ldr	r2, [pc, #80]	; (800a3dc <etharp_query+0x140>)
 800a38a:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a38c:	220c      	movs	r2, #12
 800a38e:	fb13 2304 	smlabb	r3, r3, r4, r2
 800a392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a396:	9200      	str	r2, [sp, #0]
 800a398:	442b      	add	r3, r5
 800a39a:	f108 0229 	add.w	r2, r8, #41	; 0x29
 800a39e:	4639      	mov	r1, r7
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	f000 ff21 	bl	800b1e8 <ethernet_output>
 800a3a6:	e7b2      	b.n	800a30e <etharp_query+0x72>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	8931      	ldrh	r1, [r6, #8]
 800a3ac:	2002      	movs	r0, #2
 800a3ae:	f7fa fdd5 	bl	8004f5c <pbuf_alloc>
      if (p != NULL) {
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	b138      	cbz	r0, 800a3c6 <etharp_query+0x12a>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7fa ff84 	bl	80052c4 <pbuf_copy>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d0c8      	beq.n	800a352 <etharp_query+0xb6>
          pbuf_free(p);
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	f7fa fd63 	bl	8004e8c <pbuf_free>
      result = ERR_MEM;
 800a3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ca:	e7a0      	b.n	800a30e <etharp_query+0x72>
 800a3cc:	20003e88 	.word	0x20003e88
 800a3d0:	0800f36d 	.word	0x0800f36d
 800a3d4:	0800f32b 	.word	0x0800f32b
 800a3d8:	0800d741 	.word	0x0800d741
 800a3dc:	20003f78 	.word	0x20003f78
 800a3e0:	0800f353 	.word	0x0800f353

0800a3e4 <etharp_output>:
{
 800a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e6:	460e      	mov	r6, r1
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	b930      	cbnz	r0, 800a3fe <etharp_output+0x1a>
 800a3f0:	4b3d      	ldr	r3, [pc, #244]	; (800a4e8 <etharp_output+0x104>)
 800a3f2:	493e      	ldr	r1, [pc, #248]	; (800a4ec <etharp_output+0x108>)
 800a3f4:	483e      	ldr	r0, [pc, #248]	; (800a4f0 <etharp_output+0x10c>)
 800a3f6:	f240 321b 	movw	r2, #795	; 0x31b
 800a3fa:	f002 fa3b 	bl	800c874 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a3fe:	b936      	cbnz	r6, 800a40e <etharp_output+0x2a>
 800a400:	4b39      	ldr	r3, [pc, #228]	; (800a4e8 <etharp_output+0x104>)
 800a402:	493c      	ldr	r1, [pc, #240]	; (800a4f4 <etharp_output+0x110>)
 800a404:	483a      	ldr	r0, [pc, #232]	; (800a4f0 <etharp_output+0x10c>)
 800a406:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a40a:	f002 fa33 	bl	800c874 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a40e:	b935      	cbnz	r5, 800a41e <etharp_output+0x3a>
 800a410:	4b35      	ldr	r3, [pc, #212]	; (800a4e8 <etharp_output+0x104>)
 800a412:	4939      	ldr	r1, [pc, #228]	; (800a4f8 <etharp_output+0x114>)
 800a414:	4836      	ldr	r0, [pc, #216]	; (800a4f0 <etharp_output+0x10c>)
 800a416:	f240 321d 	movw	r2, #797	; 0x31d
 800a41a:	f002 fa2b 	bl	800c874 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a41e:	4621      	mov	r1, r4
 800a420:	6828      	ldr	r0, [r5, #0]
 800a422:	f000 fae0 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 800a426:	2800      	cmp	r0, #0
 800a428:	d159      	bne.n	800a4de <etharp_output+0xfa>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a430:	2ae0      	cmp	r2, #224	; 0xe0
 800a432:	d11b      	bne.n	800a46c <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a434:	2301      	movs	r3, #1
 800a436:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a43a:	235e      	movs	r3, #94	; 0x5e
 800a43c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a440:	786b      	ldrb	r3, [r5, #1]
 800a442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a446:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a44a:	78ab      	ldrb	r3, [r5, #2]
 800a44c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a450:	78eb      	ldrb	r3, [r5, #3]
 800a452:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800a456:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a45c:	9200      	str	r2, [sp, #0]
 800a45e:	4631      	mov	r1, r6
 800a460:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800a464:	4620      	mov	r0, r4
 800a466:	f000 febf 	bl	800b1e8 <ethernet_output>
 800a46a:	e01f      	b.n	800a4ac <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a46c:	6862      	ldr	r2, [r4, #4]
 800a46e:	68a1      	ldr	r1, [r4, #8]
 800a470:	405a      	eors	r2, r3
 800a472:	420a      	tst	r2, r1
 800a474:	d008      	beq.n	800a488 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 800a476:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a478:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d003      	beq.n	800a488 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a480:	68e3      	ldr	r3, [r4, #12]
 800a482:	b373      	cbz	r3, 800a4e2 <etharp_output+0xfe>
            dst_addr = netif_ip4_gw(netif);
 800a484:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a488:	4b1c      	ldr	r3, [pc, #112]	; (800a4fc <etharp_output+0x118>)
 800a48a:	491d      	ldr	r1, [pc, #116]	; (800a500 <etharp_output+0x11c>)
 800a48c:	781a      	ldrb	r2, [r3, #0]
 800a48e:	2018      	movs	r0, #24
 800a490:	fb00 1002 	mla	r0, r0, r2, r1
 800a494:	7d01      	ldrb	r1, [r0, #20]
 800a496:	2901      	cmp	r1, #1
 800a498:	4619      	mov	r1, r3
 800a49a:	d909      	bls.n	800a4b0 <etharp_output+0xcc>
 800a49c:	682f      	ldr	r7, [r5, #0]
 800a49e:	6843      	ldr	r3, [r0, #4]
 800a4a0:	429f      	cmp	r7, r3
 800a4a2:	d105      	bne.n	800a4b0 <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7ff fea0 	bl	800a1ec <etharp_output_to_arp_index>
}
 800a4ac:	b005      	add	sp, #20
 800a4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b0:	4b13      	ldr	r3, [pc, #76]	; (800a500 <etharp_output+0x11c>)
{
 800a4b2:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a4b4:	7d18      	ldrb	r0, [r3, #20]
 800a4b6:	2801      	cmp	r0, #1
 800a4b8:	d906      	bls.n	800a4c8 <etharp_output+0xe4>
 800a4ba:	682f      	ldr	r7, [r5, #0]
 800a4bc:	6858      	ldr	r0, [r3, #4]
 800a4be:	4287      	cmp	r7, r0
 800a4c0:	d102      	bne.n	800a4c8 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	700a      	strb	r2, [r1, #0]
 800a4c6:	e7ed      	b.n	800a4a4 <etharp_output+0xc0>
 800a4c8:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a4ca:	2a0a      	cmp	r2, #10
 800a4cc:	f103 0318 	add.w	r3, r3, #24
 800a4d0:	d1f0      	bne.n	800a4b4 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff fee0 	bl	800a29c <etharp_query>
 800a4dc:	e7e6      	b.n	800a4ac <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <etharp_output+0x120>)
 800a4e0:	e7ba      	b.n	800a458 <etharp_output+0x74>
            return ERR_RTE;
 800a4e2:	f06f 0003 	mvn.w	r0, #3
 800a4e6:	e7e1      	b.n	800a4ac <etharp_output+0xc8>
 800a4e8:	0800f36d 	.word	0x0800f36d
 800a4ec:	0800ee15 	.word	0x0800ee15
 800a4f0:	0800d741 	.word	0x0800d741
 800a4f4:	0800e207 	.word	0x0800e207
 800a4f8:	0800f2b8 	.word	0x0800f2b8
 800a4fc:	20003f78 	.word	0x20003f78
 800a500:	20003e88 	.word	0x20003e88
 800a504:	0800f6ed 	.word	0x0800f6ed

0800a508 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800a508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50a:	4604      	mov	r4, r0
 800a50c:	b087      	sub	sp, #28
 800a50e:	460f      	mov	r7, r1
 800a510:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a512:	2124      	movs	r1, #36	; 0x24
 800a514:	2200      	movs	r2, #0
 800a516:	2001      	movs	r0, #1
 800a518:	f7fa fd20 	bl	8004f5c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a51c:	4605      	mov	r5, r0
 800a51e:	b3a0      	cbz	r0, 800a58a <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a520:	8943      	ldrh	r3, [r0, #10]
 800a522:	2b23      	cmp	r3, #35	; 0x23
 800a524:	d806      	bhi.n	800a534 <icmp_send_response.isra.0+0x2c>
 800a526:	4b1a      	ldr	r3, [pc, #104]	; (800a590 <icmp_send_response.isra.0+0x88>)
 800a528:	491a      	ldr	r1, [pc, #104]	; (800a594 <icmp_send_response.isra.0+0x8c>)
 800a52a:	481b      	ldr	r0, [pc, #108]	; (800a598 <icmp_send_response.isra.0+0x90>)
 800a52c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a530:	f002 f9a0 	bl	800c874 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a534:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a536:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	7123      	strb	r3, [r4, #4]
 800a53c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800a53e:	71a3      	strb	r3, [r4, #6]
 800a540:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800a542:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800a544:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a546:	4613      	mov	r3, r2
 800a548:	f104 0108 	add.w	r1, r4, #8
 800a54c:	f102 001c 	add.w	r0, r2, #28
 800a550:	f853 6b04 	ldr.w	r6, [r3], #4
 800a554:	f841 6b04 	str.w	r6, [r1], #4
 800a558:	4283      	cmp	r3, r0
 800a55a:	d1f9      	bne.n	800a550 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a55c:	ae06      	add	r6, sp, #24
 800a55e:	68d3      	ldr	r3, [r2, #12]
 800a560:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a564:	4630      	mov	r0, r6
 800a566:	f000 f8bb 	bl	800a6e0 <ip4_route>
#endif
  if (netif != NULL) {
 800a56a:	b158      	cbz	r0, 800a584 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a56c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a56e:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800a570:	70a1      	strb	r1, [r4, #2]
 800a572:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a574:	4632      	mov	r2, r6
 800a576:	9002      	str	r0, [sp, #8]
 800a578:	e9cd 1300 	strd	r1, r3, [sp]
 800a57c:	4628      	mov	r0, r5
 800a57e:	23ff      	movs	r3, #255	; 0xff
 800a580:	f000 fa20 	bl	800a9c4 <ip4_output_if>
  }
  pbuf_free(q);
 800a584:	4628      	mov	r0, r5
 800a586:	f7fa fc81 	bl	8004e8c <pbuf_free>
}
 800a58a:	b007      	add	sp, #28
 800a58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a58e:	bf00      	nop
 800a590:	0800f47d 	.word	0x0800f47d
 800a594:	0800f4b2 	.word	0x0800f4b2
 800a598:	0800d741 	.word	0x0800d741

0800a59c <icmp_input>:
{
 800a59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800a5a0:	4b44      	ldr	r3, [pc, #272]	; (800a6b4 <icmp_input+0x118>)
 800a5a2:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800a5a6:	f899 5000 	ldrb.w	r5, [r9]
 800a5aa:	f005 050f 	and.w	r5, r5, #15
 800a5ae:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800a5b0:	2d13      	cmp	r5, #19
{
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	4688      	mov	r8, r1
 800a5b8:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 800a5ba:	d92a      	bls.n	800a612 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 800a5bc:	8942      	ldrh	r2, [r0, #10]
 800a5be:	2a03      	cmp	r2, #3
 800a5c0:	d927      	bls.n	800a612 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800a5c2:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 800a5c4:	7812      	ldrb	r2, [r2, #0]
 800a5c6:	2a08      	cmp	r2, #8
 800a5c8:	d123      	bne.n	800a612 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a5ca:	6958      	ldr	r0, [r3, #20]
 800a5cc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a5d0:	2ae0      	cmp	r2, #224	; 0xe0
 800a5d2:	d01e      	beq.n	800a612 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a5d4:	6819      	ldr	r1, [r3, #0]
 800a5d6:	f000 fa06 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 800a5da:	4606      	mov	r6, r0
 800a5dc:	b9c8      	cbnz	r0, 800a612 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a5de:	8923      	ldrh	r3, [r4, #8]
 800a5e0:	2b07      	cmp	r3, #7
 800a5e2:	d916      	bls.n	800a612 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a5e4:	f105 010e 	add.w	r1, r5, #14
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f7fa fc49 	bl	8004e80 <pbuf_header>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d04f      	beq.n	800a692 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a5f2:	8921      	ldrh	r1, [r4, #8]
 800a5f4:	4429      	add	r1, r5
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	b289      	uxth	r1, r1
 800a5fa:	2002      	movs	r0, #2
 800a5fc:	f7fa fcae 	bl	8004f5c <pbuf_alloc>
      if (r == NULL) {
 800a600:	4606      	mov	r6, r0
 800a602:	b130      	cbz	r0, 800a612 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a604:	8942      	ldrh	r2, [r0, #10]
 800a606:	f105 0308 	add.w	r3, r5, #8
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d207      	bcs.n	800a61e <icmp_input+0x82>
        pbuf_free(r);
 800a60e:	f7fa fc3d 	bl	8004e8c <pbuf_free>
  pbuf_free(p);
 800a612:	4620      	mov	r0, r4
}
 800a614:	b005      	add	sp, #20
 800a616:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800a61a:	f7fa bc37 	b.w	8004e8c <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800a61e:	4649      	mov	r1, r9
 800a620:	462a      	mov	r2, r5
 800a622:	6840      	ldr	r0, [r0, #4]
 800a624:	f002 f85d 	bl	800c6e2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800a628:	4269      	negs	r1, r5
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7fa fc28 	bl	8004e80 <pbuf_header>
 800a630:	b138      	cbz	r0, 800a642 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a632:	4b21      	ldr	r3, [pc, #132]	; (800a6b8 <icmp_input+0x11c>)
 800a634:	4921      	ldr	r1, [pc, #132]	; (800a6bc <icmp_input+0x120>)
 800a636:	4822      	ldr	r0, [pc, #136]	; (800a6c0 <icmp_input+0x124>)
 800a638:	22af      	movs	r2, #175	; 0xaf
 800a63a:	f002 f91b 	bl	800c874 <iprintf>
        pbuf_free(r);
 800a63e:	4630      	mov	r0, r6
 800a640:	e7e5      	b.n	800a60e <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800a642:	4621      	mov	r1, r4
 800a644:	4630      	mov	r0, r6
 800a646:	f7fa fe3d 	bl	80052c4 <pbuf_copy>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d1f7      	bne.n	800a63e <icmp_input+0xa2>
      pbuf_free(p);
 800a64e:	4620      	mov	r0, r4
 800a650:	f7fa fc1c 	bl	8004e8c <pbuf_free>
 800a654:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 800a656:	4629      	mov	r1, r5
 800a658:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a65a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800a65c:	f7fa fc10 	bl	8004e80 <pbuf_header>
 800a660:	4602      	mov	r2, r0
 800a662:	2800      	cmp	r0, #0
 800a664:	d1d5      	bne.n	800a612 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a666:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a670:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a672:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 800a674:	70b0      	strb	r0, [r6, #2]
 800a676:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a678:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a67a:	7288      	strb	r0, [r1, #10]
 800a67c:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a67e:	2101      	movs	r1, #1
 800a680:	e9cd 0100 	strd	r0, r1, [sp]
 800a684:	f8cd 8008 	str.w	r8, [sp, #8]
 800a688:	490e      	ldr	r1, [pc, #56]	; (800a6c4 <icmp_input+0x128>)
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 f99a 	bl	800a9c4 <ip4_output_if>
 800a690:	e7bf      	b.n	800a612 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a692:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 800a696:	31f2      	adds	r1, #242	; 0xf2
 800a698:	b209      	sxth	r1, r1
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7fa fbf0 	bl	8004e80 <pbuf_header>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d0d8      	beq.n	800a656 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a6a4:	4b04      	ldr	r3, [pc, #16]	; (800a6b8 <icmp_input+0x11c>)
 800a6a6:	4908      	ldr	r1, [pc, #32]	; (800a6c8 <icmp_input+0x12c>)
 800a6a8:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <icmp_input+0x124>)
 800a6aa:	22c0      	movs	r2, #192	; 0xc0
 800a6ac:	f002 f8e2 	bl	800c874 <iprintf>
        goto icmperr;
 800a6b0:	e7af      	b.n	800a612 <icmp_input+0x76>
 800a6b2:	bf00      	nop
 800a6b4:	20003fa0 	.word	0x20003fa0
 800a6b8:	0800f47d 	.word	0x0800f47d
 800a6bc:	0800f416 	.word	0x0800f416
 800a6c0:	0800d741 	.word	0x0800d741
 800a6c4:	20003fb4 	.word	0x20003fb4
 800a6c8:	0800f44b 	.word	0x0800f44b

0800a6cc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 800a6cc:	460a      	mov	r2, r1
 800a6ce:	3004      	adds	r0, #4
 800a6d0:	2103      	movs	r1, #3
 800a6d2:	f7ff bf19 	b.w	800a508 <icmp_send_response.isra.0>

0800a6d6 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 800a6d6:	460a      	mov	r2, r1
 800a6d8:	3004      	adds	r0, #4
 800a6da:	210b      	movs	r1, #11
 800a6dc:	f7ff bf14 	b.w	800a508 <icmp_send_response.isra.0>

0800a6e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a6e0:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a6e2:	4b13      	ldr	r3, [pc, #76]	; (800a730 <ip4_route+0x50>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	b96b      	cbnz	r3, 800a704 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a6e8:	4a12      	ldr	r2, [pc, #72]	; (800a734 <ip4_route+0x54>)
 800a6ea:	6812      	ldr	r2, [r2, #0]
 800a6ec:	b1ea      	cbz	r2, 800a72a <ip4_route+0x4a>
 800a6ee:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 800a6f2:	f001 0105 	and.w	r1, r1, #5
 800a6f6:	2905      	cmp	r1, #5
 800a6f8:	d117      	bne.n	800a72a <ip4_route+0x4a>
 800a6fa:	6851      	ldr	r1, [r2, #4]
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	bf18      	it	ne
 800a700:	4613      	movne	r3, r2
 800a702:	e012      	b.n	800a72a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a704:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800a708:	07cd      	lsls	r5, r1, #31
 800a70a:	d5eb      	bpl.n	800a6e4 <ip4_route+0x4>
 800a70c:	074c      	lsls	r4, r1, #29
 800a70e:	d5e9      	bpl.n	800a6e4 <ip4_route+0x4>
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	2a00      	cmp	r2, #0
 800a714:	d0e6      	beq.n	800a6e4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a716:	6804      	ldr	r4, [r0, #0]
 800a718:	689d      	ldr	r5, [r3, #8]
 800a71a:	4062      	eors	r2, r4
 800a71c:	422a      	tst	r2, r5
 800a71e:	d004      	beq.n	800a72a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a720:	078a      	lsls	r2, r1, #30
 800a722:	d4df      	bmi.n	800a6e4 <ip4_route+0x4>
 800a724:	68da      	ldr	r2, [r3, #12]
 800a726:	4294      	cmp	r4, r2
 800a728:	d1dc      	bne.n	800a6e4 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	bd30      	pop	{r4, r5, pc}
 800a72e:	bf00      	nop
 800a730:	200076b4 	.word	0x200076b4
 800a734:	200076b8 	.word	0x200076b8

0800a738 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a73c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800a73e:	f897 9000 	ldrb.w	r9, [r7]
 800a742:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800a746:	2b04      	cmp	r3, #4
{
 800a748:	4605      	mov	r5, r0
 800a74a:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800a74c:	d005      	beq.n	800a75a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a74e:	4628      	mov	r0, r5
 800a750:	f7fa fb9c 	bl	8004e8c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800a754:	2000      	movs	r0, #0
 800a756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a75a:	8878      	ldrh	r0, [r7, #2]
 800a75c:	f7f9 ff5c 	bl	8004618 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800a760:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 800a762:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 800a766:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 800a768:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a76c:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800a76e:	d903      	bls.n	800a778 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 800a770:	4601      	mov	r1, r0
 800a772:	4628      	mov	r0, r5
 800a774:	f7fa fcce 	bl	8005114 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a778:	896b      	ldrh	r3, [r5, #10]
 800a77a:	454b      	cmp	r3, r9
 800a77c:	d3e7      	bcc.n	800a74e <ip4_input+0x16>
 800a77e:	892b      	ldrh	r3, [r5, #8]
 800a780:	42a3      	cmp	r3, r4
 800a782:	d3e4      	bcc.n	800a74e <ip4_input+0x16>
 800a784:	f1b9 0f13 	cmp.w	r9, #19
 800a788:	d9e1      	bls.n	800a74e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	4c4f      	ldr	r4, [pc, #316]	; (800a8cc <ip4_input+0x194>)
 800a78e:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a798:	2be0      	cmp	r3, #224	; 0xe0
 800a79a:	d112      	bne.n	800a7c2 <ip4_input+0x8a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a79c:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 800a7a0:	07da      	lsls	r2, r3, #31
 800a7a2:	d503      	bpl.n	800a7ac <ip4_input+0x74>
 800a7a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d162      	bne.n	800a872 <ip4_input+0x13a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800a7ac:	7a7b      	ldrb	r3, [r7, #9]
 800a7ae:	2b11      	cmp	r3, #17
 800a7b0:	d105      	bne.n	800a7be <ip4_input+0x86>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800a7b2:	eb07 0309 	add.w	r3, r7, r9
 800a7b6:	885b      	ldrh	r3, [r3, #2]
 800a7b8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800a7bc:	d05b      	beq.n	800a876 <ip4_input+0x13e>
 800a7be:	2600      	movs	r6, #0
 800a7c0:	e018      	b.n	800a7f4 <ip4_input+0xbc>
        netif = netif_list;
 800a7c2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800a8d0 <ip4_input+0x198>
 800a7c6:	4646      	mov	r6, r8
    int first = 1;
 800a7c8:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a7cc:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800a7d0:	07db      	lsls	r3, r3, #31
 800a7d2:	d404      	bmi.n	800a7de <ip4_input+0xa6>
      if (first) {
 800a7d4:	f1ba 0f00 	cmp.w	sl, #0
 800a7d8:	d13e      	bne.n	800a858 <ip4_input+0x120>
        netif = netif->next;
 800a7da:	6836      	ldr	r6, [r6, #0]
 800a7dc:	e041      	b.n	800a862 <ip4_input+0x12a>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a7de:	6873      	ldr	r3, [r6, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d0f7      	beq.n	800a7d4 <ip4_input+0x9c>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a7e4:	6960      	ldr	r0, [r4, #20]
 800a7e6:	4283      	cmp	r3, r0
 800a7e8:	d004      	beq.n	800a7f4 <ip4_input+0xbc>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	f000 f8fb 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0ef      	beq.n	800a7d4 <ip4_input+0x9c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800a7f4:	6920      	ldr	r0, [r4, #16]
 800a7f6:	b148      	cbz	r0, 800a80c <ip4_input+0xd4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	f000 f8f4 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d1a5      	bne.n	800a74e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a808:	2be0      	cmp	r3, #224	; 0xe0
 800a80a:	d0a0      	beq.n	800a74e <ip4_input+0x16>
  if (netif == NULL) {
 800a80c:	2e00      	cmp	r6, #0
 800a80e:	d09e      	beq.n	800a74e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a816:	b133      	cbz	r3, 800a826 <ip4_input+0xee>
    p = ip4_reass(p);
 800a818:	4628      	mov	r0, r5
 800a81a:	f000 fa15 	bl	800ac48 <ip4_reass>
    if (p == NULL) {
 800a81e:	4605      	mov	r5, r0
 800a820:	2800      	cmp	r0, #0
 800a822:	d097      	beq.n	800a754 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800a824:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800a826:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 800a828:	e9c4 6800 	strd	r6, r8, [r4]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a82c:	783b      	ldrb	r3, [r7, #0]
 800a82e:	f003 030f 	and.w	r3, r3, #15
 800a832:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a834:	f1c9 0100 	rsb	r1, r9, #0
 800a838:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a83a:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a83c:	f7fa fb20 	bl	8004e80 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800a840:	7a7b      	ldrb	r3, [r7, #9]
 800a842:	2b06      	cmp	r3, #6
 800a844:	d025      	beq.n	800a892 <ip4_input+0x15a>
 800a846:	2b11      	cmp	r3, #17
 800a848:	d017      	beq.n	800a87a <ip4_input+0x142>
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d126      	bne.n	800a89c <ip4_input+0x164>
      icmp_input(p, inp);
 800a84e:	4641      	mov	r1, r8
 800a850:	4628      	mov	r0, r5
 800a852:	f7ff fea3 	bl	800a59c <icmp_input>
      break;
 800a856:	e014      	b.n	800a882 <ip4_input+0x14a>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800a858:	7d23      	ldrb	r3, [r4, #20]
 800a85a:	2b7f      	cmp	r3, #127	; 0x7f
 800a85c:	d0a6      	beq.n	800a7ac <ip4_input+0x74>
        netif = netif_list;
 800a85e:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800a862:	4546      	cmp	r6, r8
        netif = netif->next;
 800a864:	bf08      	it	eq
 800a866:	6836      	ldreq	r6, [r6, #0]
 800a868:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 800a86c:	2e00      	cmp	r6, #0
 800a86e:	d1ad      	bne.n	800a7cc <ip4_input+0x94>
 800a870:	e79c      	b.n	800a7ac <ip4_input+0x74>
 800a872:	4646      	mov	r6, r8
 800a874:	e7be      	b.n	800a7f4 <ip4_input+0xbc>
 800a876:	4646      	mov	r6, r8
 800a878:	e7c8      	b.n	800a80c <ip4_input+0xd4>
      udp_input(p, inp);
 800a87a:	4641      	mov	r1, r8
 800a87c:	4628      	mov	r0, r5
 800a87e:	f7fe f80b 	bl	8008898 <udp_input>
  ip_data.current_netif = NULL;
 800a882:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800a884:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 800a888:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a88a:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a88c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 800a890:	e760      	b.n	800a754 <ip4_input+0x1c>
      tcp_input(p, inp);
 800a892:	4641      	mov	r1, r8
 800a894:	4628      	mov	r0, r5
 800a896:	f7fc fa99 	bl	8006dcc <tcp_input>
      break;
 800a89a:	e7f2      	b.n	800a882 <ip4_input+0x14a>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a89c:	4631      	mov	r1, r6
 800a89e:	6960      	ldr	r0, [r4, #20]
 800a8a0:	f000 f8a1 	bl	800a9e6 <ip4_addr_isbroadcast_u32>
 800a8a4:	b968      	cbnz	r0, 800a8c2 <ip4_input+0x18a>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a8a6:	6963      	ldr	r3, [r4, #20]
 800a8a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a8ac:	2be0      	cmp	r3, #224	; 0xe0
 800a8ae:	d008      	beq.n	800a8c2 <ip4_input+0x18a>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f7fa fae7 	bl	8004e86 <pbuf_header_force>
        p->payload = iphdr;
 800a8b8:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a8ba:	2102      	movs	r1, #2
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f7ff ff05 	bl	800a6cc <icmp_dest_unreach>
      pbuf_free(p);
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f7fa fae2 	bl	8004e8c <pbuf_free>
 800a8c8:	e7db      	b.n	800a882 <ip4_input+0x14a>
 800a8ca:	bf00      	nop
 800a8cc:	20003fa0 	.word	0x20003fa0
 800a8d0:	200076b4 	.word	0x200076b4

0800a8d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a8d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d8:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a8da:	89c3      	ldrh	r3, [r0, #14]
{
 800a8dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a8e0:	2b01      	cmp	r3, #1
{
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	468a      	mov	sl, r1
 800a8e6:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a8e8:	d006      	beq.n	800a8f8 <ip4_output_if_src+0x24>
 800a8ea:	4b30      	ldr	r3, [pc, #192]	; (800a9ac <ip4_output_if_src+0xd8>)
 800a8ec:	4930      	ldr	r1, [pc, #192]	; (800a9b0 <ip4_output_if_src+0xdc>)
 800a8ee:	4831      	ldr	r0, [pc, #196]	; (800a9b4 <ip4_output_if_src+0xe0>)
 800a8f0:	f240 3233 	movw	r2, #819	; 0x333
 800a8f4:	f001 ffbe 	bl	800c874 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a8f8:	2e00      	cmp	r6, #0
 800a8fa:	d047      	beq.n	800a98c <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a8fc:	2114      	movs	r1, #20
 800a8fe:	4628      	mov	r0, r5
 800a900:	f7fa fabe 	bl	8004e80 <pbuf_header>
 800a904:	2800      	cmp	r0, #0
 800a906:	d14e      	bne.n	800a9a6 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a908:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800a90a:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a90c:	2b13      	cmp	r3, #19
 800a90e:	d806      	bhi.n	800a91e <ip4_output_if_src+0x4a>
 800a910:	4b26      	ldr	r3, [pc, #152]	; (800a9ac <ip4_output_if_src+0xd8>)
 800a912:	4929      	ldr	r1, [pc, #164]	; (800a9b8 <ip4_output_if_src+0xe4>)
 800a914:	4827      	ldr	r0, [pc, #156]	; (800a9b4 <ip4_output_if_src+0xe0>)
 800a916:	f240 3261 	movw	r2, #865	; 0x361
 800a91a:	f001 ffab 	bl	800c874 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800a91e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800a922:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a924:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a926:	6833      	ldr	r3, [r6, #0]
 800a928:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a92a:	2345      	movs	r3, #69	; 0x45
 800a92c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800a92e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a932:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a934:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a936:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a9c0 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a93a:	f7f9 fe6d 	bl	8004618 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800a93e:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a940:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800a942:	71a7      	strb	r7, [r4, #6]
 800a944:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a946:	f8b9 0000 	ldrh.w	r0, [r9]
 800a94a:	f7f9 fe65 	bl	8004618 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a94e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a952:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800a954:	3301      	adds	r3, #1
 800a956:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800a95a:	f1ba 0f00 	cmp.w	sl, #0
 800a95e:	d112      	bne.n	800a986 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a960:	4b16      	ldr	r3, [pc, #88]	; (800a9bc <ip4_output_if_src+0xe8>)
 800a962:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a964:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a966:	72a7      	strb	r7, [r4, #10]
 800a968:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a96a:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 800a96e:	b19b      	cbz	r3, 800a998 <ip4_output_if_src+0xc4>
 800a970:	892a      	ldrh	r2, [r5, #8]
 800a972:	429a      	cmp	r2, r3
 800a974:	d910      	bls.n	800a998 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800a976:	4632      	mov	r2, r6
 800a978:	4641      	mov	r1, r8
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 fb0e 	bl	800af9c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800a980:	b002      	add	sp, #8
 800a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800a986:	f8da 3000 	ldr.w	r3, [sl]
 800a98a:	e7eb      	b.n	800a964 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a98c:	686b      	ldr	r3, [r5, #4]
 800a98e:	ae02      	add	r6, sp, #8
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f846 3d04 	str.w	r3, [r6, #-4]!
 800a996:	e7e8      	b.n	800a96a <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800a998:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a99c:	4632      	mov	r2, r6
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4798      	blx	r3
 800a9a4:	e7ec      	b.n	800a980 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800a9a6:	f06f 0001 	mvn.w	r0, #1
 800a9aa:	e7e9      	b.n	800a980 <ip4_output_if_src+0xac>
 800a9ac:	0800f4de 	.word	0x0800f4de
 800a9b0:	0800f512 	.word	0x0800f512
 800a9b4:	0800d741 	.word	0x0800d741
 800a9b8:	0800f51e 	.word	0x0800f51e
 800a9bc:	0800f54c 	.word	0x0800f54c
 800a9c0:	20003f7a 	.word	0x20003f7a

0800a9c4 <ip4_output_if>:
{
 800a9c4:	b4f0      	push	{r4, r5, r6, r7}
 800a9c6:	9c06      	ldr	r4, [sp, #24]
 800a9c8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800a9cc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a9d0:	b11a      	cbz	r2, 800a9da <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800a9d2:	b109      	cbz	r1, 800a9d8 <ip4_output_if+0x14>
 800a9d4:	680f      	ldr	r7, [r1, #0]
 800a9d6:	b907      	cbnz	r7, 800a9da <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800a9d8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a9da:	e9cd 6405 	strd	r6, r4, [sp, #20]
 800a9de:	9504      	str	r5, [sp, #16]
}
 800a9e0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a9e2:	f7ff bf77 	b.w	800a8d4 <ip4_output_if_src>

0800a9e6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a9e6:	1e43      	subs	r3, r0, #1
 800a9e8:	3303      	adds	r3, #3
 800a9ea:	d811      	bhi.n	800aa10 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a9ec:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800a9f0:	f013 0302 	ands.w	r3, r3, #2
 800a9f4:	d00e      	beq.n	800aa14 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a9f6:	684a      	ldr	r2, [r1, #4]
 800a9f8:	4282      	cmp	r2, r0
 800a9fa:	d00b      	beq.n	800aa14 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a9fc:	688b      	ldr	r3, [r1, #8]
 800a9fe:	4042      	eors	r2, r0
 800aa00:	421a      	tst	r2, r3
 800aa02:	d107      	bne.n	800aa14 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800aa04:	43db      	mvns	r3, r3
 800aa06:	4383      	bics	r3, r0
    return 1;
 800aa08:	bf0c      	ite	eq
 800aa0a:	2001      	moveq	r0, #1
 800aa0c:	2000      	movne	r0, #0
 800aa0e:	4770      	bx	lr
 800aa10:	2001      	movs	r0, #1
 800aa12:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800aa14:	2000      	movs	r0, #0
  }
}
 800aa16:	4770      	bx	lr

0800aa18 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800aa18:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <ip_reass_dequeue_datagram+0x34>)
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4282      	cmp	r2, r0
{
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800aa24:	d107      	bne.n	800aa36 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800aa26:	6802      	ldr	r2, [r0, #0]
 800aa28:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	2004      	movs	r0, #4
}
 800aa2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800aa32:	f7fa b899 	b.w	8004b68 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800aa36:	b931      	cbnz	r1, 800aa46 <ip_reass_dequeue_datagram+0x2e>
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <ip_reass_dequeue_datagram+0x38>)
 800aa3a:	4906      	ldr	r1, [pc, #24]	; (800aa54 <ip_reass_dequeue_datagram+0x3c>)
 800aa3c:	4806      	ldr	r0, [pc, #24]	; (800aa58 <ip_reass_dequeue_datagram+0x40>)
 800aa3e:	f240 1245 	movw	r2, #325	; 0x145
 800aa42:	f001 ff17 	bl	800c874 <iprintf>
    prev->next = ipr->next;
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	e7ee      	b.n	800aa2a <ip_reass_dequeue_datagram+0x12>
 800aa4c:	20003f80 	.word	0x20003f80
 800aa50:	0800f639 	.word	0x0800f639
 800aa54:	0800f672 	.word	0x0800f672
 800aa58:	0800d741 	.word	0x0800d741

0800aa5c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800aa5c:	4281      	cmp	r1, r0
{
 800aa5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa62:	4605      	mov	r5, r0
 800aa64:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800aa66:	d105      	bne.n	800aa74 <ip_reass_free_complete_datagram+0x18>
 800aa68:	4b2f      	ldr	r3, [pc, #188]	; (800ab28 <ip_reass_free_complete_datagram+0xcc>)
 800aa6a:	4930      	ldr	r1, [pc, #192]	; (800ab2c <ip_reass_free_complete_datagram+0xd0>)
 800aa6c:	4830      	ldr	r0, [pc, #192]	; (800ab30 <ip_reass_free_complete_datagram+0xd4>)
 800aa6e:	22ab      	movs	r2, #171	; 0xab
 800aa70:	f001 ff00 	bl	800c874 <iprintf>
  if (prev != NULL) {
 800aa74:	b147      	cbz	r7, 800aa88 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	42ab      	cmp	r3, r5
 800aa7a:	d005      	beq.n	800aa88 <ip_reass_free_complete_datagram+0x2c>
 800aa7c:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <ip_reass_free_complete_datagram+0xcc>)
 800aa7e:	492d      	ldr	r1, [pc, #180]	; (800ab34 <ip_reass_free_complete_datagram+0xd8>)
 800aa80:	482b      	ldr	r0, [pc, #172]	; (800ab30 <ip_reass_free_complete_datagram+0xd4>)
 800aa82:	22ad      	movs	r2, #173	; 0xad
 800aa84:	f001 fef6 	bl	800c874 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800aa88:	686e      	ldr	r6, [r5, #4]
 800aa8a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800aa8c:	889a      	ldrh	r2, [r3, #4]
 800aa8e:	bb92      	cbnz	r2, 800aaf6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800aa94:	f105 011c 	add.w	r1, r5, #28
 800aa98:	f105 0208 	add.w	r2, r5, #8
 800aa9c:	f852 0b04 	ldr.w	r0, [r2], #4
 800aaa0:	f843 0b04 	str.w	r0, [r3], #4
 800aaa4:	428a      	cmp	r2, r1
 800aaa6:	d1f9      	bne.n	800aa9c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7ff fe13 	bl	800a6d6 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7fa fb9f 	bl	80051f4 <pbuf_clen>
 800aab6:	4604      	mov	r4, r0
    pbuf_free(p);
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7fa f9e7 	bl	8004e8c <pbuf_free>
  p = ipr->p;
 800aabe:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800aac0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800ab28 <ip_reass_free_complete_datagram+0xcc>
 800aac4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800ab40 <ip_reass_free_complete_datagram+0xe4>
 800aac8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ab30 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800aacc:	b9ae      	cbnz	r6, 800aafa <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800aace:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800aad0:	4d19      	ldr	r5, [pc, #100]	; (800ab38 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7ff ffa0 	bl	800aa18 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800aad8:	882b      	ldrh	r3, [r5, #0]
 800aada:	42a3      	cmp	r3, r4
 800aadc:	d205      	bcs.n	800aaea <ip_reass_free_complete_datagram+0x8e>
 800aade:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <ip_reass_free_complete_datagram+0xcc>)
 800aae0:	4916      	ldr	r1, [pc, #88]	; (800ab3c <ip_reass_free_complete_datagram+0xe0>)
 800aae2:	4813      	ldr	r0, [pc, #76]	; (800ab30 <ip_reass_free_complete_datagram+0xd4>)
 800aae4:	22d2      	movs	r2, #210	; 0xd2
 800aae6:	f001 fec5 	bl	800c874 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800aaea:	882b      	ldrh	r3, [r5, #0]
 800aaec:	1b1b      	subs	r3, r3, r4
 800aaee:	802b      	strh	r3, [r5, #0]
}
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800aaf6:	2400      	movs	r4, #0
 800aaf8:	e7e1      	b.n	800aabe <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800aafa:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 800aafc:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800aafe:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800ab02:	f7fa fb77 	bl	80051f4 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ab06:	4404      	add	r4, r0
 800ab08:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800ab0c:	db05      	blt.n	800ab1a <ip_reass_free_complete_datagram+0xbe>
 800ab0e:	4643      	mov	r3, r8
 800ab10:	22cc      	movs	r2, #204	; 0xcc
 800ab12:	4649      	mov	r1, r9
 800ab14:	4650      	mov	r0, sl
 800ab16:	f001 fead 	bl	800c874 <iprintf>
    pbuf_free(pcur);
 800ab1a:	4630      	mov	r0, r6
    pbufs_freed += clen;
 800ab1c:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800ab1e:	f7fa f9b5 	bl	8004e8c <pbuf_free>
    p = iprh->next_pbuf;
 800ab22:	465e      	mov	r6, fp
 800ab24:	e7d2      	b.n	800aacc <ip_reass_free_complete_datagram+0x70>
 800ab26:	bf00      	nop
 800ab28:	0800f639 	.word	0x0800f639
 800ab2c:	0800f68b 	.word	0x0800f68b
 800ab30:	0800d741 	.word	0x0800d741
 800ab34:	0800f697 	.word	0x0800f697
 800ab38:	20003f7c 	.word	0x20003f7c
 800ab3c:	0800f6c6 	.word	0x0800f6c6
 800ab40:	0800f6a9 	.word	0x0800f6a9

0800ab44 <ip_reass_remove_oldest_datagram>:
{
 800ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800ab48:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800abb8 <ip_reass_remove_oldest_datagram+0x74>
{
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800ab50:	2500      	movs	r5, #0
    other_datagrams = 0;
 800ab52:	2400      	movs	r4, #0
    r = reassdatagrams;
 800ab54:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800ab58:	4621      	mov	r1, r4
    prev = NULL;
 800ab5a:	46a4      	mov	ip, r4
    oldest = NULL;
 800ab5c:	4620      	mov	r0, r4
    while (r != NULL) {
 800ab5e:	b953      	cbnz	r3, 800ab76 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800ab60:	b110      	cbz	r0, 800ab68 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ab62:	f7ff ff7b 	bl	800aa5c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800ab66:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ab68:	42bd      	cmp	r5, r7
 800ab6a:	da01      	bge.n	800ab70 <ip_reass_remove_oldest_datagram+0x2c>
 800ab6c:	2c01      	cmp	r4, #1
 800ab6e:	dcf0      	bgt.n	800ab52 <ip_reass_remove_oldest_datagram+0xe>
}
 800ab70:	4628      	mov	r0, r5
 800ab72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ab76:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800ab7a:	695a      	ldr	r2, [r3, #20]
 800ab7c:	4572      	cmp	r2, lr
 800ab7e:	d109      	bne.n	800ab94 <ip_reass_remove_oldest_datagram+0x50>
 800ab80:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800ab84:	699a      	ldr	r2, [r3, #24]
 800ab86:	4572      	cmp	r2, lr
 800ab88:	d104      	bne.n	800ab94 <ip_reass_remove_oldest_datagram+0x50>
 800ab8a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800ab8e:	88b2      	ldrh	r2, [r6, #4]
 800ab90:	4596      	cmp	lr, r2
 800ab92:	d008      	beq.n	800aba6 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800ab94:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800ab96:	b160      	cbz	r0, 800abb2 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800ab98:	7fc2      	ldrb	r2, [r0, #31]
 800ab9a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800ab9e:	4596      	cmp	lr, r2
 800aba0:	bf9c      	itt	ls
 800aba2:	4661      	movls	r1, ip
 800aba4:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	bf18      	it	ne
 800abac:	469c      	movne	ip, r3
 800abae:	4613      	mov	r3, r2
 800abb0:	e7d5      	b.n	800ab5e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800abb2:	4661      	mov	r1, ip
 800abb4:	4618      	mov	r0, r3
 800abb6:	e7f6      	b.n	800aba6 <ip_reass_remove_oldest_datagram+0x62>
 800abb8:	20003f80 	.word	0x20003f80

0800abbc <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800abbc:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800abbe:	4604      	mov	r4, r0
 800abc0:	b930      	cbnz	r0, 800abd0 <ip_frag_free_pbuf_custom_ref+0x14>
 800abc2:	4b06      	ldr	r3, [pc, #24]	; (800abdc <ip_frag_free_pbuf_custom_ref+0x20>)
 800abc4:	4906      	ldr	r1, [pc, #24]	; (800abe0 <ip_frag_free_pbuf_custom_ref+0x24>)
 800abc6:	4807      	ldr	r0, [pc, #28]	; (800abe4 <ip_frag_free_pbuf_custom_ref+0x28>)
 800abc8:	f240 22ae 	movw	r2, #686	; 0x2ae
 800abcc:	f001 fe52 	bl	800c874 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800abd0:	4621      	mov	r1, r4
 800abd2:	2005      	movs	r0, #5
}
 800abd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800abd8:	f7f9 bfc6 	b.w	8004b68 <memp_free>
 800abdc:	0800f639 	.word	0x0800f639
 800abe0:	0800e1c3 	.word	0x0800e1c3
 800abe4:	0800d741 	.word	0x0800d741

0800abe8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800abe8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800abea:	4604      	mov	r4, r0
 800abec:	b930      	cbnz	r0, 800abfc <ipfrag_free_pbuf_custom+0x14>
 800abee:	4b08      	ldr	r3, [pc, #32]	; (800ac10 <ipfrag_free_pbuf_custom+0x28>)
 800abf0:	4908      	ldr	r1, [pc, #32]	; (800ac14 <ipfrag_free_pbuf_custom+0x2c>)
 800abf2:	4809      	ldr	r0, [pc, #36]	; (800ac18 <ipfrag_free_pbuf_custom+0x30>)
 800abf4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800abf8:	f001 fe3c 	bl	800c874 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800abfc:	6960      	ldr	r0, [r4, #20]
 800abfe:	b108      	cbz	r0, 800ac04 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800ac00:	f7fa f944 	bl	8004e8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ac04:	4620      	mov	r0, r4
}
 800ac06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800ac0a:	f7ff bfd7 	b.w	800abbc <ip_frag_free_pbuf_custom_ref>
 800ac0e:	bf00      	nop
 800ac10:	0800f639 	.word	0x0800f639
 800ac14:	0800f6e1 	.word	0x0800f6e1
 800ac18:	0800d741 	.word	0x0800d741

0800ac1c <ip_reass_tmr>:
{
 800ac1c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800ac1e:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <ip_reass_tmr+0x28>)
 800ac20:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800ac22:	2400      	movs	r4, #0
  while (r != NULL) {
 800ac24:	b900      	cbnz	r0, 800ac28 <ip_reass_tmr+0xc>
}
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800ac28:	7fc3      	ldrb	r3, [r0, #31]
 800ac2a:	6805      	ldr	r5, [r0, #0]
 800ac2c:	b123      	cbz	r3, 800ac38 <ip_reass_tmr+0x1c>
      r->timer--;
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800ac32:	4604      	mov	r4, r0
 800ac34:	4628      	mov	r0, r5
 800ac36:	e7f5      	b.n	800ac24 <ip_reass_tmr+0x8>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	f7ff ff0f 	bl	800aa5c <ip_reass_free_complete_datagram>
 800ac3e:	4620      	mov	r0, r4
 800ac40:	e7f7      	b.n	800ac32 <ip_reass_tmr+0x16>
 800ac42:	bf00      	nop
 800ac44:	20003f80 	.word	0x20003f80

0800ac48 <ip4_reass>:
{
 800ac48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800ac4c:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ac4e:	782b      	ldrb	r3, [r5, #0]
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	2b05      	cmp	r3, #5
{
 800ac56:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ac58:	f040 808c 	bne.w	800ad74 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ac5c:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ac5e:	4cb5      	ldr	r4, [pc, #724]	; (800af34 <ip4_reass+0x2ec>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ac60:	f7f9 fcda 	bl	8004618 <lwip_htons>
 800ac64:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ac68:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ac6c:	8868      	ldrh	r0, [r5, #2]
 800ac6e:	f7f9 fcd3 	bl	8004618 <lwip_htons>
 800ac72:	782b      	ldrb	r3, [r5, #0]
 800ac74:	f003 030f 	and.w	r3, r3, #15
 800ac78:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800ac7c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800ac7e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ac80:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800ac82:	f7fa fab7 	bl	80051f4 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ac86:	8823      	ldrh	r3, [r4, #0]
 800ac88:	4403      	add	r3, r0
 800ac8a:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800ac8c:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ac8e:	dc68      	bgt.n	800ad62 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ac90:	4ea9      	ldr	r6, [pc, #676]	; (800af38 <ip4_reass+0x2f0>)
 800ac92:	6834      	ldr	r4, [r6, #0]
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	d172      	bne.n	800ad7e <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ac98:	2004      	movs	r0, #4
 800ac9a:	f7f9 ff49 	bl	8004b30 <memp_malloc>
  if (ipr == NULL) {
 800ac9e:	4604      	mov	r4, r0
 800aca0:	b958      	cbnz	r0, 800acba <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800aca2:	4651      	mov	r1, sl
 800aca4:	4628      	mov	r0, r5
 800aca6:	f7ff ff4d 	bl	800ab44 <ip_reass_remove_oldest_datagram>
 800acaa:	4582      	cmp	sl, r0
 800acac:	dc62      	bgt.n	800ad74 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800acae:	2004      	movs	r0, #4
 800acb0:	f7f9 ff3e 	bl	8004b30 <memp_malloc>
    if (ipr == NULL)
 800acb4:	4604      	mov	r4, r0
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d05c      	beq.n	800ad74 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800acba:	221c      	movs	r2, #28
 800acbc:	2100      	movs	r1, #0
 800acbe:	1d20      	adds	r0, r4, #4
 800acc0:	f001 fd1a 	bl	800c6f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800acc4:	2303      	movs	r3, #3
 800acc6:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800acc8:	6833      	ldr	r3, [r6, #0]
 800acca:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 800accc:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800acce:	462b      	mov	r3, r5
 800acd0:	f104 0208 	add.w	r2, r4, #8
 800acd4:	f105 0114 	add.w	r1, r5, #20
 800acd8:	f853 0b04 	ldr.w	r0, [r3], #4
 800acdc:	f842 0b04 	str.w	r0, [r2], #4
 800ace0:	428b      	cmp	r3, r1
 800ace2:	d1f9      	bne.n	800acd8 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ace4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 800ace8:	f01b 0b20 	ands.w	fp, fp, #32
 800acec:	d108      	bne.n	800ad00 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	444b      	add	r3, r9
 800acf2:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800acf4:	4599      	cmp	r9, r3
 800acf6:	d83d      	bhi.n	800ad74 <ip4_reass+0x12c>
 800acf8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d839      	bhi.n	800ad74 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 800ad00:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ad02:	8868      	ldrh	r0, [r5, #2]
 800ad04:	f7f9 fc88 	bl	8004618 <lwip_htons>
 800ad08:	f895 8000 	ldrb.w	r8, [r5]
 800ad0c:	f008 080f 	and.w	r8, r8, #15
 800ad10:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ad14:	88e8      	ldrh	r0, [r5, #6]
 800ad16:	f7f9 fc7f 	bl	8004618 <lwip_htons>
 800ad1a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ad1e:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ad22:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ad24:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 800ad26:	f8d4 c004 	ldr.w	ip, [r4, #4]
  iprh->start = offset;
 800ad2a:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800ad2c:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 800ad30:	2500      	movs	r5, #0
  iprh->end = offset + len;
 800ad32:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800ad34:	7035      	strb	r5, [r6, #0]
 800ad36:	7075      	strb	r5, [r6, #1]
 800ad38:	70b5      	strb	r5, [r6, #2]
 800ad3a:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 800ad3c:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800ad3e:	4662      	mov	r2, ip
  int valid = 1;
 800ad40:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 800ad44:	bb52      	cbnz	r2, 800ad9c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	f040 8092 	bne.w	800ae70 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ad4c:	f1bc 0f00 	cmp.w	ip, #0
 800ad50:	d07d      	beq.n	800ae4e <ip4_reass+0x206>
 800ad52:	4b7a      	ldr	r3, [pc, #488]	; (800af3c <ip4_reass+0x2f4>)
 800ad54:	497a      	ldr	r1, [pc, #488]	; (800af40 <ip4_reass+0x2f8>)
 800ad56:	487b      	ldr	r0, [pc, #492]	; (800af44 <ip4_reass+0x2fc>)
 800ad58:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800ad5c:	f001 fd8a 	bl	800c874 <iprintf>
 800ad60:	e075      	b.n	800ae4e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ad62:	4601      	mov	r1, r0
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7ff feed 	bl	800ab44 <ip_reass_remove_oldest_datagram>
 800ad6a:	b118      	cbz	r0, 800ad74 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ad6c:	8823      	ldrh	r3, [r4, #0]
 800ad6e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ad70:	2b0a      	cmp	r3, #10
 800ad72:	dd8d      	ble.n	800ac90 <ip4_reass+0x48>
  pbuf_free(p);
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7fa f889 	bl	8004e8c <pbuf_free>
  return NULL;
 800ad7a:	2500      	movs	r5, #0
 800ad7c:	e0d6      	b.n	800af2c <ip4_reass+0x2e4>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ad7e:	68eb      	ldr	r3, [r5, #12]
 800ad80:	6962      	ldr	r2, [r4, #20]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d108      	bne.n	800ad98 <ip4_reass+0x150>
 800ad86:	692b      	ldr	r3, [r5, #16]
 800ad88:	69a2      	ldr	r2, [r4, #24]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d104      	bne.n	800ad98 <ip4_reass+0x150>
 800ad8e:	89a2      	ldrh	r2, [r4, #12]
 800ad90:	88ab      	ldrh	r3, [r5, #4]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	f000 80de 	beq.w	800af54 <ip4_reass+0x30c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ad98:	6824      	ldr	r4, [r4, #0]
 800ad9a:	e77b      	b.n	800ac94 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800ad9c:	f8d2 e004 	ldr.w	lr, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800ada0:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800ada4:	4288      	cmp	r0, r1
 800ada6:	d254      	bcs.n	800ae52 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800ada8:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800adaa:	2d00      	cmp	r5, #0
 800adac:	d04d      	beq.n	800ae4a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800adae:	88ea      	ldrh	r2, [r5, #6]
 800adb0:	4290      	cmp	r0, r2
 800adb2:	f0c0 8091 	bcc.w	800aed8 <ip4_reass+0x290>
 800adb6:	428b      	cmp	r3, r1
 800adb8:	f200 808e 	bhi.w	800aed8 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 800adbc:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 800adbe:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 800adc0:	f040 80e4 	bne.w	800af8c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800adc4:	f1bb 0f00 	cmp.w	fp, #0
 800adc8:	d004      	beq.n	800add4 <ip4_reass+0x18c>
 800adca:	7fa3      	ldrb	r3, [r4, #30]
 800adcc:	f013 0301 	ands.w	r3, r3, #1
 800add0:	f000 808d 	beq.w	800aeee <ip4_reass+0x2a6>
    if (valid) {
 800add4:	f1b8 0f00 	cmp.w	r8, #0
 800add8:	d159      	bne.n	800ae8e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800adda:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800adde:	4e55      	ldr	r6, [pc, #340]	; (800af34 <ip4_reass+0x2ec>)
 800ade0:	8833      	ldrh	r3, [r6, #0]
 800ade2:	449a      	add	sl, r3
 800ade4:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 800ade8:	f1bb 0f00 	cmp.w	fp, #0
 800adec:	d107      	bne.n	800adfe <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800adee:	9b01      	ldr	r3, [sp, #4]
 800adf0:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800adf2:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800adf4:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800adf8:	f043 0301 	orr.w	r3, r3, #1
 800adfc:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800adfe:	f1b8 0f01 	cmp.w	r8, #1
 800ae02:	d1ba      	bne.n	800ad7a <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 800ae04:	8ba3      	ldrh	r3, [r4, #28]
 800ae06:	3314      	adds	r3, #20
 800ae08:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800ae0a:	6863      	ldr	r3, [r4, #4]
 800ae0c:	685d      	ldr	r5, [r3, #4]
 800ae0e:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ae10:	f104 0308 	add.w	r3, r4, #8
 800ae14:	462a      	mov	r2, r5
 800ae16:	f104 011c 	add.w	r1, r4, #28
 800ae1a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae1e:	f842 0b04 	str.w	r0, [r2], #4
 800ae22:	428b      	cmp	r3, r1
 800ae24:	d1f9      	bne.n	800ae1a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800ae26:	8ba0      	ldrh	r0, [r4, #28]
 800ae28:	f7f9 fbf6 	bl	8004618 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800ae2c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800ae2e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ae30:	71ab      	strb	r3, [r5, #6]
 800ae32:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ae34:	72ab      	strb	r3, [r5, #10]
 800ae36:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800ae38:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800ae3a:	2f00      	cmp	r7, #0
 800ae3c:	d159      	bne.n	800aef2 <ip4_reass+0x2aa>
    if (ipr == reassdatagrams) {
 800ae3e:	4b3e      	ldr	r3, [pc, #248]	; (800af38 <ip4_reass+0x2f0>)
 800ae40:	6819      	ldr	r1, [r3, #0]
 800ae42:	42a1      	cmp	r1, r4
 800ae44:	d167      	bne.n	800af16 <ip4_reass+0x2ce>
      ipr_prev = NULL;
 800ae46:	4639      	mov	r1, r7
 800ae48:	e067      	b.n	800af1a <ip4_reass+0x2d2>
        if (iprh->end > iprh_tmp->start) {
 800ae4a:	428b      	cmp	r3, r1
 800ae4c:	d844      	bhi.n	800aed8 <ip4_reass+0x290>
      ipr->p = new_p;
 800ae4e:	6067      	str	r7, [r4, #4]
 800ae50:	e7b8      	b.n	800adc4 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800ae52:	d041      	beq.n	800aed8 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 800ae54:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800ae58:	4282      	cmp	r2, r0
 800ae5a:	d83d      	bhi.n	800aed8 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800ae5c:	b125      	cbz	r5, 800ae68 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800ae5e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800ae60:	428a      	cmp	r2, r1
 800ae62:	bf18      	it	ne
 800ae64:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800ae68:	f8de 2000 	ldr.w	r2, [lr]
 800ae6c:	4675      	mov	r5, lr
 800ae6e:	e769      	b.n	800ad44 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ae70:	88eb      	ldrh	r3, [r5, #6]
 800ae72:	4283      	cmp	r3, r0
 800ae74:	d906      	bls.n	800ae84 <ip4_reass+0x23c>
 800ae76:	4b31      	ldr	r3, [pc, #196]	; (800af3c <ip4_reass+0x2f4>)
 800ae78:	4933      	ldr	r1, [pc, #204]	; (800af48 <ip4_reass+0x300>)
 800ae7a:	4832      	ldr	r0, [pc, #200]	; (800af44 <ip4_reass+0x2fc>)
 800ae7c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800ae80:	f001 fcf8 	bl	800c874 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800ae84:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800ae86:	88ea      	ldrh	r2, [r5, #6]
 800ae88:	88b3      	ldrh	r3, [r6, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	e798      	b.n	800adc0 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800ae8e:	6863      	ldr	r3, [r4, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0a2      	beq.n	800adda <ip4_reass+0x192>
 800ae94:	6859      	ldr	r1, [r3, #4]
 800ae96:	888b      	ldrh	r3, [r1, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d19e      	bne.n	800adda <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800ae9c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800ae9e:	b99b      	cbnz	r3, 800aec8 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 800aea0:	42b1      	cmp	r1, r6
 800aea2:	d106      	bne.n	800aeb2 <ip4_reass+0x26a>
 800aea4:	4b25      	ldr	r3, [pc, #148]	; (800af3c <ip4_reass+0x2f4>)
 800aea6:	4929      	ldr	r1, [pc, #164]	; (800af4c <ip4_reass+0x304>)
 800aea8:	4826      	ldr	r0, [pc, #152]	; (800af44 <ip4_reass+0x2fc>)
 800aeaa:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800aeae:	f001 fce1 	bl	800c874 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800aeb2:	6833      	ldr	r3, [r6, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d092      	beq.n	800adde <ip4_reass+0x196>
 800aeb8:	4b20      	ldr	r3, [pc, #128]	; (800af3c <ip4_reass+0x2f4>)
 800aeba:	4925      	ldr	r1, [pc, #148]	; (800af50 <ip4_reass+0x308>)
 800aebc:	4821      	ldr	r0, [pc, #132]	; (800af44 <ip4_reass+0x2fc>)
 800aebe:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800aec2:	f001 fcd7 	bl	800c874 <iprintf>
 800aec6:	e78a      	b.n	800adde <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 800aec8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800aeca:	88f0      	ldrh	r0, [r6, #6]
 800aecc:	8893      	ldrh	r3, [r2, #4]
 800aece:	4298      	cmp	r0, r3
 800aed0:	d183      	bne.n	800adda <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800aed2:	6813      	ldr	r3, [r2, #0]
 800aed4:	4616      	mov	r6, r2
 800aed6:	e7e2      	b.n	800ae9e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7fa f98b 	bl	80051f4 <pbuf_clen>
 800aede:	4a15      	ldr	r2, [pc, #84]	; (800af34 <ip4_reass+0x2ec>)
 800aee0:	8813      	ldrh	r3, [r2, #0]
 800aee2:	1a18      	subs	r0, r3, r0
 800aee4:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800aee6:	4638      	mov	r0, r7
 800aee8:	f7f9 ffd0 	bl	8004e8c <pbuf_free>
 800aeec:	e742      	b.n	800ad74 <ip4_reass+0x12c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800aeee:	4698      	mov	r8, r3
 800aef0:	e775      	b.n	800adde <ip4_reass+0x196>
      iprh = (struct ip_reass_helper*)r->payload;
 800aef2:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800aef6:	f06f 0113 	mvn.w	r1, #19
 800aefa:	4638      	mov	r0, r7
 800aefc:	f7f9 ffc0 	bl	8004e80 <pbuf_header>
      pbuf_cat(p, r);
 800af00:	4639      	mov	r1, r7
 800af02:	4628      	mov	r0, r5
 800af04:	f7fa f99a 	bl	800523c <pbuf_cat>
      r = iprh->next_pbuf;
 800af08:	f8d8 7000 	ldr.w	r7, [r8]
 800af0c:	e795      	b.n	800ae3a <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800af0e:	680b      	ldr	r3, [r1, #0]
 800af10:	42a3      	cmp	r3, r4
 800af12:	d002      	beq.n	800af1a <ip4_reass+0x2d2>
 800af14:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800af16:	2900      	cmp	r1, #0
 800af18:	d1f9      	bne.n	800af0e <ip4_reass+0x2c6>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff fd7c 	bl	800aa18 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800af20:	4628      	mov	r0, r5
 800af22:	f7fa f967 	bl	80051f4 <pbuf_clen>
 800af26:	8833      	ldrh	r3, [r6, #0]
 800af28:	1a18      	subs	r0, r3, r0
 800af2a:	8030      	strh	r0, [r6, #0]
}
 800af2c:	4628      	mov	r0, r5
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	20003f7c 	.word	0x20003f7c
 800af38:	20003f80 	.word	0x20003f80
 800af3c:	0800f639 	.word	0x0800f639
 800af40:	0800f5d3 	.word	0x0800f5d3
 800af44:	0800d741 	.word	0x0800d741
 800af48:	0800f5b5 	.word	0x0800f5b5
 800af4c:	0800f60a 	.word	0x0800f60a
 800af50:	0800f617 	.word	0x0800f617
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800af54:	88e8      	ldrh	r0, [r5, #6]
 800af56:	f7f9 fb5f 	bl	8004618 <lwip_htons>
 800af5a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800af5e:	2800      	cmp	r0, #0
 800af60:	f47f aec0 	bne.w	800ace4 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800af64:	89e0      	ldrh	r0, [r4, #14]
 800af66:	f7f9 fb57 	bl	8004618 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800af6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800af6e:	2800      	cmp	r0, #0
 800af70:	f43f aeb8 	beq.w	800ace4 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800af74:	462b      	mov	r3, r5
 800af76:	f104 0208 	add.w	r2, r4, #8
 800af7a:	f105 0114 	add.w	r1, r5, #20
 800af7e:	f853 0b04 	ldr.w	r0, [r3], #4
 800af82:	f842 0b04 	str.w	r0, [r2], #4
 800af86:	428b      	cmp	r3, r1
 800af88:	d1f9      	bne.n	800af7e <ip4_reass+0x336>
 800af8a:	e6ab      	b.n	800ace4 <ip4_reass+0x9c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800af8c:	f1bb 0f00 	cmp.w	fp, #0
 800af90:	f43f af23 	beq.w	800adda <ip4_reass+0x192>
 800af94:	f04f 0800 	mov.w	r8, #0
 800af98:	e717      	b.n	800adca <ip4_reass+0x182>
 800af9a:	bf00      	nop

0800af9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800afa0:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
{
 800afa4:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800afa6:	2308      	movs	r3, #8
 800afa8:	f1a8 0814 	sub.w	r8, r8, #20
 800afac:	fb98 f8f3 	sdiv	r8, r8, r3
 800afb0:	fa1f f388 	uxth.w	r3, r8
 800afb4:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800afb6:	6843      	ldr	r3, [r0, #4]
{
 800afb8:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800afba:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800afbc:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800afbe:	f006 060f 	and.w	r6, r6, #15
 800afc2:	00b6      	lsls	r6, r6, #2
 800afc4:	2e14      	cmp	r6, #20
{
 800afc6:	4607      	mov	r7, r0
 800afc8:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800afca:	d00b      	beq.n	800afe4 <ip4_frag+0x48>
 800afcc:	4b5a      	ldr	r3, [pc, #360]	; (800b138 <ip4_frag+0x19c>)
 800afce:	495b      	ldr	r1, [pc, #364]	; (800b13c <ip4_frag+0x1a0>)
 800afd0:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800afd4:	485a      	ldr	r0, [pc, #360]	; (800b140 <ip4_frag+0x1a4>)
 800afd6:	f001 fc4d 	bl	800c874 <iprintf>
 800afda:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800afde:	b00b      	add	sp, #44	; 0x2c
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800afe4:	9b02      	ldr	r3, [sp, #8]
 800afe6:	88d8      	ldrh	r0, [r3, #6]
 800afe8:	f7f9 fb16 	bl	8004618 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800afec:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800aff0:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800aff4:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800aff6:	d004      	beq.n	800b002 <ip4_frag+0x66>
 800aff8:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <ip4_frag+0x19c>)
 800affa:	4952      	ldr	r1, [pc, #328]	; (800b144 <ip4_frag+0x1a8>)
 800affc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b000:	e7e8      	b.n	800afd4 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800b002:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800b004:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 800b008:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800b00a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800b00e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800b010:	9306      	str	r3, [sp, #24]
  while (left) {
 800b012:	b90d      	cbnz	r5, 800b018 <ip4_frag+0x7c>
  return ERR_OK;
 800b014:	4628      	mov	r0, r5
 800b016:	e7e2      	b.n	800afde <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 800b018:	9b06      	ldr	r3, [sp, #24]
 800b01a:	42ab      	cmp	r3, r5
 800b01c:	bfa8      	it	ge
 800b01e:	462b      	movge	r3, r5
 800b020:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b022:	2200      	movs	r2, #0
 800b024:	2114      	movs	r1, #20
 800b026:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800b028:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b02a:	f7f9 ff97 	bl	8004f5c <pbuf_alloc>
    if (rambuf == NULL) {
 800b02e:	4680      	mov	r8, r0
 800b030:	b370      	cbz	r0, 800b090 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b032:	897b      	ldrh	r3, [r7, #10]
 800b034:	2b13      	cmp	r3, #19
 800b036:	d806      	bhi.n	800b046 <ip4_frag+0xaa>
 800b038:	4b3f      	ldr	r3, [pc, #252]	; (800b138 <ip4_frag+0x19c>)
 800b03a:	4943      	ldr	r1, [pc, #268]	; (800b148 <ip4_frag+0x1ac>)
 800b03c:	4840      	ldr	r0, [pc, #256]	; (800b140 <ip4_frag+0x1a4>)
 800b03e:	f240 3209 	movw	r2, #777	; 0x309
 800b042:	f001 fc17 	bl	800c874 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b046:	9b02      	ldr	r3, [sp, #8]
 800b048:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b04c:	4619      	mov	r1, r3
 800b04e:	3114      	adds	r1, #20
 800b050:	f853 0b04 	ldr.w	r0, [r3], #4
 800b054:	f842 0b04 	str.w	r0, [r2], #4
 800b058:	428b      	cmp	r3, r1
 800b05a:	d1f9      	bne.n	800b050 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b05c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800b060:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b064:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800b066:	f1b9 0f00 	cmp.w	r9, #0
 800b06a:	d037      	beq.n	800b0dc <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800b06c:	897c      	ldrh	r4, [r7, #10]
 800b06e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b070:	b2a4      	uxth	r4, r4
 800b072:	454c      	cmp	r4, r9
 800b074:	bf28      	it	cs
 800b076:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800b078:	b914      	cbnz	r4, 800b080 <ip4_frag+0xe4>
        p = p->next;
 800b07a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800b07c:	2600      	movs	r6, #0
 800b07e:	e7f2      	b.n	800b066 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b080:	2005      	movs	r0, #5
 800b082:	f7f9 fd55 	bl	8004b30 <memp_malloc>
      if (pcr == NULL) {
 800b086:	4682      	mov	sl, r0
 800b088:	b928      	cbnz	r0, 800b096 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800b08a:	4640      	mov	r0, r8
 800b08c:	f7f9 fefe 	bl	8004e8c <pbuf_free>
  return ERR_MEM;
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	e7a3      	b.n	800afde <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b096:	9401      	str	r4, [sp, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4433      	add	r3, r6
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	2004      	movs	r0, #4
 800b0a6:	f7f9 feb3 	bl	8004e10 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800b0aa:	b918      	cbnz	r0, 800b0b4 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b0ac:	4650      	mov	r0, sl
 800b0ae:	f7ff fd85 	bl	800abbc <ip_frag_free_pbuf_custom_ref>
 800b0b2:	e7ea      	b.n	800b08a <ip4_frag+0xee>
 800b0b4:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	f7fa f8a4 	bl	8005204 <pbuf_ref>
      left_to_copy -= newpbuflen;
 800b0bc:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b0c0:	4b22      	ldr	r3, [pc, #136]	; (800b14c <ip4_frag+0x1b0>)
      pcr->original = p;
 800b0c2:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b0c6:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800b0ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0cc:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 800b0ce:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800b0d2:	f7fa f8b3 	bl	800523c <pbuf_cat>
      if (left_to_copy) {
 800b0d6:	f1b9 0f00 	cmp.w	r9, #0
 800b0da:	d1ce      	bne.n	800b07a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800b0dc:	9b04      	ldr	r3, [sp, #16]
 800b0de:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800b0e2:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
 800b0e6:	3b13      	subs	r3, #19
    if (!last) {
 800b0e8:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800b0ea:	bfa8      	it	ge
 800b0ec:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b0f0:	f7f9 fa92 	bl	8004618 <lwip_htons>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b0f8:	9b05      	ldr	r3, [sp, #20]
 800b0fa:	f103 0014 	add.w	r0, r3, #20
 800b0fe:	b280      	uxth	r0, r0
 800b100:	f7f9 fa8a 	bl	8004618 <lwip_htons>
 800b104:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800b106:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b108:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b10a:	2300      	movs	r3, #0
 800b10c:	7293      	strb	r3, [r2, #10]
 800b10e:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800b110:	4641      	mov	r1, r8
 800b112:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b116:	9a08      	ldr	r2, [sp, #32]
 800b118:	4658      	mov	r0, fp
 800b11a:	4798      	blx	r3
    pbuf_free(rambuf);
 800b11c:	4640      	mov	r0, r8
 800b11e:	f7f9 feb5 	bl	8004e8c <pbuf_free>
    left -= fragsize;
 800b122:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800b124:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 800b126:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800b128:	9b04      	ldr	r3, [sp, #16]
 800b12a:	4413      	add	r3, r2
    poff += newpbuflen;
 800b12c:	4426      	add	r6, r4
    ofo += nfb;
 800b12e:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 800b130:	b2b6      	uxth	r6, r6
    left -= fragsize;
 800b132:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	e76c      	b.n	800b012 <ip4_frag+0x76>
 800b138:	0800f639 	.word	0x0800f639
 800b13c:	0800f554 	.word	0x0800f554
 800b140:	0800d741 	.word	0x0800d741
 800b144:	0800f57b 	.word	0x0800f57b
 800b148:	0800f595 	.word	0x0800f595
 800b14c:	0800abe9 	.word	0x0800abe9

0800b150 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800b150:	8943      	ldrh	r3, [r0, #10]
 800b152:	2b0e      	cmp	r3, #14
{
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800b15a:	d914      	bls.n	800b186 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b15c:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b15e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800b160:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800b162:	07d9      	lsls	r1, r3, #31
 800b164:	d50a      	bpl.n	800b17c <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b166:	2b01      	cmp	r3, #1
 800b168:	d111      	bne.n	800b18e <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b16a:	7843      	ldrb	r3, [r0, #1]
 800b16c:	b933      	cbnz	r3, 800b17c <ethernet_input+0x2c>
 800b16e:	7883      	ldrb	r3, [r0, #2]
 800b170:	2b5e      	cmp	r3, #94	; 0x5e
 800b172:	d103      	bne.n	800b17c <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b174:	7b63      	ldrb	r3, [r4, #13]
 800b176:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b17a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b17c:	2e08      	cmp	r6, #8
 800b17e:	d010      	beq.n	800b1a2 <ethernet_input+0x52>
 800b180:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b184:	d01e      	beq.n	800b1c4 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b186:	4620      	mov	r0, r4
 800b188:	f7f9 fe80 	bl	8004e8c <pbuf_free>
  return ERR_OK;
 800b18c:	e018      	b.n	800b1c0 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b18e:	2206      	movs	r2, #6
 800b190:	4914      	ldr	r1, [pc, #80]	; (800b1e4 <ethernet_input+0x94>)
 800b192:	f001 fa97 	bl	800c6c4 <memcmp>
 800b196:	2800      	cmp	r0, #0
 800b198:	d1f0      	bne.n	800b17c <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800b19a:	7b63      	ldrb	r3, [r4, #13]
 800b19c:	f043 0308 	orr.w	r3, r3, #8
 800b1a0:	e7eb      	b.n	800b17a <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b1a2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b1a6:	071a      	lsls	r2, r3, #28
 800b1a8:	d5ed      	bpl.n	800b186 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b1aa:	f06f 010d 	mvn.w	r1, #13
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f7f9 fe66 	bl	8004e80 <pbuf_header>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d1e6      	bne.n	800b186 <ethernet_input+0x36>
        ip4_input(p, netif);
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7ff fabc 	bl	800a738 <ip4_input>
}
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b1c4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b1c8:	071b      	lsls	r3, r3, #28
 800b1ca:	d5dc      	bpl.n	800b186 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b1cc:	f06f 010d 	mvn.w	r1, #13
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7f9 fe55 	bl	8004e80 <pbuf_header>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d1d5      	bne.n	800b186 <ethernet_input+0x36>
        etharp_input(p, netif);
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f7fe ff1b 	bl	800a018 <etharp_input>
      break;
 800b1e2:	e7ed      	b.n	800b1c0 <ethernet_input+0x70>
 800b1e4:	0800f6ed 	.word	0x0800f6ed

0800b1e8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b1ee:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	4616      	mov	r6, r2
 800b1f6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800b1f8:	f7f9 fa0e 	bl	8004618 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b1fc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800b1fe:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b200:	4628      	mov	r0, r5
 800b202:	f7f9 fe3d 	bl	8004e80 <pbuf_header>
 800b206:	b9e0      	cbnz	r0, 800b242 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b208:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800b20a:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	600b      	str	r3, [r1, #0]
 800b212:	88bb      	ldrh	r3, [r7, #4]
 800b214:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b216:	6833      	ldr	r3, [r6, #0]
 800b218:	f8c1 3006 	str.w	r3, [r1, #6]
 800b21c:	88b3      	ldrh	r3, [r6, #4]
 800b21e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b220:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b224:	2b06      	cmp	r3, #6
 800b226:	d006      	beq.n	800b236 <ethernet_output+0x4e>
 800b228:	4b08      	ldr	r3, [pc, #32]	; (800b24c <ethernet_output+0x64>)
 800b22a:	4909      	ldr	r1, [pc, #36]	; (800b250 <ethernet_output+0x68>)
 800b22c:	4809      	ldr	r0, [pc, #36]	; (800b254 <ethernet_output+0x6c>)
 800b22e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b232:	f001 fb1f 	bl	800c874 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b236:	69a3      	ldr	r3, [r4, #24]
 800b238:	4629      	mov	r1, r5
 800b23a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b240:	4718      	bx	r3
}
 800b242:	f06f 0001 	mvn.w	r0, #1
 800b246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b24a:	bf00      	nop
 800b24c:	0800f6f3 	.word	0x0800f6f3
 800b250:	0800f728 	.word	0x0800f728
 800b254:	0800d741 	.word	0x0800d741

0800b258 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800b258:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800b25a:	2304      	movs	r3, #4
{
 800b25c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800b25e:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b260:	4668      	mov	r0, sp
 800b262:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800b264:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b266:	f7f6 ffe1 	bl	800222c <osMessageCreate>
 800b26a:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800b26c:	fab0 f080 	clz	r0, r0
 800b270:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800b272:	4240      	negs	r0, r0
 800b274:	b002      	add	sp, #8
 800b276:	bd10      	pop	{r4, pc}

0800b278 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4604      	mov	r4, r0
 800b27c:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800b27e:	f04f 32ff 	mov.w	r2, #4294967295
 800b282:	4629      	mov	r1, r5
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	f7f6 ffd7 	bl	8002238 <osMessagePut>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d1f7      	bne.n	800b27e <sys_mbox_post+0x6>
}
 800b28e:	bd38      	pop	{r3, r4, r5, pc}

0800b290 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800b290:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800b292:	2200      	movs	r2, #0
 800b294:	6800      	ldr	r0, [r0, #0]
 800b296:	f7f6 ffcf 	bl	8002238 <osMessagePut>
 800b29a:	3000      	adds	r0, #0
 800b29c:	bf18      	it	ne
 800b29e:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800b2a0:	4240      	negs	r0, r0
 800b2a2:	bd08      	pop	{r3, pc}

0800b2a4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800b2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	4617      	mov	r7, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800b2ae:	f7f6 ff08 	bl	80020c2 <osKernelSysTick>
 800b2b2:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800b2b4:	b177      	cbz	r7, 800b2d4 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800b2b6:	463a      	mov	r2, r7
 800b2b8:	6831      	ldr	r1, [r6, #0]
 800b2ba:	a801      	add	r0, sp, #4
 800b2bc:	f7f6 ffe4 	bl	8002288 <osMessageGet>
    
    if(event.status == osEventMessage)
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	2b10      	cmp	r3, #16
 800b2c4:	d10d      	bne.n	800b2e2 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800b2ca:	f7f6 fefa 	bl	80020c2 <osKernelSysTick>
 800b2ce:	1b00      	subs	r0, r0, r4
  }
}
 800b2d0:	b005      	add	sp, #20
 800b2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800b2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d8:	6831      	ldr	r1, [r6, #0]
 800b2da:	a801      	add	r0, sp, #4
 800b2dc:	f7f6 ffd4 	bl	8002288 <osMessageGet>
 800b2e0:	e7f1      	b.n	800b2c6 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800b2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e6:	e7f3      	b.n	800b2d0 <sys_arch_mbox_fetch+0x2c>

0800b2e8 <sys_mbox_valid>:
 800b2e8:	6800      	ldr	r0, [r0, #0]
 800b2ea:	3000      	adds	r0, #0
 800b2ec:	bf18      	it	ne
 800b2ee:	2001      	movne	r0, #1
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800b2f4:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800b2f6:	4803      	ldr	r0, [pc, #12]	; (800b304 <sys_init+0x10>)
 800b2f8:	f7f6 ff0a 	bl	8002110 <osMutexCreate>
 800b2fc:	4b02      	ldr	r3, [pc, #8]	; (800b308 <sys_init+0x14>)
 800b2fe:	6018      	str	r0, [r3, #0]
}
 800b300:	bd08      	pop	{r3, pc}
 800b302:	bf00      	nop
 800b304:	0800f760 	.word	0x0800f760
 800b308:	2000770c 	.word	0x2000770c

0800b30c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800b30c:	b513      	push	{r0, r1, r4, lr}
 800b30e:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 800b310:	a802      	add	r0, sp, #8
 800b312:	2300      	movs	r3, #0
 800b314:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800b318:	f7f6 fefa 	bl	8002110 <osMutexCreate>
 800b31c:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800b31e:	fab0 f080 	clz	r0, r0
 800b322:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800b324:	4240      	negs	r0, r0
 800b326:	b002      	add	sp, #8
 800b328:	bd10      	pop	{r4, pc}

0800b32a <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800b32a:	f04f 31ff 	mov.w	r1, #4294967295
 800b32e:	6800      	ldr	r0, [r0, #0]
 800b330:	f7f6 bef2 	b.w	8002118 <osMutexWait>

0800b334 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800b334:	6800      	ldr	r0, [r0, #0]
 800b336:	f7f6 bf17 	b.w	8002168 <osMutexRelease>

0800b33a <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800b33a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800b33c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b340:	9908      	ldr	r1, [sp, #32]
 800b342:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b346:	2100      	movs	r1, #0
 800b348:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800b34c:	a801      	add	r0, sp, #4
 800b34e:	4611      	mov	r1, r2
 800b350:	f7f6 febe 	bl	80020d0 <osThreadCreate>
}
 800b354:	b007      	add	sp, #28
 800b356:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b35c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800b35c:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800b35e:	4b04      	ldr	r3, [pc, #16]	; (800b370 <sys_arch_protect+0x14>)
 800b360:	f04f 31ff 	mov.w	r1, #4294967295
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	f7f6 fed7 	bl	8002118 <osMutexWait>
  return (sys_prot_t)1;
}
 800b36a:	2001      	movs	r0, #1
 800b36c:	bd08      	pop	{r3, pc}
 800b36e:	bf00      	nop
 800b370:	2000770c 	.word	0x2000770c

0800b374 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800b374:	4b01      	ldr	r3, [pc, #4]	; (800b37c <sys_arch_unprotect+0x8>)
 800b376:	6818      	ldr	r0, [r3, #0]
 800b378:	f7f6 bef6 	b.w	8002168 <osMutexRelease>
 800b37c:	2000770c 	.word	0x2000770c

0800b380 <__io_putchar>:

#ifdef STM32F429xx
	int __io_putchar(int ch)

	{
		while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 800b380:	4b04      	ldr	r3, [pc, #16]	; (800b394 <__io_putchar+0x14>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	0612      	lsls	r2, r2, #24
 800b38a:	d5fc      	bpl.n	800b386 <__io_putchar+0x6>
		pUart->Instance->DR = (uint16_t)ch;
 800b38c:	b280      	uxth	r0, r0
 800b38e:	6058      	str	r0, [r3, #4]
		return 0;
	}
 800b390:	2000      	movs	r0, #0
 800b392:	4770      	bx	lr
 800b394:	20003f84 	.word	0x20003f84

0800b398 <debug_init>:
#endif


void debug_init(UART_HandleTypeDef* handler)
{
	pUart = handler;
 800b398:	4b01      	ldr	r3, [pc, #4]	; (800b3a0 <debug_init+0x8>)
 800b39a:	6018      	str	r0, [r3, #0]
}
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	20003f84 	.word	0x20003f84

0800b3a4 <debug_chr>:
extern char inkey(void);

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
	__io_putchar(chr);
 800b3a4:	f7ff bfec 	b.w	800b380 <__io_putchar>

0800b3a8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b3ac:	4a25      	ldr	r2, [pc, #148]	; (800b444 <low_level_output+0x9c>)
 800b3ae:	9200      	str	r2, [sp, #0]
 800b3b0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800b3b2:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b3b6:	68b3      	ldr	r3, [r6, #8]
{
 800b3b8:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800b3ba:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b3bc:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800b3c0:	b92c      	cbnz	r4, 800b3ce <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	481f      	ldr	r0, [pc, #124]	; (800b444 <low_level_output+0x9c>)
 800b3c6:	f7f5 fc9f 	bl	8000d08 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	e004      	b.n	800b3d8 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b3ce:	6832      	ldr	r2, [r6, #0]
 800b3d0:	2a00      	cmp	r2, #0
 800b3d2:	da11      	bge.n	800b3f8 <low_level_output+0x50>
        errval = ERR_USE;
 800b3d4:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b3d8:	9b00      	ldr	r3, [sp, #0]
 800b3da:	f241 0214 	movw	r2, #4116	; 0x1014
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	5899      	ldr	r1, [r3, r2]
 800b3e2:	0689      	lsls	r1, r1, #26
 800b3e4:	d505      	bpl.n	800b3f2 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b3e6:	2120      	movs	r1, #32
 800b3e8:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b3ea:	f241 0204 	movw	r2, #4100	; 0x1004
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800b3f2:	b003      	add	sp, #12
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800b3f8:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b3fc:	4645      	mov	r5, r8
      payloadoffset = 0;
 800b3fe:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b402:	eb05 0809 	add.w	r8, r5, r9
 800b406:	6861      	ldr	r1, [r4, #4]
 800b408:	45d8      	cmp	r8, fp
 800b40a:	eb03 0005 	add.w	r0, r3, r5
 800b40e:	4451      	add	r1, sl
 800b410:	d807      	bhi.n	800b422 <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b412:	464a      	mov	r2, r9
 800b414:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800b416:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b418:	f001 f963 	bl	800c6e2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800b41c:	6824      	ldr	r4, [r4, #0]
 800b41e:	9b01      	ldr	r3, [sp, #4]
 800b420:	e7ce      	b.n	800b3c0 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b422:	ebab 0505 	sub.w	r5, fp, r5
 800b426:	462a      	mov	r2, r5
 800b428:	f001 f95b 	bl	800c6e2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b42c:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b42e:	6833      	ldr	r3, [r6, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	dbcf      	blt.n	800b3d4 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b434:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b436:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b438:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b43a:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800b43e:	2500      	movs	r5, #0
 800b440:	e7df      	b.n	800b402 <low_level_output+0x5a>
 800b442:	bf00      	nop
 800b444:	20008fe0 	.word	0x20008fe0

0800b448 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800b448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4683      	mov	fp, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800b44e:	4c36      	ldr	r4, [pc, #216]	; (800b528 <ethernetif_input+0xe0>)
 800b450:	6820      	ldr	r0, [r4, #0]
 800b452:	f04f 31ff 	mov.w	r1, #4294967295
 800b456:	f7f6 febf 	bl	80021d8 <osSemaphoreWait>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d1f8      	bne.n	800b450 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b45e:	4c33      	ldr	r4, [pc, #204]	; (800b52c <ethernetif_input+0xe4>)
 800b460:	4620      	mov	r0, r4
 800b462:	f7f5 fcc5 	bl	8000df0 <HAL_ETH_GetReceivedFrame_IT>
 800b466:	4605      	mov	r5, r0
 800b468:	2800      	cmp	r0, #0
 800b46a:	d1f0      	bne.n	800b44e <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 800b46c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 800b46e:	2900      	cmp	r1, #0
 800b470:	d051      	beq.n	800b516 <ethernetif_input+0xce>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b472:	2203      	movs	r2, #3
 800b474:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b476:	6c26      	ldr	r6, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b478:	f7f9 fd70 	bl	8004f5c <pbuf_alloc>
  if (p != NULL)
 800b47c:	4607      	mov	r7, r0
 800b47e:	2800      	cmp	r0, #0
 800b480:	d049      	beq.n	800b516 <ethernetif_input+0xce>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b482:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b486:	9600      	str	r6, [sp, #0]
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b488:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b48a:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800b48e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800b492:	462e      	mov	r6, r5
      payloadoffset = 0;
 800b494:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b496:	18b5      	adds	r5, r6, r2
 800b498:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b49c:	9900      	ldr	r1, [sp, #0]
 800b49e:	454d      	cmp	r5, r9
 800b4a0:	4418      	add	r0, r3
 800b4a2:	4431      	add	r1, r6
 800b4a4:	d826      	bhi.n	800b4f4 <ethernetif_input+0xac>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b4a6:	f001 f91c 	bl	800c6e2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800b4aa:	f8d8 8000 	ldr.w	r8, [r8]
 800b4ae:	f1b8 0f00 	cmp.w	r8, #0
 800b4b2:	d1ec      	bne.n	800b48e <ethernetif_input+0x46>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b4b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b4b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	4282      	cmp	r2, r0
 800b4bc:	d12d      	bne.n	800b51a <ethernetif_input+0xd2>
    heth.RxFrameInfos.SegCount =0;  
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800b4c2:	f241 0214 	movw	r2, #4116	; 0x1014
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	5899      	ldr	r1, [r3, r2]
 800b4ca:	0609      	lsls	r1, r1, #24
 800b4cc:	d505      	bpl.n	800b4da <ethernetif_input+0x92>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b4ce:	2180      	movs	r1, #128	; 0x80
 800b4d0:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800b4d2:	f241 0208 	movw	r2, #4104	; 0x1008
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800b4da:	2f00      	cmp	r7, #0
 800b4dc:	d0b7      	beq.n	800b44e <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b4de:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	4798      	blx	r3
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0b8      	beq.n	800b45e <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	f7f9 fccd 	bl	8004e8c <pbuf_free>
 800b4f2:	e7b4      	b.n	800b45e <ethernetif_input+0x16>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b4f4:	eba9 0606 	sub.w	r6, r9, r6
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	f001 f8f1 	bl	800c6e2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b500:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b504:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b508:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b50a:	9b01      	ldr	r3, [sp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b50c:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b510:	4433      	add	r3, r6
        bufferoffset = 0;
 800b512:	2600      	movs	r6, #0
 800b514:	e7bf      	b.n	800b496 <ethernetif_input+0x4e>
  struct pbuf *p = NULL;
 800b516:	2700      	movs	r7, #0
 800b518:	e7cc      	b.n	800b4b4 <ethernetif_input+0x6c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b51a:	6819      	ldr	r1, [r3, #0]
 800b51c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b520:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b522:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b524:	3201      	adds	r2, #1
 800b526:	e7c8      	b.n	800b4ba <ethernetif_input+0x72>
 800b528:	20003f88 	.word	0x20003f88
 800b52c:	20008fe0 	.word	0x20008fe0

0800b530 <HAL_ETH_MspInit>:
{
 800b530:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800b532:	6802      	ldr	r2, [r0, #0]
 800b534:	4b2d      	ldr	r3, [pc, #180]	; (800b5ec <HAL_ETH_MspInit+0xbc>)
 800b536:	429a      	cmp	r2, r3
{
 800b538:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 800b53a:	d155      	bne.n	800b5e8 <HAL_ETH_MspInit+0xb8>
    __HAL_RCC_ETH_CLK_ENABLE();
 800b53c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800b540:	2400      	movs	r4, #0
 800b542:	9400      	str	r4, [sp, #0]
 800b544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b546:	482a      	ldr	r0, [pc, #168]	; (800b5f0 <HAL_ETH_MspInit+0xc0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800b548:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b54c:	631a      	str	r2, [r3, #48]	; 0x30
 800b54e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b550:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800b554:	9200      	str	r2, [sp, #0]
 800b556:	9a00      	ldr	r2, [sp, #0]
 800b558:	9401      	str	r4, [sp, #4]
 800b55a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b55c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b560:	631a      	str	r2, [r3, #48]	; 0x30
 800b562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b564:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800b568:	9201      	str	r2, [sp, #4]
 800b56a:	9a01      	ldr	r2, [sp, #4]
 800b56c:	9402      	str	r4, [sp, #8]
 800b56e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b570:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b574:	631a      	str	r2, [r3, #48]	; 0x30
 800b576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b578:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ETH_CLK_ENABLE();
 800b57a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b57e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b580:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b582:	2603      	movs	r6, #3
 800b584:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800b586:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b588:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b58a:	2332      	movs	r3, #50	; 0x32
 800b58c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b590:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b594:	f7f5 fe54 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b598:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b59a:	a903      	add	r1, sp, #12
 800b59c:	4815      	ldr	r0, [pc, #84]	; (800b5f4 <HAL_ETH_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b59e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5a0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5a4:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5a8:	f7f5 fe4a 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b5ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b5b0:	a903      	add	r1, sp, #12
 800b5b2:	4811      	ldr	r0, [pc, #68]	; (800b5f8 <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5b4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5b6:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5ba:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b5be:	f7f5 fe3f 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b5c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b5c6:	a903      	add	r1, sp, #12
 800b5c8:	480c      	ldr	r0, [pc, #48]	; (800b5fc <HAL_ETH_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5ca:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5cc:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5d0:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b5d4:	f7f5 fe34 	bl	8001240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b5d8:	203d      	movs	r0, #61	; 0x3d
 800b5da:	4622      	mov	r2, r4
 800b5dc:	2105      	movs	r1, #5
 800b5de:	f7f5 f841 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b5e2:	203d      	movs	r0, #61	; 0x3d
 800b5e4:	f7f5 f872 	bl	80006cc <HAL_NVIC_EnableIRQ>
}
 800b5e8:	b009      	add	sp, #36	; 0x24
 800b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ec:	40028000 	.word	0x40028000
 800b5f0:	40020800 	.word	0x40020800
 800b5f4:	40020000 	.word	0x40020000
 800b5f8:	40020400 	.word	0x40020400
 800b5fc:	40021800 	.word	0x40021800

0800b600 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800b600:	4b01      	ldr	r3, [pc, #4]	; (800b608 <HAL_ETH_RxCpltCallback+0x8>)
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	f7f6 be10 	b.w	8002228 <osSemaphoreRelease>
 800b608:	20003f88 	.word	0x20003f88

0800b60c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b60c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b60e:	4604      	mov	r4, r0
{
 800b610:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b612:	b930      	cbnz	r0, 800b622 <ethernetif_init+0x16>
 800b614:	4b41      	ldr	r3, [pc, #260]	; (800b71c <ethernetif_init+0x110>)
 800b616:	4942      	ldr	r1, [pc, #264]	; (800b720 <ethernetif_init+0x114>)
 800b618:	4842      	ldr	r0, [pc, #264]	; (800b724 <ethernetif_init+0x118>)
 800b61a:	f240 2247 	movw	r2, #583	; 0x247
 800b61e:	f001 f929 	bl	800c874 <iprintf>
  heth.Instance = ETH;
 800b622:	4d41      	ldr	r5, [pc, #260]	; (800b728 <ethernetif_init+0x11c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b624:	4941      	ldr	r1, [pc, #260]	; (800b72c <ethernetif_init+0x120>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b626:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b62a:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 800b62c:	8623      	strh	r3, [r4, #48]	; 0x30
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b62e:	4b40      	ldr	r3, [pc, #256]	; (800b730 <ethernetif_init+0x124>)
 800b630:	6163      	str	r3, [r4, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b632:	e9c5 1200 	strd	r1, r2, [r5]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b636:	4b3f      	ldr	r3, [pc, #252]	; (800b734 <ethernetif_init+0x128>)
  MACAddr[0] = 0x00;
 800b638:	493f      	ldr	r1, [pc, #252]	; (800b738 <ethernetif_init+0x12c>)
  netif->linkoutput = low_level_output;
 800b63a:	61a3      	str	r3, [r4, #24]
  MACAddr[0] = 0x00;
 800b63c:	9103      	str	r1, [sp, #12]
  uint32_t regvalue = 0;
 800b63e:	2300      	movs	r3, #0
  MACAddr[3] = 0x00;
 800b640:	f44f 5190 	mov.w	r1, #4608	; 0x1200
  uint32_t regvalue = 0;
 800b644:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b646:	822b      	strh	r3, [r5, #16]
  MACAddr[3] = 0x00;
 800b648:	f8ad 1010 	strh.w	r1, [sp, #16]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b64c:	61eb      	str	r3, [r5, #28]
  heth.Init.MACAddr = &MACAddr[0];
 800b64e:	a903      	add	r1, sp, #12
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b650:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b654:	4628      	mov	r0, r5
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b656:	e9c5 1205 	strd	r1, r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b65a:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b65c:	f7f5 fcb8 	bl	8000fd0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800b660:	b928      	cbnz	r0, 800b66e <ethernetif_init+0x62>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b662:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b666:	f043 0304 	orr.w	r3, r3, #4
 800b66a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b66e:	2304      	movs	r3, #4
 800b670:	4a32      	ldr	r2, [pc, #200]	; (800b73c <ethernetif_init+0x130>)
 800b672:	4933      	ldr	r1, [pc, #204]	; (800b740 <ethernetif_init+0x134>)
 800b674:	482c      	ldr	r0, [pc, #176]	; (800b728 <ethernetif_init+0x11c>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b676:	4e33      	ldr	r6, [pc, #204]	; (800b744 <ethernetif_init+0x138>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b678:	f7f5 fad0 	bl	8000c1c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b67c:	2304      	movs	r3, #4
 800b67e:	4a32      	ldr	r2, [pc, #200]	; (800b748 <ethernetif_init+0x13c>)
 800b680:	4932      	ldr	r1, [pc, #200]	; (800b74c <ethernetif_init+0x140>)
 800b682:	4829      	ldr	r0, [pc, #164]	; (800b728 <ethernetif_init+0x11c>)
 800b684:	f7f5 fb06 	bl	8000c94 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b688:	2306      	movs	r3, #6
 800b68a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b68e:	696b      	ldr	r3, [r5, #20]
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b696:	785a      	ldrb	r2, [r3, #1]
 800b698:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b69c:	789a      	ldrb	r2, [r3, #2]
 800b69e:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b6a2:	78da      	ldrb	r2, [r3, #3]
 800b6a4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b6a8:	791a      	ldrb	r2, [r3, #4]
 800b6aa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b6ae:	795b      	ldrb	r3, [r3, #5]
 800b6b0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800b6b4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b6b8:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b6ba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800b6be:	a80a      	add	r0, sp, #40	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b6c0:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 800b6c4:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b6c6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800b6ca:	f840 7d20 	str.w	r7, [r0, #-32]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	f7f6 fd6e 	bl	80021b0 <osSemaphoreCreate>
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <ethernetif_init+0x144>)
 800b6d6:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b6d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b6da:	ad05      	add	r5, sp, #20
 800b6dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b6de:	6833      	ldr	r3, [r6, #0]
 800b6e0:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	a805      	add	r0, sp, #20
 800b6e6:	f7f6 fcf3 	bl	80020d0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800b6ea:	480f      	ldr	r0, [pc, #60]	; (800b728 <ethernetif_init+0x11c>)
 800b6ec:	f7f5 fd6c 	bl	80011c8 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b6f0:	aa01      	add	r2, sp, #4
 800b6f2:	210b      	movs	r1, #11
 800b6f4:	480c      	ldr	r0, [pc, #48]	; (800b728 <ethernetif_init+0x11c>)
 800b6f6:	f7f5 fbfa 	bl	8000eee <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b6fa:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b6fc:	480a      	ldr	r0, [pc, #40]	; (800b728 <ethernetif_init+0x11c>)
  regvalue |= (PHY_ISFR_INT4);
 800b6fe:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b702:	210b      	movs	r1, #11
  regvalue |= (PHY_ISFR_INT4);
 800b704:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b706:	f7f5 fc2c 	bl	8000f62 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b70a:	aa01      	add	r2, sp, #4
 800b70c:	210b      	movs	r1, #11
 800b70e:	4806      	ldr	r0, [pc, #24]	; (800b728 <ethernetif_init+0x11c>)
 800b710:	f7f5 fbed 	bl	8000eee <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800b714:	4638      	mov	r0, r7
 800b716:	b00b      	add	sp, #44	; 0x2c
 800b718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b71a:	bf00      	nop
 800b71c:	0800f764 	.word	0x0800f764
 800b720:	0800ee15 	.word	0x0800ee15
 800b724:	0800d741 	.word	0x0800d741
 800b728:	20008fe0 	.word	0x20008fe0
 800b72c:	40028000 	.word	0x40028000
 800b730:	0800a3e5 	.word	0x0800a3e5
 800b734:	0800b3a9 	.word	0x0800b3a9
 800b738:	00e18000 	.word	0x00e18000
 800b73c:	20009028 	.word	0x20009028
 800b740:	20007710 	.word	0x20007710
 800b744:	0800d660 	.word	0x0800d660
 800b748:	20007790 	.word	0x20007790
 800b74c:	20008f60 	.word	0x20008f60
 800b750:	20003f88 	.word	0x20003f88

0800b754 <sys_now>:
 800b754:	f7f4 bf5a 	b.w	800060c <HAL_GetTick>

0800b758 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b758:	b530      	push	{r4, r5, lr}
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b75a:	2100      	movs	r1, #0
{
 800b75c:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
 800b75e:	4608      	mov	r0, r1
 800b760:	f7f8 f936 	bl	80039d0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;
 800b764:	4b11      	ldr	r3, [pc, #68]	; (800b7ac <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 800b766:	4912      	ldr	r1, [pc, #72]	; (800b7b0 <MX_LWIP_Init+0x58>)
  netmask.addr = 0;
 800b768:	4a12      	ldr	r2, [pc, #72]	; (800b7b4 <MX_LWIP_Init+0x5c>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b76a:	4d13      	ldr	r5, [pc, #76]	; (800b7b8 <MX_LWIP_Init+0x60>)
 800b76c:	4c13      	ldr	r4, [pc, #76]	; (800b7bc <MX_LWIP_Init+0x64>)
  ipaddr.addr = 0;
 800b76e:	2000      	movs	r0, #0
  gw.addr = 0;
 800b770:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800b772:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800b774:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b776:	9502      	str	r5, [sp, #8]
 800b778:	4d11      	ldr	r5, [pc, #68]	; (800b7c0 <MX_LWIP_Init+0x68>)
 800b77a:	e9cd 0500 	strd	r0, r5, [sp]
 800b77e:	4620      	mov	r0, r4
 800b780:	f7f9 fa56 	bl	8004c30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b784:	4620      	mov	r0, r4
 800b786:	f7f9 fa91 	bl	8004cac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b78a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b78e:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b790:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800b792:	d507      	bpl.n	800b7a4 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
 800b794:	f7f9 fa90 	bl	8004cb8 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800b798:	4808      	ldr	r0, [pc, #32]	; (800b7bc <MX_LWIP_Init+0x64>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b79a:	b005      	add	sp, #20
 800b79c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 800b7a0:	f7fe b970 	b.w	8009a84 <dhcp_start>
    netif_set_down(&gnetif);
 800b7a4:	f7f9 fa97 	bl	8004cd6 <netif_set_down>
 800b7a8:	e7f6      	b.n	800b798 <MX_LWIP_Init+0x40>
 800b7aa:	bf00      	nop
 800b7ac:	2000a834 	.word	0x2000a834
 800b7b0:	2000a82c 	.word	0x2000a82c
 800b7b4:	2000a830 	.word	0x2000a830
 800b7b8:	08003951 	.word	0x08003951
 800b7bc:	2000a7f8 	.word	0x2000a7f8
 800b7c0:	0800b60d 	.word	0x0800b60d

0800b7c4 <SystemClock_Config>:
  while (1){}
}


void SystemClock_Config(void)
{
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;


  __HAL_RCC_PWR_CLK_ENABLE();
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	4b28      	ldr	r3, [pc, #160]	; (800b86c <SystemClock_Config+0xa8>)
 800b7cc:	9101      	str	r1, [sp, #4]
 800b7ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b7d4:	641a      	str	r2, [r3, #64]	; 0x40
 800b7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800b7d8:	4a25      	ldr	r2, [pc, #148]	; (800b870 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b7da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800b7e2:	9102      	str	r1, [sp, #8]
 800b7e4:	6813      	ldr	r3, [r2, #0]
 800b7e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b7ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	6813      	ldr	r3, [r2, #0]
 800b7f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b7f6:	9302      	str	r3, [sp, #8]
 800b7f8:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b800:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b802:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
 800b80a:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b80c:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b810:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 96;
 800b812:	2360      	movs	r3, #96	; 0x60
 800b814:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b818:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b81c:	f7f5 fe02 	bl	8001424 <HAL_RCC_OscConfig>
 800b820:	b100      	cbz	r0, 800b824 <SystemClock_Config+0x60>
 800b822:	e7fe      	b.n	800b822 <SystemClock_Config+0x5e>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b824:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b826:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b82a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b82e:	260f      	movs	r6, #15

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b830:	2103      	movs	r1, #3
 800b832:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b834:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b838:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b83c:	f7f5 ffa2 	bl	8001784 <HAL_RCC_ClockConfig>
 800b840:	4605      	mov	r5, r0
 800b842:	b100      	cbz	r0, 800b846 <SystemClock_Config+0x82>
 800b844:	e7fe      	b.n	800b844 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b846:	f7f6 f835 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 800b84a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b84e:	fbb0 f0f3 	udiv	r0, r0, r3
 800b852:	f7f4 ff47 	bl	80006e4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b856:	4620      	mov	r0, r4
 800b858:	f7f4 ff5a 	bl	8000710 <HAL_SYSTICK_CLKSourceConfig>

  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b85c:	462a      	mov	r2, r5
 800b85e:	4631      	mov	r1, r6
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	f7f4 fefe 	bl	8000664 <HAL_NVIC_SetPriority>
}
 800b868:	b014      	add	sp, #80	; 0x50
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	40023800 	.word	0x40023800
 800b870:	40007000 	.word	0x40007000

0800b874 <main>:
 {
 800b874:	b580      	push	{r7, lr}
 800b876:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b878:	2400      	movs	r4, #0
 800b87a:	4d70      	ldr	r5, [pc, #448]	; (800ba3c <main+0x1c8>)
  HAL_Init();
 800b87c:	f7f4 fea0 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 800b880:	f7ff ffa0 	bl	800b7c4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b884:	9401      	str	r4, [sp, #4]
 800b886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b888:	486d      	ldr	r0, [pc, #436]	; (800ba40 <main+0x1cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b88a:	f043 0304 	orr.w	r3, r3, #4
 800b88e:	632b      	str	r3, [r5, #48]	; 0x30
 800b890:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b89a:	9402      	str	r4, [sp, #8]
 800b89c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a2:	632b      	str	r3, [r5, #48]	; 0x30
 800b8a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8aa:	9302      	str	r3, [sp, #8]
 800b8ac:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8ae:	9403      	str	r4, [sp, #12]
 800b8b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	632b      	str	r3, [r5, #48]	; 0x30
 800b8b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	9303      	str	r3, [sp, #12]
 800b8c0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8c2:	9404      	str	r4, [sp, #16]
 800b8c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8c6:	f043 0302 	orr.w	r3, r3, #2
 800b8ca:	632b      	str	r3, [r5, #48]	; 0x30
 800b8cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b8d6:	9405      	str	r4, [sp, #20]
 800b8d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8da:	f043 0308 	orr.w	r3, r3, #8
 800b8de:	632b      	str	r3, [r5, #48]	; 0x30
 800b8e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	9305      	str	r3, [sp, #20]
 800b8e8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b8ea:	9406      	str	r4, [sp, #24]
 800b8ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f2:	632b      	str	r3, [r5, #48]	; 0x30
 800b8f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fa:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b902:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b904:	f7f5 fd88 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800b908:	4622      	mov	r2, r4
 800b90a:	2140      	movs	r1, #64	; 0x40
 800b90c:	484d      	ldr	r0, [pc, #308]	; (800ba44 <main+0x1d0>)
 800b90e:	f7f5 fd83 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b912:	4b4d      	ldr	r3, [pc, #308]	; (800ba48 <main+0x1d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b914:	484d      	ldr	r0, [pc, #308]	; (800ba4c <main+0x1d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b916:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b91c:	e9cd 1307 	strd	r1, r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b920:	a907      	add	r1, sp, #28
 800b922:	f7f5 fc8d 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b926:	2601      	movs	r6, #1
 800b928:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b92c:	a907      	add	r1, sp, #28
 800b92e:	4844      	ldr	r0, [pc, #272]	; (800ba40 <main+0x1cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b930:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b934:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b938:	f7f5 fc82 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b93c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b93e:	a907      	add	r1, sp, #28
 800b940:	4840      	ldr	r0, [pc, #256]	; (800ba44 <main+0x1d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b942:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b946:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b94a:	f7f5 fc79 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b94e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b950:	a907      	add	r1, sp, #28
 800b952:	483c      	ldr	r0, [pc, #240]	; (800ba44 <main+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b954:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b956:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b95a:	f7f5 fc71 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b95e:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
 800b962:	2302      	movs	r3, #2
 800b964:	e9cd 0307 	strd	r0, r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b968:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b96a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b96c:	4838      	ldr	r0, [pc, #224]	; (800ba50 <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b96e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b970:	260a      	movs	r6, #10
 800b972:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b976:	f44f 7700 	mov.w	r7, #512	; 0x200
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b97a:	f7f5 fc61 	bl	8001240 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b97e:	a907      	add	r1, sp, #28
 800b980:	4833      	ldr	r0, [pc, #204]	; (800ba50 <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b982:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b984:	e9cd 7407 	strd	r7, r4, [sp, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b988:	f7f5 fc5a 	bl	8001240 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b98c:	9400      	str	r4, [sp, #0]
 800b98e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b994:	632b      	str	r3, [r5, #48]	; 0x30
 800b996:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart3.Instance = USART3;
 800b998:	4d2e      	ldr	r5, [pc, #184]	; (800ba54 <main+0x1e0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b99a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b99e:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	2105      	movs	r1, #5
 800b9a4:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b9a6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800b9a8:	f7f4 fe5c 	bl	8000664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800b9ac:	203b      	movs	r0, #59	; 0x3b
 800b9ae:	f7f4 fe8d 	bl	80006cc <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 800b9b2:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800ba6c <main+0x1f8>
  huart3.Init.Parity = UART_PARITY_NONE;
 800b9b6:	612c      	str	r4, [r5, #16]
  huart3.Init.BaudRate = 115200;
 800b9b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b9bc:	e9c5 c300 	strd	ip, r3, [r5]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b9c0:	4628      	mov	r0, r5
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b9c2:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b9c4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b9c8:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b9cc:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b9ce:	f7f6 fb45 	bl	800205c <HAL_UART_Init>
 800b9d2:	b100      	cbz	r0, 800b9d6 <main+0x162>
 800b9d4:	e7fe      	b.n	800b9d4 <main+0x160>
  hspi1.Instance = SPI1;
 800b9d6:	4c20      	ldr	r4, [pc, #128]	; (800ba58 <main+0x1e4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b9d8:	4a20      	ldr	r2, [pc, #128]	; (800ba5c <main+0x1e8>)
  hspi1.Init.CRCPolynomial = 10;
 800b9da:	62e6      	str	r6, [r4, #44]	; 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b9dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b9e0:	e9c4 2300 	strd	r2, r3, [r4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800b9e4:	2310      	movs	r3, #16
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b9e6:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b9ea:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b9ee:	e9c4 3007 	strd	r3, r0, [r4, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9f2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b9f6:	4620      	mov	r0, r4
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b9f8:	61a7      	str	r7, [r4, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b9fa:	f7f5 fff5 	bl	80019e8 <HAL_SPI_Init>
 800b9fe:	4606      	mov	r6, r0
 800ba00:	b100      	cbz	r0, 800ba04 <main+0x190>
 800ba02:	e7fe      	b.n	800ba02 <main+0x18e>
  debug_init(&huart3);
 800ba04:	4628      	mov	r0, r5
 800ba06:	f7ff fcc7 	bl	800b398 <debug_init>
  xprintf(ANSI_BG_BLUE "WS2812B" ANSI_BG_DEFAULT "\n");
 800ba0a:	4815      	ldr	r0, [pc, #84]	; (800ba60 <main+0x1ec>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800ba0c:	4d15      	ldr	r5, [pc, #84]	; (800ba64 <main+0x1f0>)
  xprintf(ANSI_BG_BLUE "WS2812B" ANSI_BG_DEFAULT "\n");
 800ba0e:	f000 fd97 	bl	800c540 <xprintf>
  WS2812B_Init(&hspi1);
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 f9be 	bl	800bd94 <WS2812B_Init>
  HAL_Delay(200);
 800ba18:	20c8      	movs	r0, #200	; 0xc8
 800ba1a:	f7f4 fdfd 	bl	8000618 <HAL_Delay>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800ba1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba20:	ac07      	add	r4, sp, #28
 800ba22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ba28:	4631      	mov	r1, r6
 800ba2a:	a807      	add	r0, sp, #28
 800ba2c:	f7f6 fb50 	bl	80020d0 <osThreadCreate>
 800ba30:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <main+0x1f4>)
 800ba32:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800ba34:	f7f6 fb40 	bl	80020b8 <osKernelStart>
 800ba38:	e7fe      	b.n	800ba38 <main+0x1c4>
 800ba3a:	bf00      	nop
 800ba3c:	40023800 	.word	0x40023800
 800ba40:	40020400 	.word	0x40020400
 800ba44:	40021800 	.word	0x40021800
 800ba48:	10110000 	.word	0x10110000
 800ba4c:	40020800 	.word	0x40020800
 800ba50:	40020000 	.word	0x40020000
 800ba54:	2000a83c 	.word	0x2000a83c
 800ba58:	2000a87c 	.word	0x2000a87c
 800ba5c:	40013000 	.word	0x40013000
 800ba60:	0800f7e2 	.word	0x0800f7e2
 800ba64:	0800d674 	.word	0x0800d674
 800ba68:	2000a838 	.word	0x2000a838
 800ba6c:	40004800 	.word	0x40004800

0800ba70 <displayOwnIp>:

}

void displayOwnIp(void)
{
 800ba70:	b507      	push	{r0, r1, r2, lr}

	xprintf(
		"My IP: %d.%d.%d.%d\n",
		ip4_addr1_16(netif_ip4_addr(&gnetif)),
		ip4_addr2_16(netif_ip4_addr(&gnetif)),
		ip4_addr3_16(netif_ip4_addr(&gnetif)),
 800ba72:	4806      	ldr	r0, [pc, #24]	; (800ba8c <displayOwnIp+0x1c>)
	xprintf(
 800ba74:	7983      	ldrb	r3, [r0, #6]
 800ba76:	7942      	ldrb	r2, [r0, #5]
 800ba78:	7901      	ldrb	r1, [r0, #4]
 800ba7a:	79c0      	ldrb	r0, [r0, #7]
 800ba7c:	9000      	str	r0, [sp, #0]
 800ba7e:	4804      	ldr	r0, [pc, #16]	; (800ba90 <displayOwnIp+0x20>)
 800ba80:	f000 fd5e 	bl	800c540 <xprintf>
		ip4_addr4_16(netif_ip4_addr(&gnetif))
		);
}
 800ba84:	b003      	add	sp, #12
 800ba86:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba8a:	bf00      	nop
 800ba8c:	2000a7f8 	.word	0x2000a7f8
 800ba90:	0800f78e 	.word	0x0800f78e

0800ba94 <handle_dhcp>:


void handle_dhcp() {
 800ba94:	b538      	push	{r3, r4, r5, lr}
	  xprintf("Obtaining address with DHCP...\n");
 800ba96:	480b      	ldr	r0, [pc, #44]	; (800bac4 <handle_dhcp+0x30>)

	  struct dhcp *dhcp = netif_dhcp_data(&gnetif);
	    do
	    {
	      xprintf("dhcp->state = %02X\n",dhcp->state);
 800ba98:	4d0b      	ldr	r5, [pc, #44]	; (800bac8 <handle_dhcp+0x34>)
	  xprintf("Obtaining address with DHCP...\n");
 800ba9a:	f000 fd51 	bl	800c540 <xprintf>
	  struct dhcp *dhcp = netif_dhcp_data(&gnetif);
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <handle_dhcp+0x38>)
 800baa0:	6a1c      	ldr	r4, [r3, #32]
	      xprintf("dhcp->state = %02X\n",dhcp->state);
 800baa2:	7a61      	ldrb	r1, [r4, #9]
 800baa4:	4628      	mov	r0, r5
 800baa6:	f000 fd4b 	bl	800c540 <xprintf>
	      vTaskDelay(250);
 800baaa:	20fa      	movs	r0, #250	; 0xfa
 800baac:	f7f7 fa68 	bl	8002f80 <vTaskDelay>
	    }while(dhcp->state != 0x0A);
 800bab0:	7a63      	ldrb	r3, [r4, #9]
 800bab2:	2b0a      	cmp	r3, #10
 800bab4:	d1f5      	bne.n	800baa2 <handle_dhcp+0xe>

	    xprintf("DHCP bound\n");
 800bab6:	4806      	ldr	r0, [pc, #24]	; (800bad0 <handle_dhcp+0x3c>)
 800bab8:	f000 fd42 	bl	800c540 <xprintf>
	    displayOwnIp();
}
 800babc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	    displayOwnIp();
 800bac0:	f7ff bfd6 	b.w	800ba70 <displayOwnIp>
 800bac4:	0800f7a2 	.word	0x0800f7a2
 800bac8:	0800f7c2 	.word	0x0800f7c2
 800bacc:	2000a7f8 	.word	0x2000a7f8
 800bad0:	0800f7d6 	.word	0x0800f7d6

0800bad4 <StartDefaultTask>:
	osDelay(500);

}

void StartDefaultTask(void const * argument)
{
 800bad4:	b508      	push	{r3, lr}
  MX_LWIP_Init();
 800bad6:	f7ff fe3f 	bl	800b758 <MX_LWIP_Init>
  printf("After LWIP_INIT\n");
 800bada:	4807      	ldr	r0, [pc, #28]	; (800baf8 <StartDefaultTask+0x24>)
 800badc:	f000 ff3e 	bl	800c95c <puts>
//  WS2812B_SetDiodeRGB(8, 0,0,255);
//  WS2812B_SetDiodeRGB(9, 0,0,255);
//  my_own_sender();

//
  handle_dhcp();
 800bae0:	f7ff ffd8 	bl	800ba94 <handle_dhcp>
//
    mqtt_client_t *client = mqtt_client_new();
 800bae4:	f7f8 fc6c 	bl	80043c0 <mqtt_client_new>
      if(client != NULL) {
 800bae8:	b108      	cbz	r0, 800baee <StartDefaultTask+0x1a>
        example_do_connect(client);
 800baea:	f000 f8df 	bl	800bcac <example_do_connect>
      }
      osDelay(5000);
 800baee:	f241 3088 	movw	r0, #5000	; 0x1388
 800baf2:	f7f6 fb05 	bl	8002100 <osDelay>
 800baf6:	e7fe      	b.n	800baf6 <StartDefaultTask+0x22>
 800baf8:	0800f77e 	.word	0x0800f77e

0800bafc <HAL_TIM_PeriodElapsedCallback>:
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM6) {
 800bafc:	6802      	ldr	r2, [r0, #0]
 800bafe:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d101      	bne.n	800bb08 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800bb04:	f7f4 bd76 	b.w	80005f4 <HAL_IncTick>
  }
}
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40001000 	.word	0x40001000

0800bb10 <_Error_Handler>:

void _Error_Handler(char *file, int line)
{
 800bb10:	e7fe      	b.n	800bb10 <_Error_Handler>
	...

0800bb14 <mqtt_sub_request_cb>:
void mqtt_sub_request_cb(void *arg, err_t result)
{
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <mqtt_sub_request_cb+0x8>)
 800bb16:	f000 bead 	b.w	800c874 <iprintf>
 800bb1a:	bf00      	nop
 800bb1c:	0800f8d9 	.word	0x0800f8d9

0800bb20 <mqtt_incoming_publish_cb>:
{
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
  if (strcmp(topic, "color") == 0) {
 800bb24:	4620      	mov	r0, r4
 800bb26:	490c      	ldr	r1, [pc, #48]	; (800bb58 <mqtt_incoming_publish_cb+0x38>)
 800bb28:	f7f4 fb62 	bl	80001f0 <strcmp>
 800bb2c:	b910      	cbnz	r0, 800bb34 <mqtt_incoming_publish_cb+0x14>
	 inpub_id = COLOR;
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	; (800bb5c <mqtt_incoming_publish_cb+0x3c>)
 800bb30:	6018      	str	r0, [r3, #0]
}
 800bb32:	bd10      	pop	{r4, pc}
  } else if (strcmp(topic, "blink") == 0){
 800bb34:	490a      	ldr	r1, [pc, #40]	; (800bb60 <mqtt_incoming_publish_cb+0x40>)
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7f4 fb5a 	bl	80001f0 <strcmp>
 800bb3c:	b918      	cbnz	r0, 800bb46 <mqtt_incoming_publish_cb+0x26>
	  inpub_id = BLINK;
 800bb3e:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <mqtt_incoming_publish_cb+0x3c>)
 800bb40:	2201      	movs	r2, #1
	  inpub_id = CHANGE;
 800bb42:	601a      	str	r2, [r3, #0]
}
 800bb44:	e7f5      	b.n	800bb32 <mqtt_incoming_publish_cb+0x12>
  } else if (strcmp(topic, "change") == 0){
 800bb46:	4907      	ldr	r1, [pc, #28]	; (800bb64 <mqtt_incoming_publish_cb+0x44>)
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f7f4 fb51 	bl	80001f0 <strcmp>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1ef      	bne.n	800bb32 <mqtt_incoming_publish_cb+0x12>
	  inpub_id = CHANGE;
 800bb52:	4b02      	ldr	r3, [pc, #8]	; (800bb5c <mqtt_incoming_publish_cb+0x3c>)
 800bb54:	2202      	movs	r2, #2
 800bb56:	e7f4      	b.n	800bb42 <mqtt_incoming_publish_cb+0x22>
 800bb58:	0800f8c6 	.word	0x0800f8c6
 800bb5c:	2000a934 	.word	0x2000a934
 800bb60:	0800f8cc 	.word	0x0800f8cc
 800bb64:	0800f8d2 	.word	0x0800f8d2

0800bb68 <parse_message>:
int parse_message(char * data) {
 800bb68:	b510      	push	{r4, lr}
	if (strcmp(data, "red") == 0){
 800bb6a:	4921      	ldr	r1, [pc, #132]	; (800bbf0 <parse_message+0x88>)
int parse_message(char * data) {
 800bb6c:	4604      	mov	r4, r0
	if (strcmp(data, "red") == 0){
 800bb6e:	f7f4 fb3f 	bl	80001f0 <strcmp>
 800bb72:	b378      	cbz	r0, 800bbd4 <parse_message+0x6c>
	} else if (strcmp(data, "blue") == 0){
 800bb74:	491f      	ldr	r1, [pc, #124]	; (800bbf4 <parse_message+0x8c>)
 800bb76:	4620      	mov	r0, r4
 800bb78:	f7f4 fb3a 	bl	80001f0 <strcmp>
 800bb7c:	b358      	cbz	r0, 800bbd6 <parse_message+0x6e>
	} else if (strcmp(data, "green") == 0){
 800bb7e:	491e      	ldr	r1, [pc, #120]	; (800bbf8 <parse_message+0x90>)
 800bb80:	4620      	mov	r0, r4
 800bb82:	f7f4 fb35 	bl	80001f0 <strcmp>
 800bb86:	b380      	cbz	r0, 800bbea <parse_message+0x82>
	} else if (strcmp(data, "white") == 0){
 800bb88:	491c      	ldr	r1, [pc, #112]	; (800bbfc <parse_message+0x94>)
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7f4 fb30 	bl	80001f0 <strcmp>
 800bb90:	b318      	cbz	r0, 800bbda <parse_message+0x72>
	} else if (strcmp(data, "cyan") == 0){
 800bb92:	491b      	ldr	r1, [pc, #108]	; (800bc00 <parse_message+0x98>)
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7f4 fb2b 	bl	80001f0 <strcmp>
 800bb9a:	b300      	cbz	r0, 800bbde <parse_message+0x76>
	} else if (strcmp(data, "yellow") == 0){
 800bb9c:	4919      	ldr	r1, [pc, #100]	; (800bc04 <parse_message+0x9c>)
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7f4 fb26 	bl	80001f0 <strcmp>
 800bba4:	b1e8      	cbz	r0, 800bbe2 <parse_message+0x7a>
	} else if (strcmp(data, "magenta") == 0){
 800bba6:	4918      	ldr	r1, [pc, #96]	; (800bc08 <parse_message+0xa0>)
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7f4 fb21 	bl	80001f0 <strcmp>
 800bbae:	b1d0      	cbz	r0, 800bbe6 <parse_message+0x7e>
	} else if (strcmp(data, "all") == 0){
 800bbb0:	4916      	ldr	r1, [pc, #88]	; (800bc0c <parse_message+0xa4>)
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7f4 fb1c 	bl	80001f0 <strcmp>
 800bbb8:	b160      	cbz	r0, 800bbd4 <parse_message+0x6c>
	} else if (strcmp(data, "mixed") == 0){
 800bbba:	4915      	ldr	r1, [pc, #84]	; (800bc10 <parse_message+0xa8>)
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f7f4 fb17 	bl	80001f0 <strcmp>
 800bbc2:	b190      	cbz	r0, 800bbea <parse_message+0x82>
	} else if (strcmp(data, "basic") == 0){
 800bbc4:	4913      	ldr	r1, [pc, #76]	; (800bc14 <parse_message+0xac>)
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7f4 fb12 	bl	80001f0 <strcmp>
	return BLACK;
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	bf0c      	ite	eq
 800bbd0:	2002      	moveq	r0, #2
 800bbd2:	2004      	movne	r0, #4
}
 800bbd4:	bd10      	pop	{r4, pc}
		return BLUE;
 800bbd6:	2002      	movs	r0, #2
 800bbd8:	e7fc      	b.n	800bbd4 <parse_message+0x6c>
		return WHITE;
 800bbda:	2003      	movs	r0, #3
 800bbdc:	e7fa      	b.n	800bbd4 <parse_message+0x6c>
		return CYAN;
 800bbde:	2006      	movs	r0, #6
 800bbe0:	e7f8      	b.n	800bbd4 <parse_message+0x6c>
		return YELLOW;
 800bbe2:	2007      	movs	r0, #7
 800bbe4:	e7f6      	b.n	800bbd4 <parse_message+0x6c>
		return MAGENTA;
 800bbe6:	2005      	movs	r0, #5
 800bbe8:	e7f4      	b.n	800bbd4 <parse_message+0x6c>
		return GREEN;
 800bbea:	2001      	movs	r0, #1
 800bbec:	e7f2      	b.n	800bbd4 <parse_message+0x6c>
 800bbee:	bf00      	nop
 800bbf0:	0800f8ef 	.word	0x0800f8ef
 800bbf4:	0800f8f3 	.word	0x0800f8f3
 800bbf8:	0800f8f8 	.word	0x0800f8f8
 800bbfc:	0800f8fe 	.word	0x0800f8fe
 800bc00:	0800f904 	.word	0x0800f904
 800bc04:	0800f909 	.word	0x0800f909
 800bc08:	0800f910 	.word	0x0800f910
 800bc0c:	0800eb7e 	.word	0x0800eb7e
 800bc10:	0800f918 	.word	0x0800f918
 800bc14:	0800f91e 	.word	0x0800f91e

0800bc18 <handle_diode>:
void handle_diode(char * data){
 800bc18:	b508      	push	{r3, lr}
	all_color(parse_message(data));
 800bc1a:	f7ff ffa5 	bl	800bb68 <parse_message>
}
 800bc1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	all_color(parse_message(data));
 800bc22:	f000 b973 	b.w	800bf0c <all_color>

0800bc26 <handle_blink>:
void handle_blink(char * data){
 800bc26:	b508      	push	{r3, lr}
	blink(parse_message(data));
 800bc28:	f7ff ff9e 	bl	800bb68 <parse_message>
}
 800bc2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	blink(parse_message(data));
 800bc30:	f000 b99a 	b.w	800bf68 <blink>

0800bc34 <handle_change>:
void handle_change(char * data){
 800bc34:	b508      	push	{r3, lr}
	change(parse_message(data));
 800bc36:	f7ff ff97 	bl	800bb68 <parse_message>
}
 800bc3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	change(parse_message(data));
 800bc3e:	f000 ba8a 	b.w	800c156 <change>

0800bc42 <get_data>:
{
 800bc42:	b538      	push	{r3, r4, r5, lr}
 800bc44:	460c      	mov	r4, r1
 800bc46:	4605      	mov	r5, r0
	char * new_data = (char*)malloc(len+1 * sizeof(char));
 800bc48:	1c48      	adds	r0, r1, #1
 800bc4a:	f000 fd33 	bl	800c6b4 <malloc>
	strncpy(new_data, (const char*)data, len);
 800bc4e:	4622      	mov	r2, r4
 800bc50:	4629      	mov	r1, r5
 800bc52:	f000 fecf 	bl	800c9f4 <strncpy>
	new_data[len] = '\0';
 800bc56:	2200      	movs	r2, #0
 800bc58:	5502      	strb	r2, [r0, r4]
}
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}

0800bc5c <mqtt_incoming_data_cb>:
{
 800bc5c:	b508      	push	{r3, lr}
  if(flags & MQTT_DATA_FLAG_LAST) {
 800bc5e:	07db      	lsls	r3, r3, #31
{
 800bc60:	4608      	mov	r0, r1
 800bc62:	4611      	mov	r1, r2
  if(flags & MQTT_DATA_FLAG_LAST) {
 800bc64:	d51d      	bpl.n	800bca2 <mqtt_incoming_data_cb+0x46>
	if(inpub_id == COLOR) {
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <mqtt_incoming_data_cb+0x48>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	b92b      	cbnz	r3, 800bc78 <mqtt_incoming_data_cb+0x1c>
    	handle_diode(get_data(data, len));
 800bc6c:	f7ff ffe9 	bl	800bc42 <get_data>
}
 800bc70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	handle_diode(get_data(data, len));
 800bc74:	f7ff bfd0 	b.w	800bc18 <handle_diode>
    } else if(inpub_id == BLINK) {
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d105      	bne.n	800bc88 <mqtt_incoming_data_cb+0x2c>
    	handle_blink(get_data(data, len));
 800bc7c:	f7ff ffe1 	bl	800bc42 <get_data>
}
 800bc80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	handle_blink(get_data(data, len));
 800bc84:	f7ff bfcf 	b.w	800bc26 <handle_blink>
    } else if(inpub_id == CHANGE) {
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d105      	bne.n	800bc98 <mqtt_incoming_data_cb+0x3c>
    	handle_change(get_data(data, len));
 800bc8c:	f7ff ffd9 	bl	800bc42 <get_data>
}
 800bc90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	handle_change(get_data(data, len));
 800bc94:	f7ff bfce 	b.w	800bc34 <handle_change>
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
 800bc98:	4803      	ldr	r0, [pc, #12]	; (800bca8 <mqtt_incoming_data_cb+0x4c>)
}
 800bc9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
 800bc9e:	f000 be5d 	b.w	800c95c <puts>
}
 800bca2:	bd08      	pop	{r3, pc}
 800bca4:	2000a934 	.word	0x2000a934
 800bca8:	0800f89b 	.word	0x0800f89b

0800bcac <example_do_connect>:
}


void example_do_connect(mqtt_client_t *client)
{
 800bcac:	b510      	push	{r4, lr}
 800bcae:	b08a      	sub	sp, #40	; 0x28
 800bcb0:	4604      	mov	r4, r0

  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 800bcb2:	2218      	movs	r2, #24
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	a804      	add	r0, sp, #16
 800bcb8:	f000 fd1e 	bl	800c6f8 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
   ci.client_id = "lwip_test";
   ip_addr_t ip;
   IP4_ADDR(&ip, BROKER_IP1, BROKER_IP2, BROKER_IP3, BROKER_IP4);
 800bcbc:	a90a      	add	r1, sp, #40	; 0x28
   ci.client_id = "lwip_test";
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <example_do_connect+0x40>)
 800bcc0:	9303      	str	r3, [sp, #12]
   IP4_ADDR(&ip, BROKER_IP1, BROKER_IP2, BROKER_IP3, BROKER_IP4);
 800bcc2:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <example_do_connect+0x44>)
 800bcc4:	f841 3d20 	str.w	r3, [r1, #-32]!
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client, &ip, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 800bcc8:	ab03      	add	r3, sp, #12
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	2300      	movs	r3, #0
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	f240 725b 	movw	r2, #1883	; 0x75b
 800bcd4:	4b07      	ldr	r3, [pc, #28]	; (800bcf4 <example_do_connect+0x48>)
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7f8 fb80 	bl	80043dc <mqtt_client_connect>

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 800bcdc:	4601      	mov	r1, r0
 800bcde:	b110      	cbz	r0, 800bce6 <example_do_connect+0x3a>
    printf("mqtt_connect return %d\n", err);
 800bce0:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <example_do_connect+0x4c>)
 800bce2:	f000 fdc7 	bl	800c874 <iprintf>
  }
}
 800bce6:	b00a      	add	sp, #40	; 0x28
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	0800f805 	.word	0x0800f805
 800bcf0:	f301a8c0 	.word	0xf301a8c0
 800bcf4:	0800bcfd 	.word	0x0800bcfd
 800bcf8:	0800f80f 	.word	0x0800f80f

0800bcfc <mqtt_connection_cb>:


void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 800bcfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcfe:	4605      	mov	r5, r0
 800bd00:	460e      	mov	r6, r1
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 800bd02:	bb4a      	cbnz	r2, 800bd58 <mqtt_connection_cb+0x5c>
    printf("mqtt_connection_cb: Successfully connected\n");
 800bd04:	481a      	ldr	r0, [pc, #104]	; (800bd70 <mqtt_connection_cb+0x74>)

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "color", 1, mqtt_sub_request_cb, arg);
 800bd06:	2401      	movs	r4, #1
    printf("mqtt_connection_cb: Successfully connected\n");
 800bd08:	f000 fe28 	bl	800c95c <puts>
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 800bd0c:	4633      	mov	r3, r6
 800bd0e:	4a19      	ldr	r2, [pc, #100]	; (800bd74 <mqtt_connection_cb+0x78>)
 800bd10:	4919      	ldr	r1, [pc, #100]	; (800bd78 <mqtt_connection_cb+0x7c>)
 800bd12:	4628      	mov	r0, r5
 800bd14:	f7f8 fb3c 	bl	8004390 <mqtt_set_inpub_callback>
    err = mqtt_subscribe(client, "color", 1, mqtt_sub_request_cb, arg);
 800bd18:	4b18      	ldr	r3, [pc, #96]	; (800bd7c <mqtt_connection_cb+0x80>)
 800bd1a:	4919      	ldr	r1, [pc, #100]	; (800bd80 <mqtt_connection_cb+0x84>)
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	e9cd 6400 	strd	r6, r4, [sp]
 800bd22:	4628      	mov	r0, r5
 800bd24:	f7f8 fa8c 	bl	8004240 <mqtt_sub_unsub>
    err = mqtt_subscribe(client, "blink", 1, mqtt_sub_request_cb, arg);
 800bd28:	4b14      	ldr	r3, [pc, #80]	; (800bd7c <mqtt_connection_cb+0x80>)
 800bd2a:	4916      	ldr	r1, [pc, #88]	; (800bd84 <mqtt_connection_cb+0x88>)
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	e9cd 6400 	strd	r6, r4, [sp]
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7f8 fa84 	bl	8004240 <mqtt_sub_unsub>
    err = mqtt_subscribe(client, "change", 1, mqtt_sub_request_cb, arg);
 800bd38:	4913      	ldr	r1, [pc, #76]	; (800bd88 <mqtt_connection_cb+0x8c>)
 800bd3a:	4b10      	ldr	r3, [pc, #64]	; (800bd7c <mqtt_connection_cb+0x80>)
 800bd3c:	e9cd 6400 	strd	r6, r4, [sp]
 800bd40:	4622      	mov	r2, r4
 800bd42:	4628      	mov	r0, r5
 800bd44:	f7f8 fa7c 	bl	8004240 <mqtt_sub_unsub>

    if(err != ERR_OK) {
 800bd48:	4601      	mov	r1, r0
 800bd4a:	b178      	cbz	r0, 800bd6c <mqtt_connection_cb+0x70>
      printf("mqtt_subscribe return: %d\n", err);
 800bd4c:	480f      	ldr	r0, [pc, #60]	; (800bd8c <mqtt_connection_cb+0x90>)
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 800bd4e:	b002      	add	sp, #8
 800bd50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      printf("mqtt_subscribe return: %d\n", err);
 800bd54:	f000 bd8e 	b.w	800c874 <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 800bd58:	4611      	mov	r1, r2
 800bd5a:	480d      	ldr	r0, [pc, #52]	; (800bd90 <mqtt_connection_cb+0x94>)
 800bd5c:	f000 fd8a 	bl	800c874 <iprintf>
    example_do_connect(client);
 800bd60:	4628      	mov	r0, r5
}
 800bd62:	b002      	add	sp, #8
 800bd64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    example_do_connect(client);
 800bd68:	f7ff bfa0 	b.w	800bcac <example_do_connect>
}
 800bd6c:	b002      	add	sp, #8
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
 800bd70:	0800f827 	.word	0x0800f827
 800bd74:	0800bc5d 	.word	0x0800bc5d
 800bd78:	0800bb21 	.word	0x0800bb21
 800bd7c:	0800bb15 	.word	0x0800bb15
 800bd80:	0800f8c6 	.word	0x0800f8c6
 800bd84:	0800f8cc 	.word	0x0800f8cc
 800bd88:	0800f8d2 	.word	0x0800f8d2
 800bd8c:	0800f852 	.word	0x0800f852
 800bd90:	0800f86d 	.word	0x0800f86d

0800bd94 <WS2812B_Init>:
SPI_HandleTypeDef *hspi_ws2812b;
ws2812b_color     *ws2812b_array;
uint8_t           *buffer;

void WS2812B_Init(SPI_HandleTypeDef * spi_handler)
{
 800bd94:	b508      	push	{r3, lr}
	hspi_ws2812b = spi_handler;
 800bd96:	4b08      	ldr	r3, [pc, #32]	; (800bdb8 <WS2812B_Init+0x24>)
	ws2812b_array = calloc(LED_NUMBERS, sizeof(ws2812b_color));
 800bd98:	2103      	movs	r1, #3
	hspi_ws2812b = spi_handler;
 800bd9a:	6018      	str	r0, [r3, #0]
	ws2812b_array = calloc(LED_NUMBERS, sizeof(ws2812b_color));
 800bd9c:	200a      	movs	r0, #10
 800bd9e:	f000 fc5d 	bl	800c65c <calloc>
 800bda2:	4b06      	ldr	r3, [pc, #24]	; (800bdbc <WS2812B_Init+0x28>)
	buffer = calloc((LED_NUMBERS+3) * 24, sizeof(uint8_t));
 800bda4:	2101      	movs	r1, #1
	ws2812b_array = calloc(LED_NUMBERS, sizeof(ws2812b_color));
 800bda6:	6018      	str	r0, [r3, #0]
	buffer = calloc((LED_NUMBERS+3) * 24, sizeof(uint8_t));
 800bda8:	f44f 709c 	mov.w	r0, #312	; 0x138
 800bdac:	f000 fc56 	bl	800c65c <calloc>
 800bdb0:	4b03      	ldr	r3, [pc, #12]	; (800bdc0 <WS2812B_Init+0x2c>)
 800bdb2:	6018      	str	r0, [r3, #0]
}
 800bdb4:	bd08      	pop	{r3, pc}
 800bdb6:	bf00      	nop
 800bdb8:	2000a938 	.word	0x2000a938
 800bdbc:	2000a93c 	.word	0x2000a93c
 800bdc0:	2000a940 	.word	0x2000a940

0800bdc4 <WS2812B_SetDiodeRGB>:

void WS2812B_SetDiodeRGB(int16_t diode_id, uint8_t R, uint8_t G, uint8_t B)
{
 800bdc4:	b530      	push	{r4, r5, lr}
	if(diode_id >= LED_NUMBERS || diode_id < 0) return;
 800bdc6:	b284      	uxth	r4, r0
 800bdc8:	2c09      	cmp	r4, #9
 800bdca:	d807      	bhi.n	800bddc <WS2812B_SetDiodeRGB+0x18>
	ws2812b_array[diode_id].red = R;
 800bdcc:	4c04      	ldr	r4, [pc, #16]	; (800bde0 <WS2812B_SetDiodeRGB+0x1c>)
 800bdce:	6825      	ldr	r5, [r4, #0]
 800bdd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bdd4:	182c      	adds	r4, r5, r0
 800bdd6:	5429      	strb	r1, [r5, r0]
	ws2812b_array[diode_id].green = G;
 800bdd8:	7062      	strb	r2, [r4, #1]
	ws2812b_array[diode_id].blue = B;
 800bdda:	70a3      	strb	r3, [r4, #2]
}
 800bddc:	bd30      	pop	{r4, r5, pc}
 800bdde:	bf00      	nop
 800bde0:	2000a93c 	.word	0x2000a93c

0800bde4 <set_color>:
		osDelay(400);
	}
}


void set_color(int data, int i) {
 800bde4:	b410      	push	{r4}
 800bde6:	b20c      	sxth	r4, r1
	 switch(data){
 800bde8:	2807      	cmp	r0, #7
 800bdea:	d821      	bhi.n	800be30 <set_color+0x4c>
 800bdec:	e8df f000 	tbb	[pc, r0]
 800bdf0:	140c1004 	.word	0x140c1004
 800bdf4:	1d1a1720 	.word	0x1d1a1720
		case RED: WS2812B_SetDiodeRGB(i, 255,0,0); break;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	21ff      	movs	r1, #255	; 0xff
		case GREEN: WS2812B_SetDiodeRGB(i, 0,255,0); break;
		case WHITE: WS2812B_SetDiodeRGB(i, 255,255,255); break;
		case MAGENTA: WS2812B_SetDiodeRGB(i, 255, 0, 255); break;
		case CYAN: WS2812B_SetDiodeRGB(i, 0, 255, 255); break;
		case YELLOW: WS2812B_SetDiodeRGB(i, 255, 255, 0); break;
		default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800bdfe:	4620      	mov	r0, r4
	 }
}
 800be00:	f85d 4b04 	ldr.w	r4, [sp], #4
		default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800be04:	f7ff bfde 	b.w	800bdc4 <WS2812B_SetDiodeRGB>
		case BLUE: WS2812B_SetDiodeRGB(i, 0,0,255); break;
 800be08:	23ff      	movs	r3, #255	; 0xff
 800be0a:	2200      	movs	r2, #0
		case CYAN: WS2812B_SetDiodeRGB(i, 0, 255, 255); break;
 800be0c:	2100      	movs	r1, #0
 800be0e:	e7f6      	b.n	800bdfe <set_color+0x1a>
		case GREEN: WS2812B_SetDiodeRGB(i, 0,255,0); break;
 800be10:	2300      	movs	r3, #0
 800be12:	22ff      	movs	r2, #255	; 0xff
		default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800be14:	4619      	mov	r1, r3
 800be16:	e7f2      	b.n	800bdfe <set_color+0x1a>
		case WHITE: WS2812B_SetDiodeRGB(i, 255,255,255); break;
 800be18:	23ff      	movs	r3, #255	; 0xff
		default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800be1a:	461a      	mov	r2, r3
 800be1c:	e7fa      	b.n	800be14 <set_color+0x30>
		case MAGENTA: WS2812B_SetDiodeRGB(i, 255, 0, 255); break;
 800be1e:	23ff      	movs	r3, #255	; 0xff
 800be20:	2200      	movs	r2, #0
 800be22:	e7f7      	b.n	800be14 <set_color+0x30>
		case CYAN: WS2812B_SetDiodeRGB(i, 0, 255, 255); break;
 800be24:	23ff      	movs	r3, #255	; 0xff
 800be26:	461a      	mov	r2, r3
 800be28:	e7f0      	b.n	800be0c <set_color+0x28>
		case YELLOW: WS2812B_SetDiodeRGB(i, 255, 255, 0); break;
 800be2a:	2300      	movs	r3, #0
 800be2c:	22ff      	movs	r2, #255	; 0xff
 800be2e:	e7e5      	b.n	800bdfc <set_color+0x18>
		default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800be30:	2300      	movs	r3, #0
 800be32:	e7f2      	b.n	800be1a <set_color+0x36>

0800be34 <my_own_sender>:

void my_own_sender(){
//	print_diode_colors();

	for(uint8_t i = 0; i < 72; i++)
		buffer[i] = 0x00;
 800be34:	4a32      	ldr	r2, [pc, #200]	; (800bf00 <my_own_sender+0xcc>)
void my_own_sender(){
 800be36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be3a:	2300      	movs	r3, #0
		buffer[i] = 0x00;
 800be3c:	461c      	mov	r4, r3
 800be3e:	4610      	mov	r0, r2
 800be40:	6811      	ldr	r1, [r2, #0]
 800be42:	54cc      	strb	r4, [r1, r3]
 800be44:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 72; i++)
 800be46:	2b48      	cmp	r3, #72	; 0x48
 800be48:	d1fa      	bne.n	800be40 <my_own_sender+0xc>
	{

		//GREEN
		for(int8_t k=7; k>=0; k--)
		{
			if((ws2812b_array[i].green & (1<<k)) == 0)
 800be4a:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800bf08 <my_own_sender+0xd4>
 800be4e:	2200      	movs	r2, #0
 800be50:	46e6      	mov	lr, ip
				buffer[j] = zero;
			else
				buffer[j] = one;
 800be52:	25f8      	movs	r5, #248	; 0xf8
				buffer[j] = zero;
 800be54:	26c0      	movs	r6, #192	; 0xc0
 800be56:	f102 0309 	add.w	r3, r2, #9
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	b29b      	uxth	r3, r3
void my_own_sender(){
 800be5e:	2107      	movs	r1, #7
 800be60:	eb03 0901 	add.w	r9, r3, r1
			if((ws2812b_array[i].green & (1<<k)) == 0)
 800be64:	f8dc 4000 	ldr.w	r4, [ip]
 800be68:	f8d0 8000 	ldr.w	r8, [r0]
 800be6c:	4414      	add	r4, r2
 800be6e:	eba9 0701 	sub.w	r7, r9, r1
 800be72:	7864      	ldrb	r4, [r4, #1]
 800be74:	b2bf      	uxth	r7, r7
 800be76:	410c      	asrs	r4, r1
 800be78:	07e4      	lsls	r4, r4, #31
				buffer[j] = zero;
 800be7a:	bf54      	ite	pl
 800be7c:	f808 6007 	strbpl.w	r6, [r8, r7]
				buffer[j] = one;
 800be80:	f808 5007 	strbmi.w	r5, [r8, r7]
		for(int8_t k=7; k>=0; k--)
 800be84:	f111 31ff 	adds.w	r1, r1, #4294967295
 800be88:	d2ec      	bcs.n	800be64 <my_own_sender+0x30>
 800be8a:	2107      	movs	r1, #7
 800be8c:	f103 080f 	add.w	r8, r3, #15
		}

		//RED
		for(int8_t k=7; k>=0; k--)
		{
			if((ws2812b_array[i].red & (1<<k)) == 0)
 800be90:	f8de 4000 	ldr.w	r4, [lr]
 800be94:	f8d0 9000 	ldr.w	r9, [r0]
 800be98:	5ca4      	ldrb	r4, [r4, r2]
 800be9a:	eba8 0701 	sub.w	r7, r8, r1
 800be9e:	b2bf      	uxth	r7, r7
 800bea0:	410c      	asrs	r4, r1
 800bea2:	07e4      	lsls	r4, r4, #31
				buffer[j] = zero;
 800bea4:	bf54      	ite	pl
 800bea6:	f809 6007 	strbpl.w	r6, [r9, r7]
			else
				buffer[j] = one;
 800beaa:	f809 5007 	strbmi.w	r5, [r9, r7]
		for(int8_t k=7; k>=0; k--)
 800beae:	f111 31ff 	adds.w	r1, r1, #4294967295
 800beb2:	d2ed      	bcs.n	800be90 <my_own_sender+0x5c>
 800beb4:	2107      	movs	r1, #7
 800beb6:	3317      	adds	r3, #23
		}

		//BLUE
		for(int8_t k=7; k>=0; k--)
		{
			if((ws2812b_array[i].blue & (1<<k)) == 0)
 800beb8:	f8de 7000 	ldr.w	r7, [lr]
 800bebc:	f8d0 8000 	ldr.w	r8, [r0]
 800bec0:	4417      	add	r7, r2
 800bec2:	1a5c      	subs	r4, r3, r1
 800bec4:	78bf      	ldrb	r7, [r7, #2]
 800bec6:	b2a4      	uxth	r4, r4
 800bec8:	410f      	asrs	r7, r1
 800beca:	07ff      	lsls	r7, r7, #31
				buffer[j] = zero;
 800becc:	bf54      	ite	pl
 800bece:	f808 6004 	strbpl.w	r6, [r8, r4]
			else
				buffer[j] = one;
 800bed2:	f808 5004 	strbmi.w	r5, [r8, r4]
		for(int8_t k=7; k>=0; k--)
 800bed6:	f111 31ff 	adds.w	r1, r1, #4294967295
 800beda:	d2ed      	bcs.n	800beb8 <my_own_sender+0x84>
 800bedc:	3203      	adds	r2, #3
	for(uint16_t i=0, j=72; i<LED_NUMBERS; i++)
 800bede:	2a1e      	cmp	r2, #30
 800bee0:	d1b9      	bne.n	800be56 <my_own_sender+0x22>
			j++;
		}

	}
//	print_buffer(buffer, (LED_NUMBERS+2) * 24);
	HAL_SPI_Transmit_DMA(hspi_ws2812b, buffer, (LED_NUMBERS+3) * 24);
 800bee2:	4c08      	ldr	r4, [pc, #32]	; (800bf04 <my_own_sender+0xd0>)
 800bee4:	6801      	ldr	r1, [r0, #0]
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	f44f 729c 	mov.w	r2, #312	; 0x138
 800beec:	f7f5 fdba 	bl	8001a64 <HAL_SPI_Transmit_DMA>
	while(HAL_DMA_STATE_READY != HAL_DMA_GetState(hspi_ws2812b->hdmatx));
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800bef4:	f7f4 fdec 	bl	8000ad0 <HAL_DMA_GetState>
 800bef8:	2801      	cmp	r0, #1
 800befa:	d1f9      	bne.n	800bef0 <my_own_sender+0xbc>
}
 800befc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf00:	2000a940 	.word	0x2000a940
 800bf04:	2000a938 	.word	0x2000a938
 800bf08:	2000a93c 	.word	0x2000a93c

0800bf0c <all_color>:
void all_color(int data) {
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4605      	mov	r5, r0
	for(int i = 0; i < 10; ++i){
 800bf10:	2400      	movs	r4, #0
 800bf12:	b220      	sxth	r0, r4
			 switch(data){
 800bf14:	2d07      	cmp	r5, #7
 800bf16:	d825      	bhi.n	800bf64 <all_color+0x58>
 800bf18:	e8df f005 	tbb	[pc, r5]
 800bf1c:	18101404 	.word	0x18101404
 800bf20:	211e1b24 	.word	0x211e1b24
			 case RED: WS2812B_SetDiodeRGB(i, 255,0,0); break;
 800bf24:	2300      	movs	r3, #0
 800bf26:	461a      	mov	r2, r3
 800bf28:	21ff      	movs	r1, #255	; 0xff
	for(int i = 0; i < 10; ++i){
 800bf2a:	3401      	adds	r4, #1
			 default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800bf2c:	f7ff ff4a 	bl	800bdc4 <WS2812B_SetDiodeRGB>
	for(int i = 0; i < 10; ++i){
 800bf30:	2c0a      	cmp	r4, #10
 800bf32:	d1ee      	bne.n	800bf12 <all_color+0x6>
}
 800bf34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	my_own_sender();
 800bf38:	f7ff bf7c 	b.w	800be34 <my_own_sender>
			 case BLUE: WS2812B_SetDiodeRGB(i, 0,0,255); break;
 800bf3c:	23ff      	movs	r3, #255	; 0xff
 800bf3e:	2200      	movs	r2, #0
			 case CYAN: WS2812B_SetDiodeRGB(i, 0, 255, 255); break;
 800bf40:	2100      	movs	r1, #0
 800bf42:	e7f2      	b.n	800bf2a <all_color+0x1e>
			 case GREEN: WS2812B_SetDiodeRGB(i, 0,255,0); break;
 800bf44:	2300      	movs	r3, #0
 800bf46:	22ff      	movs	r2, #255	; 0xff
			 default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800bf48:	4619      	mov	r1, r3
 800bf4a:	e7ee      	b.n	800bf2a <all_color+0x1e>
			 case WHITE: WS2812B_SetDiodeRGB(i, 255,255,255); break;
 800bf4c:	23ff      	movs	r3, #255	; 0xff
			 default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800bf4e:	461a      	mov	r2, r3
 800bf50:	e7fa      	b.n	800bf48 <all_color+0x3c>
			 case MAGENTA: WS2812B_SetDiodeRGB(i, 255, 0, 255); break;
 800bf52:	23ff      	movs	r3, #255	; 0xff
 800bf54:	2200      	movs	r2, #0
 800bf56:	e7f7      	b.n	800bf48 <all_color+0x3c>
			 case CYAN: WS2812B_SetDiodeRGB(i, 0, 255, 255); break;
 800bf58:	23ff      	movs	r3, #255	; 0xff
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	e7f0      	b.n	800bf40 <all_color+0x34>
			 case YELLOW: WS2812B_SetDiodeRGB(i, 255, 255, 0); break;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	22ff      	movs	r2, #255	; 0xff
 800bf62:	e7e1      	b.n	800bf28 <all_color+0x1c>
			 default: WS2812B_SetDiodeRGB(i, 0,0,0); break;
 800bf64:	2300      	movs	r3, #0
 800bf66:	e7f2      	b.n	800bf4e <all_color+0x42>

0800bf68 <blink>:
void blink(int data){
 800bf68:	2807      	cmp	r0, #7
 800bf6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6e:	d830      	bhi.n	800bfd2 <blink+0x6a>
 800bf70:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <blink+0x74>)
 800bf72:	5c1f      	ldrb	r7, [r3, r0]
 800bf74:	4b1a      	ldr	r3, [pc, #104]	; (800bfe0 <blink+0x78>)
 800bf76:	5c1a      	ldrb	r2, [r3, r0]
 800bf78:	4b1a      	ldr	r3, [pc, #104]	; (800bfe4 <blink+0x7c>)
 800bf7a:	5c1b      	ldrb	r3, [r3, r0]
		for (int i = 0; i < 10; i++){
 800bf7c:	f04f 0814 	mov.w	r8, #20
			WS2812B_SetDiodeRGB(i, red, green, blue);
 800bf80:	b2dc      	uxtb	r4, r3
 800bf82:	b2d6      	uxtb	r6, r2
		for (int i = 0; i < 10; i++){
 800bf84:	2500      	movs	r5, #0
			WS2812B_SetDiodeRGB(i, red, green, blue);
 800bf86:	fa5f f987 	uxtb.w	r9, r7
 800bf8a:	b228      	sxth	r0, r5
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	4632      	mov	r2, r6
 800bf90:	4649      	mov	r1, r9
		for (int i = 0; i < 10; i++){
 800bf92:	3501      	adds	r5, #1
			WS2812B_SetDiodeRGB(i, red, green, blue);
 800bf94:	f7ff ff16 	bl	800bdc4 <WS2812B_SetDiodeRGB>
		for (int i = 0; i < 10; i++){
 800bf98:	2d0a      	cmp	r5, #10
 800bf9a:	d1f6      	bne.n	800bf8a <blink+0x22>
		my_own_sender();
 800bf9c:	f7ff ff4a 	bl	800be34 <my_own_sender>
		osDelay(400);
 800bfa0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bfa4:	f7f6 f8ac 	bl	8002100 <osDelay>
		for (int i = 0; i < 10; i++){
 800bfa8:	2500      	movs	r5, #0
			WS2812B_SetDiodeRGB(i, 0, 0, 0);
 800bfaa:	2300      	movs	r3, #0
 800bfac:	b228      	sxth	r0, r5
 800bfae:	461a      	mov	r2, r3
 800bfb0:	4619      	mov	r1, r3
		for (int i = 0; i < 10; i++){
 800bfb2:	3501      	adds	r5, #1
			WS2812B_SetDiodeRGB(i, 0, 0, 0);
 800bfb4:	f7ff ff06 	bl	800bdc4 <WS2812B_SetDiodeRGB>
		for (int i = 0; i < 10; i++){
 800bfb8:	2d0a      	cmp	r5, #10
 800bfba:	d1f6      	bne.n	800bfaa <blink+0x42>
		my_own_sender();
 800bfbc:	f7ff ff3a 	bl	800be34 <my_own_sender>
		osDelay(400);
 800bfc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bfc4:	f7f6 f89c 	bl	8002100 <osDelay>
	for (int k=0; k<20; k++){
 800bfc8:	f1b8 0801 	subs.w	r8, r8, #1
 800bfcc:	d1da      	bne.n	800bf84 <blink+0x1c>
}
 800bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void blink(int data){
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	461f      	mov	r7, r3
 800bfd8:	e7d0      	b.n	800bf7c <blink+0x14>
 800bfda:	bf00      	nop
 800bfdc:	0800f924 	.word	0x0800f924
 800bfe0:	0800f92c 	.word	0x0800f92c
 800bfe4:	0800f934 	.word	0x0800f934

0800bfe8 <mixed>:
void mixed(){
 800bfe8:	b510      	push	{r4, lr}
	all_color(BLACK);
 800bfea:	2004      	movs	r0, #4
 800bfec:	f7ff ff8e 	bl	800bf0c <all_color>
	for (int i = 0; i < 10; i++) {
 800bff0:	2400      	movs	r4, #0
		set_color(MAGENTA, i);
 800bff2:	4621      	mov	r1, r4
 800bff4:	2005      	movs	r0, #5
 800bff6:	f7ff fef5 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800bffa:	3401      	adds	r4, #1
		my_own_sender();
 800bffc:	f7ff ff1a 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c000:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c004:	f7f6 f87c 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c008:	2c0a      	cmp	r4, #10
 800c00a:	d1f2      	bne.n	800bff2 <mixed+0xa>
	for (int i = 0; i < 10; i++) {
 800c00c:	2400      	movs	r4, #0
		set_color(CYAN, i);
 800c00e:	4621      	mov	r1, r4
 800c010:	2006      	movs	r0, #6
 800c012:	f7ff fee7 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c016:	3401      	adds	r4, #1
		my_own_sender();
 800c018:	f7ff ff0c 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c01c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c020:	f7f6 f86e 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c024:	2c0a      	cmp	r4, #10
 800c026:	d1f2      	bne.n	800c00e <mixed+0x26>
	for (int i = 0; i < 10; i++) {
 800c028:	2400      	movs	r4, #0
		set_color(YELLOW, i);
 800c02a:	4621      	mov	r1, r4
 800c02c:	2007      	movs	r0, #7
 800c02e:	f7ff fed9 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c032:	3401      	adds	r4, #1
		my_own_sender();
 800c034:	f7ff fefe 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c038:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c03c:	f7f6 f860 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c040:	2c0a      	cmp	r4, #10
 800c042:	d1f2      	bne.n	800c02a <mixed+0x42>
}
 800c044:	bd10      	pop	{r4, pc}

0800c046 <basic>:
void basic(){
 800c046:	b510      	push	{r4, lr}
	all_color(BLACK);
 800c048:	2004      	movs	r0, #4
 800c04a:	f7ff ff5f 	bl	800bf0c <all_color>
	for (int i = 0; i < 10; i++) {
 800c04e:	2400      	movs	r4, #0
		set_color(RED, i);
 800c050:	4621      	mov	r1, r4
 800c052:	2000      	movs	r0, #0
 800c054:	f7ff fec6 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c058:	3401      	adds	r4, #1
		my_own_sender();
 800c05a:	f7ff feeb 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c05e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c062:	f7f6 f84d 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c066:	2c0a      	cmp	r4, #10
 800c068:	d1f2      	bne.n	800c050 <basic+0xa>
	for (int i = 0; i < 10; i++) {
 800c06a:	2400      	movs	r4, #0
		set_color(GREEN, i);
 800c06c:	4621      	mov	r1, r4
 800c06e:	2001      	movs	r0, #1
 800c070:	f7ff feb8 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c074:	3401      	adds	r4, #1
		my_own_sender();
 800c076:	f7ff fedd 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c07a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c07e:	f7f6 f83f 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c082:	2c0a      	cmp	r4, #10
 800c084:	d1f2      	bne.n	800c06c <basic+0x26>
	for (int i = 0; i < 10; i++) {
 800c086:	2400      	movs	r4, #0
		set_color(BLUE, i);
 800c088:	4621      	mov	r1, r4
 800c08a:	2002      	movs	r0, #2
 800c08c:	f7ff feaa 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c090:	3401      	adds	r4, #1
		my_own_sender();
 800c092:	f7ff fecf 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c096:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c09a:	f7f6 f831 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c09e:	2c0a      	cmp	r4, #10
 800c0a0:	d1f2      	bne.n	800c088 <basic+0x42>
}
 800c0a2:	bd10      	pop	{r4, pc}

0800c0a4 <all>:
void all(){
 800c0a4:	b510      	push	{r4, lr}
	all_color(BLACK);
 800c0a6:	2004      	movs	r0, #4
 800c0a8:	f7ff ff30 	bl	800bf0c <all_color>
	for (int i = 0; i < 10; i++) {
 800c0ac:	2400      	movs	r4, #0
		set_color(RED, i);
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f7ff fe97 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c0b6:	3401      	adds	r4, #1
		my_own_sender();
 800c0b8:	f7ff febc 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c0bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c0c0:	f7f6 f81e 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c0c4:	2c0a      	cmp	r4, #10
 800c0c6:	d1f2      	bne.n	800c0ae <all+0xa>
	for (int i = 0; i < 10; i++) {
 800c0c8:	2400      	movs	r4, #0
		set_color(GREEN, i);
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	f7ff fe89 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c0d2:	3401      	adds	r4, #1
		my_own_sender();
 800c0d4:	f7ff feae 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c0d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c0dc:	f7f6 f810 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c0e0:	2c0a      	cmp	r4, #10
 800c0e2:	d1f2      	bne.n	800c0ca <all+0x26>
	for (int i = 0; i < 10; i++) {
 800c0e4:	2400      	movs	r4, #0
		set_color(BLUE, i);
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	2002      	movs	r0, #2
 800c0ea:	f7ff fe7b 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c0ee:	3401      	adds	r4, #1
		my_own_sender();
 800c0f0:	f7ff fea0 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c0f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c0f8:	f7f6 f802 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c0fc:	2c0a      	cmp	r4, #10
 800c0fe:	d1f2      	bne.n	800c0e6 <all+0x42>
	for (int i = 0; i < 10; i++) {
 800c100:	2400      	movs	r4, #0
		set_color(MAGENTA, i);
 800c102:	4621      	mov	r1, r4
 800c104:	2005      	movs	r0, #5
 800c106:	f7ff fe6d 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c10a:	3401      	adds	r4, #1
		my_own_sender();
 800c10c:	f7ff fe92 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c110:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c114:	f7f5 fff4 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c118:	2c0a      	cmp	r4, #10
 800c11a:	d1f2      	bne.n	800c102 <all+0x5e>
	for (int i = 0; i < 10; i++) {
 800c11c:	2400      	movs	r4, #0
		set_color(CYAN, i);
 800c11e:	4621      	mov	r1, r4
 800c120:	2006      	movs	r0, #6
 800c122:	f7ff fe5f 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c126:	3401      	adds	r4, #1
		my_own_sender();
 800c128:	f7ff fe84 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c12c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c130:	f7f5 ffe6 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c134:	2c0a      	cmp	r4, #10
 800c136:	d1f2      	bne.n	800c11e <all+0x7a>
	for (int i = 0; i < 10; i++) {
 800c138:	2400      	movs	r4, #0
		set_color(YELLOW, i);
 800c13a:	4621      	mov	r1, r4
 800c13c:	2007      	movs	r0, #7
 800c13e:	f7ff fe51 	bl	800bde4 <set_color>
	for (int i = 0; i < 10; i++) {
 800c142:	3401      	adds	r4, #1
		my_own_sender();
 800c144:	f7ff fe76 	bl	800be34 <my_own_sender>
		osDelay(300);
 800c148:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c14c:	f7f5 ffd8 	bl	8002100 <osDelay>
	for (int i = 0; i < 10; i++) {
 800c150:	2c0a      	cmp	r4, #10
 800c152:	d1f2      	bne.n	800c13a <all+0x96>
}
 800c154:	bd10      	pop	{r4, pc}

0800c156 <change>:
	switch(data){
 800c156:	2801      	cmp	r0, #1
 800c158:	d006      	beq.n	800c168 <change+0x12>
 800c15a:	2802      	cmp	r0, #2
 800c15c:	d002      	beq.n	800c164 <change+0xe>
 800c15e:	b928      	cbnz	r0, 800c16c <change+0x16>
		case ALL: all(); break;
 800c160:	f7ff bfa0 	b.w	800c0a4 <all>
		case BASIC: basic(); break;
 800c164:	f7ff bf6f 	b.w	800c046 <basic>
		case MIXED: mixed(); break;
 800c168:	f7ff bf3e 	b.w	800bfe8 <mixed>
}
 800c16c:	4770      	bx	lr
	...

0800c170 <HAL_SPI_TxCpltCallback>:
	printf("\n");
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
	HAL_SPI_DMAStop(hspi_ws2812b);
 800c170:	4b01      	ldr	r3, [pc, #4]	; (800c178 <HAL_SPI_TxCpltCallback+0x8>)
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	f7f5 bcca 	b.w	8001b0c <HAL_SPI_DMAStop>
 800c178:	2000a938 	.word	0x2000a938

0800c17c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c17c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c17e:	4b23      	ldr	r3, [pc, #140]	; (800c20c <HAL_MspInit+0x90>)
 800c180:	2400      	movs	r4, #0
 800c182:	9400      	str	r4, [sp, #0]
 800c184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c18a:	645a      	str	r2, [r3, #68]	; 0x44
 800c18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c18e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c192:	9200      	str	r2, [sp, #0]
 800c194:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c196:	9401      	str	r4, [sp, #4]
 800c198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c19a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c19e:	641a      	str	r2, [r3, #64]	; 0x40
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1a6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c1a8:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800c1aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c1ac:	f7f4 fa48 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	f06f 000b 	mvn.w	r0, #11
 800c1b8:	f7f4 fa54 	bl	8000664 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800c1bc:	4622      	mov	r2, r4
 800c1be:	4621      	mov	r1, r4
 800c1c0:	f06f 000a 	mvn.w	r0, #10
 800c1c4:	f7f4 fa4e 	bl	8000664 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	f06f 0009 	mvn.w	r0, #9
 800c1d0:	f7f4 fa48 	bl	8000664 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	f06f 0004 	mvn.w	r0, #4
 800c1dc:	f7f4 fa42 	bl	8000664 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800c1e0:	4622      	mov	r2, r4
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	f06f 0003 	mvn.w	r0, #3
 800c1e8:	f7f4 fa3c 	bl	8000664 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	210f      	movs	r1, #15
 800c1f0:	f06f 0001 	mvn.w	r0, #1
 800c1f4:	f7f4 fa36 	bl	8000664 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	210f      	movs	r1, #15
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c200:	b002      	add	sp, #8
 800c202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800c206:	f7f4 ba2d 	b.w	8000664 <HAL_NVIC_SetPriority>
 800c20a:	bf00      	nop
 800c20c:	40023800 	.word	0x40023800

0800c210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800c214:	6802      	ldr	r2, [r0, #0]
 800c216:	4b26      	ldr	r3, [pc, #152]	; (800c2b0 <HAL_SPI_MspInit+0xa0>)
 800c218:	429a      	cmp	r2, r3
{
 800c21a:	b087      	sub	sp, #28
 800c21c:	4606      	mov	r6, r0
  if(hspi->Instance==SPI1)
 800c21e:	d143      	bne.n	800c2a8 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c220:	2500      	movs	r5, #0
 800c222:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800c226:	9500      	str	r5, [sp, #0]
 800c228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c22a:	4822      	ldr	r0, [pc, #136]	; (800c2b4 <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c22c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c230:	645a      	str	r2, [r3, #68]	; 0x44
 800c232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c234:	9503      	str	r5, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c23a:	2405      	movs	r4, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c23c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c23e:	f04f 0920 	mov.w	r9, #32
 800c242:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c246:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c248:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c24a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c24c:	e9cd 7404 	strd	r7, r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c250:	e9cd 9801 	strd	r9, r8, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c254:	f7f4 fff4 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c258:	a901      	add	r1, sp, #4
 800c25a:	4817      	ldr	r0, [pc, #92]	; (800c2b8 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c25c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c25e:	e9cd 9801 	strd	r9, r8, [sp, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800c262:	4c16      	ldr	r4, [pc, #88]	; (800c2bc <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c264:	e9cd 5703 	strd	r5, r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c268:	f7f4 ffea 	bl	8001240 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800c26c:	4a14      	ldr	r2, [pc, #80]	; (800c2c0 <HAL_SPI_MspInit+0xb0>)
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c26e:	61a5      	str	r5, [r4, #24]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800c270:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800c274:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c278:	2340      	movs	r3, #64	; 0x40
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c27a:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c282:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c28a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800c28e:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c290:	e9c4 1307 	strd	r1, r3, [r4, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c294:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800c296:	f7f4 fa5d 	bl	8000754 <HAL_DMA_Init>
 800c29a:	b118      	cbz	r0, 800c2a4 <HAL_SPI_MspInit+0x94>
    {
      _Error_Handler(__FILE__, __LINE__);
 800c29c:	2189      	movs	r1, #137	; 0x89
 800c29e:	4809      	ldr	r0, [pc, #36]	; (800c2c4 <HAL_SPI_MspInit+0xb4>)
 800c2a0:	f7ff fc36 	bl	800bb10 <_Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800c2a4:	64b4      	str	r4, [r6, #72]	; 0x48
 800c2a6:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800c2a8:	b007      	add	sp, #28
 800c2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2ae:	bf00      	nop
 800c2b0:	40013000 	.word	0x40013000
 800c2b4:	40020000 	.word	0x40020000
 800c2b8:	40020400 	.word	0x40020400
 800c2bc:	2000a8d4 	.word	0x2000a8d4
 800c2c0:	40026458 	.word	0x40026458
 800c2c4:	0800f93c 	.word	0x0800f93c

0800c2c8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c2c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800c2ca:	6802      	ldr	r2, [r0, #0]
 800c2cc:	4b10      	ldr	r3, [pc, #64]	; (800c310 <HAL_UART_MspInit+0x48>)
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d11a      	bne.n	800c308 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	4b0f      	ldr	r3, [pc, #60]	; (800c314 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2d8:	480f      	ldr	r0, [pc, #60]	; (800c318 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800c2da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c2e0:	641a      	str	r2, [r3, #64]	; 0x40
 800c2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c2f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f2:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c2fe:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c300:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c302:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c304:	f7f4 ff9c 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c308:	b007      	add	sp, #28
 800c30a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c30e:	bf00      	nop
 800c310:	40004800 	.word	0x40004800
 800c314:	40023800 	.word	0x40023800
 800c318:	40020c00 	.word	0x40020c00

0800c31c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c31c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c31e:	4601      	mov	r1, r0
{
 800c320:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c322:	2200      	movs	r2, #0
 800c324:	2036      	movs	r0, #54	; 0x36
 800c326:	f7f4 f99d 	bl	8000664 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c32a:	2036      	movs	r0, #54	; 0x36
 800c32c:	f7f4 f9ce 	bl	80006cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c330:	2500      	movs	r5, #0
 800c332:	4b15      	ldr	r3, [pc, #84]	; (800c388 <HAL_InitTick+0x6c>)
 800c334:	9502      	str	r5, [sp, #8]
 800c336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c338:	4c14      	ldr	r4, [pc, #80]	; (800c38c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c33a:	f042 0210 	orr.w	r2, r2, #16
 800c33e:	641a      	str	r2, [r3, #64]	; 0x40
 800c340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c342:	f003 0310 	and.w	r3, r3, #16
 800c346:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c348:	a901      	add	r1, sp, #4
 800c34a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c34c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c34e:	f7f5 fad7 	bl	8001900 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c352:	f7f5 fab5 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800c356:	4b0e      	ldr	r3, [pc, #56]	; (800c390 <HAL_InitTick+0x74>)
 800c358:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c35a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800c35e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c360:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c362:	4b0c      	ldr	r3, [pc, #48]	; (800c394 <HAL_InitTick+0x78>)
 800c364:	fbb0 f0f3 	udiv	r0, r0, r3
 800c368:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800c36a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c36c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800c36e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c370:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c372:	f7f5 fd3d 	bl	8001df0 <HAL_TIM_Base_Init>
 800c376:	b920      	cbnz	r0, 800c382 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c378:	4620      	mov	r0, r4
 800c37a:	f7f5 fc25 	bl	8001bc8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800c37e:	b009      	add	sp, #36	; 0x24
 800c380:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800c382:	2001      	movs	r0, #1
 800c384:	e7fb      	b.n	800c37e <HAL_InitTick+0x62>
 800c386:	bf00      	nop
 800c388:	40023800 	.word	0x40023800
 800c38c:	2000a944 	.word	0x2000a944
 800c390:	40001000 	.word	0x40001000
 800c394:	000f4240 	.word	0x000f4240

0800c398 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800c398:	f7f5 bfb0 	b.w	80022fc <osSystickHandler>

0800c39c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <TIM6_DAC_IRQHandler+0x8>)
 800c39e:	f7f5 bc22 	b.w	8001be6 <HAL_TIM_IRQHandler>
 800c3a2:	bf00      	nop
 800c3a4:	2000a944 	.word	0x2000a944

0800c3a8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800c3a8:	4801      	ldr	r0, [pc, #4]	; (800c3b0 <DMA2_Stream3_IRQHandler+0x8>)
 800c3aa:	f7f4 bad3 	b.w	8000954 <HAL_DMA_IRQHandler>
 800c3ae:	bf00      	nop
 800c3b0:	2000a8d4 	.word	0x2000a8d4

0800c3b4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800c3b4:	4801      	ldr	r0, [pc, #4]	; (800c3bc <ETH_IRQHandler+0x8>)
 800c3b6:	f7f4 bd62 	b.w	8000e7e <HAL_ETH_IRQHandler>
 800c3ba:	bf00      	nop
 800c3bc:	20008fe0 	.word	0x20008fe0

0800c3c0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <_sbrk+0x30>)
 800c3c2:	6819      	ldr	r1, [r3, #0]
{
 800c3c4:	4602      	mov	r2, r0
	if (heap_end == 0)
 800c3c6:	b909      	cbnz	r1, 800c3cc <_sbrk+0xc>
		heap_end = &end;
 800c3c8:	490a      	ldr	r1, [pc, #40]	; (800c3f4 <_sbrk+0x34>)
 800c3ca:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c3cc:	490a      	ldr	r1, [pc, #40]	; (800c3f8 <_sbrk+0x38>)
	prev_heap_end = heap_end;
 800c3ce:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c3d0:	6809      	ldr	r1, [r1, #0]
 800c3d2:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800c3d4:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 800c3d6:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 800c3da:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 800c3dc:	bf89      	itett	hi
 800c3de:	4b07      	ldrhi	r3, [pc, #28]	; (800c3fc <_sbrk+0x3c>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800c3e0:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800c3e2:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800c3e4:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800c3e8:	bf88      	it	hi
 800c3ea:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	20003f8c 	.word	0x20003f8c
 800c3f4:	2000a980 	.word	0x2000a980
 800c3f8:	e000ed08 	.word	0xe000ed08
 800c3fc:	20007708 	.word	0x20007708

0800c400 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	460e      	mov	r6, r1
 800c404:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c406:	460c      	mov	r4, r1
 800c408:	1ba3      	subs	r3, r4, r6
 800c40a:	429d      	cmp	r5, r3
 800c40c:	dc01      	bgt.n	800c412 <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 800c40e:	4628      	mov	r0, r5
 800c410:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 800c412:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c416:	f7fe ffb3 	bl	800b380 <__io_putchar>
 800c41a:	e7f5      	b.n	800c408 <_write+0x8>

0800c41c <_close>:

int _close(int file)
{
	return -1;
}
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	4770      	bx	lr

0800c422 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800c422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c426:	604b      	str	r3, [r1, #4]
	return 0;
}
 800c428:	2000      	movs	r0, #0
 800c42a:	4770      	bx	lr

0800c42c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800c42c:	2001      	movs	r0, #1
 800c42e:	4770      	bx	lr

0800c430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800c430:	2000      	movs	r0, #0
 800c432:	4770      	bx	lr

0800c434 <_read>:

int _read(int file, char *ptr, int len)
{
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	460e      	mov	r6, r1
 800c438:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c43a:	460c      	mov	r4, r1
 800c43c:	1ba3      	subs	r3, r4, r6
 800c43e:	429d      	cmp	r5, r3
 800c440:	dc01      	bgt.n	800c446 <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800c442:	4628      	mov	r0, r5
 800c444:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800c446:	f3af 8000 	nop.w
 800c44a:	f804 0b01 	strb.w	r0, [r4], #1
 800c44e:	e7f5      	b.n	800c43c <_read+0x8>

0800c450 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c450:	490f      	ldr	r1, [pc, #60]	; (800c490 <SystemInit+0x40>)
 800c452:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c456:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c45a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c45e:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <SystemInit+0x44>)
 800c460:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c462:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800c464:	f042 0201 	orr.w	r2, r2, #1
 800c468:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800c46a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c472:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c476:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c478:	4a07      	ldr	r2, [pc, #28]	; (800c498 <SystemInit+0x48>)
 800c47a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c482:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c484:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c48a:	608b      	str	r3, [r1, #8]
#endif
}
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	e000ed00 	.word	0xe000ed00
 800c494:	40023800 	.word	0x40023800
 800c498:	24003010 	.word	0x24003010

0800c49c <xputs>:




void xputs (const char* str)
{
 800c49c:	b510      	push	{r4, lr}
 800c49e:	1e44      	subs	r4, r0, #1
	while (*str)
 800c4a0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800c4a4:	b900      	cbnz	r0, 800c4a8 <xputs+0xc>
		xputc(*str++);
}
 800c4a6:	bd10      	pop	{r4, pc}
	debug_chr(c);
 800c4a8:	f7fe ff7c 	bl	800b3a4 <debug_chr>
 800c4ac:	e7f8      	b.n	800c4a0 <xputs+0x4>

0800c4ae <xitoa>:




void xitoa (long val, int radix, int len)
{
 800c4ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 800c4b0:	2900      	cmp	r1, #0
{
 800c4b2:	b087      	sub	sp, #28
	if (radix < 0) {
 800c4b4:	da39      	bge.n	800c52a <xitoa+0x7c>
		radix = -radix;
		if (val < 0) {
 800c4b6:	2800      	cmp	r0, #0
		radix = -radix;
 800c4b8:	f1c1 0100 	rsb	r1, r1, #0
		if (val < 0) {
 800c4bc:	da35      	bge.n	800c52a <xitoa+0x7c>
			val = -val;
 800c4be:	4240      	negs	r0, r0
			sgn = '-';
 800c4c0:	272d      	movs	r7, #45	; 0x2d
		}
	}
	v = val;
	r = radix;
	if (len < 0) {
 800c4c2:	2a00      	cmp	r2, #0
		len = -len;
 800c4c4:	bfba      	itte	lt
 800c4c6:	4252      	neglt	r2, r2
		pad = '0';
 800c4c8:	2630      	movlt	r6, #48	; 0x30
	uint8_t c, r, sgn = 0, pad = ' ';
 800c4ca:	2620      	movge	r6, #32
	}
	if (len > 20) return;
 800c4cc:	2a14      	cmp	r2, #20
 800c4ce:	dc2a      	bgt.n	800c526 <xitoa+0x78>
	uint8_t s[20], i = 0;
 800c4d0:	2500      	movs	r5, #0
	do {
		c = (uint8_t)(v % r);
 800c4d2:	b2c9      	uxtb	r1, r1
 800c4d4:	fbb0 fcf1 	udiv	ip, r0, r1
 800c4d8:	fb01 001c 	mls	r0, r1, ip, r0
 800c4dc:	b2c4      	uxtb	r4, r0
		if (c >= 10) c += 7;
 800c4de:	2809      	cmp	r0, #9
 800c4e0:	bf88      	it	hi
 800c4e2:	3407      	addhi	r4, #7
		c += '0';
		s[i++] = c;
 800c4e4:	a806      	add	r0, sp, #24
 800c4e6:	4428      	add	r0, r5
		if (c >= 10) c += 7;
 800c4e8:	bf88      	it	hi
 800c4ea:	b2e4      	uxtbhi	r4, r4
		c += '0';
 800c4ec:	3430      	adds	r4, #48	; 0x30
		s[i++] = c;
 800c4ee:	1c6b      	adds	r3, r5, #1
 800c4f0:	f800 4c14 	strb.w	r4, [r0, #-20]
		v /= r;
 800c4f4:	4660      	mov	r0, ip
		s[i++] = c;
 800c4f6:	b2db      	uxtb	r3, r3
	} while (v);
 800c4f8:	b9c8      	cbnz	r0, 800c52e <xitoa+0x80>
	if (sgn) s[i++] = sgn;
 800c4fa:	b12f      	cbz	r7, 800c508 <xitoa+0x5a>
 800c4fc:	a906      	add	r1, sp, #24
 800c4fe:	440b      	add	r3, r1
 800c500:	3502      	adds	r5, #2
 800c502:	f803 7c14 	strb.w	r7, [r3, #-20]
 800c506:	b2eb      	uxtb	r3, r5
	while (i < len)
 800c508:	4293      	cmp	r3, r2
 800c50a:	4619      	mov	r1, r3
 800c50c:	db11      	blt.n	800c532 <xitoa+0x84>
 800c50e:	3b01      	subs	r3, #1
 800c510:	aa01      	add	r2, sp, #4
 800c512:	fa52 f483 	uxtab	r4, r2, r3
 800c516:	f10d 0503 	add.w	r5, sp, #3
	debug_chr(c);
 800c51a:	f814 0901 	ldrb.w	r0, [r4], #-1
 800c51e:	f7fe ff41 	bl	800b3a4 <debug_chr>
		s[i++] = pad;
	do
		xputc(s[--i]);
	while (i);
 800c522:	42a5      	cmp	r5, r4
 800c524:	d1f9      	bne.n	800c51a <xitoa+0x6c>
}
 800c526:	b007      	add	sp, #28
 800c528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t c, r, sgn = 0, pad = ' ';
 800c52a:	2700      	movs	r7, #0
 800c52c:	e7c9      	b.n	800c4c2 <xitoa+0x14>
		s[i++] = c;
 800c52e:	461d      	mov	r5, r3
 800c530:	e7d0      	b.n	800c4d4 <xitoa+0x26>
		s[i++] = pad;
 800c532:	a806      	add	r0, sp, #24
 800c534:	4401      	add	r1, r0
 800c536:	3301      	adds	r3, #1
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	f801 6c14 	strb.w	r6, [r1, #-20]
 800c53e:	e7e3      	b.n	800c508 <xitoa+0x5a>

0800c540 <xprintf>:

void xprintf (const char* str, ...)
{
 800c540:	b40f      	push	{r0, r1, r2, r3}
 800c542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c544:	ab08      	add	r3, sp, #32
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
			w += w * 10 + (d - '0');
 800c546:	260a      	movs	r6, #10
{
 800c548:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(arp, str);
 800c54c:	9301      	str	r3, [sp, #4]
	while ((d = *str++) != 0) {
 800c54e:	7820      	ldrb	r0, [r4, #0]
 800c550:	2800      	cmp	r0, #0
 800c552:	d03c      	beq.n	800c5ce <xprintf+0x8e>
		if (d != '%') {
 800c554:	2825      	cmp	r0, #37	; 0x25
 800c556:	d003      	beq.n	800c560 <xprintf+0x20>
	while ((d = *str++) != 0) {
 800c558:	3401      	adds	r4, #1
	debug_chr(c);
 800c55a:	f7fe ff23 	bl	800b3a4 <debug_chr>
			xputs(va_arg(arp, char*));
			continue;
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
 800c55e:	e7f6      	b.n	800c54e <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 800c560:	7863      	ldrb	r3, [r4, #1]
		if (d == '0') {
 800c562:	2b30      	cmp	r3, #48	; 0x30
 800c564:	d11f      	bne.n	800c5a6 <xprintf+0x66>
			d = *str++; s = 1;
 800c566:	78a3      	ldrb	r3, [r4, #2]
 800c568:	2001      	movs	r0, #1
 800c56a:	3403      	adds	r4, #3
		d = *str++; w = r = s = l = 0;
 800c56c:	2200      	movs	r2, #0
 800c56e:	e004      	b.n	800c57a <xprintf+0x3a>
			w += w * 10 + (d - '0');
 800c570:	fb06 1102 	mla	r1, r6, r2, r1
			d = *str++;
 800c574:	f814 3b01 	ldrb.w	r3, [r4], #1
			w += w * 10 + (d - '0');
 800c578:	440a      	add	r2, r1
		while ((d >= '0')&&(d <= '9')) {
 800c57a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c57e:	2909      	cmp	r1, #9
 800c580:	d9f6      	bls.n	800c570 <xprintf+0x30>
		if (s) w = -w;
 800c582:	b100      	cbz	r0, 800c586 <xprintf+0x46>
 800c584:	4252      	negs	r2, r2
		if (d == 'l') {
 800c586:	2b6c      	cmp	r3, #108	; 0x6c
			d = *str++;
 800c588:	bf03      	ittte	eq
 800c58a:	7823      	ldrbeq	r3, [r4, #0]
			l = 1;
 800c58c:	2501      	moveq	r5, #1
			d = *str++;
 800c58e:	3401      	addeq	r4, #1
		d = *str++; w = r = s = l = 0;
 800c590:	2500      	movne	r5, #0
		if (!d) break;
 800c592:	b1e3      	cbz	r3, 800c5ce <xprintf+0x8e>
		if (d == 's') {
 800c594:	2b73      	cmp	r3, #115	; 0x73
 800c596:	d109      	bne.n	800c5ac <xprintf+0x6c>
			xputs(va_arg(arp, char*));
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	1d1a      	adds	r2, r3, #4
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	9201      	str	r2, [sp, #4]
 800c5a0:	f7ff ff7c 	bl	800c49c <xputs>
			continue;
 800c5a4:	e7d3      	b.n	800c54e <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 800c5a6:	3402      	adds	r4, #2
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7df      	b.n	800c56c <xprintf+0x2c>
		if (d == 'c') {
 800c5ac:	2b63      	cmp	r3, #99	; 0x63
 800c5ae:	d104      	bne.n	800c5ba <xprintf+0x7a>
			xputc((char)va_arg(arp, int));
 800c5b0:	9b01      	ldr	r3, [sp, #4]
 800c5b2:	1d1a      	adds	r2, r3, #4
 800c5b4:	9201      	str	r2, [sp, #4]
	debug_chr(c);
 800c5b6:	7818      	ldrb	r0, [r3, #0]
 800c5b8:	e7cf      	b.n	800c55a <xprintf+0x1a>
		}
		if (d == 'u') r = 10;
 800c5ba:	2b75      	cmp	r3, #117	; 0x75
 800c5bc:	d00c      	beq.n	800c5d8 <xprintf+0x98>
		if (d == 'd') r = -10;
 800c5be:	2b64      	cmp	r3, #100	; 0x64
 800c5c0:	d016      	beq.n	800c5f0 <xprintf+0xb0>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 800c5c2:	2b58      	cmp	r3, #88	; 0x58
 800c5c4:	d01d      	beq.n	800c602 <xprintf+0xc2>
 800c5c6:	2b78      	cmp	r3, #120	; 0x78
 800c5c8:	d01b      	beq.n	800c602 <xprintf+0xc2>
		if (d == 'b') r = 2;
 800c5ca:	2b62      	cmp	r3, #98	; 0x62
 800c5cc:	d017      	beq.n	800c5fe <xprintf+0xbe>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 800c5ce:	b003      	add	sp, #12
 800c5d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c5d4:	b004      	add	sp, #16
 800c5d6:	4770      	bx	lr
		if (d == 'u') r = 10;
 800c5d8:	210a      	movs	r1, #10
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	1d1f      	adds	r7, r3, #4
 800c5de:	6818      	ldr	r0, [r3, #0]
		if (l) {
 800c5e0:	b14d      	cbz	r5, 800c5f6 <xprintf+0xb6>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	1d18      	adds	r0, r3, #4
 800c5e6:	9001      	str	r0, [sp, #4]
 800c5e8:	6818      	ldr	r0, [r3, #0]
				xitoa((long)va_arg(arp, int), r, w);
 800c5ea:	f7ff ff60 	bl	800c4ae <xitoa>
 800c5ee:	e7ae      	b.n	800c54e <xprintf+0xe>
		if (d == 'd') r = -10;
 800c5f0:	f06f 0109 	mvn.w	r1, #9
 800c5f4:	e7f1      	b.n	800c5da <xprintf+0x9a>
			if (r > 0)
 800c5f6:	2900      	cmp	r1, #0
 800c5f8:	dcf3      	bgt.n	800c5e2 <xprintf+0xa2>
				xitoa((long)va_arg(arp, int), r, w);
 800c5fa:	9701      	str	r7, [sp, #4]
 800c5fc:	e7f5      	b.n	800c5ea <xprintf+0xaa>
		if (d == 'b') r = 2;
 800c5fe:	2102      	movs	r1, #2
 800c600:	e7ef      	b.n	800c5e2 <xprintf+0xa2>
		if (l) {
 800c602:	2110      	movs	r1, #16
 800c604:	e7ed      	b.n	800c5e2 <xprintf+0xa2>
	...

0800c608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800c608:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c640 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c60c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c60e:	e003      	b.n	800c618 <LoopCopyDataInit>

0800c610 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c610:	4b0c      	ldr	r3, [pc, #48]	; (800c644 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c612:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c614:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c616:	3104      	adds	r1, #4

0800c618 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c618:	480b      	ldr	r0, [pc, #44]	; (800c648 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c61c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c61e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c620:	d3f6      	bcc.n	800c610 <CopyDataInit>
  ldr  r2, =_sbss
 800c622:	4a0b      	ldr	r2, [pc, #44]	; (800c650 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c624:	e002      	b.n	800c62c <LoopFillZerobss>

0800c626 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c626:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c628:	f842 3b04 	str.w	r3, [r2], #4

0800c62c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c62c:	4b09      	ldr	r3, [pc, #36]	; (800c654 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c62e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c630:	d3f9      	bcc.n	800c626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c632:	f7ff ff0d 	bl	800c450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c636:	f000 f819 	bl	800c66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c63a:	f7ff f91b 	bl	800b874 <main>
  bx  lr    
 800c63e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800c640:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800c644:	0800fa18 	.word	0x0800fa18
  ldr  r0, =_sdata
 800c648:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c64c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800c650:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800c654:	2000a980 	.word	0x2000a980

0800c658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c658:	e7fe      	b.n	800c658 <ADC_IRQHandler>
	...

0800c65c <calloc>:
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <calloc+0xc>)
 800c65e:	460a      	mov	r2, r1
 800c660:	4601      	mov	r1, r0
 800c662:	6818      	ldr	r0, [r3, #0]
 800c664:	f000 b850 	b.w	800c708 <_calloc_r>
 800c668:	20000014 	.word	0x20000014

0800c66c <__libc_init_array>:
 800c66c:	b570      	push	{r4, r5, r6, lr}
 800c66e:	4e0d      	ldr	r6, [pc, #52]	; (800c6a4 <__libc_init_array+0x38>)
 800c670:	4c0d      	ldr	r4, [pc, #52]	; (800c6a8 <__libc_init_array+0x3c>)
 800c672:	1ba4      	subs	r4, r4, r6
 800c674:	10a4      	asrs	r4, r4, #2
 800c676:	2500      	movs	r5, #0
 800c678:	42a5      	cmp	r5, r4
 800c67a:	d109      	bne.n	800c690 <__libc_init_array+0x24>
 800c67c:	4e0b      	ldr	r6, [pc, #44]	; (800c6ac <__libc_init_array+0x40>)
 800c67e:	4c0c      	ldr	r4, [pc, #48]	; (800c6b0 <__libc_init_array+0x44>)
 800c680:	f000 ffe2 	bl	800d648 <_init>
 800c684:	1ba4      	subs	r4, r4, r6
 800c686:	10a4      	asrs	r4, r4, #2
 800c688:	2500      	movs	r5, #0
 800c68a:	42a5      	cmp	r5, r4
 800c68c:	d105      	bne.n	800c69a <__libc_init_array+0x2e>
 800c68e:	bd70      	pop	{r4, r5, r6, pc}
 800c690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c694:	4798      	blx	r3
 800c696:	3501      	adds	r5, #1
 800c698:	e7ee      	b.n	800c678 <__libc_init_array+0xc>
 800c69a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c69e:	4798      	blx	r3
 800c6a0:	3501      	adds	r5, #1
 800c6a2:	e7f2      	b.n	800c68a <__libc_init_array+0x1e>
 800c6a4:	0800fa10 	.word	0x0800fa10
 800c6a8:	0800fa10 	.word	0x0800fa10
 800c6ac:	0800fa10 	.word	0x0800fa10
 800c6b0:	0800fa14 	.word	0x0800fa14

0800c6b4 <malloc>:
 800c6b4:	4b02      	ldr	r3, [pc, #8]	; (800c6c0 <malloc+0xc>)
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	6818      	ldr	r0, [r3, #0]
 800c6ba:	f000 b881 	b.w	800c7c0 <_malloc_r>
 800c6be:	bf00      	nop
 800c6c0:	20000014 	.word	0x20000014

0800c6c4 <memcmp>:
 800c6c4:	b530      	push	{r4, r5, lr}
 800c6c6:	2400      	movs	r4, #0
 800c6c8:	42a2      	cmp	r2, r4
 800c6ca:	d101      	bne.n	800c6d0 <memcmp+0xc>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e007      	b.n	800c6e0 <memcmp+0x1c>
 800c6d0:	5d03      	ldrb	r3, [r0, r4]
 800c6d2:	3401      	adds	r4, #1
 800c6d4:	190d      	adds	r5, r1, r4
 800c6d6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c6da:	42ab      	cmp	r3, r5
 800c6dc:	d0f4      	beq.n	800c6c8 <memcmp+0x4>
 800c6de:	1b58      	subs	r0, r3, r5
 800c6e0:	bd30      	pop	{r4, r5, pc}

0800c6e2 <memcpy>:
 800c6e2:	b510      	push	{r4, lr}
 800c6e4:	1e43      	subs	r3, r0, #1
 800c6e6:	440a      	add	r2, r1
 800c6e8:	4291      	cmp	r1, r2
 800c6ea:	d100      	bne.n	800c6ee <memcpy+0xc>
 800c6ec:	bd10      	pop	{r4, pc}
 800c6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6f6:	e7f7      	b.n	800c6e8 <memcpy+0x6>

0800c6f8 <memset>:
 800c6f8:	4402      	add	r2, r0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d100      	bne.n	800c702 <memset+0xa>
 800c700:	4770      	bx	lr
 800c702:	f803 1b01 	strb.w	r1, [r3], #1
 800c706:	e7f9      	b.n	800c6fc <memset+0x4>

0800c708 <_calloc_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	fb02 f401 	mul.w	r4, r2, r1
 800c70e:	4621      	mov	r1, r4
 800c710:	f000 f856 	bl	800c7c0 <_malloc_r>
 800c714:	4605      	mov	r5, r0
 800c716:	b118      	cbz	r0, 800c720 <_calloc_r+0x18>
 800c718:	4622      	mov	r2, r4
 800c71a:	2100      	movs	r1, #0
 800c71c:	f7ff ffec 	bl	800c6f8 <memset>
 800c720:	4628      	mov	r0, r5
 800c722:	bd38      	pop	{r3, r4, r5, pc}

0800c724 <_free_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4605      	mov	r5, r0
 800c728:	2900      	cmp	r1, #0
 800c72a:	d045      	beq.n	800c7b8 <_free_r+0x94>
 800c72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c730:	1f0c      	subs	r4, r1, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfb8      	it	lt
 800c736:	18e4      	addlt	r4, r4, r3
 800c738:	f000 fc10 	bl	800cf5c <__malloc_lock>
 800c73c:	4a1f      	ldr	r2, [pc, #124]	; (800c7bc <_free_r+0x98>)
 800c73e:	6813      	ldr	r3, [r2, #0]
 800c740:	4610      	mov	r0, r2
 800c742:	b933      	cbnz	r3, 800c752 <_free_r+0x2e>
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	6014      	str	r4, [r2, #0]
 800c748:	4628      	mov	r0, r5
 800c74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74e:	f000 bc06 	b.w	800cf5e <__malloc_unlock>
 800c752:	42a3      	cmp	r3, r4
 800c754:	d90c      	bls.n	800c770 <_free_r+0x4c>
 800c756:	6821      	ldr	r1, [r4, #0]
 800c758:	1862      	adds	r2, r4, r1
 800c75a:	4293      	cmp	r3, r2
 800c75c:	bf04      	itt	eq
 800c75e:	681a      	ldreq	r2, [r3, #0]
 800c760:	685b      	ldreq	r3, [r3, #4]
 800c762:	6063      	str	r3, [r4, #4]
 800c764:	bf04      	itt	eq
 800c766:	1852      	addeq	r2, r2, r1
 800c768:	6022      	streq	r2, [r4, #0]
 800c76a:	6004      	str	r4, [r0, #0]
 800c76c:	e7ec      	b.n	800c748 <_free_r+0x24>
 800c76e:	4613      	mov	r3, r2
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	b10a      	cbz	r2, 800c778 <_free_r+0x54>
 800c774:	42a2      	cmp	r2, r4
 800c776:	d9fa      	bls.n	800c76e <_free_r+0x4a>
 800c778:	6819      	ldr	r1, [r3, #0]
 800c77a:	1858      	adds	r0, r3, r1
 800c77c:	42a0      	cmp	r0, r4
 800c77e:	d10b      	bne.n	800c798 <_free_r+0x74>
 800c780:	6820      	ldr	r0, [r4, #0]
 800c782:	4401      	add	r1, r0
 800c784:	1858      	adds	r0, r3, r1
 800c786:	4282      	cmp	r2, r0
 800c788:	6019      	str	r1, [r3, #0]
 800c78a:	d1dd      	bne.n	800c748 <_free_r+0x24>
 800c78c:	6810      	ldr	r0, [r2, #0]
 800c78e:	6852      	ldr	r2, [r2, #4]
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	4401      	add	r1, r0
 800c794:	6019      	str	r1, [r3, #0]
 800c796:	e7d7      	b.n	800c748 <_free_r+0x24>
 800c798:	d902      	bls.n	800c7a0 <_free_r+0x7c>
 800c79a:	230c      	movs	r3, #12
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	e7d3      	b.n	800c748 <_free_r+0x24>
 800c7a0:	6820      	ldr	r0, [r4, #0]
 800c7a2:	1821      	adds	r1, r4, r0
 800c7a4:	428a      	cmp	r2, r1
 800c7a6:	bf04      	itt	eq
 800c7a8:	6811      	ldreq	r1, [r2, #0]
 800c7aa:	6852      	ldreq	r2, [r2, #4]
 800c7ac:	6062      	str	r2, [r4, #4]
 800c7ae:	bf04      	itt	eq
 800c7b0:	1809      	addeq	r1, r1, r0
 800c7b2:	6021      	streq	r1, [r4, #0]
 800c7b4:	605c      	str	r4, [r3, #4]
 800c7b6:	e7c7      	b.n	800c748 <_free_r+0x24>
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20003f90 	.word	0x20003f90

0800c7c0 <_malloc_r>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	1ccd      	adds	r5, r1, #3
 800c7c4:	f025 0503 	bic.w	r5, r5, #3
 800c7c8:	3508      	adds	r5, #8
 800c7ca:	2d0c      	cmp	r5, #12
 800c7cc:	bf38      	it	cc
 800c7ce:	250c      	movcc	r5, #12
 800c7d0:	2d00      	cmp	r5, #0
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	db01      	blt.n	800c7da <_malloc_r+0x1a>
 800c7d6:	42a9      	cmp	r1, r5
 800c7d8:	d903      	bls.n	800c7e2 <_malloc_r+0x22>
 800c7da:	230c      	movs	r3, #12
 800c7dc:	6033      	str	r3, [r6, #0]
 800c7de:	2000      	movs	r0, #0
 800c7e0:	bd70      	pop	{r4, r5, r6, pc}
 800c7e2:	f000 fbbb 	bl	800cf5c <__malloc_lock>
 800c7e6:	4a21      	ldr	r2, [pc, #132]	; (800c86c <_malloc_r+0xac>)
 800c7e8:	6814      	ldr	r4, [r2, #0]
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	b991      	cbnz	r1, 800c814 <_malloc_r+0x54>
 800c7ee:	4c20      	ldr	r4, [pc, #128]	; (800c870 <_malloc_r+0xb0>)
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	b91b      	cbnz	r3, 800c7fc <_malloc_r+0x3c>
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f000 f8ed 	bl	800c9d4 <_sbrk_r>
 800c7fa:	6020      	str	r0, [r4, #0]
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 f8e8 	bl	800c9d4 <_sbrk_r>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d124      	bne.n	800c852 <_malloc_r+0x92>
 800c808:	230c      	movs	r3, #12
 800c80a:	6033      	str	r3, [r6, #0]
 800c80c:	4630      	mov	r0, r6
 800c80e:	f000 fba6 	bl	800cf5e <__malloc_unlock>
 800c812:	e7e4      	b.n	800c7de <_malloc_r+0x1e>
 800c814:	680b      	ldr	r3, [r1, #0]
 800c816:	1b5b      	subs	r3, r3, r5
 800c818:	d418      	bmi.n	800c84c <_malloc_r+0x8c>
 800c81a:	2b0b      	cmp	r3, #11
 800c81c:	d90f      	bls.n	800c83e <_malloc_r+0x7e>
 800c81e:	600b      	str	r3, [r1, #0]
 800c820:	50cd      	str	r5, [r1, r3]
 800c822:	18cc      	adds	r4, r1, r3
 800c824:	4630      	mov	r0, r6
 800c826:	f000 fb9a 	bl	800cf5e <__malloc_unlock>
 800c82a:	f104 000b 	add.w	r0, r4, #11
 800c82e:	1d23      	adds	r3, r4, #4
 800c830:	f020 0007 	bic.w	r0, r0, #7
 800c834:	1ac3      	subs	r3, r0, r3
 800c836:	d0d3      	beq.n	800c7e0 <_malloc_r+0x20>
 800c838:	425a      	negs	r2, r3
 800c83a:	50e2      	str	r2, [r4, r3]
 800c83c:	e7d0      	b.n	800c7e0 <_malloc_r+0x20>
 800c83e:	428c      	cmp	r4, r1
 800c840:	684b      	ldr	r3, [r1, #4]
 800c842:	bf16      	itet	ne
 800c844:	6063      	strne	r3, [r4, #4]
 800c846:	6013      	streq	r3, [r2, #0]
 800c848:	460c      	movne	r4, r1
 800c84a:	e7eb      	b.n	800c824 <_malloc_r+0x64>
 800c84c:	460c      	mov	r4, r1
 800c84e:	6849      	ldr	r1, [r1, #4]
 800c850:	e7cc      	b.n	800c7ec <_malloc_r+0x2c>
 800c852:	1cc4      	adds	r4, r0, #3
 800c854:	f024 0403 	bic.w	r4, r4, #3
 800c858:	42a0      	cmp	r0, r4
 800c85a:	d005      	beq.n	800c868 <_malloc_r+0xa8>
 800c85c:	1a21      	subs	r1, r4, r0
 800c85e:	4630      	mov	r0, r6
 800c860:	f000 f8b8 	bl	800c9d4 <_sbrk_r>
 800c864:	3001      	adds	r0, #1
 800c866:	d0cf      	beq.n	800c808 <_malloc_r+0x48>
 800c868:	6025      	str	r5, [r4, #0]
 800c86a:	e7db      	b.n	800c824 <_malloc_r+0x64>
 800c86c:	20003f90 	.word	0x20003f90
 800c870:	20003f94 	.word	0x20003f94

0800c874 <iprintf>:
 800c874:	b40f      	push	{r0, r1, r2, r3}
 800c876:	4b0a      	ldr	r3, [pc, #40]	; (800c8a0 <iprintf+0x2c>)
 800c878:	b513      	push	{r0, r1, r4, lr}
 800c87a:	681c      	ldr	r4, [r3, #0]
 800c87c:	b124      	cbz	r4, 800c888 <iprintf+0x14>
 800c87e:	69a3      	ldr	r3, [r4, #24]
 800c880:	b913      	cbnz	r3, 800c888 <iprintf+0x14>
 800c882:	4620      	mov	r0, r4
 800c884:	f000 fa7c 	bl	800cd80 <__sinit>
 800c888:	ab05      	add	r3, sp, #20
 800c88a:	9a04      	ldr	r2, [sp, #16]
 800c88c:	68a1      	ldr	r1, [r4, #8]
 800c88e:	9301      	str	r3, [sp, #4]
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fb8f 	bl	800cfb4 <_vfiprintf_r>
 800c896:	b002      	add	sp, #8
 800c898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c89c:	b004      	add	sp, #16
 800c89e:	4770      	bx	lr
 800c8a0:	20000014 	.word	0x20000014

0800c8a4 <_puts_r>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	460e      	mov	r6, r1
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	b118      	cbz	r0, 800c8b4 <_puts_r+0x10>
 800c8ac:	6983      	ldr	r3, [r0, #24]
 800c8ae:	b90b      	cbnz	r3, 800c8b4 <_puts_r+0x10>
 800c8b0:	f000 fa66 	bl	800cd80 <__sinit>
 800c8b4:	69ab      	ldr	r3, [r5, #24]
 800c8b6:	68ac      	ldr	r4, [r5, #8]
 800c8b8:	b913      	cbnz	r3, 800c8c0 <_puts_r+0x1c>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f000 fa60 	bl	800cd80 <__sinit>
 800c8c0:	4b23      	ldr	r3, [pc, #140]	; (800c950 <_puts_r+0xac>)
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	d117      	bne.n	800c8f6 <_puts_r+0x52>
 800c8c6:	686c      	ldr	r4, [r5, #4]
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	071b      	lsls	r3, r3, #28
 800c8cc:	d51d      	bpl.n	800c90a <_puts_r+0x66>
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	b1db      	cbz	r3, 800c90a <_puts_r+0x66>
 800c8d2:	3e01      	subs	r6, #1
 800c8d4:	68a3      	ldr	r3, [r4, #8]
 800c8d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	60a3      	str	r3, [r4, #8]
 800c8de:	b9e9      	cbnz	r1, 800c91c <_puts_r+0x78>
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	da2e      	bge.n	800c942 <_puts_r+0x9e>
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	210a      	movs	r1, #10
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 f899 	bl	800ca20 <__swbuf_r>
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	d011      	beq.n	800c916 <_puts_r+0x72>
 800c8f2:	200a      	movs	r0, #10
 800c8f4:	e011      	b.n	800c91a <_puts_r+0x76>
 800c8f6:	4b17      	ldr	r3, [pc, #92]	; (800c954 <_puts_r+0xb0>)
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	d101      	bne.n	800c900 <_puts_r+0x5c>
 800c8fc:	68ac      	ldr	r4, [r5, #8]
 800c8fe:	e7e3      	b.n	800c8c8 <_puts_r+0x24>
 800c900:	4b15      	ldr	r3, [pc, #84]	; (800c958 <_puts_r+0xb4>)
 800c902:	429c      	cmp	r4, r3
 800c904:	bf08      	it	eq
 800c906:	68ec      	ldreq	r4, [r5, #12]
 800c908:	e7de      	b.n	800c8c8 <_puts_r+0x24>
 800c90a:	4621      	mov	r1, r4
 800c90c:	4628      	mov	r0, r5
 800c90e:	f000 f8d9 	bl	800cac4 <__swsetup_r>
 800c912:	2800      	cmp	r0, #0
 800c914:	d0dd      	beq.n	800c8d2 <_puts_r+0x2e>
 800c916:	f04f 30ff 	mov.w	r0, #4294967295
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	da04      	bge.n	800c92a <_puts_r+0x86>
 800c920:	69a2      	ldr	r2, [r4, #24]
 800c922:	429a      	cmp	r2, r3
 800c924:	dc06      	bgt.n	800c934 <_puts_r+0x90>
 800c926:	290a      	cmp	r1, #10
 800c928:	d004      	beq.n	800c934 <_puts_r+0x90>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	6022      	str	r2, [r4, #0]
 800c930:	7019      	strb	r1, [r3, #0]
 800c932:	e7cf      	b.n	800c8d4 <_puts_r+0x30>
 800c934:	4622      	mov	r2, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f872 	bl	800ca20 <__swbuf_r>
 800c93c:	3001      	adds	r0, #1
 800c93e:	d1c9      	bne.n	800c8d4 <_puts_r+0x30>
 800c940:	e7e9      	b.n	800c916 <_puts_r+0x72>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	200a      	movs	r0, #10
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	6022      	str	r2, [r4, #0]
 800c94a:	7018      	strb	r0, [r3, #0]
 800c94c:	e7e5      	b.n	800c91a <_puts_r+0x76>
 800c94e:	bf00      	nop
 800c950:	0800f994 	.word	0x0800f994
 800c954:	0800f9b4 	.word	0x0800f9b4
 800c958:	0800f974 	.word	0x0800f974

0800c95c <puts>:
 800c95c:	4b02      	ldr	r3, [pc, #8]	; (800c968 <puts+0xc>)
 800c95e:	4601      	mov	r1, r0
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	f7ff bf9f 	b.w	800c8a4 <_puts_r>
 800c966:	bf00      	nop
 800c968:	20000014 	.word	0x20000014

0800c96c <rand>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <rand+0x50>)
 800c970:	681c      	ldr	r4, [r3, #0]
 800c972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c974:	b97b      	cbnz	r3, 800c996 <rand+0x2a>
 800c976:	2018      	movs	r0, #24
 800c978:	f7ff fe9c 	bl	800c6b4 <malloc>
 800c97c:	4a10      	ldr	r2, [pc, #64]	; (800c9c0 <rand+0x54>)
 800c97e:	4b11      	ldr	r3, [pc, #68]	; (800c9c4 <rand+0x58>)
 800c980:	63a0      	str	r0, [r4, #56]	; 0x38
 800c982:	e9c0 2300 	strd	r2, r3, [r0]
 800c986:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <rand+0x5c>)
 800c988:	6083      	str	r3, [r0, #8]
 800c98a:	230b      	movs	r3, #11
 800c98c:	8183      	strh	r3, [r0, #12]
 800c98e:	2201      	movs	r2, #1
 800c990:	2300      	movs	r3, #0
 800c992:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c998:	480c      	ldr	r0, [pc, #48]	; (800c9cc <rand+0x60>)
 800c99a:	690a      	ldr	r2, [r1, #16]
 800c99c:	694b      	ldr	r3, [r1, #20]
 800c99e:	4c0c      	ldr	r4, [pc, #48]	; (800c9d0 <rand+0x64>)
 800c9a0:	4350      	muls	r0, r2
 800c9a2:	fb04 0003 	mla	r0, r4, r3, r0
 800c9a6:	fba2 2304 	umull	r2, r3, r2, r4
 800c9aa:	4403      	add	r3, r0
 800c9ac:	1c54      	adds	r4, r2, #1
 800c9ae:	f143 0500 	adc.w	r5, r3, #0
 800c9b2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c9b6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	20000014 	.word	0x20000014
 800c9c0:	abcd330e 	.word	0xabcd330e
 800c9c4:	e66d1234 	.word	0xe66d1234
 800c9c8:	0005deec 	.word	0x0005deec
 800c9cc:	5851f42d 	.word	0x5851f42d
 800c9d0:	4c957f2d 	.word	0x4c957f2d

0800c9d4 <_sbrk_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4c06      	ldr	r4, [pc, #24]	; (800c9f0 <_sbrk_r+0x1c>)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	4605      	mov	r5, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	6023      	str	r3, [r4, #0]
 800c9e0:	f7ff fcee 	bl	800c3c0 <_sbrk>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_sbrk_r+0x1a>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_sbrk_r+0x1a>
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20007708 	.word	0x20007708

0800c9f4 <strncpy>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	3901      	subs	r1, #1
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	b902      	cbnz	r2, 800c9fe <strncpy+0xa>
 800c9fc:	bd70      	pop	{r4, r5, r6, pc}
 800c9fe:	4623      	mov	r3, r4
 800ca00:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ca04:	f803 5b01 	strb.w	r5, [r3], #1
 800ca08:	1e56      	subs	r6, r2, #1
 800ca0a:	b92d      	cbnz	r5, 800ca18 <strncpy+0x24>
 800ca0c:	4414      	add	r4, r2
 800ca0e:	42a3      	cmp	r3, r4
 800ca10:	d0f4      	beq.n	800c9fc <strncpy+0x8>
 800ca12:	f803 5b01 	strb.w	r5, [r3], #1
 800ca16:	e7fa      	b.n	800ca0e <strncpy+0x1a>
 800ca18:	461c      	mov	r4, r3
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	e7ed      	b.n	800c9fa <strncpy+0x6>
	...

0800ca20 <__swbuf_r>:
 800ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca22:	460e      	mov	r6, r1
 800ca24:	4614      	mov	r4, r2
 800ca26:	4605      	mov	r5, r0
 800ca28:	b118      	cbz	r0, 800ca32 <__swbuf_r+0x12>
 800ca2a:	6983      	ldr	r3, [r0, #24]
 800ca2c:	b90b      	cbnz	r3, 800ca32 <__swbuf_r+0x12>
 800ca2e:	f000 f9a7 	bl	800cd80 <__sinit>
 800ca32:	4b21      	ldr	r3, [pc, #132]	; (800cab8 <__swbuf_r+0x98>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	d12a      	bne.n	800ca8e <__swbuf_r+0x6e>
 800ca38:	686c      	ldr	r4, [r5, #4]
 800ca3a:	69a3      	ldr	r3, [r4, #24]
 800ca3c:	60a3      	str	r3, [r4, #8]
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	071a      	lsls	r2, r3, #28
 800ca42:	d52e      	bpl.n	800caa2 <__swbuf_r+0x82>
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	b363      	cbz	r3, 800caa2 <__swbuf_r+0x82>
 800ca48:	6923      	ldr	r3, [r4, #16]
 800ca4a:	6820      	ldr	r0, [r4, #0]
 800ca4c:	1ac0      	subs	r0, r0, r3
 800ca4e:	6963      	ldr	r3, [r4, #20]
 800ca50:	b2f6      	uxtb	r6, r6
 800ca52:	4283      	cmp	r3, r0
 800ca54:	4637      	mov	r7, r6
 800ca56:	dc04      	bgt.n	800ca62 <__swbuf_r+0x42>
 800ca58:	4621      	mov	r1, r4
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f000 f926 	bl	800ccac <_fflush_r>
 800ca60:	bb28      	cbnz	r0, 800caae <__swbuf_r+0x8e>
 800ca62:	68a3      	ldr	r3, [r4, #8]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	60a3      	str	r3, [r4, #8]
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	6022      	str	r2, [r4, #0]
 800ca6e:	701e      	strb	r6, [r3, #0]
 800ca70:	6963      	ldr	r3, [r4, #20]
 800ca72:	3001      	adds	r0, #1
 800ca74:	4283      	cmp	r3, r0
 800ca76:	d004      	beq.n	800ca82 <__swbuf_r+0x62>
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	07db      	lsls	r3, r3, #31
 800ca7c:	d519      	bpl.n	800cab2 <__swbuf_r+0x92>
 800ca7e:	2e0a      	cmp	r6, #10
 800ca80:	d117      	bne.n	800cab2 <__swbuf_r+0x92>
 800ca82:	4621      	mov	r1, r4
 800ca84:	4628      	mov	r0, r5
 800ca86:	f000 f911 	bl	800ccac <_fflush_r>
 800ca8a:	b190      	cbz	r0, 800cab2 <__swbuf_r+0x92>
 800ca8c:	e00f      	b.n	800caae <__swbuf_r+0x8e>
 800ca8e:	4b0b      	ldr	r3, [pc, #44]	; (800cabc <__swbuf_r+0x9c>)
 800ca90:	429c      	cmp	r4, r3
 800ca92:	d101      	bne.n	800ca98 <__swbuf_r+0x78>
 800ca94:	68ac      	ldr	r4, [r5, #8]
 800ca96:	e7d0      	b.n	800ca3a <__swbuf_r+0x1a>
 800ca98:	4b09      	ldr	r3, [pc, #36]	; (800cac0 <__swbuf_r+0xa0>)
 800ca9a:	429c      	cmp	r4, r3
 800ca9c:	bf08      	it	eq
 800ca9e:	68ec      	ldreq	r4, [r5, #12]
 800caa0:	e7cb      	b.n	800ca3a <__swbuf_r+0x1a>
 800caa2:	4621      	mov	r1, r4
 800caa4:	4628      	mov	r0, r5
 800caa6:	f000 f80d 	bl	800cac4 <__swsetup_r>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0cc      	beq.n	800ca48 <__swbuf_r+0x28>
 800caae:	f04f 37ff 	mov.w	r7, #4294967295
 800cab2:	4638      	mov	r0, r7
 800cab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab6:	bf00      	nop
 800cab8:	0800f994 	.word	0x0800f994
 800cabc:	0800f9b4 	.word	0x0800f9b4
 800cac0:	0800f974 	.word	0x0800f974

0800cac4 <__swsetup_r>:
 800cac4:	4b32      	ldr	r3, [pc, #200]	; (800cb90 <__swsetup_r+0xcc>)
 800cac6:	b570      	push	{r4, r5, r6, lr}
 800cac8:	681d      	ldr	r5, [r3, #0]
 800caca:	4606      	mov	r6, r0
 800cacc:	460c      	mov	r4, r1
 800cace:	b125      	cbz	r5, 800cada <__swsetup_r+0x16>
 800cad0:	69ab      	ldr	r3, [r5, #24]
 800cad2:	b913      	cbnz	r3, 800cada <__swsetup_r+0x16>
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 f953 	bl	800cd80 <__sinit>
 800cada:	4b2e      	ldr	r3, [pc, #184]	; (800cb94 <__swsetup_r+0xd0>)
 800cadc:	429c      	cmp	r4, r3
 800cade:	d10f      	bne.n	800cb00 <__swsetup_r+0x3c>
 800cae0:	686c      	ldr	r4, [r5, #4]
 800cae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	0715      	lsls	r5, r2, #28
 800caea:	d42c      	bmi.n	800cb46 <__swsetup_r+0x82>
 800caec:	06d0      	lsls	r0, r2, #27
 800caee:	d411      	bmi.n	800cb14 <__swsetup_r+0x50>
 800caf0:	2209      	movs	r2, #9
 800caf2:	6032      	str	r2, [r6, #0]
 800caf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	f04f 30ff 	mov.w	r0, #4294967295
 800cafe:	e03e      	b.n	800cb7e <__swsetup_r+0xba>
 800cb00:	4b25      	ldr	r3, [pc, #148]	; (800cb98 <__swsetup_r+0xd4>)
 800cb02:	429c      	cmp	r4, r3
 800cb04:	d101      	bne.n	800cb0a <__swsetup_r+0x46>
 800cb06:	68ac      	ldr	r4, [r5, #8]
 800cb08:	e7eb      	b.n	800cae2 <__swsetup_r+0x1e>
 800cb0a:	4b24      	ldr	r3, [pc, #144]	; (800cb9c <__swsetup_r+0xd8>)
 800cb0c:	429c      	cmp	r4, r3
 800cb0e:	bf08      	it	eq
 800cb10:	68ec      	ldreq	r4, [r5, #12]
 800cb12:	e7e6      	b.n	800cae2 <__swsetup_r+0x1e>
 800cb14:	0751      	lsls	r1, r2, #29
 800cb16:	d512      	bpl.n	800cb3e <__swsetup_r+0x7a>
 800cb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb1a:	b141      	cbz	r1, 800cb2e <__swsetup_r+0x6a>
 800cb1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb20:	4299      	cmp	r1, r3
 800cb22:	d002      	beq.n	800cb2a <__swsetup_r+0x66>
 800cb24:	4630      	mov	r0, r6
 800cb26:	f7ff fdfd 	bl	800c724 <_free_r>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb34:	81a3      	strh	r3, [r4, #12]
 800cb36:	2300      	movs	r3, #0
 800cb38:	6063      	str	r3, [r4, #4]
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f043 0308 	orr.w	r3, r3, #8
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	6923      	ldr	r3, [r4, #16]
 800cb48:	b94b      	cbnz	r3, 800cb5e <__swsetup_r+0x9a>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb54:	d003      	beq.n	800cb5e <__swsetup_r+0x9a>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f000 f9bf 	bl	800cedc <__smakebuf_r>
 800cb5e:	89a2      	ldrh	r2, [r4, #12]
 800cb60:	f012 0301 	ands.w	r3, r2, #1
 800cb64:	d00c      	beq.n	800cb80 <__swsetup_r+0xbc>
 800cb66:	2300      	movs	r3, #0
 800cb68:	60a3      	str	r3, [r4, #8]
 800cb6a:	6963      	ldr	r3, [r4, #20]
 800cb6c:	425b      	negs	r3, r3
 800cb6e:	61a3      	str	r3, [r4, #24]
 800cb70:	6923      	ldr	r3, [r4, #16]
 800cb72:	b953      	cbnz	r3, 800cb8a <__swsetup_r+0xc6>
 800cb74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cb7c:	d1ba      	bne.n	800caf4 <__swsetup_r+0x30>
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	0792      	lsls	r2, r2, #30
 800cb82:	bf58      	it	pl
 800cb84:	6963      	ldrpl	r3, [r4, #20]
 800cb86:	60a3      	str	r3, [r4, #8]
 800cb88:	e7f2      	b.n	800cb70 <__swsetup_r+0xac>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e7f7      	b.n	800cb7e <__swsetup_r+0xba>
 800cb8e:	bf00      	nop
 800cb90:	20000014 	.word	0x20000014
 800cb94:	0800f994 	.word	0x0800f994
 800cb98:	0800f9b4 	.word	0x0800f9b4
 800cb9c:	0800f974 	.word	0x0800f974

0800cba0 <__sflush_r>:
 800cba0:	898a      	ldrh	r2, [r1, #12]
 800cba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba6:	4605      	mov	r5, r0
 800cba8:	0710      	lsls	r0, r2, #28
 800cbaa:	460c      	mov	r4, r1
 800cbac:	d458      	bmi.n	800cc60 <__sflush_r+0xc0>
 800cbae:	684b      	ldr	r3, [r1, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	dc05      	bgt.n	800cbc0 <__sflush_r+0x20>
 800cbb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	dc02      	bgt.n	800cbc0 <__sflush_r+0x20>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	d0f9      	beq.n	800cbba <__sflush_r+0x1a>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbcc:	682f      	ldr	r7, [r5, #0]
 800cbce:	6a21      	ldr	r1, [r4, #32]
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	d032      	beq.n	800cc3a <__sflush_r+0x9a>
 800cbd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	075a      	lsls	r2, r3, #29
 800cbda:	d505      	bpl.n	800cbe8 <__sflush_r+0x48>
 800cbdc:	6863      	ldr	r3, [r4, #4]
 800cbde:	1ac0      	subs	r0, r0, r3
 800cbe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbe2:	b10b      	cbz	r3, 800cbe8 <__sflush_r+0x48>
 800cbe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbe6:	1ac0      	subs	r0, r0, r3
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4602      	mov	r2, r0
 800cbec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbee:	6a21      	ldr	r1, [r4, #32]
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b0      	blx	r6
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	d106      	bne.n	800cc08 <__sflush_r+0x68>
 800cbfa:	6829      	ldr	r1, [r5, #0]
 800cbfc:	291d      	cmp	r1, #29
 800cbfe:	d848      	bhi.n	800cc92 <__sflush_r+0xf2>
 800cc00:	4a29      	ldr	r2, [pc, #164]	; (800cca8 <__sflush_r+0x108>)
 800cc02:	40ca      	lsrs	r2, r1
 800cc04:	07d6      	lsls	r6, r2, #31
 800cc06:	d544      	bpl.n	800cc92 <__sflush_r+0xf2>
 800cc08:	2200      	movs	r2, #0
 800cc0a:	6062      	str	r2, [r4, #4]
 800cc0c:	04d9      	lsls	r1, r3, #19
 800cc0e:	6922      	ldr	r2, [r4, #16]
 800cc10:	6022      	str	r2, [r4, #0]
 800cc12:	d504      	bpl.n	800cc1e <__sflush_r+0x7e>
 800cc14:	1c42      	adds	r2, r0, #1
 800cc16:	d101      	bne.n	800cc1c <__sflush_r+0x7c>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b903      	cbnz	r3, 800cc1e <__sflush_r+0x7e>
 800cc1c:	6560      	str	r0, [r4, #84]	; 0x54
 800cc1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc20:	602f      	str	r7, [r5, #0]
 800cc22:	2900      	cmp	r1, #0
 800cc24:	d0c9      	beq.n	800cbba <__sflush_r+0x1a>
 800cc26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc2a:	4299      	cmp	r1, r3
 800cc2c:	d002      	beq.n	800cc34 <__sflush_r+0x94>
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f7ff fd78 	bl	800c724 <_free_r>
 800cc34:	2000      	movs	r0, #0
 800cc36:	6360      	str	r0, [r4, #52]	; 0x34
 800cc38:	e7c0      	b.n	800cbbc <__sflush_r+0x1c>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b0      	blx	r6
 800cc40:	1c41      	adds	r1, r0, #1
 800cc42:	d1c8      	bne.n	800cbd6 <__sflush_r+0x36>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0c5      	beq.n	800cbd6 <__sflush_r+0x36>
 800cc4a:	2b1d      	cmp	r3, #29
 800cc4c:	d001      	beq.n	800cc52 <__sflush_r+0xb2>
 800cc4e:	2b16      	cmp	r3, #22
 800cc50:	d101      	bne.n	800cc56 <__sflush_r+0xb6>
 800cc52:	602f      	str	r7, [r5, #0]
 800cc54:	e7b1      	b.n	800cbba <__sflush_r+0x1a>
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	e7ad      	b.n	800cbbc <__sflush_r+0x1c>
 800cc60:	690f      	ldr	r7, [r1, #16]
 800cc62:	2f00      	cmp	r7, #0
 800cc64:	d0a9      	beq.n	800cbba <__sflush_r+0x1a>
 800cc66:	0793      	lsls	r3, r2, #30
 800cc68:	680e      	ldr	r6, [r1, #0]
 800cc6a:	bf08      	it	eq
 800cc6c:	694b      	ldreq	r3, [r1, #20]
 800cc6e:	600f      	str	r7, [r1, #0]
 800cc70:	bf18      	it	ne
 800cc72:	2300      	movne	r3, #0
 800cc74:	eba6 0807 	sub.w	r8, r6, r7
 800cc78:	608b      	str	r3, [r1, #8]
 800cc7a:	f1b8 0f00 	cmp.w	r8, #0
 800cc7e:	dd9c      	ble.n	800cbba <__sflush_r+0x1a>
 800cc80:	4643      	mov	r3, r8
 800cc82:	463a      	mov	r2, r7
 800cc84:	6a21      	ldr	r1, [r4, #32]
 800cc86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc88:	4628      	mov	r0, r5
 800cc8a:	47b0      	blx	r6
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	dc06      	bgt.n	800cc9e <__sflush_r+0xfe>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc96:	81a3      	strh	r3, [r4, #12]
 800cc98:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9c:	e78e      	b.n	800cbbc <__sflush_r+0x1c>
 800cc9e:	4407      	add	r7, r0
 800cca0:	eba8 0800 	sub.w	r8, r8, r0
 800cca4:	e7e9      	b.n	800cc7a <__sflush_r+0xda>
 800cca6:	bf00      	nop
 800cca8:	20400001 	.word	0x20400001

0800ccac <_fflush_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	690b      	ldr	r3, [r1, #16]
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	b1db      	cbz	r3, 800ccee <_fflush_r+0x42>
 800ccb6:	b118      	cbz	r0, 800ccc0 <_fflush_r+0x14>
 800ccb8:	6983      	ldr	r3, [r0, #24]
 800ccba:	b90b      	cbnz	r3, 800ccc0 <_fflush_r+0x14>
 800ccbc:	f000 f860 	bl	800cd80 <__sinit>
 800ccc0:	4b0c      	ldr	r3, [pc, #48]	; (800ccf4 <_fflush_r+0x48>)
 800ccc2:	429c      	cmp	r4, r3
 800ccc4:	d109      	bne.n	800ccda <_fflush_r+0x2e>
 800ccc6:	686c      	ldr	r4, [r5, #4]
 800ccc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cccc:	b17b      	cbz	r3, 800ccee <_fflush_r+0x42>
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccd6:	f7ff bf63 	b.w	800cba0 <__sflush_r>
 800ccda:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <_fflush_r+0x4c>)
 800ccdc:	429c      	cmp	r4, r3
 800ccde:	d101      	bne.n	800cce4 <_fflush_r+0x38>
 800cce0:	68ac      	ldr	r4, [r5, #8]
 800cce2:	e7f1      	b.n	800ccc8 <_fflush_r+0x1c>
 800cce4:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <_fflush_r+0x50>)
 800cce6:	429c      	cmp	r4, r3
 800cce8:	bf08      	it	eq
 800ccea:	68ec      	ldreq	r4, [r5, #12]
 800ccec:	e7ec      	b.n	800ccc8 <_fflush_r+0x1c>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	bd38      	pop	{r3, r4, r5, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0800f994 	.word	0x0800f994
 800ccf8:	0800f9b4 	.word	0x0800f9b4
 800ccfc:	0800f974 	.word	0x0800f974

0800cd00 <std>:
 800cd00:	2300      	movs	r3, #0
 800cd02:	b510      	push	{r4, lr}
 800cd04:	4604      	mov	r4, r0
 800cd06:	e9c0 3300 	strd	r3, r3, [r0]
 800cd0a:	6083      	str	r3, [r0, #8]
 800cd0c:	8181      	strh	r1, [r0, #12]
 800cd0e:	6643      	str	r3, [r0, #100]	; 0x64
 800cd10:	81c2      	strh	r2, [r0, #14]
 800cd12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd16:	6183      	str	r3, [r0, #24]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	2208      	movs	r2, #8
 800cd1c:	305c      	adds	r0, #92	; 0x5c
 800cd1e:	f7ff fceb 	bl	800c6f8 <memset>
 800cd22:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <std+0x38>)
 800cd24:	6263      	str	r3, [r4, #36]	; 0x24
 800cd26:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <std+0x3c>)
 800cd28:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd2a:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <std+0x40>)
 800cd2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd2e:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <std+0x44>)
 800cd30:	6224      	str	r4, [r4, #32]
 800cd32:	6323      	str	r3, [r4, #48]	; 0x30
 800cd34:	bd10      	pop	{r4, pc}
 800cd36:	bf00      	nop
 800cd38:	0800d4f1 	.word	0x0800d4f1
 800cd3c:	0800d513 	.word	0x0800d513
 800cd40:	0800d54b 	.word	0x0800d54b
 800cd44:	0800d56f 	.word	0x0800d56f

0800cd48 <_cleanup_r>:
 800cd48:	4901      	ldr	r1, [pc, #4]	; (800cd50 <_cleanup_r+0x8>)
 800cd4a:	f000 b885 	b.w	800ce58 <_fwalk_reent>
 800cd4e:	bf00      	nop
 800cd50:	0800ccad 	.word	0x0800ccad

0800cd54 <__sfmoreglue>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	1e4a      	subs	r2, r1, #1
 800cd58:	2568      	movs	r5, #104	; 0x68
 800cd5a:	4355      	muls	r5, r2
 800cd5c:	460e      	mov	r6, r1
 800cd5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd62:	f7ff fd2d 	bl	800c7c0 <_malloc_r>
 800cd66:	4604      	mov	r4, r0
 800cd68:	b140      	cbz	r0, 800cd7c <__sfmoreglue+0x28>
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	e9c0 1600 	strd	r1, r6, [r0]
 800cd70:	300c      	adds	r0, #12
 800cd72:	60a0      	str	r0, [r4, #8]
 800cd74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd78:	f7ff fcbe 	bl	800c6f8 <memset>
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}

0800cd80 <__sinit>:
 800cd80:	6983      	ldr	r3, [r0, #24]
 800cd82:	b510      	push	{r4, lr}
 800cd84:	4604      	mov	r4, r0
 800cd86:	bb33      	cbnz	r3, 800cdd6 <__sinit+0x56>
 800cd88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cd8c:	6503      	str	r3, [r0, #80]	; 0x50
 800cd8e:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <__sinit+0x58>)
 800cd90:	4a12      	ldr	r2, [pc, #72]	; (800cddc <__sinit+0x5c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6282      	str	r2, [r0, #40]	; 0x28
 800cd96:	4298      	cmp	r0, r3
 800cd98:	bf04      	itt	eq
 800cd9a:	2301      	moveq	r3, #1
 800cd9c:	6183      	streq	r3, [r0, #24]
 800cd9e:	f000 f81f 	bl	800cde0 <__sfp>
 800cda2:	6060      	str	r0, [r4, #4]
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 f81b 	bl	800cde0 <__sfp>
 800cdaa:	60a0      	str	r0, [r4, #8]
 800cdac:	4620      	mov	r0, r4
 800cdae:	f000 f817 	bl	800cde0 <__sfp>
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	60e0      	str	r0, [r4, #12]
 800cdb6:	2104      	movs	r1, #4
 800cdb8:	6860      	ldr	r0, [r4, #4]
 800cdba:	f7ff ffa1 	bl	800cd00 <std>
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	2109      	movs	r1, #9
 800cdc2:	68a0      	ldr	r0, [r4, #8]
 800cdc4:	f7ff ff9c 	bl	800cd00 <std>
 800cdc8:	2202      	movs	r2, #2
 800cdca:	2112      	movs	r1, #18
 800cdcc:	68e0      	ldr	r0, [r4, #12]
 800cdce:	f7ff ff97 	bl	800cd00 <std>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	61a3      	str	r3, [r4, #24]
 800cdd6:	bd10      	pop	{r4, pc}
 800cdd8:	0800f970 	.word	0x0800f970
 800cddc:	0800cd49 	.word	0x0800cd49

0800cde0 <__sfp>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	4b1b      	ldr	r3, [pc, #108]	; (800ce50 <__sfp+0x70>)
 800cde4:	681e      	ldr	r6, [r3, #0]
 800cde6:	69b3      	ldr	r3, [r6, #24]
 800cde8:	4607      	mov	r7, r0
 800cdea:	b913      	cbnz	r3, 800cdf2 <__sfp+0x12>
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7ff ffc7 	bl	800cd80 <__sinit>
 800cdf2:	3648      	adds	r6, #72	; 0x48
 800cdf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	d503      	bpl.n	800ce04 <__sfp+0x24>
 800cdfc:	6833      	ldr	r3, [r6, #0]
 800cdfe:	b133      	cbz	r3, 800ce0e <__sfp+0x2e>
 800ce00:	6836      	ldr	r6, [r6, #0]
 800ce02:	e7f7      	b.n	800cdf4 <__sfp+0x14>
 800ce04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce08:	b16d      	cbz	r5, 800ce26 <__sfp+0x46>
 800ce0a:	3468      	adds	r4, #104	; 0x68
 800ce0c:	e7f4      	b.n	800cdf8 <__sfp+0x18>
 800ce0e:	2104      	movs	r1, #4
 800ce10:	4638      	mov	r0, r7
 800ce12:	f7ff ff9f 	bl	800cd54 <__sfmoreglue>
 800ce16:	6030      	str	r0, [r6, #0]
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d1f1      	bne.n	800ce00 <__sfp+0x20>
 800ce1c:	230c      	movs	r3, #12
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	4604      	mov	r4, r0
 800ce22:	4620      	mov	r0, r4
 800ce24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <__sfp+0x74>)
 800ce28:	6665      	str	r5, [r4, #100]	; 0x64
 800ce2a:	e9c4 5500 	strd	r5, r5, [r4]
 800ce2e:	60a5      	str	r5, [r4, #8]
 800ce30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ce34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ce38:	2208      	movs	r2, #8
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce40:	f7ff fc5a 	bl	800c6f8 <memset>
 800ce44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce4c:	e7e9      	b.n	800ce22 <__sfp+0x42>
 800ce4e:	bf00      	nop
 800ce50:	0800f970 	.word	0x0800f970
 800ce54:	ffff0001 	.word	0xffff0001

0800ce58 <_fwalk_reent>:
 800ce58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	4689      	mov	r9, r1
 800ce60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce64:	2600      	movs	r6, #0
 800ce66:	b914      	cbnz	r4, 800ce6e <_fwalk_reent+0x16>
 800ce68:	4630      	mov	r0, r6
 800ce6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ce72:	3f01      	subs	r7, #1
 800ce74:	d501      	bpl.n	800ce7a <_fwalk_reent+0x22>
 800ce76:	6824      	ldr	r4, [r4, #0]
 800ce78:	e7f5      	b.n	800ce66 <_fwalk_reent+0xe>
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d907      	bls.n	800ce90 <_fwalk_reent+0x38>
 800ce80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce84:	3301      	adds	r3, #1
 800ce86:	d003      	beq.n	800ce90 <_fwalk_reent+0x38>
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	47c8      	blx	r9
 800ce8e:	4306      	orrs	r6, r0
 800ce90:	3568      	adds	r5, #104	; 0x68
 800ce92:	e7ee      	b.n	800ce72 <_fwalk_reent+0x1a>

0800ce94 <__swhatbuf_r>:
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	460e      	mov	r6, r1
 800ce98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9c:	2900      	cmp	r1, #0
 800ce9e:	b096      	sub	sp, #88	; 0x58
 800cea0:	4614      	mov	r4, r2
 800cea2:	461d      	mov	r5, r3
 800cea4:	da07      	bge.n	800ceb6 <__swhatbuf_r+0x22>
 800cea6:	2300      	movs	r3, #0
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	89b3      	ldrh	r3, [r6, #12]
 800ceac:	061a      	lsls	r2, r3, #24
 800ceae:	d410      	bmi.n	800ced2 <__swhatbuf_r+0x3e>
 800ceb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb4:	e00e      	b.n	800ced4 <__swhatbuf_r+0x40>
 800ceb6:	466a      	mov	r2, sp
 800ceb8:	f000 fb80 	bl	800d5bc <_fstat_r>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	dbf2      	blt.n	800cea6 <__swhatbuf_r+0x12>
 800cec0:	9a01      	ldr	r2, [sp, #4]
 800cec2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cec6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ceca:	425a      	negs	r2, r3
 800cecc:	415a      	adcs	r2, r3
 800cece:	602a      	str	r2, [r5, #0]
 800ced0:	e7ee      	b.n	800ceb0 <__swhatbuf_r+0x1c>
 800ced2:	2340      	movs	r3, #64	; 0x40
 800ced4:	2000      	movs	r0, #0
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	b016      	add	sp, #88	; 0x58
 800ceda:	bd70      	pop	{r4, r5, r6, pc}

0800cedc <__smakebuf_r>:
 800cedc:	898b      	ldrh	r3, [r1, #12]
 800cede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cee0:	079d      	lsls	r5, r3, #30
 800cee2:	4606      	mov	r6, r0
 800cee4:	460c      	mov	r4, r1
 800cee6:	d507      	bpl.n	800cef8 <__smakebuf_r+0x1c>
 800cee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	6123      	str	r3, [r4, #16]
 800cef0:	2301      	movs	r3, #1
 800cef2:	6163      	str	r3, [r4, #20]
 800cef4:	b002      	add	sp, #8
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	ab01      	add	r3, sp, #4
 800cefa:	466a      	mov	r2, sp
 800cefc:	f7ff ffca 	bl	800ce94 <__swhatbuf_r>
 800cf00:	9900      	ldr	r1, [sp, #0]
 800cf02:	4605      	mov	r5, r0
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7ff fc5b 	bl	800c7c0 <_malloc_r>
 800cf0a:	b948      	cbnz	r0, 800cf20 <__smakebuf_r+0x44>
 800cf0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf10:	059a      	lsls	r2, r3, #22
 800cf12:	d4ef      	bmi.n	800cef4 <__smakebuf_r+0x18>
 800cf14:	f023 0303 	bic.w	r3, r3, #3
 800cf18:	f043 0302 	orr.w	r3, r3, #2
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	e7e3      	b.n	800cee8 <__smakebuf_r+0xc>
 800cf20:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <__smakebuf_r+0x7c>)
 800cf22:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	6020      	str	r0, [r4, #0]
 800cf28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf2c:	81a3      	strh	r3, [r4, #12]
 800cf2e:	9b00      	ldr	r3, [sp, #0]
 800cf30:	6163      	str	r3, [r4, #20]
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	6120      	str	r0, [r4, #16]
 800cf36:	b15b      	cbz	r3, 800cf50 <__smakebuf_r+0x74>
 800cf38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f000 fb4f 	bl	800d5e0 <_isatty_r>
 800cf42:	b128      	cbz	r0, 800cf50 <__smakebuf_r+0x74>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f023 0303 	bic.w	r3, r3, #3
 800cf4a:	f043 0301 	orr.w	r3, r3, #1
 800cf4e:	81a3      	strh	r3, [r4, #12]
 800cf50:	89a3      	ldrh	r3, [r4, #12]
 800cf52:	431d      	orrs	r5, r3
 800cf54:	81a5      	strh	r5, [r4, #12]
 800cf56:	e7cd      	b.n	800cef4 <__smakebuf_r+0x18>
 800cf58:	0800cd49 	.word	0x0800cd49

0800cf5c <__malloc_lock>:
 800cf5c:	4770      	bx	lr

0800cf5e <__malloc_unlock>:
 800cf5e:	4770      	bx	lr

0800cf60 <__sfputc_r>:
 800cf60:	6893      	ldr	r3, [r2, #8]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	b410      	push	{r4}
 800cf68:	6093      	str	r3, [r2, #8]
 800cf6a:	da08      	bge.n	800cf7e <__sfputc_r+0x1e>
 800cf6c:	6994      	ldr	r4, [r2, #24]
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	db01      	blt.n	800cf76 <__sfputc_r+0x16>
 800cf72:	290a      	cmp	r1, #10
 800cf74:	d103      	bne.n	800cf7e <__sfputc_r+0x1e>
 800cf76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf7a:	f7ff bd51 	b.w	800ca20 <__swbuf_r>
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	1c58      	adds	r0, r3, #1
 800cf82:	6010      	str	r0, [r2, #0]
 800cf84:	7019      	strb	r1, [r3, #0]
 800cf86:	4608      	mov	r0, r1
 800cf88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <__sfputs_r>:
 800cf8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf90:	4606      	mov	r6, r0
 800cf92:	460f      	mov	r7, r1
 800cf94:	4614      	mov	r4, r2
 800cf96:	18d5      	adds	r5, r2, r3
 800cf98:	42ac      	cmp	r4, r5
 800cf9a:	d101      	bne.n	800cfa0 <__sfputs_r+0x12>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	e007      	b.n	800cfb0 <__sfputs_r+0x22>
 800cfa0:	463a      	mov	r2, r7
 800cfa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f7ff ffda 	bl	800cf60 <__sfputc_r>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d1f3      	bne.n	800cf98 <__sfputs_r+0xa>
 800cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb4 <_vfiprintf_r>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	460c      	mov	r4, r1
 800cfba:	b09d      	sub	sp, #116	; 0x74
 800cfbc:	4617      	mov	r7, r2
 800cfbe:	461d      	mov	r5, r3
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	b118      	cbz	r0, 800cfcc <_vfiprintf_r+0x18>
 800cfc4:	6983      	ldr	r3, [r0, #24]
 800cfc6:	b90b      	cbnz	r3, 800cfcc <_vfiprintf_r+0x18>
 800cfc8:	f7ff feda 	bl	800cd80 <__sinit>
 800cfcc:	4b7c      	ldr	r3, [pc, #496]	; (800d1c0 <_vfiprintf_r+0x20c>)
 800cfce:	429c      	cmp	r4, r3
 800cfd0:	d158      	bne.n	800d084 <_vfiprintf_r+0xd0>
 800cfd2:	6874      	ldr	r4, [r6, #4]
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	0718      	lsls	r0, r3, #28
 800cfd8:	d55e      	bpl.n	800d098 <_vfiprintf_r+0xe4>
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d05b      	beq.n	800d098 <_vfiprintf_r+0xe4>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe4:	2320      	movs	r3, #32
 800cfe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfea:	2330      	movs	r3, #48	; 0x30
 800cfec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cff0:	9503      	str	r5, [sp, #12]
 800cff2:	f04f 0b01 	mov.w	fp, #1
 800cff6:	46b8      	mov	r8, r7
 800cff8:	4645      	mov	r5, r8
 800cffa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cffe:	b10b      	cbz	r3, 800d004 <_vfiprintf_r+0x50>
 800d000:	2b25      	cmp	r3, #37	; 0x25
 800d002:	d154      	bne.n	800d0ae <_vfiprintf_r+0xfa>
 800d004:	ebb8 0a07 	subs.w	sl, r8, r7
 800d008:	d00b      	beq.n	800d022 <_vfiprintf_r+0x6e>
 800d00a:	4653      	mov	r3, sl
 800d00c:	463a      	mov	r2, r7
 800d00e:	4621      	mov	r1, r4
 800d010:	4630      	mov	r0, r6
 800d012:	f7ff ffbc 	bl	800cf8e <__sfputs_r>
 800d016:	3001      	adds	r0, #1
 800d018:	f000 80c2 	beq.w	800d1a0 <_vfiprintf_r+0x1ec>
 800d01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d01e:	4453      	add	r3, sl
 800d020:	9309      	str	r3, [sp, #36]	; 0x24
 800d022:	f898 3000 	ldrb.w	r3, [r8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 80ba 	beq.w	800d1a0 <_vfiprintf_r+0x1ec>
 800d02c:	2300      	movs	r3, #0
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295
 800d032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	9307      	str	r3, [sp, #28]
 800d03a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d03e:	931a      	str	r3, [sp, #104]	; 0x68
 800d040:	46a8      	mov	r8, r5
 800d042:	2205      	movs	r2, #5
 800d044:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d048:	485e      	ldr	r0, [pc, #376]	; (800d1c4 <_vfiprintf_r+0x210>)
 800d04a:	f7f3 f8e9 	bl	8000220 <memchr>
 800d04e:	9b04      	ldr	r3, [sp, #16]
 800d050:	bb78      	cbnz	r0, 800d0b2 <_vfiprintf_r+0xfe>
 800d052:	06d9      	lsls	r1, r3, #27
 800d054:	bf44      	itt	mi
 800d056:	2220      	movmi	r2, #32
 800d058:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d05c:	071a      	lsls	r2, r3, #28
 800d05e:	bf44      	itt	mi
 800d060:	222b      	movmi	r2, #43	; 0x2b
 800d062:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d066:	782a      	ldrb	r2, [r5, #0]
 800d068:	2a2a      	cmp	r2, #42	; 0x2a
 800d06a:	d02a      	beq.n	800d0c2 <_vfiprintf_r+0x10e>
 800d06c:	9a07      	ldr	r2, [sp, #28]
 800d06e:	46a8      	mov	r8, r5
 800d070:	2000      	movs	r0, #0
 800d072:	250a      	movs	r5, #10
 800d074:	4641      	mov	r1, r8
 800d076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d07a:	3b30      	subs	r3, #48	; 0x30
 800d07c:	2b09      	cmp	r3, #9
 800d07e:	d969      	bls.n	800d154 <_vfiprintf_r+0x1a0>
 800d080:	b360      	cbz	r0, 800d0dc <_vfiprintf_r+0x128>
 800d082:	e024      	b.n	800d0ce <_vfiprintf_r+0x11a>
 800d084:	4b50      	ldr	r3, [pc, #320]	; (800d1c8 <_vfiprintf_r+0x214>)
 800d086:	429c      	cmp	r4, r3
 800d088:	d101      	bne.n	800d08e <_vfiprintf_r+0xda>
 800d08a:	68b4      	ldr	r4, [r6, #8]
 800d08c:	e7a2      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d08e:	4b4f      	ldr	r3, [pc, #316]	; (800d1cc <_vfiprintf_r+0x218>)
 800d090:	429c      	cmp	r4, r3
 800d092:	bf08      	it	eq
 800d094:	68f4      	ldreq	r4, [r6, #12]
 800d096:	e79d      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d098:	4621      	mov	r1, r4
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7ff fd12 	bl	800cac4 <__swsetup_r>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d09d      	beq.n	800cfe0 <_vfiprintf_r+0x2c>
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	b01d      	add	sp, #116	; 0x74
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	46a8      	mov	r8, r5
 800d0b0:	e7a2      	b.n	800cff8 <_vfiprintf_r+0x44>
 800d0b2:	4a44      	ldr	r2, [pc, #272]	; (800d1c4 <_vfiprintf_r+0x210>)
 800d0b4:	1a80      	subs	r0, r0, r2
 800d0b6:	fa0b f000 	lsl.w	r0, fp, r0
 800d0ba:	4318      	orrs	r0, r3
 800d0bc:	9004      	str	r0, [sp, #16]
 800d0be:	4645      	mov	r5, r8
 800d0c0:	e7be      	b.n	800d040 <_vfiprintf_r+0x8c>
 800d0c2:	9a03      	ldr	r2, [sp, #12]
 800d0c4:	1d11      	adds	r1, r2, #4
 800d0c6:	6812      	ldr	r2, [r2, #0]
 800d0c8:	9103      	str	r1, [sp, #12]
 800d0ca:	2a00      	cmp	r2, #0
 800d0cc:	db01      	blt.n	800d0d2 <_vfiprintf_r+0x11e>
 800d0ce:	9207      	str	r2, [sp, #28]
 800d0d0:	e004      	b.n	800d0dc <_vfiprintf_r+0x128>
 800d0d2:	4252      	negs	r2, r2
 800d0d4:	f043 0302 	orr.w	r3, r3, #2
 800d0d8:	9207      	str	r2, [sp, #28]
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	f898 3000 	ldrb.w	r3, [r8]
 800d0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800d0e2:	d10e      	bne.n	800d102 <_vfiprintf_r+0x14e>
 800d0e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ea:	d138      	bne.n	800d15e <_vfiprintf_r+0x1aa>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	1d1a      	adds	r2, r3, #4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	9203      	str	r2, [sp, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfb8      	it	lt
 800d0f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0fc:	f108 0802 	add.w	r8, r8, #2
 800d100:	9305      	str	r3, [sp, #20]
 800d102:	4d33      	ldr	r5, [pc, #204]	; (800d1d0 <_vfiprintf_r+0x21c>)
 800d104:	f898 1000 	ldrb.w	r1, [r8]
 800d108:	2203      	movs	r2, #3
 800d10a:	4628      	mov	r0, r5
 800d10c:	f7f3 f888 	bl	8000220 <memchr>
 800d110:	b140      	cbz	r0, 800d124 <_vfiprintf_r+0x170>
 800d112:	2340      	movs	r3, #64	; 0x40
 800d114:	1b40      	subs	r0, r0, r5
 800d116:	fa03 f000 	lsl.w	r0, r3, r0
 800d11a:	9b04      	ldr	r3, [sp, #16]
 800d11c:	4303      	orrs	r3, r0
 800d11e:	f108 0801 	add.w	r8, r8, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	f898 1000 	ldrb.w	r1, [r8]
 800d128:	482a      	ldr	r0, [pc, #168]	; (800d1d4 <_vfiprintf_r+0x220>)
 800d12a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d12e:	2206      	movs	r2, #6
 800d130:	f108 0701 	add.w	r7, r8, #1
 800d134:	f7f3 f874 	bl	8000220 <memchr>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d037      	beq.n	800d1ac <_vfiprintf_r+0x1f8>
 800d13c:	4b26      	ldr	r3, [pc, #152]	; (800d1d8 <_vfiprintf_r+0x224>)
 800d13e:	bb1b      	cbnz	r3, 800d188 <_vfiprintf_r+0x1d4>
 800d140:	9b03      	ldr	r3, [sp, #12]
 800d142:	3307      	adds	r3, #7
 800d144:	f023 0307 	bic.w	r3, r3, #7
 800d148:	3308      	adds	r3, #8
 800d14a:	9303      	str	r3, [sp, #12]
 800d14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14e:	444b      	add	r3, r9
 800d150:	9309      	str	r3, [sp, #36]	; 0x24
 800d152:	e750      	b.n	800cff6 <_vfiprintf_r+0x42>
 800d154:	fb05 3202 	mla	r2, r5, r2, r3
 800d158:	2001      	movs	r0, #1
 800d15a:	4688      	mov	r8, r1
 800d15c:	e78a      	b.n	800d074 <_vfiprintf_r+0xc0>
 800d15e:	2300      	movs	r3, #0
 800d160:	f108 0801 	add.w	r8, r8, #1
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	4619      	mov	r1, r3
 800d168:	250a      	movs	r5, #10
 800d16a:	4640      	mov	r0, r8
 800d16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d170:	3a30      	subs	r2, #48	; 0x30
 800d172:	2a09      	cmp	r2, #9
 800d174:	d903      	bls.n	800d17e <_vfiprintf_r+0x1ca>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0c3      	beq.n	800d102 <_vfiprintf_r+0x14e>
 800d17a:	9105      	str	r1, [sp, #20]
 800d17c:	e7c1      	b.n	800d102 <_vfiprintf_r+0x14e>
 800d17e:	fb05 2101 	mla	r1, r5, r1, r2
 800d182:	2301      	movs	r3, #1
 800d184:	4680      	mov	r8, r0
 800d186:	e7f0      	b.n	800d16a <_vfiprintf_r+0x1b6>
 800d188:	ab03      	add	r3, sp, #12
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	4622      	mov	r2, r4
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <_vfiprintf_r+0x228>)
 800d190:	a904      	add	r1, sp, #16
 800d192:	4630      	mov	r0, r6
 800d194:	f3af 8000 	nop.w
 800d198:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d19c:	4681      	mov	r9, r0
 800d19e:	d1d5      	bne.n	800d14c <_vfiprintf_r+0x198>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	065b      	lsls	r3, r3, #25
 800d1a4:	f53f af7e 	bmi.w	800d0a4 <_vfiprintf_r+0xf0>
 800d1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1aa:	e77d      	b.n	800d0a8 <_vfiprintf_r+0xf4>
 800d1ac:	ab03      	add	r3, sp, #12
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <_vfiprintf_r+0x228>)
 800d1b4:	a904      	add	r1, sp, #16
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f000 f888 	bl	800d2cc <_printf_i>
 800d1bc:	e7ec      	b.n	800d198 <_vfiprintf_r+0x1e4>
 800d1be:	bf00      	nop
 800d1c0:	0800f994 	.word	0x0800f994
 800d1c4:	0800f9d4 	.word	0x0800f9d4
 800d1c8:	0800f9b4 	.word	0x0800f9b4
 800d1cc:	0800f974 	.word	0x0800f974
 800d1d0:	0800f9da 	.word	0x0800f9da
 800d1d4:	0800f9de 	.word	0x0800f9de
 800d1d8:	00000000 	.word	0x00000000
 800d1dc:	0800cf8f 	.word	0x0800cf8f

0800d1e0 <_printf_common>:
 800d1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e4:	4691      	mov	r9, r2
 800d1e6:	461f      	mov	r7, r3
 800d1e8:	688a      	ldr	r2, [r1, #8]
 800d1ea:	690b      	ldr	r3, [r1, #16]
 800d1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	bfb8      	it	lt
 800d1f4:	4613      	movlt	r3, r2
 800d1f6:	f8c9 3000 	str.w	r3, [r9]
 800d1fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1fe:	4606      	mov	r6, r0
 800d200:	460c      	mov	r4, r1
 800d202:	b112      	cbz	r2, 800d20a <_printf_common+0x2a>
 800d204:	3301      	adds	r3, #1
 800d206:	f8c9 3000 	str.w	r3, [r9]
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	0699      	lsls	r1, r3, #26
 800d20e:	bf42      	ittt	mi
 800d210:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d214:	3302      	addmi	r3, #2
 800d216:	f8c9 3000 	strmi.w	r3, [r9]
 800d21a:	6825      	ldr	r5, [r4, #0]
 800d21c:	f015 0506 	ands.w	r5, r5, #6
 800d220:	d107      	bne.n	800d232 <_printf_common+0x52>
 800d222:	f104 0a19 	add.w	sl, r4, #25
 800d226:	68e3      	ldr	r3, [r4, #12]
 800d228:	f8d9 2000 	ldr.w	r2, [r9]
 800d22c:	1a9b      	subs	r3, r3, r2
 800d22e:	42ab      	cmp	r3, r5
 800d230:	dc28      	bgt.n	800d284 <_printf_common+0xa4>
 800d232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d236:	6822      	ldr	r2, [r4, #0]
 800d238:	3300      	adds	r3, #0
 800d23a:	bf18      	it	ne
 800d23c:	2301      	movne	r3, #1
 800d23e:	0692      	lsls	r2, r2, #26
 800d240:	d42d      	bmi.n	800d29e <_printf_common+0xbe>
 800d242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d246:	4639      	mov	r1, r7
 800d248:	4630      	mov	r0, r6
 800d24a:	47c0      	blx	r8
 800d24c:	3001      	adds	r0, #1
 800d24e:	d020      	beq.n	800d292 <_printf_common+0xb2>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	68e5      	ldr	r5, [r4, #12]
 800d254:	f8d9 2000 	ldr.w	r2, [r9]
 800d258:	f003 0306 	and.w	r3, r3, #6
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	bf08      	it	eq
 800d260:	1aad      	subeq	r5, r5, r2
 800d262:	68a3      	ldr	r3, [r4, #8]
 800d264:	6922      	ldr	r2, [r4, #16]
 800d266:	bf0c      	ite	eq
 800d268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d26c:	2500      	movne	r5, #0
 800d26e:	4293      	cmp	r3, r2
 800d270:	bfc4      	itt	gt
 800d272:	1a9b      	subgt	r3, r3, r2
 800d274:	18ed      	addgt	r5, r5, r3
 800d276:	f04f 0900 	mov.w	r9, #0
 800d27a:	341a      	adds	r4, #26
 800d27c:	454d      	cmp	r5, r9
 800d27e:	d11a      	bne.n	800d2b6 <_printf_common+0xd6>
 800d280:	2000      	movs	r0, #0
 800d282:	e008      	b.n	800d296 <_printf_common+0xb6>
 800d284:	2301      	movs	r3, #1
 800d286:	4652      	mov	r2, sl
 800d288:	4639      	mov	r1, r7
 800d28a:	4630      	mov	r0, r6
 800d28c:	47c0      	blx	r8
 800d28e:	3001      	adds	r0, #1
 800d290:	d103      	bne.n	800d29a <_printf_common+0xba>
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d29a:	3501      	adds	r5, #1
 800d29c:	e7c3      	b.n	800d226 <_printf_common+0x46>
 800d29e:	18e1      	adds	r1, r4, r3
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	2030      	movs	r0, #48	; 0x30
 800d2a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2a8:	4422      	add	r2, r4
 800d2aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2b2:	3302      	adds	r3, #2
 800d2b4:	e7c5      	b.n	800d242 <_printf_common+0x62>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	4622      	mov	r2, r4
 800d2ba:	4639      	mov	r1, r7
 800d2bc:	4630      	mov	r0, r6
 800d2be:	47c0      	blx	r8
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	d0e6      	beq.n	800d292 <_printf_common+0xb2>
 800d2c4:	f109 0901 	add.w	r9, r9, #1
 800d2c8:	e7d8      	b.n	800d27c <_printf_common+0x9c>
	...

0800d2cc <_printf_i>:
 800d2cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	7e09      	ldrb	r1, [r1, #24]
 800d2d8:	b085      	sub	sp, #20
 800d2da:	296e      	cmp	r1, #110	; 0x6e
 800d2dc:	4617      	mov	r7, r2
 800d2de:	4606      	mov	r6, r0
 800d2e0:	4698      	mov	r8, r3
 800d2e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2e4:	f000 80b3 	beq.w	800d44e <_printf_i+0x182>
 800d2e8:	d822      	bhi.n	800d330 <_printf_i+0x64>
 800d2ea:	2963      	cmp	r1, #99	; 0x63
 800d2ec:	d036      	beq.n	800d35c <_printf_i+0x90>
 800d2ee:	d80a      	bhi.n	800d306 <_printf_i+0x3a>
 800d2f0:	2900      	cmp	r1, #0
 800d2f2:	f000 80b9 	beq.w	800d468 <_printf_i+0x19c>
 800d2f6:	2958      	cmp	r1, #88	; 0x58
 800d2f8:	f000 8083 	beq.w	800d402 <_printf_i+0x136>
 800d2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d300:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d304:	e032      	b.n	800d36c <_printf_i+0xa0>
 800d306:	2964      	cmp	r1, #100	; 0x64
 800d308:	d001      	beq.n	800d30e <_printf_i+0x42>
 800d30a:	2969      	cmp	r1, #105	; 0x69
 800d30c:	d1f6      	bne.n	800d2fc <_printf_i+0x30>
 800d30e:	6820      	ldr	r0, [r4, #0]
 800d310:	6813      	ldr	r3, [r2, #0]
 800d312:	0605      	lsls	r5, r0, #24
 800d314:	f103 0104 	add.w	r1, r3, #4
 800d318:	d52a      	bpl.n	800d370 <_printf_i+0xa4>
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6011      	str	r1, [r2, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	da03      	bge.n	800d32a <_printf_i+0x5e>
 800d322:	222d      	movs	r2, #45	; 0x2d
 800d324:	425b      	negs	r3, r3
 800d326:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d32a:	486f      	ldr	r0, [pc, #444]	; (800d4e8 <_printf_i+0x21c>)
 800d32c:	220a      	movs	r2, #10
 800d32e:	e039      	b.n	800d3a4 <_printf_i+0xd8>
 800d330:	2973      	cmp	r1, #115	; 0x73
 800d332:	f000 809d 	beq.w	800d470 <_printf_i+0x1a4>
 800d336:	d808      	bhi.n	800d34a <_printf_i+0x7e>
 800d338:	296f      	cmp	r1, #111	; 0x6f
 800d33a:	d020      	beq.n	800d37e <_printf_i+0xb2>
 800d33c:	2970      	cmp	r1, #112	; 0x70
 800d33e:	d1dd      	bne.n	800d2fc <_printf_i+0x30>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	f043 0320 	orr.w	r3, r3, #32
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	e003      	b.n	800d352 <_printf_i+0x86>
 800d34a:	2975      	cmp	r1, #117	; 0x75
 800d34c:	d017      	beq.n	800d37e <_printf_i+0xb2>
 800d34e:	2978      	cmp	r1, #120	; 0x78
 800d350:	d1d4      	bne.n	800d2fc <_printf_i+0x30>
 800d352:	2378      	movs	r3, #120	; 0x78
 800d354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d358:	4864      	ldr	r0, [pc, #400]	; (800d4ec <_printf_i+0x220>)
 800d35a:	e055      	b.n	800d408 <_printf_i+0x13c>
 800d35c:	6813      	ldr	r3, [r2, #0]
 800d35e:	1d19      	adds	r1, r3, #4
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6011      	str	r1, [r2, #0]
 800d364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d36c:	2301      	movs	r3, #1
 800d36e:	e08c      	b.n	800d48a <_printf_i+0x1be>
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6011      	str	r1, [r2, #0]
 800d374:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d378:	bf18      	it	ne
 800d37a:	b21b      	sxthne	r3, r3
 800d37c:	e7cf      	b.n	800d31e <_printf_i+0x52>
 800d37e:	6813      	ldr	r3, [r2, #0]
 800d380:	6825      	ldr	r5, [r4, #0]
 800d382:	1d18      	adds	r0, r3, #4
 800d384:	6010      	str	r0, [r2, #0]
 800d386:	0628      	lsls	r0, r5, #24
 800d388:	d501      	bpl.n	800d38e <_printf_i+0xc2>
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	e002      	b.n	800d394 <_printf_i+0xc8>
 800d38e:	0668      	lsls	r0, r5, #25
 800d390:	d5fb      	bpl.n	800d38a <_printf_i+0xbe>
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	4854      	ldr	r0, [pc, #336]	; (800d4e8 <_printf_i+0x21c>)
 800d396:	296f      	cmp	r1, #111	; 0x6f
 800d398:	bf14      	ite	ne
 800d39a:	220a      	movne	r2, #10
 800d39c:	2208      	moveq	r2, #8
 800d39e:	2100      	movs	r1, #0
 800d3a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3a4:	6865      	ldr	r5, [r4, #4]
 800d3a6:	60a5      	str	r5, [r4, #8]
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	f2c0 8095 	blt.w	800d4d8 <_printf_i+0x20c>
 800d3ae:	6821      	ldr	r1, [r4, #0]
 800d3b0:	f021 0104 	bic.w	r1, r1, #4
 800d3b4:	6021      	str	r1, [r4, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d13d      	bne.n	800d436 <_printf_i+0x16a>
 800d3ba:	2d00      	cmp	r5, #0
 800d3bc:	f040 808e 	bne.w	800d4dc <_printf_i+0x210>
 800d3c0:	4665      	mov	r5, ip
 800d3c2:	2a08      	cmp	r2, #8
 800d3c4:	d10b      	bne.n	800d3de <_printf_i+0x112>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	07db      	lsls	r3, r3, #31
 800d3ca:	d508      	bpl.n	800d3de <_printf_i+0x112>
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	6862      	ldr	r2, [r4, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	bfde      	ittt	le
 800d3d4:	2330      	movle	r3, #48	; 0x30
 800d3d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3de:	ebac 0305 	sub.w	r3, ip, r5
 800d3e2:	6123      	str	r3, [r4, #16]
 800d3e4:	f8cd 8000 	str.w	r8, [sp]
 800d3e8:	463b      	mov	r3, r7
 800d3ea:	aa03      	add	r2, sp, #12
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7ff fef6 	bl	800d1e0 <_printf_common>
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	d14d      	bne.n	800d494 <_printf_i+0x1c8>
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fc:	b005      	add	sp, #20
 800d3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d402:	4839      	ldr	r0, [pc, #228]	; (800d4e8 <_printf_i+0x21c>)
 800d404:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d408:	6813      	ldr	r3, [r2, #0]
 800d40a:	6821      	ldr	r1, [r4, #0]
 800d40c:	1d1d      	adds	r5, r3, #4
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6015      	str	r5, [r2, #0]
 800d412:	060a      	lsls	r2, r1, #24
 800d414:	d50b      	bpl.n	800d42e <_printf_i+0x162>
 800d416:	07ca      	lsls	r2, r1, #31
 800d418:	bf44      	itt	mi
 800d41a:	f041 0120 	orrmi.w	r1, r1, #32
 800d41e:	6021      	strmi	r1, [r4, #0]
 800d420:	b91b      	cbnz	r3, 800d42a <_printf_i+0x15e>
 800d422:	6822      	ldr	r2, [r4, #0]
 800d424:	f022 0220 	bic.w	r2, r2, #32
 800d428:	6022      	str	r2, [r4, #0]
 800d42a:	2210      	movs	r2, #16
 800d42c:	e7b7      	b.n	800d39e <_printf_i+0xd2>
 800d42e:	064d      	lsls	r5, r1, #25
 800d430:	bf48      	it	mi
 800d432:	b29b      	uxthmi	r3, r3
 800d434:	e7ef      	b.n	800d416 <_printf_i+0x14a>
 800d436:	4665      	mov	r5, ip
 800d438:	fbb3 f1f2 	udiv	r1, r3, r2
 800d43c:	fb02 3311 	mls	r3, r2, r1, r3
 800d440:	5cc3      	ldrb	r3, [r0, r3]
 800d442:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d446:	460b      	mov	r3, r1
 800d448:	2900      	cmp	r1, #0
 800d44a:	d1f5      	bne.n	800d438 <_printf_i+0x16c>
 800d44c:	e7b9      	b.n	800d3c2 <_printf_i+0xf6>
 800d44e:	6813      	ldr	r3, [r2, #0]
 800d450:	6825      	ldr	r5, [r4, #0]
 800d452:	6961      	ldr	r1, [r4, #20]
 800d454:	1d18      	adds	r0, r3, #4
 800d456:	6010      	str	r0, [r2, #0]
 800d458:	0628      	lsls	r0, r5, #24
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	d501      	bpl.n	800d462 <_printf_i+0x196>
 800d45e:	6019      	str	r1, [r3, #0]
 800d460:	e002      	b.n	800d468 <_printf_i+0x19c>
 800d462:	066a      	lsls	r2, r5, #25
 800d464:	d5fb      	bpl.n	800d45e <_printf_i+0x192>
 800d466:	8019      	strh	r1, [r3, #0]
 800d468:	2300      	movs	r3, #0
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	4665      	mov	r5, ip
 800d46e:	e7b9      	b.n	800d3e4 <_printf_i+0x118>
 800d470:	6813      	ldr	r3, [r2, #0]
 800d472:	1d19      	adds	r1, r3, #4
 800d474:	6011      	str	r1, [r2, #0]
 800d476:	681d      	ldr	r5, [r3, #0]
 800d478:	6862      	ldr	r2, [r4, #4]
 800d47a:	2100      	movs	r1, #0
 800d47c:	4628      	mov	r0, r5
 800d47e:	f7f2 fecf 	bl	8000220 <memchr>
 800d482:	b108      	cbz	r0, 800d488 <_printf_i+0x1bc>
 800d484:	1b40      	subs	r0, r0, r5
 800d486:	6060      	str	r0, [r4, #4]
 800d488:	6863      	ldr	r3, [r4, #4]
 800d48a:	6123      	str	r3, [r4, #16]
 800d48c:	2300      	movs	r3, #0
 800d48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d492:	e7a7      	b.n	800d3e4 <_printf_i+0x118>
 800d494:	6923      	ldr	r3, [r4, #16]
 800d496:	462a      	mov	r2, r5
 800d498:	4639      	mov	r1, r7
 800d49a:	4630      	mov	r0, r6
 800d49c:	47c0      	blx	r8
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d0aa      	beq.n	800d3f8 <_printf_i+0x12c>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	079b      	lsls	r3, r3, #30
 800d4a6:	d413      	bmi.n	800d4d0 <_printf_i+0x204>
 800d4a8:	68e0      	ldr	r0, [r4, #12]
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	4298      	cmp	r0, r3
 800d4ae:	bfb8      	it	lt
 800d4b0:	4618      	movlt	r0, r3
 800d4b2:	e7a3      	b.n	800d3fc <_printf_i+0x130>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	464a      	mov	r2, r9
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	47c0      	blx	r8
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d09a      	beq.n	800d3f8 <_printf_i+0x12c>
 800d4c2:	3501      	adds	r5, #1
 800d4c4:	68e3      	ldr	r3, [r4, #12]
 800d4c6:	9a03      	ldr	r2, [sp, #12]
 800d4c8:	1a9b      	subs	r3, r3, r2
 800d4ca:	42ab      	cmp	r3, r5
 800d4cc:	dcf2      	bgt.n	800d4b4 <_printf_i+0x1e8>
 800d4ce:	e7eb      	b.n	800d4a8 <_printf_i+0x1dc>
 800d4d0:	2500      	movs	r5, #0
 800d4d2:	f104 0919 	add.w	r9, r4, #25
 800d4d6:	e7f5      	b.n	800d4c4 <_printf_i+0x1f8>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1ac      	bne.n	800d436 <_printf_i+0x16a>
 800d4dc:	7803      	ldrb	r3, [r0, #0]
 800d4de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4e6:	e76c      	b.n	800d3c2 <_printf_i+0xf6>
 800d4e8:	0800f9e5 	.word	0x0800f9e5
 800d4ec:	0800f9f6 	.word	0x0800f9f6

0800d4f0 <__sread>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f8:	f000 f894 	bl	800d624 <_read_r>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	bfab      	itete	ge
 800d500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d502:	89a3      	ldrhlt	r3, [r4, #12]
 800d504:	181b      	addge	r3, r3, r0
 800d506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d50a:	bfac      	ite	ge
 800d50c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d50e:	81a3      	strhlt	r3, [r4, #12]
 800d510:	bd10      	pop	{r4, pc}

0800d512 <__swrite>:
 800d512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d516:	461f      	mov	r7, r3
 800d518:	898b      	ldrh	r3, [r1, #12]
 800d51a:	05db      	lsls	r3, r3, #23
 800d51c:	4605      	mov	r5, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	4616      	mov	r6, r2
 800d522:	d505      	bpl.n	800d530 <__swrite+0x1e>
 800d524:	2302      	movs	r3, #2
 800d526:	2200      	movs	r2, #0
 800d528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52c:	f000 f868 	bl	800d600 <_lseek_r>
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d53a:	81a3      	strh	r3, [r4, #12]
 800d53c:	4632      	mov	r2, r6
 800d53e:	463b      	mov	r3, r7
 800d540:	4628      	mov	r0, r5
 800d542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	f000 b817 	b.w	800d578 <_write_r>

0800d54a <__sseek>:
 800d54a:	b510      	push	{r4, lr}
 800d54c:	460c      	mov	r4, r1
 800d54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d552:	f000 f855 	bl	800d600 <_lseek_r>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	bf15      	itete	ne
 800d55c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d55e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d566:	81a3      	strheq	r3, [r4, #12]
 800d568:	bf18      	it	ne
 800d56a:	81a3      	strhne	r3, [r4, #12]
 800d56c:	bd10      	pop	{r4, pc}

0800d56e <__sclose>:
 800d56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d572:	f000 b813 	b.w	800d59c <_close_r>
	...

0800d578 <_write_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4c07      	ldr	r4, [pc, #28]	; (800d598 <_write_r+0x20>)
 800d57c:	4605      	mov	r5, r0
 800d57e:	4608      	mov	r0, r1
 800d580:	4611      	mov	r1, r2
 800d582:	2200      	movs	r2, #0
 800d584:	6022      	str	r2, [r4, #0]
 800d586:	461a      	mov	r2, r3
 800d588:	f7fe ff3a 	bl	800c400 <_write>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_write_r+0x1e>
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	b103      	cbz	r3, 800d596 <_write_r+0x1e>
 800d594:	602b      	str	r3, [r5, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	20007708 	.word	0x20007708

0800d59c <_close_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4c06      	ldr	r4, [pc, #24]	; (800d5b8 <_close_r+0x1c>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4605      	mov	r5, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	6023      	str	r3, [r4, #0]
 800d5a8:	f7fe ff38 	bl	800c41c <_close>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_close_r+0x1a>
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_close_r+0x1a>
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	20007708 	.word	0x20007708

0800d5bc <_fstat_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4c07      	ldr	r4, [pc, #28]	; (800d5dc <_fstat_r+0x20>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	f7fe ff2a 	bl	800c422 <_fstat>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d102      	bne.n	800d5d8 <_fstat_r+0x1c>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	b103      	cbz	r3, 800d5d8 <_fstat_r+0x1c>
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	20007708 	.word	0x20007708

0800d5e0 <_isatty_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4c06      	ldr	r4, [pc, #24]	; (800d5fc <_isatty_r+0x1c>)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	6023      	str	r3, [r4, #0]
 800d5ec:	f7fe ff1e 	bl	800c42c <_isatty>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_isatty_r+0x1a>
 800d5f4:	6823      	ldr	r3, [r4, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_isatty_r+0x1a>
 800d5f8:	602b      	str	r3, [r5, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	20007708 	.word	0x20007708

0800d600 <_lseek_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4c07      	ldr	r4, [pc, #28]	; (800d620 <_lseek_r+0x20>)
 800d604:	4605      	mov	r5, r0
 800d606:	4608      	mov	r0, r1
 800d608:	4611      	mov	r1, r2
 800d60a:	2200      	movs	r2, #0
 800d60c:	6022      	str	r2, [r4, #0]
 800d60e:	461a      	mov	r2, r3
 800d610:	f7fe ff0e 	bl	800c430 <_lseek>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	d102      	bne.n	800d61e <_lseek_r+0x1e>
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	b103      	cbz	r3, 800d61e <_lseek_r+0x1e>
 800d61c:	602b      	str	r3, [r5, #0]
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	20007708 	.word	0x20007708

0800d624 <_read_r>:
 800d624:	b538      	push	{r3, r4, r5, lr}
 800d626:	4c07      	ldr	r4, [pc, #28]	; (800d644 <_read_r+0x20>)
 800d628:	4605      	mov	r5, r0
 800d62a:	4608      	mov	r0, r1
 800d62c:	4611      	mov	r1, r2
 800d62e:	2200      	movs	r2, #0
 800d630:	6022      	str	r2, [r4, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	f7fe fefe 	bl	800c434 <_read>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_read_r+0x1e>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_read_r+0x1e>
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	20007708 	.word	0x20007708

0800d648 <_init>:
 800d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64a:	bf00      	nop
 800d64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d64e:	bc08      	pop	{r3}
 800d650:	469e      	mov	lr, r3
 800d652:	4770      	bx	lr

0800d654 <_fini>:
 800d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d656:	bf00      	nop
 800d658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65a:	bc08      	pop	{r3}
 800d65c:	469e      	mov	lr, r3
 800d65e:	4770      	bx	lr
